[{"url":"https://api.github.com/repos/facebook/jest/issues/13467","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/13467/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/13467/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/13467/events","html_url":"https://github.com/facebook/jest/pull/13467","id":1413146256,"node_id":"PR_kwDOAOXXVc5BAzbT","number":13467,"title":"fix(jest-environment-node): make `performance` writable","user":{"login":"SimenB","id":1404810,"node_id":"MDQ6VXNlcjE0MDQ4MTA=","avatar_url":"https://avatars.githubusercontent.com/u/1404810?v=4","gravatar_id":"","url":"https://api.github.com/users/SimenB","html_url":"https://github.com/SimenB","followers_url":"https://api.github.com/users/SimenB/followers","following_url":"https://api.github.com/users/SimenB/following{/other_user}","gists_url":"https://api.github.com/users/SimenB/gists{/gist_id}","starred_url":"https://api.github.com/users/SimenB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SimenB/subscriptions","organizations_url":"https://api.github.com/users/SimenB/orgs","repos_url":"https://api.github.com/users/SimenB/repos","events_url":"https://api.github.com/users/SimenB/events{/privacy}","received_events_url":"https://api.github.com/users/SimenB/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-10-18T12:32:20Z","updated_at":"2022-11-18T00:09:51Z","closed_at":"2022-10-18T12:52:07Z","author_association":"COLLABORATOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/13467","html_url":"https://github.com/facebook/jest/pull/13467","diff_url":"https://github.com/facebook/jest/pull/13467.diff","patch_url":"https://github.com/facebook/jest/pull/13467.patch","merged_at":"2022-10-18T12:52:07Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md at the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\nRef https://github.com/nodejs/node/pull/44626#issuecomment-1282191258\r\n\r\n---\r\n\r\nNote that there is a single failing test still: `Runtime requireModule › resolves platform extensions based on the default platform`\r\n\r\n<img width=\"736\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1404810/196429850-6b407d7e-6191-4f85-b13c-b886d94cec64.png\">\r\n\r\nIt's some weird `haste` thing - we should probably throw `haste` in a bin at some point 😅 There are cleaner ways of achieving custom resolution than polluting config with weird `haste` options.\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n## Test plan \r\n\r\nRunning with nightly locally.\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/13467/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/13467/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"9a1c5e6f1d213acc013384506b89cb48f6fc5e14","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/e7383482724c3538a87e684fb6a641823f90f24b/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/e7383482724c3538a87e684fb6a641823f90f24b/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=e7383482724c3538a87e684fb6a641823f90f24b","patch":"@@ -6,6 +6,8 @@\n \n ### Fixes\n \n+- `[jest-environment-node]` make `globalThis.performance` writable for Node 19 and fake timers ([#13467](https://github.com/facebook/jest/pull/13467))\n+\n ### Chore & Maintenance\n \n ### Performance"},{"sha":"9e70d96dd2200cfaa3f03728b62ee45b3716bcc6","filename":"packages/jest-config/src/__tests__/normalize.test.ts","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/facebook/jest/blob/e7383482724c3538a87e684fb6a641823f90f24b/packages%2Fjest-config%2Fsrc%2F__tests__%2Fnormalize.test.ts","raw_url":"https://github.com/facebook/jest/raw/e7383482724c3538a87e684fb6a641823f90f24b/packages%2Fjest-config%2Fsrc%2F__tests__%2Fnormalize.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2F__tests__%2Fnormalize.test.ts?ref=e7383482724c3538a87e684fb6a641823f90f24b","patch":"@@ -1082,6 +1082,10 @@ describe('preset', () => {\n       jest.requireActual('./jest-preset.json'),\n     );\n \n+    const errorMessage = semver.satisfies(process.versions.node, '<19.0.0')\n+      ? /Unexpected token } in JSON at position (104|110)[\\s\\S]* at /\n+      : 'SyntaxError: Expected double-quoted property name in JSON at position 104';\n+\n     await expect(\n       normalize(\n         {\n@@ -1090,9 +1094,7 @@ describe('preset', () => {\n         },\n         {} as Config.Argv,\n       ),\n-    ).rejects.toThrow(\n-      /Unexpected token } in JSON at position (104|110)[\\s\\S]* at /,\n-    );\n+    ).rejects.toThrow(errorMessage);\n   });\n \n   test('throws when preset evaluation throws type error', async () => {\n@@ -1105,9 +1107,9 @@ describe('preset', () => {\n       {virtual: true},\n     );\n \n-    const errorMessage = semver.satisfies(process.versions.node, '>=16.9.1')\n-      ? \"TypeError: Cannot read properties of undefined (reading 'call')\"\n-      : /TypeError: Cannot read property 'call' of undefined[\\s\\S]* at /;\n+    const errorMessage = semver.satisfies(process.versions.node, '<16.9.1')\n+      ? /TypeError: Cannot read property 'call' of undefined[\\s\\S]* at /\n+      : \"TypeError: Cannot read properties of undefined (reading 'call')\";\n \n     await expect(\n       normalize("},{"sha":"a48507a99e2c6f983f89fd7186e8d1a425c2fa61","filename":"packages/jest-environment-node/src/index.ts","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/e7383482724c3538a87e684fb6a641823f90f24b/packages%2Fjest-environment-node%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/e7383482724c3538a87e684fb6a641823f90f24b/packages%2Fjest-environment-node%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-environment-node%2Fsrc%2Findex.ts?ref=e7383482724c3538a87e684fb6a641823f90f24b","patch":"@@ -90,7 +90,10 @@ export default class NodeEnvironment implements JestEnvironment<Timer> {\n               configurable: descriptor.configurable,\n               enumerable: descriptor.enumerable,\n               value: val,\n-              writable: descriptor.writable,\n+              writable:\n+                descriptor.writable === true ||\n+                // Node 19 makes performance non-readable. This is probably not the correct solution.\n+                nodeGlobalsKey === 'performance',\n             });\n             return val;\n           },"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/13244","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/13244/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/13244/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/13244/events","html_url":"https://github.com/facebook/jest/pull/13244","id":1368657405,"node_id":"PR_kwDOAOXXVc4-uG8m","number":13244,"title":"(jest-fake-timers): Add `now()` API to get the fake clock time","user":{"login":"robhogan","id":2590098,"node_id":"MDQ6VXNlcjI1OTAwOTg=","avatar_url":"https://avatars.githubusercontent.com/u/2590098?v=4","gravatar_id":"","url":"https://api.github.com/users/robhogan","html_url":"https://github.com/robhogan","followers_url":"https://api.github.com/users/robhogan/followers","following_url":"https://api.github.com/users/robhogan/following{/other_user}","gists_url":"https://api.github.com/users/robhogan/gists{/gist_id}","starred_url":"https://api.github.com/users/robhogan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/robhogan/subscriptions","organizations_url":"https://api.github.com/users/robhogan/orgs","repos_url":"https://api.github.com/users/robhogan/repos","events_url":"https://api.github.com/users/robhogan/events{/privacy}","received_events_url":"https://api.github.com/users/robhogan/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2022-09-10T15:41:24Z","updated_at":"2022-12-19T20:20:49Z","closed_at":"2022-09-10T17:28:43Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/13244","html_url":"https://github.com/facebook/jest/pull/13244","diff_url":"https://github.com/facebook/jest/pull/13244.diff","patch_url":"https://github.com/facebook/jest/pull/13244.patch","merged_at":"2022-09-10T17:28:43Z"},"body":"## Summary\r\n\r\nCurrently, users of legacy fake timers have no way to mock other time-related APIs in a way that keeps a consistent clock with the Jest mocked APIs.\r\n\r\nExposing the fake time allows easy mocking of APIs like `Date.now()`, `performance.now()`, etc.\r\n\r\n## Use case\r\nFor example, React Native's [`TimingAnimation`](https://github.com/facebook/react-native/blob/main/Libraries/Animated/animations/TimingAnimation.js#L144-L165) uses a combination of time elapsed according to `Date.now()` to interpolate state within each update, and `requestAnimationFrame()` to set a timer for the next update. \r\n\r\nThe legacy timers API in Jest 27+ mocks `requestAnimationFrame` (taking ~16ms of fake clock time per frame), but `Date.now()` is not mocked, which means that `advanceTimersToTime` runs some number of animation frames, but doesn't advance `Date.now()` time by the corresponding amount. \r\n\r\n`jest.runAllTimers()` \"works\", but only because it actually ends up running for the real time of the animation, processing as many frames as the CPU allows.\r\n\r\nWhat would be useful is a way to mock APIs like `Date.now()` or `performance.now()` in a manner consistent with the internal fake clock, but Jest doesn't expose the internal clock, so we're left guessing about what `Date.now()` should return after an unknown number of timers/frames have run.\r\n\r\n*(`requestAnimationFrame` does actually pass the current high-res clock time to its callback, but for \"reasons\"(?) `TimingAnimation` doesn't use it - in any case that doesn't really help a test author, and we'd still need to mock a start time.)*\r\n\r\n### Before\r\nAbout the best we can do at the moment is to advance frame by frame:\r\n```js\r\nconst FRAME_TIME = 16;\r\nconst DURATION = 500;\r\nconst mockNow = jest.spyOn(Date, 'now');\r\nmockNow.mockReturnValueOnce(0);\r\n\r\n// Trigger an animation in product code under test\r\ntriggerAnimation({ duration: DURATION });\r\n\r\nfor (let elapsed = 0; elapsed <= DURATION; elapsed += FRAME_TIME) {\r\n  mockNow.mockReturnValueOnce(elapsed);\r\n  advanceTimersByTime(FRAME_TIME);\r\n}\r\n\r\nexpect(state).toBe(good);\r\n```\r\n\r\n(Alternatives include a mock implementation of `Date.now()` that \"knows about\" the number of frames processed, eg by assuming it's called once per frame, which is also not great!)\r\n\r\n### After\r\n```js\r\nconst DURATION = 500;\r\njest.spyOn(Date, 'now').mockImplementation(() => jest.now());\r\n\r\n// Trigger an animation in product code under test\r\ntriggerAnimation({ duration: DURATION });\r\njest.advanceTimersByTime(DURATION);\r\n\r\nexpect(state).toBe(good);\r\n```\r\n\r\n## Test Plan\r\nI've added tests for modern and legacy timers, and also tested the \"After\" above with React Native animation.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/13244/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/13244/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"94166694052f85031d6aea7b42e628b73d5ab735","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=f20d6de1fed7abf2b7d21bb56be282266dac9f3c","patch":"@@ -2,6 +2,8 @@\n \n ### Features\n \n+- `[@jest/fake-timers]` Add `jest.now()` to return the current fake clock time ([#13244](https://github.com/facebook/jest/pull/13244))\n+\n ### Fixes\n \n ### Chore & Maintenance"},{"sha":"274d7c919d7f98462f513af489e03a735ede5283","filename":"docs/JestObjectAPI.md","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/docs%2FJestObjectAPI.md","raw_url":"https://github.com/facebook/jest/raw/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/docs%2FJestObjectAPI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FJestObjectAPI.md?ref=f20d6de1fed7abf2b7d21bb56be282266dac9f3c","patch":"@@ -799,6 +799,10 @@ This means, if any timers have been scheduled (but have not yet executed), they\n \n Returns the number of fake timers still left to run.\n \n+### `jest.now()`\n+\n+Returns the time in ms of the current fake clock. This is equivalent to `Date.now()` if `Date` has been mocked.\n+\n ### `jest.setSystemTime(now?: number | Date)`\n \n Set the current system time used by fake timers. Simulates a user changing the system clock while your program is running. It affects the current time but it does not in itself cause e.g. timers to fire; they will fire exactly as they would have done without the call to `jest.setSystemTime()`."},{"sha":"a683bba060cfa3edf72d25de26fefed49c2eaaf6","filename":"packages/jest-environment/src/index.ts","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-environment%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-environment%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-environment%2Fsrc%2Findex.ts?ref=f20d6de1fed7abf2b7d21bb56be282266dac9f3c","patch":"@@ -152,6 +152,10 @@ export interface Jest {\n    * Returns the number of fake timers still left to run.\n    */\n   getTimerCount(): number;\n+  /**\n+   * Returns the current time in ms of the fake timer clock.\n+   */\n+  now(): number;\n   /**\n    * Determines if the given function is a mocked function.\n    */"},{"sha":"736cc354a00df07b043a90992ce260a0520dae42","filename":"packages/jest-fake-timers/src/__tests__/legacyFakeTimers.test.ts","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/facebook/jest/blob/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-fake-timers%2Fsrc%2F__tests__%2FlegacyFakeTimers.test.ts","raw_url":"https://github.com/facebook/jest/raw/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-fake-timers%2Fsrc%2F__tests__%2FlegacyFakeTimers.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-fake-timers%2Fsrc%2F__tests__%2FlegacyFakeTimers.test.ts?ref=f20d6de1fed7abf2b7d21bb56be282266dac9f3c","patch":"@@ -1589,4 +1589,45 @@ describe('FakeTimers', () => {\n       expect(timers.getTimerCount()).toEqual(0);\n     });\n   });\n+\n+  describe('now', () => {\n+    it('returns the current clock', () => {\n+      const timers = new FakeTimers({\n+        config,\n+        global: globalThis,\n+        moduleMocker,\n+        timerConfig,\n+      });\n+\n+      timers.useFakeTimers();\n+      globalThis.setTimeout(() => {}, 2);\n+      globalThis.setTimeout(() => {}, 100);\n+\n+      expect(timers.now()).toEqual(0);\n+\n+      // This should run the 2ms timer, and then advance _now by 3ms\n+      timers.advanceTimersByTime(5);\n+      expect(timers.now()).toEqual(5);\n+\n+      // Advance _now even though there are no timers to run\n+      timers.advanceTimersByTime(5);\n+      expect(timers.now()).toEqual(10);\n+\n+      // Run up to the 100ms timer\n+      timers.runAllTimers();\n+      expect(timers.now()).toEqual(100);\n+\n+      // Verify that runOnlyPendingTimers advances now only up to the first\n+      // recursive timer\n+      globalThis.setTimeout(function infinitelyRecursingCallback() {\n+        globalThis.setTimeout(infinitelyRecursingCallback, 20);\n+      }, 10);\n+      timers.runOnlyPendingTimers();\n+      expect(timers.now()).toEqual(110);\n+\n+      // Reset should set now back to 0\n+      timers.reset();\n+      expect(timers.now()).toEqual(0);\n+    });\n+  });\n });"},{"sha":"b7e9120c41c6baa813c6d146bf795b9cc5383d94","filename":"packages/jest-fake-timers/src/__tests__/modernFakeTimers.test.ts","status":"modified","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/facebook/jest/blob/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-fake-timers%2Fsrc%2F__tests__%2FmodernFakeTimers.test.ts","raw_url":"https://github.com/facebook/jest/raw/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-fake-timers%2Fsrc%2F__tests__%2FmodernFakeTimers.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-fake-timers%2Fsrc%2F__tests__%2FmodernFakeTimers.test.ts?ref=f20d6de1fed7abf2b7d21bb56be282266dac9f3c","patch":"@@ -948,4 +948,44 @@ describe('FakeTimers', () => {\n       expect(timers.getTimerCount()).toEqual(0);\n     });\n   });\n+\n+  describe('now', () => {\n+    it('returns the current clock', () => {\n+      const timers = new FakeTimers({\n+        config: makeProjectConfig(),\n+        global: globalThis,\n+      });\n+\n+      timers.useFakeTimers();\n+      timers.setSystemTime(0);\n+      globalThis.setTimeout(() => {}, 2);\n+      globalThis.setTimeout(() => {}, 100);\n+\n+      expect(timers.now()).toEqual(0);\n+\n+      // This should run the 2ms timer, and then advance _now by 3ms\n+      timers.advanceTimersByTime(5);\n+      expect(timers.now()).toEqual(5);\n+\n+      // Advance _now even though there are no timers to run\n+      timers.advanceTimersByTime(5);\n+      expect(timers.now()).toEqual(10);\n+\n+      // Run up to the 100ms timer\n+      timers.runAllTimers();\n+      expect(timers.now()).toEqual(100);\n+\n+      // Verify that runOnlyPendingTimers advances now only up to the first\n+      // recursive timer\n+      globalThis.setTimeout(function infinitelyRecursingCallback() {\n+        globalThis.setTimeout(infinitelyRecursingCallback, 20);\n+      }, 10);\n+      timers.runOnlyPendingTimers();\n+      expect(timers.now()).toEqual(110);\n+\n+      // For modern timers, reset() explicitly preserves the clock time\n+      timers.reset();\n+      expect(timers.now()).toEqual(110);\n+    });\n+  });\n });"},{"sha":"a5b7766d02792e6dc7620d4a357c084b226902e2","filename":"packages/jest-fake-timers/src/legacyFakeTimers.ts","status":"modified","additions":28,"deletions":15,"changes":43,"blob_url":"https://github.com/facebook/jest/blob/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-fake-timers%2Fsrc%2FlegacyFakeTimers.ts","raw_url":"https://github.com/facebook/jest/raw/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-fake-timers%2Fsrc%2FlegacyFakeTimers.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-fake-timers%2Fsrc%2FlegacyFakeTimers.ts?ref=f20d6de1fed7abf2b7d21bb56be282266dac9f3c","patch":"@@ -134,6 +134,10 @@ export default class FakeTimers<TimerRef = unknown> {\n     this._timers = new Map();\n   }\n \n+  now(): number {\n+    return this._now;\n+  }\n+\n   runAllTicks(): void {\n     this._checkFakeTimers();\n     // Only run a generous number of ticks and then bail.\n@@ -200,13 +204,15 @@ export default class FakeTimers<TimerRef = unknown> {\n     // This is just to help avoid recursive loops\n     let i;\n     for (i = 0; i < this._maxLoops; i++) {\n-      const nextTimerHandle = this._getNextTimerHandle();\n+      const nextTimerHandleAndExpiry = this._getNextTimerHandleAndExpiry();\n \n       // If there are no more timer handles, stop!\n-      if (nextTimerHandle === null) {\n+      if (nextTimerHandleAndExpiry === null) {\n         break;\n       }\n \n+      const [nextTimerHandle, expiry] = nextTimerHandleAndExpiry;\n+      this._now = expiry;\n       this._runTimerHandle(nextTimerHandle);\n \n       // Some of the immediate calls could be enqueued\n@@ -239,7 +245,10 @@ export default class FakeTimers<TimerRef = unknown> {\n \n     timerEntries\n       .sort(([, left], [, right]) => left.expiry - right.expiry)\n-      .forEach(([timerHandle]) => this._runTimerHandle(timerHandle));\n+      .forEach(([timerHandle, timer]) => {\n+        this._now = timer.expiry;\n+        this._runTimerHandle(timerHandle);\n+      });\n   }\n \n   advanceTimersToNextTimer(steps = 1): void {\n@@ -265,21 +274,16 @@ export default class FakeTimers<TimerRef = unknown> {\n     // This is just to help avoid recursive loops\n     let i;\n     for (i = 0; i < this._maxLoops; i++) {\n-      const timerHandle = this._getNextTimerHandle();\n+      const timerHandleAndExpiry = this._getNextTimerHandleAndExpiry();\n \n       // If there are no more timer handles, stop!\n-      if (timerHandle === null) {\n-        break;\n-      }\n-      const timerValue = this._timers.get(timerHandle);\n-      if (timerValue === undefined) {\n+      if (timerHandleAndExpiry === null) {\n         break;\n       }\n-      const nextTimerExpiry = timerValue.expiry;\n+      const [timerHandle, nextTimerExpiry] = timerHandleAndExpiry;\n+\n       if (this._now + msToRun < nextTimerExpiry) {\n-        // There are no timers between now and the target we're running to, so\n-        // adjust our time cursor and quit\n-        this._now += msToRun;\n+        // There are no timers between now and the target we're running to\n         break;\n       } else {\n         msToRun -= nextTimerExpiry - this._now;\n@@ -288,6 +292,9 @@ export default class FakeTimers<TimerRef = unknown> {\n       }\n     }\n \n+    // Advance the clock by whatever time we still have left to run\n+    this._now += msToRun;\n+\n     if (i === this._maxLoops) {\n       throw new Error(\n         `Ran ${this._maxLoops} timers, and there are still more! ` +\n@@ -557,7 +564,7 @@ export default class FakeTimers<TimerRef = unknown> {\n     return this._timerConfig.idToRef(uuid);\n   }\n \n-  private _getNextTimerHandle() {\n+  private _getNextTimerHandleAndExpiry(): [string, number] | null {\n     let nextTimerHandle = null;\n     let soonestTime = MS_IN_A_YEAR;\n \n@@ -568,13 +575,19 @@ export default class FakeTimers<TimerRef = unknown> {\n       }\n     });\n \n-    return nextTimerHandle;\n+    if (nextTimerHandle === null) {\n+      return null;\n+    }\n+\n+    return [nextTimerHandle, soonestTime];\n   }\n \n   private _runTimerHandle(timerHandle: TimerID) {\n     const timer = this._timers.get(timerHandle);\n \n     if (!timer) {\n+      // Timer has been cleared - we'll hit this when a timer is cleared within\n+      // another timer in runOnlyPendingTimers\n       return;\n     }\n "},{"sha":"14b0e1809669ef437c9fd50eef0d29d903d3bfdf","filename":"packages/jest-fake-timers/src/modernFakeTimers.ts","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-fake-timers%2Fsrc%2FmodernFakeTimers.ts","raw_url":"https://github.com/facebook/jest/raw/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-fake-timers%2Fsrc%2FmodernFakeTimers.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-fake-timers%2Fsrc%2FmodernFakeTimers.ts?ref=f20d6de1fed7abf2b7d21bb56be282266dac9f3c","patch":"@@ -122,6 +122,10 @@ export default class FakeTimers {\n     return Date.now();\n   }\n \n+  now(): number {\n+    return this._clock.now;\n+  }\n+\n   getTimerCount(): number {\n     if (this._checkFakeTimers()) {\n       return this._clock.countTimers();"},{"sha":"cf0521e324db4d3e575450d03bb9c85da1a65f6b","filename":"packages/jest-runtime/src/index.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-runtime%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-runtime%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Findex.ts?ref=f20d6de1fed7abf2b7d21bb56be282266dac9f3c","patch":"@@ -2128,6 +2128,7 @@ export default class Runtime {\n       isolateModules,\n       mock,\n       mocked,\n+      now: () => _getFakeTimers().now(),\n       requireActual: this.requireActual.bind(this, from),\n       requireMock: this.requireMock.bind(this, from),\n       resetAllMocks,"},{"sha":"53627054f652c6ad8faf7db2fe07e0d5a556ed09","filename":"packages/jest-types/__typetests__/jest.test.ts","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-types%2F__typetests__%2Fjest.test.ts","raw_url":"https://github.com/facebook/jest/raw/f20d6de1fed7abf2b7d21bb56be282266dac9f3c/packages%2Fjest-types%2F__typetests__%2Fjest.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-types%2F__typetests__%2Fjest.test.ts?ref=f20d6de1fed7abf2b7d21bb56be282266dac9f3c","patch":"@@ -413,6 +413,9 @@ expectError(jest.clearAllTimers(false));\n expectType<number>(jest.getTimerCount());\n expectError(jest.getTimerCount(true));\n \n+expectType<number>(jest.now());\n+expectError(jest.now('1995-12-17T03:24:00'));\n+\n expectType<number>(jest.getRealSystemTime());\n expectError(jest.getRealSystemTime(true));\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/13125","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/13125/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/13125/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/13125/events","html_url":"https://github.com/facebook/jest/pull/13125","id":1337163662,"node_id":"PR_kwDOAOXXVc49FuKe","number":13125,"title":"refactor(jest-mock)!: change the default `jest.mocked` helper’s behaviour to deep mocked","user":{"login":"mrazauskas","id":72159681,"node_id":"MDQ6VXNlcjcyMTU5Njgx","avatar_url":"https://avatars.githubusercontent.com/u/72159681?v=4","gravatar_id":"","url":"https://api.github.com/users/mrazauskas","html_url":"https://github.com/mrazauskas","followers_url":"https://api.github.com/users/mrazauskas/followers","following_url":"https://api.github.com/users/mrazauskas/following{/other_user}","gists_url":"https://api.github.com/users/mrazauskas/gists{/gist_id}","starred_url":"https://api.github.com/users/mrazauskas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrazauskas/subscriptions","organizations_url":"https://api.github.com/users/mrazauskas/orgs","repos_url":"https://api.github.com/users/mrazauskas/repos","events_url":"https://api.github.com/users/mrazauskas/events{/privacy}","received_events_url":"https://api.github.com/users/mrazauskas/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2022-08-12T12:46:03Z","updated_at":"2022-09-25T00:12:17Z","closed_at":"2022-08-13T10:50:17Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/13125","html_url":"https://github.com/facebook/jest/pull/13125","diff_url":"https://github.com/facebook/jest/pull/13125.diff","patch_url":"https://github.com/facebook/jest/pull/13125.patch","merged_at":"2022-08-13T10:50:17Z"},"body":"Split from #12727\r\n\r\n## Summary\r\n\r\nIt seems to me that by default `jest.mocked()` should wrap the deep methods of passed object. Currently it requires and argument: `jest.mocked(someObject, true)`. Also note that without reading the docs it isn’t clear what `true` does.\r\n\r\n---\r\n\r\nConsider this example:\r\n\r\n```ts\r\nimport { expect, jest, test } from \"@jest/globals\";\r\nimport { someObject } from \"./someObject\";\r\n\r\njest.mock(\"./someObject\");\r\n\r\ntest(\"is mock function?\", () => {\r\n  expect(jest.isMockFunction(mockObject.one.more.time)).toBe(true);\r\n});\r\n```\r\n\r\nThe test will pass. Seems like `jest.mock()` is mocking deeply nested methods. So I think `jest.mocked()` should do the same by default (and `jest.Mocked<T>` as well).\r\n\r\nPossibly shallow mocked definitions were implemented to improve performance of TS compiler. Or to work around some limitation, i.e. handling of recursive types. If I got it right, `ts-jest` implemented `jest.mock()` in the early days of TypeScript v3. Performance and handling of recursive types improved a lot in TS v4.\r\n\r\nPerhaps it’s time to swap the defaults? I mean, to make the behaviour of `jest.mocked()` deep by default and to allow opting out with an option: `jest.mocked(someObject, {shallow: true})`.\r\n\r\n## Test plan\r\n\r\nType tests added.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/13125/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/13125/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"3a445ce334a1eb684d9d1693dfafee47577ed92d","filename":".eslintrc.cjs","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/63a0a5aa199909864a7b978fd728c56f0d0b3988/.eslintrc.cjs","raw_url":"https://github.com/facebook/jest/raw/63a0a5aa199909864a7b978fd728c56f0d0b3988/.eslintrc.cjs","contents_url":"https://api.github.com/repos/facebook/jest/contents/.eslintrc.cjs?ref=63a0a5aa199909864a7b978fd728c56f0d0b3988","patch":"@@ -180,7 +180,7 @@ module.exports = {\n       },\n     },\n     {\n-      files: ['website/**/*'],\n+      files: ['docs/**/*', 'website/**/*'],\n       rules: {\n         'import/order': 'off',\n         'import/sort-keys': 'off',"},{"sha":"b3478f5ba12357da41224bcdc440210ab008dbdb","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/63a0a5aa199909864a7b978fd728c56f0d0b3988/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/63a0a5aa199909864a7b978fd728c56f0d0b3988/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=63a0a5aa199909864a7b978fd728c56f0d0b3988","patch":"@@ -6,6 +6,7 @@\n - `[jest-environment-jsdom]` [**BREAKING**] Upgrade to `jsdom@20` ([#13037](https://github.com/facebook/jest/pull/13037), [#13058](https://github.com/facebook/jest/pull/13058))\n - `[@jest/globals]` Add `jest.Mocked`, `jest.MockedClass`, `jest.MockedFunction` and `jest.MockedObject` utility types ([#12727](https://github.com/facebook/jest/pull/12727))\n - `[jest-mock]` [**BREAKING**] Refactor `Mocked*` utility types. `MaybeMockedDeep` and `MaybeMocked` became `Mocked` and `MockedShallow` respectively; only deep mocked variants of `MockedClass`, `MockedFunction` and `MockedObject` are exported ([#13123](https://github.com/facebook/jest/pull/13123), [#13124](https://github.com/facebook/jest/pull/13124))\n+- `[jest-mock]` [**BREAKING**] Change the default `jest.mocked` helper’s behavior to deep mocked ([#13125](https://github.com/facebook/jest/pull/13125))\n - `[jest-worker]` Adds `workerIdleMemoryLimit` option which is used as a check for worker memory leaks >= Node 16.11.0 and recycles child workers as required. ([#13056](https://github.com/facebook/jest/pull/13056), [#13105](https://github.com/facebook/jest/pull/13105), [#13106](https://github.com/facebook/jest/pull/13106), [#13107](https://github.com/facebook/jest/pull/13107))\n - `[pretty-format]` [**BREAKING**] Remove `ConvertAnsi` plugin in favour of `jest-serializer-ansi-escapes` ([#13040](https://github.com/facebook/jest/pull/13040))\n "},{"sha":"add6b8c49a6c8582fa0af47a34d1d7ee957c8418","filename":"docs/JestObjectAPI.md","status":"modified","additions":15,"deletions":45,"changes":60,"blob_url":"https://github.com/facebook/jest/blob/63a0a5aa199909864a7b978fd728c56f0d0b3988/docs%2FJestObjectAPI.md","raw_url":"https://github.com/facebook/jest/raw/63a0a5aa199909864a7b978fd728c56f0d0b3988/docs%2FJestObjectAPI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FJestObjectAPI.md?ref=63a0a5aa199909864a7b978fd728c56f0d0b3988","patch":"@@ -282,6 +282,20 @@ Modules that are mocked with `jest.mock` are mocked only for the file that calls\n \n Returns the `jest` object for chaining.\n \n+:::tip\n+\n+Writing tests in TypeScript? Use [`jest.Mocked`](MockFunctionAPI.md/#jestmockedsource) utility type or [`jest.mocked()`](MockFunctionAPI.md/#jestmockedsource-options) helper method to have your mocked modules typed.\n+\n+:::\n+\n+### `jest.Mocked<Source>`\n+\n+See [TypeScript Usage](MockFunctionAPI.md/#jestmockedsource) chapter of Mock Functions page for documentation.\n+\n+### `jest.mocked(source, options?)`\n+\n+See [TypeScript Usage](MockFunctionAPI.md/#jestmockedsource-options) chapter of Mock Functions page for documentation.\n+\n ### `jest.unmock(moduleName)`\n \n Indicates that the module system should never return a mocked version of the specified module from `require()` (e.g. that it should always return the real module).\n@@ -467,7 +481,7 @@ const returnsTrue = jest.fn(() => true);\n console.log(returnsTrue()); // true;\n ```\n \n-:::note\n+:::tip\n \n See [Mock Functions](MockFunctionAPI.md#jestfnimplementation) page for details on TypeScript usage.\n \n@@ -598,50 +612,6 @@ Returns the `jest` object for chaining.\n \n Restores all mocks back to their original value. Equivalent to calling [`.mockRestore()`](MockFunctionAPI.md#mockfnmockrestore) on every mocked function. Beware that `jest.restoreAllMocks()` only works when the mock was created with `jest.spyOn`; other mocks will require you to manually restore them.\n \n-### `jest.mocked<T>(item: T, deep = false)`\n-\n-The `mocked` test helper provides typings on your mocked modules and even their deep methods, based on the typing of its source. It makes use of the latest TypeScript feature, so you even have argument types completion in the IDE (as opposed to `jest.MockInstance`).\n-\n-_Note: while it needs to be a function so that input type is changed, the helper itself does nothing else than returning the given input value._\n-\n-Example:\n-\n-```ts\n-// foo.ts\n-export const foo = {\n-  a: {\n-    b: {\n-      c: {\n-        hello: (name: string) => `Hello, ${name}`,\n-      },\n-    },\n-  },\n-  name: () => 'foo',\n-};\n-```\n-\n-```ts\n-// foo.spec.ts\n-import {foo} from './foo';\n-jest.mock('./foo');\n-\n-// here the whole foo var is mocked deeply\n-const mockedFoo = jest.mocked(foo, true);\n-\n-test('deep', () => {\n-  // there will be no TS error here, and you'll have completion in modern IDEs\n-  mockedFoo.a.b.c.hello('me');\n-  // same here\n-  expect(mockedFoo.a.b.c.hello.mock.calls).toHaveLength(1);\n-});\n-\n-test('direct', () => {\n-  foo.name();\n-  // here only foo.name is mocked (or its methods if it's an object)\n-  expect(jest.mocked(foo.name).mock.calls).toHaveLength(1);\n-});\n-```\n-\n ## Fake Timers\n \n ### `jest.useFakeTimers(fakeTimersConfig?)`"},{"sha":"526110167a84b8c3043a03d1cbb6987412bf476a","filename":"docs/MockFunctionAPI.md","status":"modified","additions":52,"deletions":1,"changes":53,"blob_url":"https://github.com/facebook/jest/blob/63a0a5aa199909864a7b978fd728c56f0d0b3988/docs%2FMockFunctionAPI.md","raw_url":"https://github.com/facebook/jest/raw/63a0a5aa199909864a7b978fd728c56f0d0b3988/docs%2FMockFunctionAPI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FMockFunctionAPI.md?ref=63a0a5aa199909864a7b978fd728c56f0d0b3988","patch":"@@ -526,13 +526,17 @@ test('calculate calls add', () => {\n The `jest.Mocked<Source>` utility type returns the `Source` type wrapped with type definitions of Jest mock function.\n \n ```ts\n-import fetch from 'node-fetch';\n import {expect, jest, test} from '@jest/globals';\n+import type {fetch} from 'node-fetch';\n \n jest.mock('node-fetch');\n \n let mockedFetch: jest.Mocked<typeof fetch>;\n \n+afterEach(() => {\n+  mockedFetch.mockClear();\n+});\n+\n test('makes correct call', () => {\n   mockedFetch = getMockedFetch();\n   // ...\n@@ -545,3 +549,50 @@ test('returns correct data', () => {\n ```\n \n Types of classes, functions or objects can be passed as type argument to `jest.Mocked<Source>`. If you prefer to constrain the input type, use: `jest.MockedClass<Source>`, `jest.MockedFunction<Source>` or `jest.MockedObject<Source>`.\n+\n+### `jest.mocked(source, options?)`\n+\n+The `mocked()` helper method wraps types of the `source` object and its deep nested members with type definitions of Jest mock function. You can pass `{shallow: true}` as the `options` argument to disable the deeply mocked behavior.\n+\n+Returns the `source` object.\n+\n+```ts title=\"song.ts\"\n+export const song = {\n+  one: {\n+    more: {\n+      time: (t: number) => {\n+        return t;\n+      },\n+    },\n+  },\n+};\n+```\n+\n+```ts title=\"song.test.ts\"\n+import {expect, jest, test} from '@jest/globals';\n+import {song} from './song';\n+\n+jest.mock('./song');\n+jest.spyOn(console, 'log');\n+\n+const mockedSong = jest.mocked(song);\n+// or through `jest.Mocked<Source>`\n+// const mockedSong = song as jest.Mocked<typeof song>;\n+\n+test('deep method is typed correctly', () => {\n+  mockedSong.one.more.time.mockReturnValue(12);\n+\n+  expect(mockedSong.one.more.time(10)).toBe(12);\n+  expect(mockedSong.one.more.time.mock.calls).toHaveLength(1);\n+});\n+\n+test('direct usage', () => {\n+  jest.mocked(console.log).mockImplementation(() => {\n+    return;\n+  });\n+\n+  console.log('one more time');\n+\n+  expect(jest.mocked(console.log).mock.calls).toHaveLength(1);\n+});\n+```"},{"sha":"89dacba4beca8530cecd6831d2f783595fa12cd3","filename":"docs/UpgradingToJest29.md","status":"modified","additions":32,"deletions":4,"changes":36,"blob_url":"https://github.com/facebook/jest/blob/63a0a5aa199909864a7b978fd728c56f0d0b3988/docs%2FUpgradingToJest29.md","raw_url":"https://github.com/facebook/jest/raw/63a0a5aa199909864a7b978fd728c56f0d0b3988/docs%2FUpgradingToJest29.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FUpgradingToJest29.md?ref=63a0a5aa199909864a7b978fd728c56f0d0b3988","patch":"@@ -40,10 +40,38 @@ If you want to keep the old behavior, you can set the `snapshotFormat` property\n \n Notably, `jsdom@20` includes support for `crypto.getRandomValues()`, which means packages like `jsdom` and `nanoid`, which doesn't work properly in Jest@28, can work without extra polyfills.\n \n-## `jest-mock`\n+## `pretty-format`\n \n-Exports of `Mocked*` utility types changed. `MaybeMockedDeep` and `MaybeMocked` now are exported as `Mocked` and `MockedShallow` respectively; only deep mocked variants of `MockedClass`, `MockedFunction` and `MockedObject` are exposed.\n+`ConvertAnsi` plugin is removed from `pretty-format` package in favour of [`jest-serializer-ansi-escapes`](https://github.com/mrazauskas/jest-serializer-ansi-escapes).\n \n-## `pretty-format`\n+### `jest-mock`\n+\n+Exports of `Mocked*` utility types from `jest-mock` package have changed. `MaybeMockedDeep` and `MaybeMocked` now are exported as `Mocked` and `MockedShallow` respectively; only deep mocked variants of `MockedClass`, `MockedFunction` and `MockedObject` are exposed.\n+\n+## TypeScript\n+\n+:::info\n+\n+The TypeScript examples from this page will only work as documented if you import `jest` from `'@jest/globals'`:\n \n-`ConvertAnsi` plugin is removed in favour of [`jest-serializer-ansi-escapes`](https://github.com/mrazauskas/jest-serializer-ansi-escapes).\n+```ts\n+import {jest} from '@jest/globals';\n+```\n+\n+:::\n+\n+### `jest.mocked()`\n+\n+The [`jest.mocked()`](MockFunctionAPI.md/#jestmockedsource-options) helper method now wraps types of deep members of passed object by default. If you have used the method with `true` as the second argument, remove it to avoid type errors:\n+\n+```diff\n+- const mockedObject = jest.mocked(someObject, true);\n++ const mockedObject = jest.mocked(someObject);\n+```\n+\n+To have the old shallow mocked behavior, pass `{shallow: true}` as the second argument:\n+\n+```diff\n+- const mockedObject = jest.mocked(someObject);\n++ const mockedObject = jest.mocked(someObject, {shallow: true});\n+```"},{"sha":"4d4df64eaad7782054daf3ab71e36ba3d9839bfa","filename":"packages/jest-environment/src/index.ts","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/facebook/jest/blob/63a0a5aa199909864a7b978fd728c56f0d0b3988/packages%2Fjest-environment%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/63a0a5aa199909864a7b978fd728c56f0d0b3988/packages%2Fjest-environment%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-environment%2Fsrc%2Findex.ts?ref=63a0a5aa199909864a7b978fd728c56f0d0b3988","patch":"@@ -201,6 +201,12 @@ export interface Jest {\n      ```\n     */\n   requireActual: (moduleName: string) => unknown;\n+  /**\n+   * Wraps types of the `source` object and its deep members with type definitions\n+   * of Jest mock function. Pass `{shallow: true}` option to disable the deeply\n+   * mocked behavior.\n+   */\n+  mocked: ModuleMocker['mocked'];\n   /**\n    * Returns a mock module instead of the actual module, bypassing all checks\n    * on whether the module should be required normally or not.\n@@ -224,10 +230,6 @@ export interface Jest {\n    * with `jest.spyOn()`; other mocks will require you to manually restore them.\n    */\n   restoreAllMocks(): Jest;\n-  /**\n-   * Wraps an object or a module with mock type definitions.\n-   */\n-  mocked: ModuleMocker['mocked'];\n   /**\n    * Runs failed tests n-times until they pass or until the max number of\n    * retries is exhausted."},{"sha":"305699b0a50cb526340060acb5a817aa09673212","filename":"packages/jest-mock/src/index.ts","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/facebook/jest/blob/63a0a5aa199909864a7b978fd728c56f0d0b3988/packages%2Fjest-mock%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/63a0a5aa199909864a7b978fd728c56f0d0b3988/packages%2Fjest-mock%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-mock%2Fsrc%2Findex.ts?ref=63a0a5aa199909864a7b978fd728c56f0d0b3988","patch":"@@ -1216,13 +1216,16 @@ export class ModuleMocker {\n     return value == null ? `${value}` : typeof value;\n   }\n \n-  mocked<T extends object>(item: T, deep?: false): MockedShallow<T>;\n-  mocked<T extends object>(item: T, deep: true): Mocked<T>;\n+  mocked<T extends object>(source: T, options?: {shallow: false}): Mocked<T>;\n   mocked<T extends object>(\n-    item: T,\n-    _deep = false,\n+    source: T,\n+    options: {shallow: true},\n+  ): MockedShallow<T>;\n+  mocked<T extends object>(\n+    source: T,\n+    _options?: {shallow: boolean},\n   ): Mocked<T> | MockedShallow<T> {\n-    return item as Mocked<T> | MockedShallow<T>;\n+    return source as Mocked<T> | MockedShallow<T>;\n   }\n }\n "},{"sha":"997aad9cac69bc530129149e772db20bddf0b4aa","filename":"packages/jest-types/__typetests__/jest.test.ts","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/facebook/jest/blob/63a0a5aa199909864a7b978fd728c56f0d0b3988/packages%2Fjest-types%2F__typetests__%2Fjest.test.ts","raw_url":"https://github.com/facebook/jest/raw/63a0a5aa199909864a7b978fd728c56f0d0b3988/packages%2Fjest-types%2F__typetests__%2Fjest.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-types%2F__typetests__%2Fjest.test.ts?ref=63a0a5aa199909864a7b978fd728c56f0d0b3988","patch":"@@ -13,6 +13,7 @@ import type {\n   MockedClass,\n   MockedFunction,\n   MockedObject,\n+  MockedShallow,\n   ModuleMocker,\n   SpyInstance,\n } from 'jest-mock';\n@@ -276,11 +277,19 @@ expectType<MockedObject<typeof someObject>>(\n   someObject as jest.MockedObject<typeof someObject>,\n );\n \n-// deep mocked()\n+// mocked()\n \n-const mockObjectA = jest.mocked(someObject, true);\n+expectType<Mocked<typeof someObject>>(jest.mocked(someObject));\n+expectType<Mocked<typeof someObject>>(\n+  jest.mocked(someObject, {shallow: false}),\n+);\n+expectType<MockedShallow<typeof someObject>>(\n+  jest.mocked(someObject, {shallow: true}),\n+);\n \n-expectError(jest.mocked('abc', true));\n+expectError(jest.mocked('abc'));\n+\n+const mockObjectA = jest.mocked(someObject);\n \n expectType<[]>(mockObjectA.methodA.mock.calls[0]);\n expectType<[b: string]>(mockObjectA.methodB.mock.calls[0]);\n@@ -333,11 +342,9 @@ expectError(\n \n expectAssignable<typeof someObject>(mockObjectA);\n \n-// mocked()\n-\n-const mockObjectB = jest.mocked(someObject);\n+// shallow mocked()\n \n-expectError(jest.mocked('abc'));\n+const mockObjectB = jest.mocked(someObject, {shallow: true});\n \n expectType<[]>(mockObjectB.methodA.mock.calls[0]);\n expectType<[b: string]>(mockObjectB.methodB.mock.calls[0]);"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/12834","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/12834/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/12834/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/12834/events","html_url":"https://github.com/facebook/jest/pull/12834","id":1232006115,"node_id":"PR_kwDOAOXXVc43nsQl","number":12834,"title":"chore(ci): refactor `ts-node` compatibility tests","user":{"login":"mrazauskas","id":72159681,"node_id":"MDQ6VXNlcjcyMTU5Njgx","avatar_url":"https://avatars.githubusercontent.com/u/72159681?v=4","gravatar_id":"","url":"https://api.github.com/users/mrazauskas","html_url":"https://github.com/mrazauskas","followers_url":"https://api.github.com/users/mrazauskas/followers","following_url":"https://api.github.com/users/mrazauskas/following{/other_user}","gists_url":"https://api.github.com/users/mrazauskas/gists{/gist_id}","starred_url":"https://api.github.com/users/mrazauskas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrazauskas/subscriptions","organizations_url":"https://api.github.com/users/mrazauskas/orgs","repos_url":"https://api.github.com/users/mrazauskas/repos","events_url":"https://api.github.com/users/mrazauskas/events{/privacy}","received_events_url":"https://api.github.com/users/mrazauskas/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-05-11T04:51:44Z","updated_at":"2022-06-11T00:07:48Z","closed_at":"2022-05-11T07:15:30Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/12834","html_url":"https://github.com/facebook/jest/pull/12834","diff_url":"https://github.com/facebook/jest/pull/12834.diff","patch_url":"https://github.com/facebook/jest/pull/12834.patch","merged_at":"2022-05-11T07:15:30Z"},"body":"Spilt from #12801\r\n\r\n44 changed files 🙈. Better to split, that’s too much for such a small change\r\n\r\n## Summary\r\n\r\nIn the mentioned PR I was trying to proof that TS configs work with `ts-node`. These compatibility tests needed types to be build, but that takes so long (because of `\"skipLibCheck\": false`). That’s too slow for CI.\r\n\r\nIn the other hand, types are build for type tests. Hm.. What if `ts-node` compatibility would be checked in the same job with type tests? Many tests can be run and there is no performance penalty.\r\n\r\n## Test plan\r\n\r\nMore compatibility tests added.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/12834/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/12834/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"c05ad30dcda57ecbaab165bfa23d8e2cb210e774","filename":".github/workflows/nodejs.yml","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/facebook/jest/blob/f726313fe6441999ac286bc8f6f7d30492db5957/.github%2Fworkflows%2Fnodejs.yml","raw_url":"https://github.com/facebook/jest/raw/f726313fe6441999ac286bc8f6f7d30492db5957/.github%2Fworkflows%2Fnodejs.yml","contents_url":"https://api.github.com/repos/facebook/jest/contents/.github%2Fworkflows%2Fnodejs.yml?ref=f726313fe6441999ac286bc8f6f7d30492db5957","patch":"@@ -38,8 +38,8 @@ jobs:\n           YARN_ENABLE_SCRIPTS: false\n         run: yarn --immutable\n \n-  typecheck:\n-    name: Running TypeScript compiler\n+  ts-compatibility:\n+    name: TypeScript Compatibility\n     runs-on: ubuntu-latest\n     needs: prepare-yarn-cache\n \n@@ -53,13 +53,15 @@ jobs:\n         run: yarn --immutable\n       - name: build\n         run: yarn build\n-      - name: test typings\n-        run: yarn test-types\n+      - name: ts integration\n+        run: yarn test-ts --selectProjects ts-integration\n+      - name: type tests\n+        run: yarn test-ts --selectProjects type-tests\n       - name: verify TypeScript@4.3 compatibility\n         run: yarn verify-old-ts\n \n   lint:\n-    name: Running Lint\n+    name: Lint\n     runs-on: ubuntu-latest\n     needs: prepare-yarn-cache\n "},{"sha":"690d7e509f194490e60a83171cff83d61e0c0d4a","filename":"e2e/__tests__/esmConfigFile.test.ts","status":"modified","additions":8,"deletions":29,"changes":37,"blob_url":"https://github.com/facebook/jest/blob/f726313fe6441999ac286bc8f6f7d30492db5957/e2e%2F__tests__%2FesmConfigFile.test.ts","raw_url":"https://github.com/facebook/jest/raw/f726313fe6441999ac286bc8f6f7d30492db5957/e2e%2F__tests__%2FesmConfigFile.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2FesmConfigFile.test.ts?ref=f726313fe6441999ac286bc8f6f7d30492db5957","patch":"@@ -5,9 +5,6 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import {resolve} from 'path';\n-import execa = require('execa');\n-import {existsSync} from 'graceful-fs';\n import {onNodeVersions} from '@jest/test-utils';\n import {getConfig} from '../runJest';\n \n@@ -48,33 +45,15 @@ onNodeVersions('>=12.17.0', () => {\n     });\n   });\n \n-  describe('typescript', () => {\n-    beforeAll(async () => {\n-      // the typescript config test needs `@jest/types` to be built\n-      const cwd = resolve(__dirname, '../../');\n-      const typesPackageDirectory = 'packages/jest-types';\n-\n-      const indexDTsFile = resolve(\n-        cwd,\n-        typesPackageDirectory,\n-        'build/index.d.ts',\n-      );\n-\n-      if (!existsSync(indexDTsFile)) {\n-        await execa('tsc', ['-b', typesPackageDirectory], {cwd});\n-      }\n-    }, 360_000);\n-\n-    test('reads config from ts file when package.json#type=module', () => {\n-      const {configs} = getConfig('esm-config/ts', [], {\n-        skipPkgJsonCheck: true,\n-      });\n+  test('reads config from ts file when package.json#type=module', () => {\n+    const {configs} = getConfig('esm-config/ts', [], {\n+      skipPkgJsonCheck: true,\n+    });\n \n-      expect(configs).toHaveLength(1);\n-      expect(configs[0].displayName).toEqual({\n-        color: 'white',\n-        name: 'Config from ts file',\n-      });\n+    expect(configs).toHaveLength(1);\n+    expect(configs[0].displayName).toEqual({\n+      color: 'white',\n+      name: 'Config from ts file',\n     });\n   });\n });"},{"sha":"7ae2637f256c726757fbbca67253825fc755d057","filename":"e2e/__tests__/tsIntegration.test.ts","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/facebook/jest/blob/f726313fe6441999ac286bc8f6f7d30492db5957/e2e%2F__tests__%2FtsIntegration.test.ts","raw_url":"https://github.com/facebook/jest/raw/f726313fe6441999ac286bc8f6f7d30492db5957/e2e%2F__tests__%2FtsIntegration.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2FtsIntegration.test.ts?ref=f726313fe6441999ac286bc8f6f7d30492db5957","patch":"@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+import * as path from 'path';\n+import {onNodeVersions} from '@jest/test-utils';\n+import {cleanup, writeFiles} from '../Utils';\n+import runJest, {getConfig} from '../runJest';\n+\n+const DIR = path.resolve(__dirname, '../ts-node-integration');\n+\n+beforeEach(() => cleanup(DIR));\n+afterAll(() => cleanup(DIR));\n+\n+describe('when `Config` type is imported from \"@jest/types\"', () => {\n+  test('with object config exported from TS file', () => {\n+    writeFiles(DIR, {\n+      '__tests__/dummy.test.js': \"test('dummy', () => expect(123).toBe(123));\",\n+      'jest.config.ts': `\n+        import type {Config} from '@jest/types';\n+        const config: Config.InitialOptions = {displayName: 'ts-object-config', verbose: true};\n+        export default config;\n+        `,\n+      'package.json': '{}',\n+    });\n+\n+    const {configs, globalConfig} = getConfig(path.join(DIR));\n+\n+    expect(configs).toHaveLength(1);\n+    expect(configs[0].displayName?.name).toBe('ts-object-config');\n+    expect(globalConfig.verbose).toBe(true);\n+  });\n+\n+  test('with function config exported from TS file', () => {\n+    writeFiles(DIR, {\n+      '__tests__/dummy.test.js': \"test('dummy', () => expect(123).toBe(123));\",\n+      'jest.config.ts': `\n+        import type {Config} from '@jest/types';\n+        async function getVerbose() {return true;}\n+        export default async (): Promise<Config.InitialOptions> => {\n+          const verbose: Config.InitialOptions['verbose'] = await getVerbose();\n+          return {displayName: 'ts-async-function-config', verbose};\n+        };\n+        `,\n+      'package.json': '{}',\n+    });\n+\n+    const {configs, globalConfig} = getConfig(path.join(DIR));\n+\n+    expect(configs).toHaveLength(1);\n+    expect(configs[0].displayName?.name).toBe('ts-async-function-config');\n+    expect(globalConfig.verbose).toBe(true);\n+  });\n+\n+  test('throws if type errors are encountered', () => {\n+    writeFiles(DIR, {\n+      '__tests__/dummy.test.js': \"test('dummy', () => expect(123).toBe(123));\",\n+      'jest.config.ts': `\n+        import type {Config} from '@jest/types';\n+        const config: Config.InitialOptions = {testTimeout: '10000'};\n+        export default config;\n+        `,\n+      'package.json': '{}',\n+    });\n+\n+    const {stderr, exitCode} = runJest(DIR);\n+\n+    expect(stderr).toMatch(\n+      \"jest.config.ts(2,40): error TS2322: Type 'string' is not assignable to type 'number'.\",\n+    );\n+    expect(exitCode).toBe(1);\n+  });\n+\n+  test('throws if syntax errors are encountered', () => {\n+    writeFiles(DIR, {\n+      '__tests__/dummy.test.js': \"test('dummy', () => expect(123).toBe(123));\",\n+      'jest.config.ts': `\n+        import type {Config} from '@jest/types';\n+        const config: Config.InitialOptions = {verbose: true};\n+        export default get config;\n+        `,\n+      'package.json': '{}',\n+    });\n+\n+    const {stderr, exitCode} = runJest(DIR);\n+\n+    expect(stderr).toMatch(\n+      \"jest.config.ts(3,16): error TS2304: Cannot find name 'get'.\",\n+    );\n+    expect(exitCode).toBe(1);\n+  });\n+\n+  // The versions where vm.Module exists and commonjs with \"exports\" is not broken\n+  onNodeVersions('>=12.16.0', () => {\n+    test('works with object config exported from TS file when package.json#type=module', () => {\n+      writeFiles(DIR, {\n+        '__tests__/dummy.test.js': \"test('dummy', () => expect(12).toBe(12));\",\n+        'jest.config.ts': `\n+          import type {Config} from '@jest/types';\n+          const config: Config.InitialOptions = {displayName: 'ts-esm-object-config', verbose: true};\n+          export default config;\n+          `,\n+        'package.json': '{\"type\": \"module\"}',\n+      });\n+\n+      const {configs, globalConfig} = getConfig(path.join(DIR));\n+\n+      expect(configs).toHaveLength(1);\n+      expect(configs[0].displayName?.name).toBe('ts-esm-object-config');\n+      expect(globalConfig.verbose).toBe(true);\n+    });\n+\n+    test('works with function config exported from TS file when package.json#type=module', () => {\n+      writeFiles(DIR, {\n+        '__tests__/dummy.test.js': \"test('dummy', () => expect(12).toBe(12));\",\n+        'jest.config.ts': `\n+          import type {Config} from '@jest/types';\n+          async function getVerbose() {return true;}\n+          export default async (): Promise<Config.InitialOptions> => {\n+            const verbose: Config.InitialOptions['verbose'] = await getVerbose();\n+            return {displayName: 'ts-esm-async-function-config', verbose};\n+          };\n+          `,\n+        'package.json': '{\"type\": \"module\"}',\n+      });\n+\n+      const {configs, globalConfig} = getConfig(path.join(DIR));\n+\n+      expect(configs).toHaveLength(1);\n+      expect(configs[0].displayName?.name).toBe('ts-esm-async-function-config');\n+      expect(globalConfig.verbose).toBe(true);\n+    });\n+\n+    test('throws if type errors are encountered when package.json#type=module', () => {\n+      writeFiles(DIR, {\n+        '__tests__/dummy.test.js': \"test('dummy', () => expect(12).toBe(12));\",\n+        'jest.config.ts': `\n+          import type {Config} from '@jest/types';\n+          const config: Config.InitialOptions = {testTimeout: '10000'};\n+          export default config;\n+          `,\n+        'package.json': '{\"type\": \"module\"}',\n+      });\n+\n+      const {stderr, exitCode} = runJest(DIR);\n+\n+      expect(stderr).toMatch(\n+        \"jest.config.ts(2,40): error TS2322: Type 'string' is not assignable to type 'number'.\",\n+      );\n+      expect(exitCode).toBe(1);\n+    });\n+\n+    test('throws if syntax errors are encountered when package.json#type=module', () => {\n+      writeFiles(DIR, {\n+        '__tests__/dummy.test.js':\n+          \"test('dummy', () => expect(123).toBe(123));\",\n+        'jest.config.ts': `\n+          import type {Config} from '@jest/types';\n+          const config: Config.InitialOptions = {verbose: true};\n+          export default get config;\n+          `,\n+        'package.json': '{}',\n+      });\n+\n+      const {stderr, exitCode} = runJest(DIR);\n+\n+      expect(stderr).toMatch(\n+        \"jest.config.ts(3,16): error TS2304: Cannot find name 'get'.\",\n+      );\n+      expect(exitCode).toBe(1);\n+    });\n+  });\n+});"},{"sha":"c560b86058f7f505a38dd90af4d4dfa0be5721d4","filename":"e2e/esm-config/ts/jest.config.ts","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/facebook/jest/blob/f726313fe6441999ac286bc8f6f7d30492db5957/e2e%2Fesm-config%2Fts%2Fjest.config.ts","raw_url":"https://github.com/facebook/jest/raw/f726313fe6441999ac286bc8f6f7d30492db5957/e2e%2Fesm-config%2Fts%2Fjest.config.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fesm-config%2Fts%2Fjest.config.ts?ref=f726313fe6441999ac286bc8f6f7d30492db5957","patch":"@@ -5,9 +5,14 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import type {Config} from '@jest/types';\n+// allows to make sure that `ts-node` compiles the config file without a need to build Jest types\n+// integration tests of Jest types run in a separate CI job through `jest.config.ts.mjs`\n+type DummyConfig = {\n+  displayName: string;\n+  testEnvironment: string;\n+};\n \n-const config: Config.InitialOptions = {\n+const config: DummyConfig = {\n   displayName: 'Config from ts file',\n   testEnvironment: 'node',\n };"},{"sha":"1ba1f96f823e740bca8e58645d8efa3dab6cc1ae","filename":"jest.config.mjs","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/f726313fe6441999ac286bc8f6f7d30492db5957/jest.config.mjs","raw_url":"https://github.com/facebook/jest/raw/f726313fe6441999ac286bc8f6f7d30492db5957/jest.config.mjs","contents_url":"https://api.github.com/repos/facebook/jest/contents/jest.config.mjs?ref=f726313fe6441999ac286bc8f6f7d30492db5957","patch":"@@ -67,6 +67,7 @@ export default {\n     '/packages/jest-snapshot/src/__tests__/fixtures/',\n     '/packages/jest-validate/src/__tests__/fixtures/',\n     '/e2e/__tests__/iterator-to-null-test.ts',\n+    '/e2e/__tests__/tsIntegration.test.ts', // this test needs types to be build, it runs in a separate CI job through `jest.config.ts.mjs`\n   ],\n   testTimeout: 70000,\n   transform: {"},{"sha":"890857922fe9626d75b04d7335ffdfd880f1aab3","filename":"jest.config.ts.mjs","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/facebook/jest/blob/f726313fe6441999ac286bc8f6f7d30492db5957/jest.config.ts.mjs","raw_url":"https://github.com/facebook/jest/raw/f726313fe6441999ac286bc8f6f7d30492db5957/jest.config.ts.mjs","contents_url":"https://api.github.com/repos/facebook/jest/contents/jest.config.ts.mjs?ref=f726313fe6441999ac286bc8f6f7d30492db5957","patch":"@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+import jestConfigBase from './jest.config.mjs';\n+\n+export default {\n+  projects: [\n+    {\n+      displayName: {\n+        color: 'blue',\n+        name: 'ts-integration',\n+      },\n+      modulePathIgnorePatterns: jestConfigBase.modulePathIgnorePatterns,\n+      roots: ['<rootDir>/e2e/__tests__'],\n+      testMatch: ['<rootDir>/e2e/__tests__/ts*'],\n+    },\n+    {\n+      displayName: {\n+        color: 'blue',\n+        name: 'type-tests',\n+      },\n+      modulePathIgnorePatterns: jestConfigBase.modulePathIgnorePatterns,\n+      roots: ['<rootDir>/packages'],\n+      runner: 'jest-runner-tsd',\n+      testMatch: ['**/__typetests__/**/*.ts'],\n+    },\n+  ],\n+  reporters: ['default', 'github-actions'],\n+};"},{"sha":"47edf683be0a9001813c3bcb309e29b0e7d67572","filename":"jest.config.tsd.mjs","status":"removed","additions":0,"deletions":20,"changes":20,"blob_url":"https://github.com/facebook/jest/blob/d0cfb8f20a8caf621d7df02abc7581bb7f040e27/jest.config.tsd.mjs","raw_url":"https://github.com/facebook/jest/raw/d0cfb8f20a8caf621d7df02abc7581bb7f040e27/jest.config.tsd.mjs","contents_url":"https://api.github.com/repos/facebook/jest/contents/jest.config.tsd.mjs?ref=d0cfb8f20a8caf621d7df02abc7581bb7f040e27","patch":"@@ -1,20 +0,0 @@\n-/**\n- * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n- *\n- * This source code is licensed under the MIT license found in the\n- * LICENSE file in the root directory of this source tree.\n- */\n-\n-import jestConfigBase from './jest.config.mjs';\n-\n-export default {\n-  displayName: {\n-    color: 'blue',\n-    name: 'types',\n-  },\n-  modulePathIgnorePatterns: jestConfigBase.modulePathIgnorePatterns,\n-  reporters: ['default', 'github-actions'],\n-  roots: ['<rootDir>/packages'],\n-  runner: 'jest-runner-tsd',\n-  testMatch: ['**/__typetests__/**/*.ts'],\n-};"},{"sha":"06ae2a4449b156f1375b31f18cfb604d30203dce","filename":"package.json","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/f726313fe6441999ac286bc8f6f7d30492db5957/package.json","raw_url":"https://github.com/facebook/jest/raw/f726313fe6441999ac286bc8f6f7d30492db5957/package.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/package.json?ref=f726313fe6441999ac286bc8f6f7d30492db5957","patch":"@@ -103,10 +103,11 @@\n     \"lint:prettier\": \"prettier . \\\"!**/*.{js,jsx,cjs,mjs,ts,tsx}\\\" --write\",\n     \"lint:prettier:ci\": \"prettier . \\\"!**/*.{js,jsx,cjs,mjs,ts,tsx}\\\" --check\",\n     \"remove-examples\": \"node ./scripts/remove-examples.mjs\",\n-    \"test-types\": \"yarn jest --config jest.config.tsd.mjs\",\n     \"test-ci-partial\": \"yarn test-ci-partial:parallel -i\",\n     \"test-ci-partial:parallel\": \"yarn jest --color --config jest.config.ci.mjs\",\n     \"test-leak\": \"yarn jest -i --detectLeaks --color jest-mock jest-diff jest-repl pretty-format\",\n+    \"test-ts\": \"yarn jest --config jest.config.ts.mjs\",\n+    \"test-types\": \"yarn test-ts --selectProjects type-tests\",\n     \"test\": \"yarn lint && yarn jest\",\n     \"verify-old-ts\": \"node ./scripts/verifyOldTs.mjs\",\n     \"verify-pnp\": \"node ./scripts/verifyPnP.mjs\","}]},{"url":"https://api.github.com/repos/facebook/jest/issues/12572","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/12572/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/12572/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/12572/events","html_url":"https://github.com/facebook/jest/pull/12572","id":1167293540,"node_id":"PR_kwDOAOXXVc40V-AG","number":12572,"title":"feat(fake-timers)!: allow `jest.useFakeTimers()` and `projectConfig.fakeTimers` to take an options bag","user":{"login":"mrazauskas","id":72159681,"node_id":"MDQ6VXNlcjcyMTU5Njgx","avatar_url":"https://avatars.githubusercontent.com/u/72159681?v=4","gravatar_id":"","url":"https://api.github.com/users/mrazauskas","html_url":"https://github.com/mrazauskas","followers_url":"https://api.github.com/users/mrazauskas/followers","following_url":"https://api.github.com/users/mrazauskas/following{/other_user}","gists_url":"https://api.github.com/users/mrazauskas/gists{/gist_id}","starred_url":"https://api.github.com/users/mrazauskas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrazauskas/subscriptions","organizations_url":"https://api.github.com/users/mrazauskas/orgs","repos_url":"https://api.github.com/users/mrazauskas/repos","events_url":"https://api.github.com/users/mrazauskas/events{/privacy}","received_events_url":"https://api.github.com/users/mrazauskas/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/facebook/jest/milestones/14","html_url":"https://github.com/facebook/jest/milestone/14","labels_url":"https://api.github.com/repos/facebook/jest/milestones/14/labels","id":7236324,"node_id":"MI_kwDOAOXXVc4Abmrk","number":14,"title":"Jest 28","description":"","creator":{"login":"SimenB","id":1404810,"node_id":"MDQ6VXNlcjE0MDQ4MTA=","avatar_url":"https://avatars.githubusercontent.com/u/1404810?v=4","gravatar_id":"","url":"https://api.github.com/users/SimenB","html_url":"https://github.com/SimenB","followers_url":"https://api.github.com/users/SimenB/followers","following_url":"https://api.github.com/users/SimenB/following{/other_user}","gists_url":"https://api.github.com/users/SimenB/gists{/gist_id}","starred_url":"https://api.github.com/users/SimenB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SimenB/subscriptions","organizations_url":"https://api.github.com/users/SimenB/orgs","repos_url":"https://api.github.com/users/SimenB/repos","events_url":"https://api.github.com/users/SimenB/events{/privacy}","received_events_url":"https://api.github.com/users/SimenB/received_events","type":"User","site_admin":false},"open_issues":0,"closed_issues":26,"state":"closed","created_at":"2021-10-09T11:07:27Z","updated_at":"2022-04-26T11:55:56Z","due_on":null,"closed_at":"2022-04-26T11:55:56Z"},"comments":19,"created_at":"2022-03-12T13:45:30Z","updated_at":"2022-05-08T00:08:59Z","closed_at":"2022-04-05T14:48:16Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/12572","html_url":"https://github.com/facebook/jest/pull/12572","diff_url":"https://github.com/facebook/jest/pull/12572.diff","patch_url":"https://github.com/facebook/jest/pull/12572.patch","merged_at":"2022-04-05T14:48:15Z"},"body":"Resolves #8257 (allows `jest.useFakeTimers({timerLimit: 10});`)\r\nResolves #10602 (allows `jest.useFakeTimers({advanceTimers: 30, now: new Date('2015-09-25')});`)\r\nResolves #12055 (allows workaround `jest.useFakeTimers({doNotFake: ['performance']});`)\r\nCloses #11661\r\nCloses #12362\r\nCloses #12452\r\n\r\n## Summary\r\n\r\nAs it is mentioned in the linked issues, it would be very useful to allow `jest.useFakeTimers()` and `projectConfig.fakeTimers` to take an options object, which would configure underling `@sinonjs/fake-timers`. E.g. `loopLimit`, `shouldAdvanceTime`, `toFake` and all [other options](https://github.com/sinonjs/fake-timers#var-clock--faketimersinstallconfig).\r\n\r\n## ToDo\r\n\r\n- [x] unit test for the implementation\r\n- [x] e2e tests for the new API\r\n- [x] documentation\r\n- [x] changelog entry\r\n\r\n## Test plan\r\n\r\nCurrent and new unit, e2e and type tests should pass.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/12572/reactions","total_count":5,"+1":0,"-1":0,"laugh":0,"hooray":5,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/12572/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"ce5503c5fcf30383646f11afe18e7740ff93dc72","filename":"CHANGELOG.md","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -7,6 +7,7 @@\n - `[jest-circus, jest-jasmine2]` Allowed classes and functions as `describe` and `it`/`test` names ([#12484](https://github.com/facebook/jest/pull/12484))\n - `[jest-cli, jest-config]` [**BREAKING**] Remove `testURL` config, use `testEnvironmentOptions.url` instead ([#10797](https://github.com/facebook/jest/pull/10797))\n - `[jest-cli, jest-core]` Add `--shard` parameter for distributed parallel test execution ([#12546](https://github.com/facebook/jest/pull/12546))\n+- `[jest-cli]` [**BREAKING**] Remove undocumented `--timers` option ([#12572](https://github.com/facebook/jest/pull/12572))\n - `[jest-config]` [**BREAKING**] Stop shipping `jest-environment-jsdom` by default ([#12354](https://github.com/facebook/jest/pull/12354))\n - `[jest-config]` [**BREAKING**] Stop shipping `jest-jasmine2` by default ([#12355](https://github.com/facebook/jest/pull/12355))\n - `[jest-config, @jest/types]` Add `ci` to `GlobalConfig` ([#12378](https://github.com/facebook/jest/pull/12378))\n@@ -24,6 +25,8 @@\n - `[jest-environment-node]` [**BREAKING**] Second argument `context` to constructor is mandatory ([#12469](https://github.com/facebook/jest/pull/12469))\n - `[@jest/expect]` New module which extends `expect` with `jest-snapshot` matchers ([#12404](https://github.com/facebook/jest/pull/12404), [#12410](https://github.com/facebook/jest/pull/12410), [#12418](https://github.com/facebook/jest/pull/12418))\n - `[@jest/expect-utils]` New module exporting utils for `expect` ([#12323](https://github.com/facebook/jest/pull/12323))\n+- `[@jest/fake-timers]` [**BREAKING**] Rename `timers` configuration option to `fakeTimers` ([#12572](https://github.com/facebook/jest/pull/12572))\n+- `[@jest/fake-timers]` [**BREAKING**] Allow `jest.useFakeTimers()` and `projectConfig.fakeTimers` to take an options bag ([#12572](https://github.com/facebook/jest/pull/12572))\n - `[jest-haste-map]` [**BREAKING**] `HasteMap.create` now returns a promise ([#12008](https://github.com/facebook/jest/pull/12008))\n - `[jest-haste-map]` Add support for `dependencyExtractor` written in ESM ([#12008](https://github.com/facebook/jest/pull/12008))\n - `[jest-mock]` [**BREAKING**] Rename exported utility types `ClassLike`, `FunctionLike`, `ConstructorLikeKeys`, `MethodLikeKeys`, `PropertyLikeKeys`; remove exports of utility types `ArgumentsOf`, `ArgsType`, `ConstructorArgumentsOf` - TS builtin utility types `ConstructorParameters` and `Parameters` should be used instead ([#12435](https://github.com/facebook/jest/pull/12435), [#12489](https://github.com/facebook/jest/pull/12489))"},{"sha":"277cf0b8f9909ccc28d3b63eebdfcbac09775691","filename":"docs/Configuration.md","status":"modified","additions":102,"deletions":8,"changes":110,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/docs%2FConfiguration.md","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/docs%2FConfiguration.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FConfiguration.md?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -395,6 +395,108 @@ Jest's ESM support is still experimental, see [its docs for more details](ECMASc\n }\n ```\n \n+### `fakeTimers` \\[object]\n+\n+Default: `{}`\n+\n+The fake timers may be useful when a piece of code sets a long timeout that we don't want to wait for in a test. For additional details see [Fake Timers guide](TimerMocks.md) and [API documentation](JestObjectAPI.md#fake-timers).\n+\n+This option provides the default configuration of fake timers for all tests. Calling `jest.useFakeTimers()` in a test file will use these options or will override them if a configuration object is passed. For example, you can tell Jest to keep the original implementation of `process.nextTick()` and adjust the limit of recursive timers that will be run:\n+\n+```json\n+{\n+  \"fakeTimers\": {\n+    \"doNotFake\": [\"nextTick\"],\n+    \"timerLimit\": 1000\n+  }\n+}\n+```\n+\n+```js title=\"fakeTime.test.js\"\n+// install fake timers for this file using the options from Jest configuration\n+jest.useFakeTimers();\n+\n+test('increase the limit of recursive timers for this and following tests', () => {\n+  jest.useFakeTimers({timerLimit: 5000});\n+  // ...\n+});\n+```\n+\n+:::tip\n+\n+Instead of including `jest.useFakeTimers()` in each test file, you can enable fake timers globally for all tests:\n+\n+```json\n+{\n+  \"fakeTimers\": {\n+    \"enableGlobally\": true\n+  }\n+}\n+```\n+\n+:::\n+\n+Configuration options:\n+\n+```ts\n+type FakeableAPI =\n+  | 'Date'\n+  | 'hrtime'\n+  | 'nextTick'\n+  | 'performance'\n+  | 'queueMicrotask'\n+  | 'requestAnimationFrame'\n+  | 'cancelAnimationFrame'\n+  | 'requestIdleCallback'\n+  | 'cancelIdleCallback'\n+  | 'setImmediate'\n+  | 'clearImmediate'\n+  | 'setInterval'\n+  | 'clearInterval'\n+  | 'setTimeout'\n+  | 'clearTimeout';\n+\n+type ModernFakeTimersConfig = {\n+  /**\n+   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n+   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n+   * The default is `false`.\n+   */\n+  advanceTimers?: boolean | number;\n+  /**\n+   * List of names of APIs that should not be faked. The default is `[]`, meaning\n+   * all APIs are faked.\n+   */\n+  doNotFake?: Array<FakeableAPI>;\n+  /** Whether fake timers should be enabled for all test files. The default is `false`. */\n+  enableGlobally?: boolean;\n+  /**\n+   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n+   * The default is `false`.\n+   */\n+  legacyFakeTimers?: boolean;\n+  /** Sets current system time to be used by fake timers. The default is `Date.now()`. */\n+  now?: number;\n+  /** Maximum number of recursive timers that will be run. The default is `100_000` timers. */\n+  timerLimit?: number;\n+};\n+```\n+\n+:::info Legacy Fake Timers\n+\n+For some reason you might have to use legacy implementation of fake timers. Here is how to enable it globally (additional options are not supported):\n+\n+```json\n+{\n+  \"fakeTimers\": {\n+    \"enableGlobally\": true,\n+    \"legacyFakeTimers\": true\n+  }\n+}\n+```\n+\n+:::\n+\n ### `forceCoverageMatch` \\[array&lt;string&gt;]\n \n Default: `['']`\n@@ -1458,14 +1560,6 @@ Default: `5000`\n \n Default timeout of a test in milliseconds.\n \n-### `timers` \\[string]\n-\n-Default: `real`\n-\n-Setting this value to `fake` or `modern` enables fake timers for all tests by default. Fake timers are useful when a piece of code sets a long timeout that we don't want to wait for in a test. You can learn more about fake timers [here](JestObjectAPI.md#jestusefaketimersimplementation-modern--legacy).\n-\n-If the value is `legacy`, the old implementation will be used as implementation instead of one backed by [`@sinonjs/fake-timers`](https://github.com/sinonjs/fake-timers).\n-\n ### `transform` \\[object&lt;string, pathToTransformer | \\[pathToTransformer, object]&gt;]\n \n Default: `{\"\\\\.[jt]sx?$\": \"babel-jest\"}`"},{"sha":"23df34442ba0d6953c676d7e0e4767c934f6be41","filename":"docs/JestObjectAPI.md","status":"modified","additions":119,"deletions":8,"changes":127,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/docs%2FJestObjectAPI.md","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/docs%2FJestObjectAPI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FJestObjectAPI.md?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -628,19 +628,118 @@ test('direct', () => {\n });\n ```\n \n-## Mock Timers\n+## Fake Timers\n \n-### `jest.useFakeTimers(implementation?: 'modern' | 'legacy')`\n+### `jest.useFakeTimers(fakeTimersConfig?)`\n \n-Instructs Jest to use fake versions of the standard timer functions (`setTimeout`, `setInterval`, `clearTimeout`, `clearInterval`, `nextTick`, `setImmediate` and `clearImmediate` as well as `Date`).\n+Instructs Jest to use fake versions of the global date, performance, time and timer APIs. Fake timers implementation is backed by [`@sinonjs/fake-timers`](https://github.com/sinonjs/fake-timers).\n \n-If you pass `'legacy'` as an argument, Jest's legacy implementation will be used rather than one based on [`@sinonjs/fake-timers`](https://github.com/sinonjs/fake-timers).\n+Fake timers will swap out `Date`, `performance.now()`, `queueMicrotask()`, `setImmediate()`, `clearImmediate()`, `setInterval()`, `clearInterval()`, `setTimeout()`, `clearTimeout()` with an implementation that gets its time from the fake clock.\n+\n+In Node environment `process.hrtime`, `process.nextTick()` and in JSDOM environment `requestAnimationFrame()`, `cancelAnimationFrame()`, `requestIdleCallback()`, `cancelIdleCallback()` will be replaced as well.\n+\n+Configuration options:\n+\n+```ts\n+type FakeableAPI =\n+  | 'Date'\n+  | 'hrtime'\n+  | 'nextTick'\n+  | 'performance'\n+  | 'queueMicrotask'\n+  | 'requestAnimationFrame'\n+  | 'cancelAnimationFrame'\n+  | 'requestIdleCallback'\n+  | 'cancelIdleCallback'\n+  | 'setImmediate'\n+  | 'clearImmediate'\n+  | 'setInterval'\n+  | 'clearInterval'\n+  | 'setTimeout'\n+  | 'clearTimeout';\n+\n+type FakeTimersConfig = {\n+  /**\n+   * If set to `true` all timers will be advanced automatically by 20 milliseconds\n+   * every 20 milliseconds. A custom time delta may be provided by passing a number.\n+   * The default is `false`.\n+   */\n+  advanceTimers?: boolean | number;\n+  /**\n+   * List of names of APIs that should not be faked. The default is `[]`, meaning\n+   * all APIs are faked.\n+   */\n+  doNotFake?: Array<FakeableAPI>;\n+  /**\n+   * Use the old fake timers implementation instead of one backed by `@sinonjs/fake-timers`.\n+   * The default is `false`.\n+   */\n+  legacyFakeTimers?: boolean;\n+  /** Sets current system time to be used by fake timers. The default is `Date.now()`. */\n+  now?: number | Date;\n+  /**\n+   * The maximum number of recursive timers that will be run when calling `jest.runAllTimers()`.\n+   * The default is `100_000` timers.\n+   */\n+  timerLimit?: number;\n+};\n+```\n+\n+Calling `jest.useFakeTimers()` will use fake timers for all tests within the file, until original timers are restored with `jest.useRealTimers()`.\n+\n+You can call `jest.useFakeTimers()` or `jest.useRealTimers()` from anywhere: top level, inside an `test` block, etc. Keep in mind that this is a **global operation** and will affect other tests within the same file. Calling `jest.useFakeTimers()` once again in the same test file would reset the internal state (e.g. timer count) and reinstall fake timers using the provided options:\n+\n+```js\n+test('advance the timers automatically', () => {\n+  jest.useFakeTimers({advanceTimers: true});\n+  // ...\n+});\n+\n+test('do not advance the timers and do not fake `performance`', () => {\n+  jest.useFakeTimers({doNotFake: ['performance']});\n+  // ...\n+});\n+\n+test('uninstall fake timers for the rest of tests in the file', () => {\n+  jest.useRealTimers();\n+  // ...\n+});\n+```\n+\n+:::info Legacy Fake Timers\n+\n+For some reason you might have to use legacy implementation of fake timers. It can be enabled like this (additional options are not supported):\n+\n+```js\n+jest.useFakeTimers({\n+  legacyFakeTimers: true,\n+});\n+```\n+\n+Legacy fake timers will swap out `setImmediate()`, `clearImmediate()`, `setInterval()`, `clearInterval()`, `setTimeout()`, `clearTimeout()` with Jest [mock functions](MockFunctionAPI.md). In Node environment `process.nextTick()` and in JSDOM environment `requestAnimationFrame()`, `cancelAnimationFrame()` will be also replaced.\n+\n+:::\n \n Returns the `jest` object for chaining.\n \n ### `jest.useRealTimers()`\n \n-Instructs Jest to use the real versions of the standard timer functions.\n+Instructs Jest to restore the original implementations of the global date, performance, time and timer APIs. For example, you may call `jest.useRealTimers()` inside `afterEach` hook to restore timers after each test:\n+\n+```js\n+afterEach(() => {\n+  jest.useRealTimers();\n+});\n+\n+test('do something with fake timers', () => {\n+  jest.useFakeTimers();\n+  // ...\n+});\n+\n+test('do something with real timers', () => {\n+  // ...\n+});\n+```\n \n Returns the `jest` object for chaining.\n \n@@ -662,7 +761,11 @@ This is often useful for synchronously executing setTimeouts during a test in or\n \n Exhausts all tasks queued by `setImmediate()`.\n \n-> Note: This function is not available when using modern fake timers implementation\n+:::info\n+\n+This function is only available when using legacy fake timers implementation.\n+\n+:::\n \n ### `jest.advanceTimersByTime(msToRun)`\n \n@@ -696,13 +799,21 @@ Returns the number of fake timers still left to run.\n \n Set the current system time used by fake timers. Simulates a user changing the system clock while your program is running. It affects the current time but it does not in itself cause e.g. timers to fire; they will fire exactly as they would have done without the call to `jest.setSystemTime()`.\n \n-> Note: This function is only available when using modern fake timers implementation\n+:::info\n+\n+This function is not available when using legacy fake timers implementation.\n+\n+:::\n \n ### `jest.getRealSystemTime()`\n \n When mocking time, `Date.now()` will also be mocked. If you for some reason need access to the real current time, you can invoke this function.\n \n-> Note: This function is only available when using modern fake timers implementation\n+:::info\n+\n+This function is not available when using legacy fake timers implementation.\n+\n+:::\n \n ## Misc\n "},{"sha":"1e0260c7def652d5cf8f7d3f6dcb0d406c6c00d5","filename":"docs/TimerMocks.md","status":"modified","additions":41,"deletions":39,"changes":80,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/docs%2FTimerMocks.md","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/docs%2FTimerMocks.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FTimerMocks.md?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -3,11 +3,19 @@ id: timer-mocks\n title: Timer Mocks\n ---\n \n-The native timer functions (i.e., `setTimeout`, `setInterval`, `clearTimeout`, `clearInterval`) are less than ideal for a testing environment since they depend on real time to elapse. Jest can swap out timers with functions that allow you to control the passage of time. [Great Scott!](https://www.youtube.com/watch?v=QZoJ2Pt27BY)\n+The native timer functions (i.e., `setTimeout()`, `setInterval()`, `clearTimeout()`, `clearInterval()`) are less than ideal for a testing environment since they depend on real time to elapse. Jest can swap out timers with functions that allow you to control the passage of time. [Great Scott!](https://www.youtube.com/watch?v=QZoJ2Pt27BY)\n \n-```javascript title=\"timerGame.js\"\n-'use strict';\n+:::info\n+\n+Also see [Fake Timers API](JestObjectAPI.md#fake-timers) documentation.\n+\n+:::\n+\n+## Enable Fake Timers\n+\n+In the following example we enable fake timers by calling `jest.useFakeTimers()`. This is replacing the original implementation of `setTimeout()` and other timer functions. Timers can be restored to their normal behavior with `jest.useRealTimers()`.\n \n+```javascript title=\"timerGame.js\"\n function timerGame(callback) {\n   console.log('Ready....go!');\n   setTimeout(() => {\n@@ -20,8 +28,6 @@ module.exports = timerGame;\n ```\n \n ```javascript title=\"__tests__/timerGame-test.js\"\n-'use strict';\n-\n jest.useFakeTimers();\n jest.spyOn(global, 'setTimeout');\n \n@@ -34,27 +40,6 @@ test('waits 1 second before ending the game', () => {\n });\n ```\n \n-Here we enable fake timers by calling `jest.useFakeTimers()`. This mocks out `setTimeout` and other timer functions with mock functions. Timers can be restored to their normal behavior with `jest.useRealTimers()`.\n-\n-While you can call `jest.useFakeTimers()` or `jest.useRealTimers()` from anywhere (top level, inside an `it` block, etc.), it is a **global operation** and will affect other tests within the same file. Additionally, you need to call `jest.useFakeTimers()` to reset internal counters before each test. If you plan to not use fake timers in all your tests, you will want to clean up manually, as otherwise the faked timers will leak across tests:\n-\n-```javascript\n-afterEach(() => {\n-  jest.useRealTimers();\n-});\n-\n-test('do something with fake timers', () => {\n-  jest.useFakeTimers();\n-  // ...\n-});\n-\n-test('do something with real timers', () => {\n-  // ...\n-});\n-```\n-\n-Currently, two implementations of the fake timers are included - `modern` and `legacy`, where `modern` is the default one. See [configuration](Configuration.md#timers-string) for how to configure it.\n-\n ## Run All Timers\n \n Another test we might want to write for this module is one that asserts that the callback is called after 1 second. To do this, we're going to use Jest's timer control APIs to fast-forward time right in the middle of the test:\n@@ -81,17 +66,11 @@ test('calls the callback after 1 second', () => {\n \n ## Run Pending Timers\n \n-There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop, throwing the following error:\n+There are also scenarios where you might have a recursive timer – that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop, throwing the following error: \"Aborting after running 100000 timers, assuming an infinite loop!\"\n \n-```\n-Ran 100000 timers, and there are still more! Assuming we've hit an infinite recursion and bailing out...\n-```\n-\n-So something like `jest.runAllTimers()` is not desirable. For these cases you might use `jest.runOnlyPendingTimers()`:\n+If that is your case, using `jest.runOnlyPendingTimers()` will solve the problem:\n \n ```javascript title=\"infiniteTimerGame.js\"\n-'use strict';\n-\n function infiniteTimerGame(callback) {\n   console.log('Ready....go!');\n \n@@ -110,8 +89,6 @@ module.exports = infiniteTimerGame;\n ```\n \n ```javascript title=\"__tests__/infiniteTimerGame-test.js\"\n-'use strict';\n-\n jest.useFakeTimers();\n jest.spyOn(global, 'setTimeout');\n \n@@ -142,13 +119,21 @@ describe('infiniteTimerGame', () => {\n });\n ```\n \n+:::note\n+\n+For debugging or any other reason you can change the limit of timers that will be run before throwing an error:\n+\n+```js\n+jest.useFakeTimers({timerLimit: 100});\n+```\n+\n+:::\n+\n ## Advance Timers by Time\n \n Another possibility is use `jest.advanceTimersByTime(msToRun)`. When this API is called, all timers are advanced by `msToRun` milliseconds. All pending \"macro-tasks\" that have been queued via setTimeout() or setInterval(), and would be executed during this time frame, will be executed. Additionally, if those macro-tasks schedule new macro-tasks that would be executed within the same time frame, those will be executed until there are no more macro-tasks remaining in the queue that should be run within msToRun milliseconds.\n \n ```javascript title=\"timerGame.js\"\n-'use strict';\n-\n function timerGame(callback) {\n   console.log('Ready....go!');\n   setTimeout(() => {\n@@ -182,4 +167,21 @@ it('calls the callback after 1 second via advanceTimersByTime', () => {\n \n Lastly, it may occasionally be useful in some tests to be able to clear all of the pending timers. For this, we have `jest.clearAllTimers()`.\n \n-The code for this example is available at [examples/timer](https://github.com/facebook/jest/tree/main/examples/timer).\n+## Selective Faking\n+\n+Sometimes your code may require to avoid overwriting the original implementation of one or another API. If that is the case, you can use `doNotFake` option. For example, here is how you could provide a custom mock function for `performance.mark()` in jsdom environment:\n+\n+```js\n+/**\n+ * @jest-environment jsdom\n+ */\n+\n+const mockPerformanceMark = jest.fn();\n+window.performance.mark = mockPerformanceMark;\n+\n+test('allows mocking `performance.mark()`', () => {\n+  jest.useFakeTimers({doNotFake: ['performance']});\n+\n+  expect(window.performance.mark).toBe(mockPerformanceMark);\n+});\n+```"},{"sha":"dd05871f8ae6007979388bee8f07abaccb2df0c9","filename":"e2e/__tests__/__snapshots__/showConfig.test.ts.snap","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2F__tests__%2F__snapshots__%2FshowConfig.test.ts.snap","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2F__tests__%2F__snapshots__%2FshowConfig.test.ts.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2F__snapshots__%2FshowConfig.test.ts.snap?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -16,6 +16,9 @@ exports[`--showConfig outputs config info and exits 1`] = `\n       \"detectOpenHandles\": false,\n       \"errorOnDeprecated\": false,\n       \"extensionsToTreatAsEsm\": [],\n+      \"fakeTimers\": {\n+        \"enableGlobally\": false\n+      },\n       \"forceCoverageMatch\": [],\n       \"globals\": {},\n       \"haste\": {\n@@ -68,7 +71,6 @@ exports[`--showConfig outputs config info and exits 1`] = `\n       ],\n       \"testRegex\": [],\n       \"testRunner\": \"<<REPLACED_JEST_PACKAGES_DIR>>/jest-circus/runner.js\",\n-      \"timers\": \"real\",\n       \"transform\": [\n         [\n           \"\\\\\\\\.[jt]sx?$\","},{"sha":"4adefe0f056ca3016e0bfc9a040e1639c3a18900","filename":"e2e/__tests__/fakeTimers.test.ts","status":"modified","additions":26,"deletions":6,"changes":32,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2F__tests__%2FfakeTimers.test.ts","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2F__tests__%2FfakeTimers.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2FfakeTimers.test.ts?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -19,13 +19,24 @@ describe('useFakeTimers', () => {\n     const result = runJest('fake-timers/use-fake-timers');\n     expect(result.exitCode).toBe(0);\n   });\n-});\n \n-describe('requestAnimationFrame', () => {\n-  test('fakes requestAnimationFrame', () => {\n-    const result = runJest('fake-timers/request-animation-frame');\n+  test('allows to pass advanceTimers option', () => {\n+    const result = runJest('fake-timers/advance-timers');\n+    expect(result.exitCode).toBe(0);\n+  });\n \n-    expect(result.stderr).toMatch('requestAnimationFrame test');\n+  test('allows to pass doNotFake option', () => {\n+    const result = runJest('fake-timers/do-not-fake');\n+    expect(result.exitCode).toBe(0);\n+  });\n+\n+  test('allows to pass timerLimit option', () => {\n+    const result = runJest('fake-timers/timer-limit');\n+    expect(result.exitCode).toBe(0);\n+  });\n+\n+  test('allows clearing not faked timers', () => {\n+    const result = runJest('fake-timers/clear-real-timers');\n     expect(result.exitCode).toBe(0);\n   });\n });\n@@ -39,10 +50,19 @@ describe('setImmediate', () => {\n   });\n });\n \n+describe('requestAnimationFrame', () => {\n+  test('fakes requestAnimationFrame', () => {\n+    const result = runJest('fake-timers/request-animation-frame');\n+\n+    expect(result.stderr).toMatch('requestAnimationFrame test');\n+    expect(result.exitCode).toBe(0);\n+  });\n+});\n+\n describe('useRealTimers', () => {\n   test('restores timers to the native implementation', () => {\n     const result = runJest('fake-timers/use-real-timers');\n-    expect(result.stdout).toMatch('API is not mocked with fake timers.');\n+    expect(result.stdout).toMatch('APIs are not replaced with fake timers.');\n     expect(result.exitCode).toBe(0);\n   });\n });"},{"sha":"52571da9d4d0b77ac63738bd8723442557940439","filename":"e2e/__tests__/fakeTimersLegacy.test.ts","status":"modified","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2F__tests__%2FfakeTimersLegacy.test.ts","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2F__tests__%2FfakeTimersLegacy.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2FfakeTimersLegacy.test.ts?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -8,15 +8,22 @@\n import runJest from '../runJest';\n \n describe('enableGlobally', () => {\n-  test('enables fake timers from Jest config', () => {\n+  test('enables legacy fake timers from Jest config', () => {\n     const result = runJest('fake-timers-legacy/enable-globally');\n     expect(result.exitCode).toBe(0);\n   });\n });\n \n+describe('legacyFakeTimers', () => {\n+  test('toggles legacy fake timers from Jest config', () => {\n+    const result = runJest('fake-timers-legacy/enable-legacy-fake-timers');\n+    expect(result.exitCode).toBe(0);\n+  });\n+});\n+\n describe('useFakeTimers', () => {\n-  test('enables fake timers from Jest object', () => {\n-    const result = runJest('fake-timers-legacy/use-fake-timers');\n+  test('enables legacy fake timers from Jest object', () => {\n+    const result = runJest('fake-timers-legacy/use-legacy-fake-timers');\n     expect(result.exitCode).toBe(0);\n   });\n });\n@@ -42,7 +49,7 @@ describe('setImmediate', () => {\n describe('useRealTimers', () => {\n   test('restores timers to the native implementation', () => {\n     const result = runJest('fake-timers-legacy/use-real-timers');\n-    expect(result.stdout).toMatch('API is not mocked with fake timers.');\n+    expect(result.stdout).toMatch('APIs are not mocked with fake timers.');\n     expect(result.exitCode).toBe(0);\n   });\n });"},{"sha":"b873db8ccbb8777b34919e35b1c53b6b7b74369b","filename":"e2e/fake-promises/asap/package.json","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-promises%2Fasap%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-promises%2Fasap%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-promises%2Fasap%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -1,9 +1,10 @@\n {\n   \"jest\": {\n-    \"timers\": \"fake\",\n+    \"fakeTimers\": {\n+      \"enableGlobally\": true\n+    },\n     \"setupFiles\": [\n       \"<rootDir>/fake-promises\"\n-    ],\n-    \"testEnvironment\": \"node\"\n+    ]\n   }\n }"},{"sha":"b873db8ccbb8777b34919e35b1c53b6b7b74369b","filename":"e2e/fake-promises/immediate/package.json","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-promises%2Fimmediate%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-promises%2Fimmediate%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-promises%2Fimmediate%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -1,9 +1,10 @@\n {\n   \"jest\": {\n-    \"timers\": \"fake\",\n+    \"fakeTimers\": {\n+      \"enableGlobally\": true\n+    },\n     \"setupFiles\": [\n       \"<rootDir>/fake-promises\"\n-    ],\n-    \"testEnvironment\": \"node\"\n+    ]\n   }\n }"},{"sha":"674b8cb3810c1ae4899986b6d2ff40380485d582","filename":"e2e/fake-timers-legacy/enable-globally/__tests__/enableGlobally.test.js","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fenable-globally%2F__tests__%2FenableGlobally.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fenable-globally%2F__tests__%2FenableGlobally.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Fenable-globally%2F__tests__%2FenableGlobally.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -9,12 +9,6 @@\n \n test('getRealSystemTime', () => {\n   expect(() => jest.getRealSystemTime()).toThrow(\n-    'getRealSystemTime is not available when not using modern timers',\n-  );\n-});\n-\n-test('setSystemTime', () => {\n-  expect(() => jest.setSystemTime(0)).toThrow(\n-    'setSystemTime is not available when not using modern timers',\n+    '`jest.getRealSystemTime()` is not available when using legacy fake timers.',\n   );\n });"},{"sha":"3cd8baba562399d19e3f91bdae32566312402ce8","filename":"e2e/fake-timers-legacy/enable-globally/package.json","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fenable-globally%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fenable-globally%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Fenable-globally%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -1,6 +1,9 @@\n {\n   \"name\": \"enable-globally-legacy\",\n   \"jest\": {\n-    \"timers\": \"legacy\"\n+    \"fakeTimers\": {\n+      \"enableGlobally\": true,\n+      \"legacyFakeTimers\": true\n+    }\n   }\n }"},{"sha":"c781899e02dc2a3712eca46e0448957164b641a4","filename":"e2e/fake-timers-legacy/enable-legacy-fake-timers/__tests__/legacyFakeTimers.test.js","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fenable-legacy-fake-timers%2F__tests__%2FlegacyFakeTimers.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fenable-legacy-fake-timers%2F__tests__%2FlegacyFakeTimers.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Fenable-legacy-fake-timers%2F__tests__%2FlegacyFakeTimers.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+test('fake timers', () => {\n+  jest.useFakeTimers();\n+  const f = jest.fn();\n+  setTimeout(f, 0);\n+  jest.runAllTimers();\n+  expect(f).toHaveBeenCalledTimes(1);\n+});\n+\n+test('getRealSystemTime', () => {\n+  expect(() => jest.getRealSystemTime()).toThrow(\n+    '`jest.getRealSystemTime()` is not available when using legacy fake timers.',\n+  );\n+});\n+\n+test('setSystemTime', () => {\n+  expect(() => jest.setSystemTime(0)).toThrow(\n+    '`jest.setSystemTime()` is not available when using legacy fake timers.',\n+  );\n+});"},{"sha":"9935c2240d2359120c56c53d7ff466c60e429256","filename":"e2e/fake-timers-legacy/enable-legacy-fake-timers/package.json","status":"added","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fenable-legacy-fake-timers%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fenable-legacy-fake-timers%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Fenable-legacy-fake-timers%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,8 @@\n+{\n+  \"name\": \"enable-legacy-fake-timers\",\n+  \"jest\": {\n+    \"fakeTimers\": {\n+      \"legacyFakeTimers\": true\n+    }\n+  }\n+}"},{"sha":"0dd9668303eaa3ae5f9335b17f26e940ae6005b4","filename":"e2e/fake-timers-legacy/request-animation-frame/__tests__/requestAnimationFrame.test.js","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Frequest-animation-frame%2F__tests__%2FrequestAnimationFrame.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Frequest-animation-frame%2F__tests__%2FrequestAnimationFrame.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Frequest-animation-frame%2F__tests__%2FrequestAnimationFrame.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -10,7 +10,10 @@\n 'use strict';\n \n test('requestAnimationFrame test', () => {\n-  jest.useFakeTimers('legacy');\n+  jest.useFakeTimers({\n+    legacyFakeTimers: true,\n+  });\n+\n   let frameTimestamp = -1;\n   requestAnimationFrame(timestamp => {\n     frameTimestamp = timestamp;"},{"sha":"9859a3b1aacb079b6843a36e38e352234c1ffee5","filename":"e2e/fake-timers-legacy/reset-all-mocks/package.json","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Freset-all-mocks%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Freset-all-mocks%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Freset-all-mocks%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -1,7 +1,9 @@\n {\n   \"name\": \"reset-all-mocks\",\n   \"jest\": {\n-    \"resetMocks\": false,\n-    \"timers\": \"legacy\"\n+    \"fakeTimers\": {\n+      \"legacyFakeTimers\": true\n+    },\n+    \"resetMocks\": false\n   }\n }"},{"sha":"05d594015029d10bb78a8239227772f1e1d0618a","filename":"e2e/fake-timers-legacy/reset-mocks/__tests__/resetMocks.test.js","status":"renamed","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Freset-mocks%2F__tests__%2FresetMocks.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Freset-mocks%2F__tests__%2FresetMocks.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Freset-mocks%2F__tests__%2FresetMocks.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -8,7 +8,6 @@\n 'use strict';\n \n test('works when resetMocks is set in Jest config', () => {\n-  jest.useFakeTimers();\n   const f = jest.fn();\n   setTimeout(f, 0);\n   jest.runAllTimers();","previous_filename":"e2e/fake-timers-legacy/reset-mocks/__tests__/resetMock.test.js"},{"sha":"d999103bf1d16dd2cd6dd57528d5e3d70b9b7773","filename":"e2e/fake-timers-legacy/reset-mocks/package.json","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Freset-mocks%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Freset-mocks%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Freset-mocks%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -1,7 +1,10 @@\n {\n   \"name\": \"reset-mocks\",\n   \"jest\": {\n-    \"resetMocks\": true,\n-    \"timers\": \"legacy\"\n+    \"fakeTimers\": {\n+      \"enableGlobally\": true,\n+      \"legacyFakeTimers\": true\n+    },\n+    \"resetMocks\": true\n   }\n }"},{"sha":"d9c70d1fd4e5555adf7497fd3078123f7e08f8f2","filename":"e2e/fake-timers-legacy/set-immediate/package.json","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fset-immediate%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fset-immediate%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Fset-immediate%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -1,6 +1,9 @@\n {\n   \"name\": \"set-immediate-legacy\",\n   \"jest\": {\n-    \"timers\": \"legacy\"\n+    \"fakeTimers\": {\n+      \"enableGlobally\": true,\n+      \"legacyFakeTimers\": true\n+    }\n   }\n }"},{"sha":"843dace7b7af5473a644d59d1898348ffa3f42fe","filename":"e2e/fake-timers-legacy/use-fake-timers/__tests__/useFakeTimers.test.js","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fuse-fake-timers%2F__tests__%2FuseFakeTimers.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fuse-fake-timers%2F__tests__%2FuseFakeTimers.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Fuse-fake-timers%2F__tests__%2FuseFakeTimers.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -8,9 +8,11 @@\n 'use strict';\n \n test('fake timers', () => {\n-  jest.useFakeTimers('legacy');\n+  jest.useFakeTimers({\n+    legacyFakeTimers: true,\n+  });\n \n   expect(() => jest.setSystemTime(0)).toThrow(\n-    'setSystemTime is not available when not using modern timers',\n+    '`jest.setSystemTime()` is not available when using legacy fake timers.',\n   );\n });"},{"sha":"843dace7b7af5473a644d59d1898348ffa3f42fe","filename":"e2e/fake-timers-legacy/use-legacy-fake-timers/__tests__/useFakeTimers.test.js","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fuse-legacy-fake-timers%2F__tests__%2FuseFakeTimers.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fuse-legacy-fake-timers%2F__tests__%2FuseFakeTimers.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Fuse-legacy-fake-timers%2F__tests__%2FuseFakeTimers.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,18 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+test('fake timers', () => {\n+  jest.useFakeTimers({\n+    legacyFakeTimers: true,\n+  });\n+\n+  expect(() => jest.setSystemTime(0)).toThrow(\n+    '`jest.setSystemTime()` is not available when using legacy fake timers.',\n+  );\n+});"},{"sha":"2223ef48942570b53c5a0c7a10af9e2f2e54fc7f","filename":"e2e/fake-timers-legacy/use-legacy-fake-timers/package.json","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fuse-legacy-fake-timers%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fuse-legacy-fake-timers%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Fuse-legacy-fake-timers%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,3 @@\n+{\n+  \"name\": \"use-legacy-fake-timers\"\n+}"},{"sha":"9f83a4f4086f918be9c46adce7cdbc7b03b3a59e","filename":"e2e/fake-timers-legacy/use-real-timers/package.json","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fuse-real-timers%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers-legacy%2Fuse-real-timers%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers-legacy%2Fuse-real-timers%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -1,6 +1,9 @@\n {\n   \"name\": \"use-real-timers-legacy\",\n   \"jest\": {\n-    \"timers\": \"legacy\"\n+    \"fakeTimers\": {\n+      \"enableGlobally\": true,\n+      \"legacyFakeTimers\": true\n+    }\n   }\n }"},{"sha":"c62b7cda72603847b91bff51eb84057d04178429","filename":"e2e/fake-timers/advance-timers/__tests__/advanceTimers.test.js","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fadvance-timers%2F__tests__%2FadvanceTimers.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fadvance-timers%2F__tests__%2FadvanceTimers.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers%2Fadvance-timers%2F__tests__%2FadvanceTimers.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+test('advances timers if true is passed', done => {\n+  jest.useFakeTimers({advanceTimers: true});\n+\n+  const start = Date.now();\n+\n+  setTimeout(() => {\n+    done();\n+    expect(Date.now() - start).toEqual(45);\n+  }, 45);\n+});\n+\n+test('advances timers if a number is passed', done => {\n+  jest.useFakeTimers({advanceTimers: 40});\n+\n+  const start = Date.now();\n+\n+  setTimeout(() => {\n+    done();\n+    expect(Date.now() - start).toEqual(35);\n+  }, 35);\n+});\n+\n+test('works with `now` option', done => {\n+  jest.useFakeTimers({advanceTimers: 30, now: new Date('2015-09-25')});\n+\n+  expect(Date.now()).toEqual(1443139200000);\n+\n+  const start = Date.now();\n+\n+  setTimeout(() => {\n+    done();\n+    expect(Date.now() - start).toEqual(25);\n+  }, 25);\n+});"},{"sha":"19979034fc882aa095f132e675709c9b97b0a67e","filename":"e2e/fake-timers/advance-timers/package.json","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fadvance-timers%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fadvance-timers%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers%2Fadvance-timers%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,3 @@\n+{\n+  \"name\": \"advance-timers\"\n+}"},{"sha":"0e5ebdc640a0f6ec3894b2d6c799edc5d58cc5eb","filename":"e2e/fake-timers/clear-real-timers/__tests__/clearRealTimers.test.js","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fclear-real-timers%2F__tests__%2FclearRealTimers.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fclear-real-timers%2F__tests__%2FclearRealTimers.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers%2Fclear-real-timers%2F__tests__%2FclearRealTimers.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,18 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+test('allows clearing not faked timers', () => {\n+  const timer = setTimeout(() => {\n+    throw new Error('Should not throw');\n+  }, 1000);\n+\n+  jest.useFakeTimers();\n+\n+  clearTimeout(timer);\n+});"},{"sha":"7c7d151e8229c7536152f791093dc891222b212d","filename":"e2e/fake-timers/clear-real-timers/package.json","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fclear-real-timers%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fclear-real-timers%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers%2Fclear-real-timers%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,3 @@\n+{\n+  \"name\": \"clear-real-timers\"\n+}"},{"sha":"8d4f5f149a7807b57dac14fb4f33cd4c2b758922","filename":"e2e/fake-timers/do-not-fake/__tests__/doNotFake.test.js","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fdo-not-fake%2F__tests__%2FdoNotFake.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fdo-not-fake%2F__tests__%2FdoNotFake.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers%2Fdo-not-fake%2F__tests__%2FdoNotFake.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+/* global window */\n+\n+'use strict';\n+\n+const mockPerformanceMark = jest.fn();\n+window.performance.mark = mockPerformanceMark;\n+\n+test('fakes all APIs', () => {\n+  jest.useFakeTimers();\n+\n+  expect(window.performance.mark).toBeUndefined();\n+});\n+\n+test('does not fake `performance` instance', () => {\n+  jest.useFakeTimers({doNotFake: ['performance']});\n+\n+  expect(window.performance.mark).toBe(mockPerformanceMark);\n+});"},{"sha":"eed48bf98af207bb3dea589746fdee40968aa7db","filename":"e2e/fake-timers/do-not-fake/package.json","status":"added","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fdo-not-fake%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fdo-not-fake%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers%2Fdo-not-fake%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -0,0 +1,6 @@\n+{\n+  \"name\": \"do-not-fake\",\n+  \"jest\": {\n+    \"testEnvironment\": \"jsdom\"\n+  }\n+}"},{"sha":"d5dbdc8878bdaaa7df16a9de12ff758adfb15392","filename":"e2e/fake-timers/enable-globally/__tests__/enableGlobally.test.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fenable-globally%2F__tests__%2FenableGlobally.test.js","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fenable-globally%2F__tests__%2FenableGlobally.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers%2Fenable-globally%2F__tests__%2FenableGlobally.test.js?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -29,6 +29,6 @@ test('fake timers with Date argument', () => {\n \n test('runAllImmediates', () => {\n   expect(() => jest.runAllImmediates()).toThrow(\n-    'runAllImmediates is not available when using modern timers',\n+    '`jest.runAllImmediates()` is only available when using legacy fake timers.',\n   );\n });"},{"sha":"8d75224d03c317f545aad123af43a0d3ff719669","filename":"e2e/fake-timers/enable-globally/package.json","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fenable-globally%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/e9e5cfa29c56ac2a3578550ad266f3c07467c920/e2e%2Ffake-timers%2Fenable-globally%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Ffake-timers%2Fenable-globally%2Fpackage.json?ref=e9e5cfa29c56ac2a3578550ad266f3c07467c920","patch":"@@ -1,6 +1,8 @@\n {\n   \"name\": \"enable-globally\",\n   \"jest\": {\n-    \"timers\": \"modern\"\n+    \"fakeTimers\": {\n+      \"enableGlobally\": true\n+    }\n   }\n }"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/12122","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/12122/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/12122/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/12122/events","html_url":"https://github.com/facebook/jest/pull/12122","id":1071403544,"node_id":"PR_kwDOAOXXVc4vZpRz","number":12122,"title":"fix(babel-jest): add `process.version` chunk to the cache key","user":{"login":"mrazauskas","id":72159681,"node_id":"MDQ6VXNlcjcyMTU5Njgx","avatar_url":"https://avatars.githubusercontent.com/u/72159681?v=4","gravatar_id":"","url":"https://api.github.com/users/mrazauskas","html_url":"https://github.com/mrazauskas","followers_url":"https://api.github.com/users/mrazauskas/followers","following_url":"https://api.github.com/users/mrazauskas/following{/other_user}","gists_url":"https://api.github.com/users/mrazauskas/gists{/gist_id}","starred_url":"https://api.github.com/users/mrazauskas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrazauskas/subscriptions","organizations_url":"https://api.github.com/users/mrazauskas/orgs","repos_url":"https://api.github.com/users/mrazauskas/repos","events_url":"https://api.github.com/users/mrazauskas/events{/privacy}","received_events_url":"https://api.github.com/users/mrazauskas/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-12-05T08:40:57Z","updated_at":"2022-01-05T00:05:22Z","closed_at":"2021-12-05T10:06:52Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/12122","html_url":"https://github.com/facebook/jest/pull/12122","diff_url":"https://github.com/facebook/jest/pull/12122.diff","patch_url":"https://github.com/facebook/jest/pull/12122.patch","merged_at":"2021-12-05T10:06:51Z"},"body":"Fixes #12117\r\n\r\n## Summary\r\n\r\nAs it is pointed out in the issue, currently `babel-jest` does not invalided Jest’s cache in case if users downgrade (or upgrade) Node’s version. (`jest --clear-cache` should be used.)\r\n\r\nSeems like it may be a good idea to add `process.version` as one of cache key chunks. Should the string include only major / minor or full version? Looking at other chunks of the cache key, I went for full version. Not sure if this can be an issue for performance?\r\n\r\n## Test plan\r\n\r\nI added a simple unit for `getCacheKey` function.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/12122/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/12122/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"a4a738d87dae37a8eb292ab30d9b81ff5d1e1ed7","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/d3b85e35595e2020b05f6934380c2e106ca47e8a/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/d3b85e35595e2020b05f6934380c2e106ca47e8a/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=d3b85e35595e2020b05f6934380c2e106ca47e8a","patch":"@@ -4,6 +4,8 @@\n \n ### Fixes\n \n+- `[babel-jest]` Add `process.version` chunk to the cache key ([#12122](https://github.com/facebook/jest/pull/12122))\n+\n ### Chore & Maintenance\n \n ### Performance"},{"sha":"63e38cff3cb333f3b6bb4b93a6fe086407cfc3b6","filename":"packages/babel-jest/src/__tests__/getCacheKey.test.ts","status":"added","additions":211,"deletions":0,"changes":211,"blob_url":"https://github.com/facebook/jest/blob/d3b85e35595e2020b05f6934380c2e106ca47e8a/packages%2Fbabel-jest%2Fsrc%2F__tests__%2FgetCacheKey.test.ts","raw_url":"https://github.com/facebook/jest/raw/d3b85e35595e2020b05f6934380c2e106ca47e8a/packages%2Fbabel-jest%2Fsrc%2F__tests__%2FgetCacheKey.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fbabel-jest%2Fsrc%2F__tests__%2FgetCacheKey.test.ts?ref=d3b85e35595e2020b05f6934380c2e106ca47e8a","patch":"@@ -0,0 +1,211 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+import type {TransformOptions as BabelTransformOptions} from '@babel/core';\n+import type {TransformOptions as JestTransformOptions} from '@jest/transform';\n+import babelJest from '../index';\n+\n+const processVersion = process.version;\n+const nodeEnv = process.env.NODE_ENV;\n+const babelEnv = process.env.BABEL_ENV;\n+\n+afterEach(() => {\n+  jest.resetModules();\n+\n+  if (process.version === 'new-node-version') {\n+    process.version = processVersion;\n+  }\n+\n+  if (process.env.NODE_ENV === 'NEW_NODE_ENV') {\n+    process.env.NODE_ENV = nodeEnv;\n+  }\n+\n+  if (process.env.BABEL_ENV === 'NEW_BABEL_ENV') {\n+    process.env.BABEL_ENV = babelEnv;\n+  }\n+});\n+\n+describe('getCacheKey', () => {\n+  const sourceText = 'mock source';\n+  const sourcePath = 'mock-source-path.js';\n+\n+  const transformOptions = {\n+    config: {rootDir: 'mock-root-dir'},\n+    configString: 'mock-config-string',\n+    instrument: true,\n+  } as JestTransformOptions;\n+\n+  const oldCacheKey = babelJest.getCacheKey(\n+    sourceText,\n+    sourcePath,\n+    transformOptions,\n+  );\n+\n+  test('returns cache key hash', () => {\n+    expect(oldCacheKey.length).toEqual(32);\n+  });\n+\n+  test('if `THIS_FILE` value is changing', () => {\n+    jest.doMock('graceful-fs', () => ({\n+      readFileSync: () => 'new this file',\n+    }));\n+\n+    const {default: babelJest}: typeof import('../index') = require('../index');\n+\n+    const newCacheKey = babelJest.getCacheKey(\n+      sourceText,\n+      sourcePath,\n+      transformOptions,\n+    );\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if `babelOptions.options` value is changing', () => {\n+    jest.doMock('../loadBabelConfig', () => {\n+      const babel: typeof import('@babel/core') = require('@babel/core');\n+\n+      return {\n+        loadPartialConfig: (options: BabelTransformOptions) => ({\n+          ...babel.loadPartialConfig(options),\n+          options: 'new-options',\n+        }),\n+      };\n+    });\n+\n+    const {default: babelJest}: typeof import('../index') = require('../index');\n+\n+    const newCacheKey = babelJest.getCacheKey(\n+      sourceText,\n+      sourcePath,\n+      transformOptions,\n+    );\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if `sourceText` value is changing', () => {\n+    const newCacheKey = babelJest.getCacheKey(\n+      'new source text',\n+      sourcePath,\n+      transformOptions,\n+    );\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if `sourcePath` value is changing', () => {\n+    const newCacheKey = babelJest.getCacheKey(\n+      sourceText,\n+      'new-source-path.js',\n+      transformOptions,\n+    );\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if `configString` value is changing', () => {\n+    const newCacheKey = babelJest.getCacheKey(sourceText, sourcePath, {\n+      ...transformOptions,\n+      configString: 'new-config-string',\n+    });\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if `babelOptions.config` value is changing', () => {\n+    jest.doMock('../loadBabelConfig', () => {\n+      const babel: typeof import('@babel/core') = require('@babel/core');\n+\n+      return {\n+        loadPartialConfig: (options: BabelTransformOptions) => ({\n+          ...babel.loadPartialConfig(options),\n+          config: 'new-config',\n+        }),\n+      };\n+    });\n+\n+    const {default: babelJest}: typeof import('../index') = require('../index');\n+\n+    const newCacheKey = babelJest.getCacheKey(\n+      sourceText,\n+      sourcePath,\n+      transformOptions,\n+    );\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if `babelOptions.babelrc` value is changing', () => {\n+    jest.doMock('../loadBabelConfig', () => {\n+      const babel: typeof import('@babel/core') = require('@babel/core');\n+\n+      return {\n+        loadPartialConfig: (options: BabelTransformOptions) => ({\n+          ...babel.loadPartialConfig(options),\n+          babelrc: 'new-babelrc',\n+        }),\n+      };\n+    });\n+\n+    const {default: babelJest}: typeof import('../index') = require('../index');\n+\n+    const newCacheKey = babelJest.getCacheKey(\n+      sourceText,\n+      sourcePath,\n+      transformOptions,\n+    );\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if `instrument` value is changing', () => {\n+    const newCacheKey = babelJest.getCacheKey(sourceText, sourcePath, {\n+      ...transformOptions,\n+      instrument: false,\n+    });\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if `process.env.NODE_ENV` value is changing', () => {\n+    process.env.NODE_ENV = 'NEW_NODE_ENV';\n+\n+    const newCacheKey = babelJest.getCacheKey(\n+      sourceText,\n+      sourcePath,\n+      transformOptions,\n+    );\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if `process.env.BABEL_ENV` value is changing', () => {\n+    process.env.BABEL_ENV = 'NEW_BABEL_ENV';\n+\n+    const newCacheKey = babelJest.getCacheKey(\n+      sourceText,\n+      sourcePath,\n+      transformOptions,\n+    );\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+\n+  test('if node version is changing', () => {\n+    delete process.version;\n+    process.version = 'new-node-version';\n+\n+    const newCacheKey = babelJest.getCacheKey(\n+      sourceText,\n+      sourcePath,\n+      transformOptions,\n+    );\n+\n+    expect(oldCacheKey).not.toEqual(newCacheKey);\n+  });\n+});"},{"sha":"9db0db4c54d76cd3cc353a4c07c1b7d2c48231d8","filename":"packages/babel-jest/src/index.ts","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/d3b85e35595e2020b05f6934380c2e106ca47e8a/packages%2Fbabel-jest%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/d3b85e35595e2020b05f6934380c2e106ca47e8a/packages%2Fbabel-jest%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fbabel-jest%2Fsrc%2Findex.ts?ref=d3b85e35595e2020b05f6934380c2e106ca47e8a","patch":"@@ -98,6 +98,8 @@ function getCacheKeyFromConfig(\n     .update(process.env.NODE_ENV || '')\n     .update('\\0', 'utf8')\n     .update(process.env.BABEL_ENV || '')\n+    .update('\\0', 'utf8')\n+    .update(process.version)\n     .digest('hex');\n }\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/11922","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/11922/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/11922/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/11922/events","html_url":"https://github.com/facebook/jest/pull/11922","id":1014038957,"node_id":"PR_kwDOAOXXVc4sl2Ct","number":11922,"title":"feat: warn when there are multiple configs","user":{"login":"JanKaifer","id":12820484,"node_id":"MDQ6VXNlcjEyODIwNDg0","avatar_url":"https://avatars.githubusercontent.com/u/12820484?v=4","gravatar_id":"","url":"https://api.github.com/users/JanKaifer","html_url":"https://github.com/JanKaifer","followers_url":"https://api.github.com/users/JanKaifer/followers","following_url":"https://api.github.com/users/JanKaifer/following{/other_user}","gists_url":"https://api.github.com/users/JanKaifer/gists{/gist_id}","starred_url":"https://api.github.com/users/JanKaifer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JanKaifer/subscriptions","organizations_url":"https://api.github.com/users/JanKaifer/orgs","repos_url":"https://api.github.com/users/JanKaifer/repos","events_url":"https://api.github.com/users/JanKaifer/events{/privacy}","received_events_url":"https://api.github.com/users/JanKaifer/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2021-10-02T12:43:03Z","updated_at":"2021-11-06T00:04:29Z","closed_at":"2021-10-06T11:08:53Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/11922","html_url":"https://github.com/facebook/jest/pull/11922","diff_url":"https://github.com/facebook/jest/pull/11922.diff","patch_url":"https://github.com/facebook/jest/pull/11922.patch","merged_at":"2021-10-06T11:08:52Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md at the root of the project if you have not done so. -->\r\n- [ ] - CHANGELOG.md is not updated yet, since this feature is not approved/finished and contains breaking changes.\r\n\r\n## Summary\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n`resolveConfigPath` throws when there are both `package.json`(with \"jest\") and `jest.config.ext` present in a single directory.\r\n\r\nFix https://github.com/facebook/jest/issues/10124\r\n\r\nThere are 2 stale PRs that I took inspiration from: https://github.com/facebook/jest/pull/10798 and https://github.com/facebook/jest/pull/10213\r\n\r\nIt is a breaking change (error, not a warning) as proposed by @SimenB here: https://github.com/facebook/jest/pull/10798#pullrequestreview-593655004\r\n\r\nCloses #10798\r\nCloses #10213\r\n\r\n## Test plan\r\n\r\nI wrote/updated unit tests that check the behavior.\r\n\r\n## Questions\r\n- Just wanted to make sure that I understood correctly that `package.json` needs to have `\"jest\"` key in order to be a valid jest config file.\r\n- I'm reading and parsing the whole `package.json` don't know if that could be a performance problem.\r\n- The `\"jest\"` is hardcoded in two places now: https://github.com/facebook/jest/blob/7109b8ccea2e0f70b6ad8eae02cd36b6c2841604/packages/jest-config/src/readConfigFileAndSetRootDir.ts#L58 . I'm not sure where to move it. \r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/11922/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/11922/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"a87c2630548d0e502910b35e16d4819fd8e981fb","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -2,6 +2,8 @@\n \n ### Features\n \n+- `[jest-config]` Warn when multiple Jest configs are located ([#11922](https://github.com/facebook/jest/pull/11922))\n+\n ### Fixes\n \n - `[expect]` Pass matcher context to asymmetric matchers ([#11926](https://github.com/facebook/jest/pull/11926) & [#11930](https://github.com/facebook/jest/pull/11930))"},{"sha":"e5b44d1a74ca04eb16195c82e101414587b6c552","filename":"e2e/Utils.ts","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2FUtils.ts","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2FUtils.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2FUtils.ts?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -176,20 +176,23 @@ interface JestPackageJson extends PackageJson {\n }\n \n const DEFAULT_PACKAGE_JSON: JestPackageJson = {\n-  description: 'THIS IS AN AUTOGENERATED FILE AND SHOULD NOT BE ADDED TO GIT',\n   jest: {\n     testEnvironment: 'node',\n   },\n };\n \n export const createEmptyPackage = (\n   directory: Config.Path,\n-  packageJson = DEFAULT_PACKAGE_JSON,\n+  packageJson: PackageJson = DEFAULT_PACKAGE_JSON,\n ) => {\n+  const packageJsonWithDefaults = {\n+    ...packageJson,\n+    description: 'THIS IS AN AUTOGENERATED FILE AND SHOULD NOT BE ADDED TO GIT',\n+  };\n   fs.mkdirSync(directory, {recursive: true});\n   fs.writeFileSync(\n     path.resolve(directory, 'package.json'),\n-    JSON.stringify(packageJson, null, 2),\n+    JSON.stringify(packageJsonWithDefaults, null, 2),\n   );\n };\n "},{"sha":"ae086ee790dbabd957fe9fbf383263758263a156","filename":"e2e/__tests__/__snapshots__/multipleConfigs.ts.snap","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2F__tests__%2F__snapshots__%2FmultipleConfigs.ts.snap","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2F__tests__%2F__snapshots__%2FmultipleConfigs.ts.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2F__snapshots__%2FmultipleConfigs.ts.snap?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,25 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`multiple configs will warn 1`] = `\n+● Multiple configurations found:\n+    * <rootDir>/e2e/multiple-configs/jest.config.js\n+    * <rootDir>/e2e/multiple-configs/jest.config.json\n+    * \\`jest\\` key in <rootDir>/e2e/multiple-configs/package.json\n+\n+  Implicit config resolution does not allow multiple configuration files.\n+  Either remove unused config files or select one explicitly with \\`--config\\`.\n+\n+  Configuration Documentation:\n+  https://jestjs.io/docs/configuration.html\n+\n+PASS Config from js file __tests__/test.js\n+  ✓ dummy test\n+`;\n+\n+exports[`multiple configs will warn 2`] = `\n+Test Suites: 1 passed, 1 total\n+Tests:       1 passed, 1 total\n+Snapshots:   0 total\n+Time:        <<REPLACED>>\n+Ran all test suites.\n+`;"},{"sha":"0efb17551a6f3dc2258c95bd73764a8f4a87d4b0","filename":"e2e/__tests__/configOverride.test.ts","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2F__tests__%2FconfigOverride.test.ts","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2F__tests__%2FconfigOverride.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2FconfigOverride.test.ts?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,24 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+import {getConfig} from '../runJest';\n+\n+test('reads config from cjs file', () => {\n+  const {configs} = getConfig(\n+    'config-override',\n+    ['--config', 'different-config.json'],\n+    {\n+      skipPkgJsonCheck: true,\n+    },\n+  );\n+\n+  expect(configs).toHaveLength(1);\n+  expect(configs[0].displayName).toEqual({\n+    color: 'white',\n+    name: 'Config from different-config.json file',\n+  });\n+});"},{"sha":"d6ea667631a144cf27ac2cc07522690e2d929ce3","filename":"e2e/__tests__/dependencyClash.test.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2F__tests__%2FdependencyClash.test.ts","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2F__tests__%2FdependencyClash.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2FdependencyClash.test.ts?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -18,7 +18,7 @@ const hasteImplModulePath = path\n \n beforeEach(() => {\n   cleanup(tempDir);\n-  createEmptyPackage(tempDir);\n+  createEmptyPackage(tempDir, {});\n });\n \n // This test case is checking that when having both"},{"sha":"305140510bc3235fa7a2f114c9d715de2d69b110","filename":"e2e/__tests__/multipleConfigs.ts","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2F__tests__%2FmultipleConfigs.ts","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2F__tests__%2FmultipleConfigs.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2FmultipleConfigs.ts?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,43 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+import * as path from 'path';\n+import {wrap} from 'jest-snapshot-serializer-raw';\n+import slash = require('slash');\n+import {extractSummary} from '../Utils';\n+import runJest from '../runJest';\n+\n+const MULTIPLE_CONFIGS_WARNING_TEXT = 'Multiple configurations found';\n+\n+test('multiple configs will warn', () => {\n+  const rootDir = slash(path.resolve(__dirname, '../..'));\n+  const {exitCode, stderr} = runJest('multiple-configs', [], {\n+    skipPkgJsonCheck: true,\n+  });\n+\n+  expect(exitCode).toBe(0);\n+  expect(stderr).toContain(MULTIPLE_CONFIGS_WARNING_TEXT);\n+\n+  const cleanStdErr = stderr.replace(new RegExp(rootDir, 'g'), '<rootDir>');\n+  const {rest, summary} = extractSummary(cleanStdErr);\n+\n+  expect(wrap(rest)).toMatchSnapshot();\n+  expect(wrap(summary)).toMatchSnapshot();\n+});\n+\n+test('multiple configs warning can be suppressed by using --config', () => {\n+  const {exitCode, stderr} = runJest(\n+    'multiple-configs',\n+    ['--config', 'jest.config.json'],\n+    {\n+      skipPkgJsonCheck: true,\n+    },\n+  );\n+\n+  expect(exitCode).toBe(0);\n+  expect(stderr).not.toContain(MULTIPLE_CONFIGS_WARNING_TEXT);\n+});"},{"sha":"2b4a7ced6f4527b0161e38341a1a329a0120e38a","filename":"e2e/config-override/__tests__/test.js","status":"added","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fconfig-override%2F__tests__%2Ftest.js","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fconfig-override%2F__tests__%2Ftest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fconfig-override%2F__tests__%2Ftest.js?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,10 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+test('dummy test', () => {\n+  expect(1).toBe(1);\n+});"},{"sha":"707a2314b2f17110c58ae41b84ab0c4e8549cf11","filename":"e2e/config-override/different-config.json","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fconfig-override%2Fdifferent-config.json","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fconfig-override%2Fdifferent-config.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fconfig-override%2Fdifferent-config.json?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,3 @@\n+{\n+  \"displayName\": \"Config from different-config.json file\"\n+}"},{"sha":"ac2653d362cbc33c2e82339ac0d93506835f20ad","filename":"e2e/config-override/jest.config.json","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fconfig-override%2Fjest.config.json","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fconfig-override%2Fjest.config.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fconfig-override%2Fjest.config.json?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,3 @@\n+{\n+  \"displayName\": \"Config from json file\"\n+}"},{"sha":"fecde46002985923868ff64e677b5c4ca09c6eca","filename":"e2e/config-override/package.json","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fconfig-override%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fconfig-override%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fconfig-override%2Fpackage.json?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,3 @@\n+{\n+  \"name\": \"config-override\"\n+}"},{"sha":"d9f70a793cd8c3a0e7d788ae2313d2cb08dac7ac","filename":"e2e/esm-config/cjs/package.json","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fesm-config%2Fcjs%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fesm-config%2Fcjs%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fesm-config%2Fcjs%2Fpackage.json?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -1,3 +1,3 @@\n {\n-  \"jest\": {}\n+  \"name\": \"cjs-config\"\n }"},{"sha":"e230b9436a743078dad2e09af12601f4b12eef69","filename":"e2e/esm-config/mjs/package.json","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fesm-config%2Fmjs%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fesm-config%2Fmjs%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fesm-config%2Fmjs%2Fpackage.json?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -1,3 +1,3 @@\n {\n-  \"jest\": {}\n+  \"name\": \"mjs-config\"\n }"},{"sha":"2b4a7ced6f4527b0161e38341a1a329a0120e38a","filename":"e2e/multiple-configs/__tests__/test.js","status":"added","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fmultiple-configs%2F__tests__%2Ftest.js","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fmultiple-configs%2F__tests__%2Ftest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fmultiple-configs%2F__tests__%2Ftest.js?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,10 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+test('dummy test', () => {\n+  expect(1).toBe(1);\n+});"},{"sha":"a2876a6ef5e6976305049e879d8916e54a016e88","filename":"e2e/multiple-configs/jest.config.js","status":"added","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fmultiple-configs%2Fjest.config.js","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fmultiple-configs%2Fjest.config.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fmultiple-configs%2Fjest.config.js?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,10 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+module.exports = {\n+  displayName: 'Config from js file',\n+};"},{"sha":"ac2653d362cbc33c2e82339ac0d93506835f20ad","filename":"e2e/multiple-configs/jest.config.json","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fmultiple-configs%2Fjest.config.json","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fmultiple-configs%2Fjest.config.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fmultiple-configs%2Fjest.config.json?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,3 @@\n+{\n+  \"displayName\": \"Config from json file\"\n+}"},{"sha":"46e3ee413cc7b167d0500f2236743e3b53c34a0b","filename":"e2e/multiple-configs/package.json","status":"added","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fmultiple-configs%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/e2e%2Fmultiple-configs%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2Fmultiple-configs%2Fpackage.json?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -0,0 +1,5 @@\n+{\n+  \"jest\": {\n+    \"displayName\": \"Config from package.json file\"\n+  }\n+}"},{"sha":"96db06c9213bae94836dff66d0cde129af2baf0f","filename":"packages/jest-config/src/__tests__/resolveConfigPath.test.ts","status":"modified","additions":86,"deletions":2,"changes":88,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/packages%2Fjest-config%2Fsrc%2F__tests__%2FresolveConfigPath.test.ts","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/packages%2Fjest-config%2Fsrc%2F__tests__%2FresolveConfigPath.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2F__tests__%2FresolveConfigPath.test.ts?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -14,6 +14,17 @@ import resolveConfigPath from '../resolveConfigPath';\n const DIR = path.resolve(tmpdir(), 'resolve_config_path_test');\n const ERROR_PATTERN = /Could not find a config file based on provided values/;\n const NO_ROOT_DIR_ERROR_PATTERN = /Can't find a root directory/;\n+const MULTIPLE_CONFIGS_ERROR_PATTERN = /Multiple configurations found/;\n+\n+const mockConsoleWarn = () => {\n+  jest.spyOn(console, 'warn');\n+  const mockedConsoleWarn = console.warn as jest.Mock<void, Array<any>>;\n+\n+  // We will mock console.warn because it would produce a lot of noise in the tests\n+  mockedConsoleWarn.mockImplementation(() => {});\n+\n+  return mockedConsoleWarn;\n+};\n \n beforeEach(() => cleanup(DIR));\n afterEach(() => cleanup(DIR));\n@@ -45,6 +56,8 @@ describe.each(JEST_CONFIG_EXT_ORDER.slice(0))(\n     });\n \n     test(`directory path with \"${extension}\"`, () => {\n+      const mockedConsoleWarn = mockConsoleWarn();\n+\n       const relativePackageJsonPath = 'a/b/c/package.json';\n       const absolutePackageJsonPath = path.resolve(\n         DIR,\n@@ -53,9 +66,9 @@ describe.each(JEST_CONFIG_EXT_ORDER.slice(0))(\n       const relativeJestConfigPath = `a/b/c/jest.config${extension}`;\n       const absoluteJestConfigPath = path.resolve(DIR, relativeJestConfigPath);\n \n+      // no configs yet. should throw\n       writeFiles(DIR, {[`a/b/c/some_random_file${extension}`]: ''});\n \n-      // no configs yet. should throw\n       expect(() =>\n         // absolute\n         resolveConfigPath(path.dirname(absoluteJestConfigPath), DIR),\n@@ -68,6 +81,7 @@ describe.each(JEST_CONFIG_EXT_ORDER.slice(0))(\n \n       writeFiles(DIR, {[relativePackageJsonPath]: ''});\n \n+      mockedConsoleWarn.mockClear();\n       // absolute\n       expect(\n         resolveConfigPath(path.dirname(absolutePackageJsonPath), DIR),\n@@ -77,20 +91,45 @@ describe.each(JEST_CONFIG_EXT_ORDER.slice(0))(\n       expect(\n         resolveConfigPath(path.dirname(relativePackageJsonPath), DIR),\n       ).toBe(absolutePackageJsonPath);\n+      expect(mockedConsoleWarn).not.toBeCalled();\n \n+      // jest.config.js takes precedence\n       writeFiles(DIR, {[relativeJestConfigPath]: ''});\n \n-      // jest.config.js takes precedence\n+      mockedConsoleWarn.mockClear();\n+      // absolute\n+      expect(\n+        resolveConfigPath(path.dirname(absolutePackageJsonPath), DIR),\n+      ).toBe(absoluteJestConfigPath);\n+\n+      // relative\n+      expect(\n+        resolveConfigPath(path.dirname(relativePackageJsonPath), DIR),\n+      ).toBe(absoluteJestConfigPath);\n+      expect(mockedConsoleWarn).not.toBeCalled();\n+\n+      // jest.config.js and package.json with 'jest' cannot be used together\n+      writeFiles(DIR, {[relativePackageJsonPath]: JSON.stringify({jest: {}})});\n \n       // absolute\n+      mockedConsoleWarn.mockClear();\n       expect(\n         resolveConfigPath(path.dirname(absolutePackageJsonPath), DIR),\n       ).toBe(absoluteJestConfigPath);\n+      expect(mockedConsoleWarn).toBeCalledTimes(1);\n+      expect(mockedConsoleWarn.mock.calls[0].join()).toMatch(\n+        MULTIPLE_CONFIGS_ERROR_PATTERN,\n+      );\n \n       // relative\n+      mockedConsoleWarn.mockClear();\n       expect(\n         resolveConfigPath(path.dirname(relativePackageJsonPath), DIR),\n       ).toBe(absoluteJestConfigPath);\n+      expect(mockedConsoleWarn).toBeCalledTimes(1);\n+      expect(mockedConsoleWarn.mock.calls[0].join()).toMatch(\n+        MULTIPLE_CONFIGS_ERROR_PATTERN,\n+      );\n \n       expect(() => {\n         resolveConfigPath(\n@@ -101,3 +140,48 @@ describe.each(JEST_CONFIG_EXT_ORDER.slice(0))(\n     });\n   },\n );\n+\n+const pickPairsWithSameOrder = <T>(array: ReadonlyArray<T>) =>\n+  array\n+    .map((value1, idx, arr) =>\n+      arr.slice(idx + 1).map(value2 => [value1, value2]),\n+    )\n+    // TODO: use .flat() when we drop Node 10\n+    .reduce((acc, val) => acc.concat(val), []);\n+\n+test('pickPairsWithSameOrder', () => {\n+  expect(pickPairsWithSameOrder([1, 2, 3])).toStrictEqual([\n+    [1, 2],\n+    [1, 3],\n+    [2, 3],\n+  ]);\n+});\n+\n+describe.each(pickPairsWithSameOrder(JEST_CONFIG_EXT_ORDER))(\n+  'Using multiple configs shows warning',\n+  (extension1, extension2) => {\n+    test(`Using jest.config${extension1} and jest.config${extension2} shows warning`, () => {\n+      const mockedConsoleWarn = mockConsoleWarn();\n+\n+      const relativeJestConfigPaths = [\n+        `a/b/c/jest.config${extension1}`,\n+        `a/b/c/jest.config${extension2}`,\n+      ];\n+\n+      writeFiles(DIR, {\n+        [relativeJestConfigPaths[0]]: '',\n+        [relativeJestConfigPaths[1]]: '',\n+      });\n+\n+      // multiple configs here, should print warning\n+      mockedConsoleWarn.mockClear();\n+      expect(\n+        resolveConfigPath(path.dirname(relativeJestConfigPaths[0]), DIR),\n+      ).toBe(path.resolve(DIR, relativeJestConfigPaths[0]));\n+      expect(mockedConsoleWarn).toBeCalledTimes(1);\n+      expect(mockedConsoleWarn.mock.calls[0].join()).toMatch(\n+        MULTIPLE_CONFIGS_ERROR_PATTERN,\n+      );\n+    });\n+  },\n+);"},{"sha":"f9b4c8456218c5af26aa8fd0000c4b376da58bb9","filename":"packages/jest-config/src/index.ts","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/packages%2Fjest-config%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/packages%2Fjest-config%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2Findex.ts?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -44,6 +44,7 @@ export async function readConfig(\n   skipArgvConfigOption?: boolean,\n   parentConfigDirname?: Config.Path | null,\n   projectIndex: number = Infinity,\n+  skipMultipleConfigWarning = false,\n ): Promise<ReadConfig> {\n   let rawOptions: Config.InitialOptions;\n   let configPath = null;\n@@ -77,11 +78,19 @@ export async function readConfig(\n     // A string passed to `--config`, which is either a direct path to the config\n     // or a path to directory containing `package.json`, `jest.config.js` or `jest.config.ts`\n   } else if (!skipArgvConfigOption && typeof argv.config == 'string') {\n-    configPath = resolveConfigPath(argv.config, process.cwd());\n+    configPath = resolveConfigPath(\n+      argv.config,\n+      process.cwd(),\n+      skipMultipleConfigWarning,\n+    );\n     rawOptions = await readConfigFileAndSetRootDir(configPath);\n   } else {\n     // Otherwise just try to find config in the current rootDir.\n-    configPath = resolveConfigPath(packageRootOrConfig, process.cwd());\n+    configPath = resolveConfigPath(\n+      packageRootOrConfig,\n+      process.cwd(),\n+      skipMultipleConfigWarning,\n+    );\n     rawOptions = await readConfigFileAndSetRootDir(configPath);\n   }\n \n@@ -332,6 +341,8 @@ export async function readConfigs(\n             skipArgvConfigOption,\n             configPath ? path.dirname(configPath) : cwd,\n             projectIndex,\n+            // we wanna skip the warning if this is the \"main\" project\n+            projectIsCwd,\n           );\n         }),\n     );"},{"sha":"0f1439197a3688d663e0131ee6820856f023f21e","filename":"packages/jest-config/src/resolveConfigPath.ts","status":"modified","additions":72,"deletions":9,"changes":81,"blob_url":"https://github.com/facebook/jest/blob/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/packages%2Fjest-config%2Fsrc%2FresolveConfigPath.ts","raw_url":"https://github.com/facebook/jest/raw/b57cbf5549f9ec26960afc75aa90b9a6a0619b26/packages%2Fjest-config%2Fsrc%2FresolveConfigPath.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FresolveConfigPath.ts?ref=b57cbf5549f9ec26960afc75aa90b9a6a0619b26","patch":"@@ -6,7 +6,9 @@\n  */\n \n import * as path from 'path';\n+import chalk = require('chalk');\n import * as fs from 'graceful-fs';\n+import slash = require('slash');\n import type {Config} from '@jest/types';\n import {\n   JEST_CONFIG_BASE_NAME,\n@@ -19,7 +21,11 @@ const isFile = (filePath: Config.Path) =>\n \n const getConfigFilename = (ext: string) => JEST_CONFIG_BASE_NAME + ext;\n \n-export default (pathToResolve: Config.Path, cwd: Config.Path): Config.Path => {\n+export default (\n+  pathToResolve: Config.Path,\n+  cwd: Config.Path,\n+  skipMultipleConfigWarning = false,\n+): Config.Path => {\n   if (!path.isAbsolute(cwd)) {\n     throw new Error(`\"cwd\" must be an absolute path. cwd: ${cwd}`);\n   }\n@@ -49,24 +55,35 @@ export default (pathToResolve: Config.Path, cwd: Config.Path): Config.Path => {\n     );\n   }\n \n-  return resolveConfigPathByTraversing(absolutePath, pathToResolve, cwd);\n+  return resolveConfigPathByTraversing(\n+    absolutePath,\n+    pathToResolve,\n+    cwd,\n+    skipMultipleConfigWarning,\n+  );\n };\n \n const resolveConfigPathByTraversing = (\n   pathToResolve: Config.Path,\n   initialPath: Config.Path,\n   cwd: Config.Path,\n+  skipMultipleConfigWarning: boolean,\n ): Config.Path => {\n-  const jestConfig = JEST_CONFIG_EXT_ORDER.map(ext =>\n+  const configFiles = JEST_CONFIG_EXT_ORDER.map(ext =>\n     path.resolve(pathToResolve, getConfigFilename(ext)),\n-  ).find(isFile);\n-  if (jestConfig) {\n-    return jestConfig;\n+  ).filter(isFile);\n+\n+  const packageJson = findPackageJson(pathToResolve);\n+  if (packageJson && hasPackageJsonJestKey(packageJson)) {\n+    configFiles.push(packageJson);\n+  }\n+\n+  if (!skipMultipleConfigWarning && configFiles.length > 1) {\n+    console.warn(makeMultipleConfigsWarning(configFiles));\n   }\n \n-  const packageJson = path.resolve(pathToResolve, PACKAGE_JSON);\n-  if (isFile(packageJson)) {\n-    return packageJson;\n+  if (configFiles.length > 0 || packageJson) {\n+    return configFiles[0] ?? packageJson;\n   }\n \n   // This is the system root.\n@@ -80,9 +97,29 @@ const resolveConfigPathByTraversing = (\n     path.dirname(pathToResolve),\n     initialPath,\n     cwd,\n+    skipMultipleConfigWarning,\n   );\n };\n \n+const findPackageJson = (pathToResolve: Config.Path) => {\n+  const packagePath = path.resolve(pathToResolve, PACKAGE_JSON);\n+  if (isFile(packagePath)) {\n+    return packagePath;\n+  }\n+\n+  return undefined;\n+};\n+\n+const hasPackageJsonJestKey = (packagePath: Config.Path) => {\n+  const content = fs.readFileSync(packagePath, 'utf8');\n+  try {\n+    return 'jest' in JSON.parse(content);\n+  } catch {\n+    // If package is not a valid JSON\n+    return false;\n+  }\n+};\n+\n const makeResolutionErrorMessage = (\n   initialPath: Config.Path,\n   cwd: Config.Path,\n@@ -95,3 +132,29 @@ const makeResolutionErrorMessage = (\n   `traverse directory tree up, until it finds one of those files in exact order: ${JEST_CONFIG_EXT_ORDER.map(\n     ext => `\"${getConfigFilename(ext)}\"`,\n   ).join(' or ')}.`;\n+\n+function extraIfPackageJson(configPath: Config.Path) {\n+  if (configPath.endsWith(PACKAGE_JSON)) {\n+    return '`jest` key in ';\n+  }\n+\n+  return '';\n+}\n+\n+const makeMultipleConfigsWarning = (configPaths: Array<Config.Path>) =>\n+  chalk.yellow(\n+    [\n+      chalk.bold('\\u25cf Multiple configurations found:'),\n+      ...configPaths.map(\n+        configPath =>\n+          `    * ${extraIfPackageJson(configPath)}${slash(configPath)}`,\n+      ),\n+      '',\n+      '  Implicit config resolution does not allow multiple configuration files.',\n+      '  Either remove unused config files or select one explicitly with `--config`.',\n+      '',\n+      '  Configuration Documentation:',\n+      '  https://jestjs.io/docs/configuration.html',\n+      '',\n+    ].join('\\n'),\n+  );"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8183","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8183/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8183/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8183/events","html_url":"https://github.com/facebook/jest/pull/8183","id":423577753,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYzMTIwNDg2","number":8183,"title":"jest-resolve 18% performance optimization","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-03-21T05:30:48Z","updated_at":"2021-05-11T21:07:15Z","closed_at":"2019-03-21T16:13:48Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8183","html_url":"https://github.com/facebook/jest/pull/8183","diff_url":"https://github.com/facebook/jest/pull/8183.diff","patch_url":"https://github.com/facebook/jest/pull/8183.patch","merged_at":"2019-03-21T16:13:48Z"},"body":"## Summary\r\n\r\n`jest-resolve` is called heavily by `jest-resolve-dependencies` when finding related tests. Benchmarking the simple change from `Object` to `Map` for the internal cache shows an 18% improvement in the total run time of `dependencyResolver.resolveInverse` for a test data set of 300k~ files, although obviously the performance characteristics are going to vary depending on the data set.\r\n\r\nAt Facebook, this PR means when I run just Jest to look at my changed files and run the appropriate tests, it boots up 2 seconds faster.\r\n\r\n## Test plan\r\n\r\n- All tests pass. New tests not appropriate for this simple change.\r\n- Tested manually.\r\n- Benchmarked to ensure performance improvement.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8183/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"50ca2d37dda1533268956a3acbcfcc2f39755bbd","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/3cff75c6a4762c076e3fc70f5c064485d7a83465/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/3cff75c6a4762c076e3fc70f5c064485d7a83465/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=3cff75c6a4762c076e3fc70f5c064485d7a83465","patch":"@@ -34,6 +34,7 @@\n \n - `[jest-haste-map]` Optimize haste map data structure for serialization/deserialization ([#8171](https://github.com/facebook/jest/pull/8171))\n - `[jest-haste-map]` Avoid persisting haste map or processing files when not changed ([#8153](https://github.com/facebook/jest/pull/8153))\n+- `[jest-resolve]` Optimize internal cache lookup performance ([#8183](https://github.com/facebook/jest/pull/8183))\n \n ## 24.5.0\n "},{"sha":"5d1dc26353f5bc95dc2783249b58344821e86023","filename":"e2e/__tests__/__snapshots__/moduleNameMapper.test.ts.snap","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/3cff75c6a4762c076e3fc70f5c064485d7a83465/e2e%2F__tests__%2F__snapshots__%2FmoduleNameMapper.test.ts.snap","raw_url":"https://github.com/facebook/jest/raw/3cff75c6a4762c076e3fc70f5c064485d7a83465/e2e%2F__tests__%2F__snapshots__%2FmoduleNameMapper.test.ts.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2F__snapshots__%2FmoduleNameMapper.test.ts.snap?ref=3cff75c6a4762c076e3fc70f5c064485d7a83465","patch":"@@ -30,6 +30,6 @@ FAIL __tests__/index.js\n       12 | module.exports = () => 'test';\n       13 | \n \n-      at createNoMappedModuleFoundError (../../packages/jest-resolve/build/index.js:455:17)\n+      at createNoMappedModuleFoundError (../../packages/jest-resolve/build/index.js:474:17)\n       at Object.require (index.js:10:1)\n `;"},{"sha":"73905d202b50f8f6f1dc777a58c1132de65368d8","filename":"e2e/__tests__/__snapshots__/resolveNoFileExtensions.test.ts.snap","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/3cff75c6a4762c076e3fc70f5c064485d7a83465/e2e%2F__tests__%2F__snapshots__%2FresolveNoFileExtensions.test.ts.snap","raw_url":"https://github.com/facebook/jest/raw/3cff75c6a4762c076e3fc70f5c064485d7a83465/e2e%2F__tests__%2F__snapshots__%2FresolveNoFileExtensions.test.ts.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2F__snapshots__%2FresolveNoFileExtensions.test.ts.snap?ref=3cff75c6a4762c076e3fc70f5c064485d7a83465","patch":"@@ -33,6 +33,6 @@ FAIL __tests__/test.js\n         |                  ^\n       4 | \n \n-      at Resolver.resolveModule (../../packages/jest-resolve/build/index.js:222:17)\n+      at Resolver.resolveModule (../../packages/jest-resolve/build/index.js:232:17)\n       at Object.require (index.js:3:18)\n `;"},{"sha":"f64be27244d27f1c00a1f46ddb4f2eebb1b23944","filename":"packages/jest-resolve/src/index.ts","status":"modified","additions":34,"deletions":24,"changes":58,"blob_url":"https://github.com/facebook/jest/blob/3cff75c6a4762c076e3fc70f5c064485d7a83465/packages%2Fjest-resolve%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/3cff75c6a4762c076e3fc70f5c064485d7a83465/packages%2Fjest-resolve%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve%2Fsrc%2Findex.ts?ref=3cff75c6a4762c076e3fc70f5c064485d7a83465","patch":"@@ -50,9 +50,9 @@ const nodePaths = process.env.NODE_PATH\n class Resolver {\n   private readonly _options: ResolverConfig;\n   private readonly _moduleMap: ModuleMap;\n-  private readonly _moduleIDCache: {[key: string]: string};\n-  private readonly _moduleNameCache: {[name: string]: Config.Path};\n-  private readonly _modulePathCache: {[path: string]: Array<Config.Path>};\n+  private readonly _moduleIDCache: Map<string, string>;\n+  private readonly _moduleNameCache: Map<string, Config.Path>;\n+  private readonly _modulePathCache: Map<string, Array<Config.Path>>;\n   private readonly _supportsNativePlatform: boolean;\n \n   constructor(moduleMap: ModuleMap, options: ResolverConfig) {\n@@ -73,9 +73,9 @@ class Resolver {\n       ? options.platforms.includes(NATIVE_PLATFORM)\n       : false;\n     this._moduleMap = moduleMap;\n-    this._moduleIDCache = Object.create(null);\n-    this._moduleNameCache = Object.create(null);\n-    this._modulePathCache = Object.create(null);\n+    this._moduleIDCache = new Map();\n+    this._moduleNameCache = new Map();\n+    this._modulePathCache = new Map();\n   }\n \n   static findNodeModule(\n@@ -127,14 +127,16 @@ class Resolver {\n \n     // 1. If we have already resolved this module for this directory name,\n     // return a value from the cache.\n-    if (this._moduleNameCache[key]) {\n-      return this._moduleNameCache[key];\n+    const cacheResult = this._moduleNameCache.get(key);\n+    if (cacheResult) {\n+      return cacheResult;\n     }\n \n     // 2. Check if the module is a haste module.\n     module = this.getModule(moduleName);\n     if (module) {\n-      return (this._moduleNameCache[key] = module);\n+      this._moduleNameCache.set(key, module);\n+      return module;\n     }\n \n     // 3. Check if the module is a node module and resolve it based on\n@@ -161,7 +163,8 @@ class Resolver {\n       module = resolveNodeModule(moduleName);\n \n       if (module) {\n-        return (this._moduleNameCache[key] = module);\n+        this._moduleNameCache.set(key, module);\n+        return module;\n       }\n     }\n \n@@ -177,8 +180,10 @@ class Resolver {\n         );\n         // try resolving with custom resolver first to support extensions,\n         // then fallback to require.resolve\n-        return (this._moduleNameCache[key] =\n-          resolveNodeModule(module) || require.resolve(module));\n+        const resolvedModule =\n+          resolveNodeModule(module) || require.resolve(module);\n+        this._moduleNameCache.set(key, resolvedModule);\n+        return resolvedModule;\n       } catch (ignoredError) {}\n     }\n \n@@ -250,16 +255,19 @@ class Resolver {\n   }\n \n   getModulePaths(from: Config.Path): Array<Config.Path> {\n-    if (!this._modulePathCache[from]) {\n-      const moduleDirectory = this._options.moduleDirectories;\n-      const paths = nodeModulesPaths(from, {moduleDirectory});\n-      if (paths[paths.length - 1] === undefined) {\n-        // circumvent node-resolve bug that adds `undefined` as last item.\n-        paths.pop();\n-      }\n-      this._modulePathCache[from] = paths;\n+    const cachedModule = this._modulePathCache.get(from);\n+    if (cachedModule) {\n+      return cachedModule;\n+    }\n+\n+    const moduleDirectory = this._options.moduleDirectories;\n+    const paths = nodeModulesPaths(from, {moduleDirectory});\n+    if (paths[paths.length - 1] === undefined) {\n+      // circumvent node-resolve bug that adds `undefined` as last item.\n+      paths.pop();\n     }\n-    return this._modulePathCache[from];\n+    this._modulePathCache.set(from, paths);\n+    return paths;\n   }\n \n   getModuleID(\n@@ -270,8 +278,9 @@ class Resolver {\n     const moduleName = _moduleName || '';\n \n     const key = from + path.delimiter + moduleName;\n-    if (this._moduleIDCache[key]) {\n-      return this._moduleIDCache[key];\n+    const cachedModuleID = this._moduleIDCache.get(key);\n+    if (cachedModuleID) {\n+      return cachedModuleID;\n     }\n \n     const moduleType = this._getModuleType(moduleName);\n@@ -285,7 +294,8 @@ class Resolver {\n       (absolutePath ? absolutePath + sep : '') +\n       (mockPath ? mockPath + sep : '');\n \n-    return (this._moduleIDCache[key] = id);\n+    this._moduleIDCache.set(key, id);\n+    return id;\n   }\n \n   private _getModuleType(moduleName: string): 'node' | 'user' {"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8201","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8201/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8201/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8201/events","html_url":"https://github.com/facebook/jest/pull/8201","id":424587889,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYzODg5MDI2","number":8201,"title":"Dramatically improve watch mode performance.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2019-03-24T08:24:56Z","updated_at":"2021-05-11T21:07:12Z","closed_at":"2019-03-24T21:57:03Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8201","html_url":"https://github.com/facebook/jest/pull/8201","diff_url":"https://github.com/facebook/jest/pull/8201.diff","patch_url":"https://github.com/facebook/jest/pull/8201.patch","merged_at":"2019-03-24T21:57:03Z"},"body":"## Summary\r\n\r\nResolves #7341 \r\n\r\nThis PR dramatically improves watch mode performance, bringing it in line with single run mode performance. It accomplishes that by:\r\n- Workers previously initialized a new `ModuleMap` and `Resolver` for every test in watch mode. Now, those objects are only initialized once when the worker is setup.\r\n- In the main thread, caching the conversion of `ModuleMap` to a JSON-friendly object.\r\n\r\n## Benchmarks\r\n\r\nI benchmarked against Jest's own test suite, excluding e2e tests which don't provide good signal because they individually take a long time (so startup time for the test is marginalized). The numbers show that running in Watch mode previously added an extra 35%~ of runtime to the tests but that has now been reduced to almost nothing.\r\n\r\nWatch mode should now just be paying a one-time initial cost for each worker when the haste map changes instead of paying that same cost for _every_ test run.\r\n\r\n### branch: master\r\n\r\n`yarn jest ./packages`\r\nRun time: 15.091s\r\n\r\n`yarn jest ./packages --watch`\r\nRun time: 23.234s\r\n\r\n### branch: watch-performance\r\n\r\n`yarn jest ./packages`\r\nRun time: 14.973s\r\n\r\n`yarn jest ./packages --watch`\r\nRun time: 15.196s\r\n\r\n\r\n## Test plan\r\n\r\n- All tests pass.\r\n- Benchmarked to verify the performance wins.\r\n- Verified that when the haste map is updated, the update is propagated out to all workers.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8201/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8201/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"126eb8bdcbe3a77cf4de7c01389f5a063faba612","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -36,6 +36,7 @@\n - `[jest-haste-map]` Avoid persisting haste map or processing files when not changed ([#8153](https://github.com/facebook/jest/pull/8153))\n - `[jest-core]` Improve performance of SearchSource.findMatchingTests by 15% ([#8184](https://github.com/facebook/jest/pull/8184))\n - `[jest-resolve]` Optimize internal cache lookup performance ([#8183](https://github.com/facebook/jest/pull/8183))\n+- `[jest-core]` Dramatically improve watch mode performance ([#8201](https://github.com/facebook/jest/pull/8201))\n \n ## 24.5.0\n "},{"sha":"a4a92a4191318a62f95ec4ee5e076b51babdb281","filename":"packages/jest-config/src/__tests__/getMaxWorkers.test.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-config%2Fsrc%2F__tests__%2FgetMaxWorkers.test.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-config%2Fsrc%2F__tests__%2FgetMaxWorkers.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2F__tests__%2FgetMaxWorkers.test.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -32,7 +32,7 @@ describe('getMaxWorkers', () => {\n \n   it('Returns based on the number of cpus', () => {\n     expect(getMaxWorkers({})).toBe(3);\n-    expect(getMaxWorkers({watch: true})).toBe(2);\n+    expect(getMaxWorkers({watch: true})).toBe(3);\n   });\n \n   describe('% based', () => {"},{"sha":"edf67a5de5d7f53a05e67da8bec175b43115c80b","filename":"packages/jest-config/src/getMaxWorkers.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-config%2Fsrc%2FgetMaxWorkers.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-config%2Fsrc%2FgetMaxWorkers.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FgetMaxWorkers.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -32,6 +32,6 @@ export default function getMaxWorkers(\n     return parsed > 0 ? parsed : 1;\n   } else {\n     const cpus = os.cpus() ? os.cpus().length : 1;\n-    return Math.max(argv.watch ? Math.floor(cpus / 2) : cpus - 1, 1);\n+    return Math.max(cpus - 1, 1);\n   }\n }"},{"sha":"73390e1050926a946dc7c0025faa2d7ddbbc2cc9","filename":"packages/jest-haste-map/src/ModuleMap.ts","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -32,8 +32,9 @@ export type SerializableModuleMap = {\n };\n \n export default class ModuleMap {\n-  private readonly _raw: RawModuleMap;\n   static DuplicateHasteCandidatesError: typeof DuplicateHasteCandidatesError;\n+  private readonly _raw: RawModuleMap;\n+  private json: SerializableModuleMap | undefined;\n \n   constructor(raw: RawModuleMap) {\n     this._raw = raw;\n@@ -84,12 +85,15 @@ export default class ModuleMap {\n   }\n \n   toJSON(): SerializableModuleMap {\n-    return {\n-      duplicates: Array.from(this._raw.duplicates),\n-      map: Array.from(this._raw.map),\n-      mocks: Array.from(this._raw.mocks),\n-      rootDir: this._raw.rootDir,\n-    };\n+    if (!this.json) {\n+      this.json = {\n+        duplicates: Array.from(this._raw.duplicates),\n+        map: Array.from(this._raw.map),\n+        mocks: Array.from(this._raw.mocks),\n+        rootDir: this._raw.rootDir,\n+      };\n+    }\n+    return this.json;\n   }\n \n   static fromJSON(serializableModuleMap: SerializableModuleMap) {"},{"sha":"18a1333137c7169b4b0692473f22ebae62ce6995","filename":"packages/jest-runner/src/__tests__/testRunner.test.js","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -51,7 +51,6 @@ test('injects the serializable module map into each worker in watch mode', () =>\n             context: runContext,\n             globalConfig,\n             path: './file.test.js',\n-            serializableModuleMap,\n           },\n         ],\n         [\n@@ -60,7 +59,6 @@ test('injects the serializable module map into each worker in watch mode', () =>\n             context: runContext,\n             globalConfig,\n             path: './file2.test.js',\n-            serializableModuleMap,\n           },\n         ],\n       ]);\n@@ -90,7 +88,6 @@ test('does not inject the serializable module map in serial mode', () => {\n             context: runContext,\n             globalConfig,\n             path: './file.test.js',\n-            serializableModuleMap: null,\n           },\n         ],\n         [\n@@ -99,7 +96,6 @@ test('does not inject the serializable module map in serial mode', () => {\n             context: runContext,\n             globalConfig,\n             path: './file2.test.js',\n-            serializableModuleMap: null,\n           },\n         ],\n       ]);"},{"sha":"10712b94af9e964ca17b19ebb7da64d8cb36ea24","filename":"packages/jest-runner/src/index.ts","status":"modified","additions":21,"deletions":4,"changes":25,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2Findex.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -11,7 +11,7 @@ import exit from 'exit';\n import throat from 'throat';\n import Worker from 'jest-worker';\n import runTest from './runTest';\n-import {worker} from './testWorker';\n+import {worker, SerializableResolver} from './testWorker';\n import {\n   OnTestFailure,\n   OnTestStart,\n@@ -103,11 +103,31 @@ class TestRunner {\n     onResult: OnTestSuccess,\n     onFailure: OnTestFailure,\n   ) {\n+    let resolvers: Map<string, SerializableResolver> | undefined = undefined;\n+    if (watcher.isWatchMode()) {\n+      resolvers = new Map();\n+      for (const test of tests) {\n+        if (!resolvers.has(test.context.config.name)) {\n+          resolvers.set(test.context.config.name, {\n+            config: test.context.config,\n+            serializableModuleMap: test.context.moduleMap.toJSON(),\n+          });\n+        }\n+      }\n+    }\n+\n     const worker = new Worker(TEST_WORKER_PATH, {\n       exposedMethods: ['worker'],\n       forkOptions: {stdio: 'pipe'},\n       maxRetries: 3,\n       numWorkers: this._globalConfig.maxWorkers,\n+      setupArgs: resolvers\n+        ? [\n+            {\n+              serializableResolvers: Array.from(resolvers.values()),\n+            },\n+          ]\n+        : undefined,\n     }) as WorkerInterface;\n \n     if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n@@ -135,9 +155,6 @@ class TestRunner {\n           },\n           globalConfig: this._globalConfig,\n           path: test.path,\n-          serializableModuleMap: watcher.isWatchMode()\n-            ? test.context.moduleMap.toJSON()\n-            : null,\n         });\n       });\n "},{"sha":"a2b5edb0fa6d10bda5443b977eb92efc173c27f2","filename":"packages/jest-runner/src/testWorker.ts","status":"modified","additions":36,"deletions":26,"changes":62,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -8,18 +8,23 @@\n \n import {Config} from '@jest/types';\n import {SerializableError, TestResult} from '@jest/test-result';\n-import HasteMap, {SerializableModuleMap, ModuleMap} from 'jest-haste-map';\n+import HasteMap, {ModuleMap, SerializableModuleMap} from 'jest-haste-map';\n import exit from 'exit';\n import {separateMessageFromStack} from 'jest-message-util';\n import Runtime from 'jest-runtime';\n+import Resolver from 'jest-resolve';\n import {ErrorWithCode, TestRunnerSerializedContext} from './types';\n import runTest from './runTest';\n \n+export type SerializableResolver = {\n+  config: Config.ProjectConfig;\n+  serializableModuleMap: SerializableModuleMap;\n+};\n+\n type WorkerData = {\n   config: Config.ProjectConfig;\n   globalConfig: Config.GlobalConfig;\n   path: Config.Path;\n-  serializableModuleMap: SerializableModuleMap | null;\n   context?: TestRunnerSerializedContext;\n };\n \n@@ -47,45 +52,50 @@ const formatError = (error: string | ErrorWithCode): SerializableError => {\n   };\n };\n \n-const resolvers = Object.create(null);\n-const getResolver = (\n-  config: Config.ProjectConfig,\n-  moduleMap: ModuleMap | null,\n-) => {\n-  // In watch mode, the raw module map with all haste modules is passed from\n-  // the test runner to the watch command. This is because jest-haste-map's\n-  // watch mode does not persist the haste map on disk after every file change.\n-  // To make this fast and consistent, we pass it from the TestRunner.\n-  if (moduleMap) {\n-    return Runtime.createResolver(config, moduleMap);\n-  } else {\n-    const name = config.name;\n-    if (!resolvers[name]) {\n-      resolvers[name] = Runtime.createResolver(\n+const resolvers = new Map<string, Resolver>();\n+const getResolver = (config: Config.ProjectConfig, moduleMap?: ModuleMap) => {\n+  const name = config.name;\n+  if (moduleMap || !resolvers.has(name)) {\n+    resolvers.set(\n+      name,\n+      Runtime.createResolver(\n         config,\n-        Runtime.createHasteMap(config).readModuleMap(),\n-      );\n-    }\n-    return resolvers[name];\n+        moduleMap || Runtime.createHasteMap(config).readModuleMap(),\n+      ),\n+    );\n   }\n+  return resolvers.get(name)!;\n };\n \n+export function setup(setupData?: {\n+  serializableResolvers: Array<SerializableResolver>;\n+}) {\n+  // Setup data is only used in watch mode to pass the latest version of all\n+  // module maps that will be used during the test runs. Otherwise, module maps\n+  // are loaded from disk as needed.\n+  if (setupData) {\n+    for (const {\n+      config,\n+      serializableModuleMap,\n+    } of setupData.serializableResolvers) {\n+      const moduleMap = HasteMap.ModuleMap.fromJSON(serializableModuleMap);\n+      getResolver(config, moduleMap);\n+    }\n+  }\n+}\n+\n export async function worker({\n   config,\n   globalConfig,\n   path,\n-  serializableModuleMap,\n   context,\n }: WorkerData): Promise<TestResult> {\n   try {\n-    const moduleMap = serializableModuleMap\n-      ? HasteMap.ModuleMap.fromJSON(serializableModuleMap)\n-      : null;\n     return await runTest(\n       path,\n       globalConfig,\n       config,\n-      getResolver(config, moduleMap),\n+      getResolver(config),\n       context && {\n         ...context,\n         changedFiles: context.changedFiles && new Set(context.changedFiles),"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8232","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8232/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8232/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8232/events","html_url":"https://github.com/facebook/jest/pull/8232","id":426754435,"node_id":"MDExOlB1bGxSZXF1ZXN0MjY1NTQwOTQ4","number":8232,"title":"Performance: use Map for jest-runtime module registry.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-03-28T23:50:20Z","updated_at":"2021-05-11T20:07:04Z","closed_at":"2019-03-29T15:44:10Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8232","html_url":"https://github.com/facebook/jest/pull/8232","diff_url":"https://github.com/facebook/jest/pull/8232.diff","patch_url":"https://github.com/facebook/jest/pull/8232.patch","merged_at":"2019-03-29T15:44:10Z"},"body":"## Summary\r\n\r\nQuick benchmark of getting `Map` vs `Object` for string keys of various lengths on Node v11:\r\n```\r\n  get object key x   278 ops/sec ±2.28% (85 runs sampled)\r\n  get map key    x 1,716 ops/sec ±1.35% (93 runs sampled)\r\n```\r\n\r\n## Test plan\r\n\r\n- All tests pass.\r\n- Tested against FB's test suite.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8232/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8232/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"6740ed4a563dbef2b96c5e425786ad9f94e3056c","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/a46eb83c32cd49187deac04ff6ff124390f4e450/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/a46eb83c32cd49187deac04ff6ff124390f4e450/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=a46eb83c32cd49187deac04ff6ff124390f4e450","patch":"@@ -46,6 +46,7 @@\n - `[jest-core]` Improve performance of SearchSource.findMatchingTests by 15% ([#8184](https://github.com/facebook/jest/pull/8184))\n - `[jest-resolve]` Optimize internal cache lookup performance ([#8183](https://github.com/facebook/jest/pull/8183))\n - `[jest-core]` Dramatically improve watch mode performance ([#8201](https://github.com/facebook/jest/pull/8201))\n+- `[jest-runtime]` Use `Map` instead of `Object` for module registry ([#8232](https://github.com/facebook/jest/pull/8232))\n \n ## 24.5.0\n "},{"sha":"cd3b13be7026d872108c3f47472c048e10afd300","filename":"packages/jest-runtime/src/__tests__/runtime_require_module.test.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/a46eb83c32cd49187deac04ff6ff124390f4e450/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Fruntime_require_module.test.js","raw_url":"https://github.com/facebook/jest/raw/a46eb83c32cd49187deac04ff6ff124390f4e450/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Fruntime_require_module.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Fruntime_require_module.test.js?ref=a46eb83c32cd49187deac04ff6ff124390f4e450","patch":"@@ -132,7 +132,7 @@ describe('Runtime requireModule', () => {\n   });\n   it('provides `require.main` to modules', () =>\n     createRuntime(__filename).then(runtime => {\n-      runtime._moduleRegistry[__filename] = module;\n+      runtime._moduleRegistry.set(__filename, module);\n       [\n         './test_root/modules_with_main/export_main.js',\n         './test_root/modules_with_main/re_export_main.js',"},{"sha":"86e7115f9860da50f95978b5c4b1573d30e0e603","filename":"packages/jest-runtime/src/index.ts","status":"modified","additions":57,"deletions":45,"changes":102,"blob_url":"https://github.com/facebook/jest/blob/a46eb83c32cd49187deac04ff6ff124390f4e450/packages%2Fjest-runtime%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/a46eb83c32cd49187deac04ff6ff124390f4e450/packages%2Fjest-runtime%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Findex.ts?ref=a46eb83c32cd49187deac04ff6ff124390f4e450","patch":"@@ -47,7 +47,7 @@ type InternalModuleOptions = {\n \n type InitialModule = Partial<Module> &\n   Pick<Module, 'children' | 'exports' | 'filename' | 'id' | 'loaded'>;\n-type ModuleRegistry = {[key: string]: InitialModule | Module};\n+type ModuleRegistry = Map<string, InitialModule | Module>;\n type ResolveOptions = Parameters<typeof require.resolve>[1];\n \n type BooleanObject = {[key: string]: boolean};\n@@ -93,8 +93,8 @@ class Runtime {\n   private _mockMetaDataCache: {\n     [key: string]: MockFunctionMetadata<unknown, Array<unknown>>;\n   };\n-  private _mockRegistry: {[key: string]: any};\n-  private _isolatedMockRegistry: {[key: string]: any} | null;\n+  private _mockRegistry: Map<string, any>;\n+  private _isolatedMockRegistry: Map<string, any> | null;\n   private _moduleMocker: typeof jestMock;\n   private _isolatedModuleRegistry: ModuleRegistry | null;\n   private _moduleRegistry: ModuleRegistry;\n@@ -127,15 +127,15 @@ class Runtime {\n     this._currentlyExecutingModulePath = '';\n     this._environment = environment;\n     this._explicitShouldMock = Object.create(null);\n-    this._internalModuleRegistry = Object.create(null);\n+    this._internalModuleRegistry = new Map();\n     this._isCurrentlyExecutingManualMock = null;\n     this._mockFactories = Object.create(null);\n-    this._mockRegistry = Object.create(null);\n+    this._mockRegistry = new Map();\n     // during setup, this cannot be null (and it's fine to explode if it is)\n     this._moduleMocker = this._environment.moduleMocker!;\n     this._isolatedModuleRegistry = null;\n     this._isolatedMockRegistry = null;\n-    this._moduleRegistry = Object.create(null);\n+    this._moduleRegistry = new Map();\n     this._needsCoverageMapped = new Set();\n     this._resolver = resolver;\n     this._scriptTransformer = new ScriptTransformer(config);\n@@ -291,7 +291,7 @@ class Runtime {\n       from,\n       moduleName,\n     );\n-    let modulePath;\n+    let modulePath: string | undefined;\n \n     // Some old tests rely on this mocking behavior. Ideally we'll change this\n     // to be more explicit.\n@@ -320,7 +320,10 @@ class Runtime {\n     let moduleRegistry;\n \n     if (!options || !options.isInternalModule) {\n-      if (this._moduleRegistry[modulePath] || !this._isolatedModuleRegistry) {\n+      if (\n+        this._moduleRegistry.get(modulePath) ||\n+        !this._isolatedModuleRegistry\n+      ) {\n         moduleRegistry = this._moduleRegistry;\n       } else {\n         moduleRegistry = this._isolatedModuleRegistry;\n@@ -329,29 +332,33 @@ class Runtime {\n       moduleRegistry = this._internalModuleRegistry;\n     }\n \n-    if (!moduleRegistry[modulePath]) {\n-      // We must register the pre-allocated module object first so that any\n-      // circular dependencies that may arise while evaluating the module can\n-      // be satisfied.\n-      const localModule: InitialModule = {\n-        children: [],\n-        exports: {},\n-        filename: modulePath,\n-        id: modulePath,\n-        loaded: false,\n-      };\n-      moduleRegistry[modulePath] = localModule;\n-\n-      this._loadModule(\n-        localModule,\n-        from,\n-        moduleName,\n-        modulePath,\n-        options,\n-        moduleRegistry,\n-      );\n+    const module = moduleRegistry.get(modulePath);\n+    if (module) {\n+      return module.exports;\n     }\n-    return moduleRegistry[modulePath].exports;\n+\n+    // We must register the pre-allocated module object first so that any\n+    // circular dependencies that may arise while evaluating the module can\n+    // be satisfied.\n+    const localModule: InitialModule = {\n+      children: [],\n+      exports: {},\n+      filename: modulePath,\n+      id: modulePath,\n+      loaded: false,\n+    };\n+    moduleRegistry.set(modulePath, localModule);\n+\n+    this._loadModule(\n+      localModule,\n+      from,\n+      moduleName,\n+      modulePath,\n+      options,\n+      moduleRegistry,\n+    );\n+\n+    return localModule.exports;\n   }\n \n   requireInternalModule(from: Config.Path, to?: string) {\n@@ -369,16 +376,21 @@ class Runtime {\n       moduleName,\n     );\n \n-    if (this._isolatedMockRegistry && this._isolatedMockRegistry[moduleID]) {\n-      return this._isolatedMockRegistry[moduleID];\n-    } else if (this._mockRegistry[moduleID]) {\n-      return this._mockRegistry[moduleID];\n+    if (\n+      this._isolatedMockRegistry &&\n+      this._isolatedMockRegistry.get(moduleID)\n+    ) {\n+      return this._isolatedMockRegistry.get(moduleID);\n+    } else if (this._mockRegistry.get(moduleID)) {\n+      return this._mockRegistry.get(moduleID);\n     }\n \n     const mockRegistry = this._isolatedMockRegistry || this._mockRegistry;\n \n     if (moduleID in this._mockFactories) {\n-      return (mockRegistry[moduleID] = this._mockFactories[moduleID]());\n+      const module = this._mockFactories[moduleID]();\n+      mockRegistry.set(moduleID, module);\n+      return module;\n     }\n \n     const manualMockOrStub = this._resolver.getMockModule(from, moduleName);\n@@ -435,13 +447,13 @@ class Runtime {\n         mockRegistry,\n       );\n \n-      mockRegistry[moduleID] = localModule.exports;\n+      mockRegistry.set(moduleID, localModule.exports);\n     } else {\n       // Look for a real module to generate an automock from\n-      mockRegistry[moduleID] = this._generateMock(from, moduleName);\n+      mockRegistry.set(moduleID, this._generateMock(from, moduleName));\n     }\n \n-    return mockRegistry[moduleID];\n+    return mockRegistry.get(moduleID);\n   }\n \n   private _loadModule(\n@@ -495,8 +507,8 @@ class Runtime {\n         'isolateModules cannot be nested inside another isolateModules.',\n       );\n     }\n-    this._isolatedModuleRegistry = Object.create(null);\n-    this._isolatedMockRegistry = Object.create(null);\n+    this._isolatedModuleRegistry = new Map();\n+    this._isolatedMockRegistry = new Map();\n     fn();\n     this._isolatedModuleRegistry = null;\n     this._isolatedMockRegistry = null;\n@@ -505,8 +517,8 @@ class Runtime {\n   resetModules() {\n     this._isolatedModuleRegistry = null;\n     this._isolatedMockRegistry = null;\n-    this._mockRegistry = Object.create(null);\n-    this._moduleRegistry = Object.create(null);\n+    this._mockRegistry = new Map();\n+    this._moduleRegistry = new Map();\n \n     if (this._environment) {\n       if (this._environment.global) {\n@@ -678,7 +690,7 @@ class Runtime {\n       enumerable: true,\n       get() {\n         const key = from || '';\n-        return moduleRegistry[key] || null;\n+        return moduleRegistry.get(key) || null;\n       },\n     });\n \n@@ -770,8 +782,8 @@ class Runtime {\n       // mocked has calls into side-effectful APIs on another module.\n       const origMockRegistry = this._mockRegistry;\n       const origModuleRegistry = this._moduleRegistry;\n-      this._mockRegistry = Object.create(null);\n-      this._moduleRegistry = Object.create(null);\n+      this._mockRegistry = new Map();\n+      this._moduleRegistry = new Map();\n \n       const moduleExports = this.requireModule(from, moduleName);\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8056","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8056/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8056/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8056/events","html_url":"https://github.com/facebook/jest/pull/8056","id":417578520,"node_id":"MDExOlB1bGxSZXF1ZXN0MjU4NTQ1NjY2","number":8056,"title":"Optimize haste map tracking of deleted files with Watchman.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2019-03-06T01:23:45Z","updated_at":"2021-05-11T23:06:45Z","closed_at":"2019-03-06T18:48:27Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8056","html_url":"https://github.com/facebook/jest/pull/8056","diff_url":"https://github.com/facebook/jest/pull/8056.diff","patch_url":"https://github.com/facebook/jest/pull/8056.patch","merged_at":"2019-03-06T18:48:27Z"},"body":"## Summary\r\n\r\nThis is a minor PR to improve the performance of tracking deleted files by taking advantage of Watchman when available.\r\n\r\nCurrently, deleted files are tracked within jest-haste-map by:\r\n1. Making a shallow copy of the Haste Map files before building the file map.\r\n2. Filtering the shallow copy against the generated file map to remove all files that still exist.\r\n\r\nBenchmarking this operation against a large locally-generated test Haste Map of 300k~ files with one deletion, the operation currently takes about 150ms on my machine and grows linearly with more files tracked. Using Watchman makes it almost free and only grows with the number of files changed.\r\n\r\nI've updated the non-Watchman implementation to also track deleted files within the crawler to keep the interface consistent, although that update is neutral on performance.\r\n\r\n## Test plan\r\n\r\n- Benchmarked the performance to ensure what looked like a performance gain was one in practice.\r\n- Tested manually with and without Watchman to ensure deleted files were being picked up as expected.\r\n- Added tests for tracking deleted files with Watchman crawler when fresh and when not fresh.\r\n- Added tests for tracking deleted file with Node crawler.\r\n- Updated all related tests.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8056/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8056/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"746190c9c92b7c19024deefac130d2e692987aac","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -94,6 +94,8 @@\n \n ### Performance\n \n+- `[jest-haste-map]` Optimize haste map tracking of deleted files with Watchman. ([#8056](https://github.com/facebook/jest/pull/8056))\n+\n ## 24.1.0\n \n ### Features"},{"sha":"03b74317a210cdfb673fcd131d038bd74f2cc604","filename":"packages/jest-haste-map/src/__tests__/index.test.js","status":"modified","additions":24,"deletions":7,"changes":31,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -40,6 +40,7 @@ jest.mock('../crawlers/watchman', () =>\n \n     const {data, ignore, rootDir, roots, computeSha1} = options;\n     const list = mockChangedFiles || mockFs;\n+    const removedFiles = new Map();\n \n     data.clocks = mockClocks;\n \n@@ -51,12 +52,19 @@ jest.mock('../crawlers/watchman', () =>\n \n           data.files.set(relativeFilePath, ['', 32, 42, 0, [], hash]);\n         } else {\n-          data.files.delete(relativeFilePath);\n+          const fileData = data.files.get(relativeFilePath);\n+          if (fileData) {\n+            removedFiles.set(relativeFilePath, fileData);\n+            data.files.delete(relativeFilePath);\n+          }\n         }\n       }\n     }\n \n-    return Promise.resolve(data);\n+    return Promise.resolve({\n+      hasteMap: data,\n+      removedFiles,\n+    });\n   }),\n );\n \n@@ -416,7 +424,10 @@ describe('HasteMap', () => {\n             'vegetables/Melon.js': ['Melon', 32, 42, 0, [], null],\n           });\n \n-          return Promise.resolve(data);\n+          return Promise.resolve({\n+            hasteMap: data,\n+            removedFiles: new Map(),\n+          });\n         });\n \n         const hasteMap = new HasteMap({\n@@ -543,7 +554,7 @@ describe('HasteMap', () => {\n       ...defaultConfig,\n     })\n       .build()\n-      .catch(({__hasteMapForTest: data}) => {\n+      .catch(() => {\n         expect(console.error.mock.calls[0][0]).toMatchSnapshot();\n       });\n   });\n@@ -979,7 +990,7 @@ describe('HasteMap', () => {\n       mockImpl(options).then(() => {\n         const {data} = options;\n         data.files.set('fruits/invalid/file.js', ['', 34, 44, 0, []]);\n-        return data;\n+        return {hasteMap: data, removedFiles: new Map()};\n       }),\n     );\n     return new HasteMap(defaultConfig)\n@@ -1077,7 +1088,10 @@ describe('HasteMap', () => {\n       data.files = createMap({\n         'fruits/Banana.js': ['', 32, 42, 0, [], null],\n       });\n-      return Promise.resolve(data);\n+      return Promise.resolve({\n+        hasteMap: data,\n+        removedFiles: new Map(),\n+      });\n     });\n \n     return new HasteMap(defaultConfig)\n@@ -1108,7 +1122,10 @@ describe('HasteMap', () => {\n       data.files = createMap({\n         'fruits/Banana.js': ['', 32, 42, 0, [], null],\n       });\n-      return Promise.resolve(data);\n+      return Promise.resolve({\n+        hasteMap: data,\n+        removedFiles: new Map(),\n+      });\n     });\n \n     return new HasteMap(defaultConfig)"},{"sha":"b1cb1f1730e2c13ad21789f6647cb49d069e6a12","filename":"packages/jest-haste-map/src/crawlers/__tests__/node.test.js","status":"modified","additions":56,"deletions":14,"changes":70,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -114,7 +114,7 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/project/fruits', '/project/vegtables'],\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       expect(childProcess.spawn).lastCalledWith('find', [\n         '/project/fruits',\n         '/project/vegtables',\n@@ -129,15 +129,17 @@ describe('node crawler', () => {\n         ')',\n       ]);\n \n-      expect(data.files).not.toBe(null);\n+      expect(hasteMap.files).not.toBe(null);\n \n-      expect(data.files).toEqual(\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           'fruits/strawberry.js': ['', 32, 42, 0, [], null],\n           'fruits/tomato.js': ['', 33, 42, 0, [], null],\n           'vegetables/melon.json': ['', 34, 42, 0, [], null],\n         }),\n       );\n+\n+      expect(removedFiles).toEqual(new Map());\n     });\n \n     return promise;\n@@ -161,16 +163,52 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/project/fruits'],\n-    }).then(data => {\n-      expect(data.files).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           'fruits/strawberry.js': ['', 32, 42, 0, [], null],\n           'fruits/tomato.js': tomato,\n         }),\n       );\n \n       // Make sure it is the *same* unchanged object.\n-      expect(data.files.get('fruits/tomato.js')).toBe(tomato);\n+      expect(hasteMap.files.get('fruits/tomato.js')).toBe(tomato);\n+\n+      expect(removedFiles).toEqual(new Map());\n+    });\n+  });\n+\n+  it('returns removed files', () => {\n+    process.platform = 'linux';\n+\n+    nodeCrawl = require('../node');\n+\n+    // In this test sample, previouslyExisted was present before and will not be\n+    // when crawling this directory.\n+    const files = createMap({\n+      'fruits/previouslyExisted.js': ['', 30, 40, 1, [], null],\n+      'fruits/strawberry.js': ['', 33, 42, 0, [], null],\n+      'fruits/tomato.js': ['', 32, 42, 0, [], null],\n+    });\n+\n+    return nodeCrawl({\n+      data: {files},\n+      extensions: ['js'],\n+      ignore: pearMatcher,\n+      rootDir,\n+      roots: ['/project/fruits'],\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n+        createMap({\n+          'fruits/strawberry.js': ['', 32, 42, 0, [], null],\n+          'fruits/tomato.js': ['', 33, 42, 0, [], null],\n+        }),\n+      );\n+      expect(removedFiles).toEqual(\n+        createMap({\n+          'fruits/previouslyExisted.js': ['', 30, 40, 1, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -187,13 +225,14 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/project/fruits'],\n-    }).then(data => {\n-      expect(data.files).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           'fruits/directory/strawberry.js': ['', 33, 42, 0, [], null],\n           'fruits/tomato.js': ['', 32, 42, 0, [], null],\n         }),\n       );\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n \n@@ -210,13 +249,14 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/project/fruits'],\n-    }).then(data => {\n-      expect(data.files).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           'fruits/directory/strawberry.js': ['', 33, 42, 0, [], null],\n           'fruits/tomato.js': ['', 32, 42, 0, [], null],\n         }),\n       );\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n \n@@ -233,8 +273,9 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: [],\n-    }).then(data => {\n-      expect(data.files).toEqual(new Map());\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(new Map());\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n \n@@ -250,8 +291,9 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/error'],\n-    }).then(data => {\n-      expect(data.files).toEqual(new Map());\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(new Map());\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n });"},{"sha":"ab454171f5bde778569f44d12edaaea8bbd66d39","filename":"packages/jest-haste-map/src/crawlers/__tests__/watchman.test.js","status":"modified","additions":49,"deletions":24,"changes":73,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -128,7 +128,7 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       const client = watchman.Client.mock.instances[0];\n       const calls = client.command.mock.calls;\n \n@@ -159,13 +159,15 @@ describe('watchman watch', () => {\n         'vegetables/**/*.json',\n       ]);\n \n-      expect(data.clocks).toEqual(\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           '': 'c:fake-clock:1',\n         }),\n       );\n \n-      expect(data.files).toEqual(mockFiles);\n+      expect(hasteMap.files).toEqual(mockFiles);\n+\n+      expect(removedFiles).toEqual(new Map());\n \n       expect(client.end).toBeCalled();\n     }));\n@@ -208,17 +210,18 @@ describe('watchman watch', () => {\n           : null,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n-      expect(data.files).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           [path.join(DURIAN_RELATIVE, 'foo.1.js')]: ['', 33, 43, 0, [], null],\n           [path.join(DURIAN_RELATIVE, 'foo.2.js')]: ['', 33, 43, 0, [], null],\n         }),\n       );\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n \n-  test('updates the file object when the clock is given', () => {\n+  test('updates file map and removedFiles when the clock is given', () => {\n     mockResponse = {\n       'list-capabilities': {\n         [undefined]: {\n@@ -262,27 +265,33 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       // The object was reused.\n-      expect(data.files).toBe(mockFiles);\n+      expect(hasteMap.files).toBe(mockFiles);\n \n-      expect(data.clocks).toEqual(\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           '': 'c:fake-clock:2',\n         }),\n       );\n \n-      expect(data.files).toEqual(\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           [KIWI_RELATIVE]: ['', 42, 40, 0, [], null],\n           [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n           [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n         }),\n       );\n+\n+      expect(removedFiles).toEqual(\n+        createMap({\n+          [TOMATO_RELATIVE]: ['', 31, 41, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n-  test('resets the file object when watchman is restarted', () => {\n+  test('resets the file map and tracks removedFiles when watchman is fresh', () => {\n     const mockTomatoSha1 = '321f6b7e8bf7f29aab89c5e41a555b1b0baa41a9';\n \n     mockResponse = {\n@@ -340,18 +349,18 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       // The file object was *not* reused.\n-      expect(data.files).not.toBe(mockFiles);\n+      expect(hasteMap.files).not.toBe(mockFiles);\n \n-      expect(data.clocks).toEqual(\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           '': 'c:fake-clock:3',\n         }),\n       );\n \n-      // /fruits/strawberry.js was removed from the file list.\n-      expect(data.files).toEqual(\n+      // strawberry and melon removed from the file list.\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           [BANANA_RELATIVE]: mockBananaMetadata,\n           [KIWI_RELATIVE]: ['', 42, 52, 0, [], null],\n@@ -361,10 +370,17 @@ describe('watchman watch', () => {\n \n       // Even though the file list was reset, old file objects are still reused\n       // if no changes have been made\n-      expect(data.files.get(BANANA_RELATIVE)).toBe(mockBananaMetadata);\n+      expect(hasteMap.files.get(BANANA_RELATIVE)).toBe(mockBananaMetadata);\n \n       // Old file objects are not reused if they have a different mtime\n-      expect(data.files.get(TOMATO_RELATIVE)).not.toBe(mockTomatoMetadata);\n+      expect(hasteMap.files.get(TOMATO_RELATIVE)).not.toBe(mockTomatoMetadata);\n+\n+      expect(removedFiles).toEqual(\n+        createMap({\n+          [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n+          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -427,20 +443,27 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n-      expect(data.clocks).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           [FRUITS_RELATIVE]: 'c:fake-clock:3',\n           [VEGETABLES_RELATIVE]: 'c:fake-clock:4',\n         }),\n       );\n \n-      expect(data.files).toEqual(\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           [KIWI_RELATIVE]: ['', 42, 52, 0, [], null],\n           [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n         }),\n       );\n+\n+      expect(removedFiles).toEqual(\n+        createMap({\n+          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n+          [TOMATO_RELATIVE]: ['', 31, 41, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -483,7 +506,7 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: [...ROOTS, ROOT_MOCK],\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       const client = watchman.Client.mock.instances[0];\n       const calls = client.command.mock.calls;\n \n@@ -509,13 +532,15 @@ describe('watchman watch', () => {\n \n       expect(query[2].glob).toEqual(['**/*.js', '**/*.json']);\n \n-      expect(data.clocks).toEqual(\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           '': 'c:fake-clock:1',\n         }),\n       );\n \n-      expect(data.files).toEqual(createMap({}));\n+      expect(hasteMap.files).toEqual(new Map());\n+\n+      expect(removedFiles).toEqual(new Map());\n \n       expect(client.end).toBeCalled();\n     });"},{"sha":"07a93edf3ee4125d202366e7d873b4461c5b1617","filename":"packages/jest-haste-map/src/crawlers/node.ts","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -10,7 +10,12 @@ import path from 'path';\n import {spawn} from 'child_process';\n import H from '../constants';\n import * as fastPath from '../lib/fast_path';\n-import {IgnoreMatcher, InternalHasteMap, CrawlerOptions} from '../types';\n+import {\n+  IgnoreMatcher,\n+  InternalHasteMap,\n+  CrawlerOptions,\n+  FileData,\n+} from '../types';\n \n type Result = Array<[/* id */ string, /* mtime */ number, /* size */ number]>;\n \n@@ -130,7 +135,10 @@ function findNative(\n \n export = function nodeCrawl(\n   options: CrawlerOptions,\n-): Promise<InternalHasteMap> {\n+): Promise<{\n+  removedFiles: FileData;\n+  hasteMap: InternalHasteMap;\n+}> {\n   if (options.mapper) {\n     throw new Error(`Option 'mapper' isn't supported by the Node crawler`);\n   }\n@@ -147,6 +155,7 @@ export = function nodeCrawl(\n   return new Promise(resolve => {\n     const callback = (list: Result) => {\n       const files = new Map();\n+      const removedFiles = new Map(data.files);\n       list.forEach(fileData => {\n         const [filePath, mtime, size] = fileData;\n         const relativeFilePath = fastPath.relative(rootDir, filePath);\n@@ -157,9 +166,14 @@ export = function nodeCrawl(\n           // See ../constants.js; SHA-1 will always be null and fulfilled later.\n           files.set(relativeFilePath, ['', mtime, size, 0, [], null]);\n         }\n+        removedFiles.delete(relativeFilePath);\n       });\n       data.files = files;\n-      resolve(data);\n+\n+      resolve({\n+        hasteMap: data,\n+        removedFiles,\n+      });\n     };\n \n     if (forceNodeFilesystemAPI || process.platform === 'win32') {"},{"sha":"2512efab75400c14c70ba8971f6beca5ef7ab77c","filename":"packages/jest-haste-map/src/crawlers/watchman.ts","status":"modified","additions":35,"deletions":5,"changes":40,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -11,7 +11,12 @@ import {Config} from '@jest/types';\n import * as fastPath from '../lib/fast_path';\n import normalizePathSep from '../lib/normalizePathSep';\n import H from '../constants';\n-import {InternalHasteMap, CrawlerOptions, FileMetaData} from '../types';\n+import {\n+  InternalHasteMap,\n+  CrawlerOptions,\n+  FileMetaData,\n+  FileData,\n+} from '../types';\n \n type WatchmanRoots = Map<string, Array<string>>;\n \n@@ -27,7 +32,10 @@ function WatchmanError(error: Error): Error {\n \n export = async function watchmanCrawl(\n   options: CrawlerOptions,\n-): Promise<InternalHasteMap> {\n+): Promise<{\n+  removedFiles: FileData;\n+  hasteMap: InternalHasteMap;\n+}> {\n   const fields = ['name', 'exists', 'mtime_ms', 'size'];\n   const {data, extensions, ignore, rootDir, roots} = options;\n   const defaultWatchExpression = [\n@@ -139,7 +147,9 @@ export = async function watchmanCrawl(\n   }\n \n   let files = data.files;\n+  let removedFiles = new Map();\n   let watchmanFiles: Map<string, any>;\n+  let isFresh = false;\n   try {\n     const watchmanRoots = await getWatchmanRoots(roots);\n     const watchmanFileResults = await queryWatchmanForDirs(watchmanRoots);\n@@ -148,6 +158,8 @@ export = async function watchmanCrawl(\n     // files.\n     if (watchmanFileResults.isFresh) {\n       files = new Map();\n+      removedFiles = new Map(data.files);\n+      isFresh = true;\n     }\n \n     watchmanFiles = watchmanFileResults.files;\n@@ -168,9 +180,25 @@ export = async function watchmanCrawl(\n     for (const fileData of response.files) {\n       const filePath = fsRoot + path.sep + normalizePathSep(fileData.name);\n       const relativeFilePath = fastPath.relative(rootDir, filePath);\n+      const existingFileData = data.files.get(relativeFilePath);\n+\n+      // If watchman is fresh, the removed files map starts with all files\n+      // and we remove them as we verify they still exist.\n+      if (isFresh && existingFileData && fileData.exists) {\n+        removedFiles.delete(relativeFilePath);\n+      }\n \n       if (!fileData.exists) {\n-        files.delete(relativeFilePath);\n+        // No need to act on files that do not exist and were not tracked.\n+        if (existingFileData) {\n+          files.delete(relativeFilePath);\n+\n+          // If watchman is not fresh, we will know what specific files were\n+          // deleted since we last ran and can track only those files.\n+          if (!isFresh) {\n+            removedFiles.set(relativeFilePath, existingFileData);\n+          }\n+        }\n       } else if (!ignore(filePath)) {\n         const mtime =\n           typeof fileData.mtime_ms === 'number'\n@@ -183,7 +211,6 @@ export = async function watchmanCrawl(\n           sha1hex = null;\n         }\n \n-        const existingFileData = data.files.get(relativeFilePath);\n         let nextData: FileMetaData;\n \n         if (existingFileData && existingFileData[H.MTIME] === mtime) {\n@@ -226,5 +253,8 @@ export = async function watchmanCrawl(\n   }\n \n   data.files = files;\n-  return data;\n+  return {\n+    hasteMap: data,\n+    removedFiles,\n+  };\n };"},{"sha":"174c5e3baca294a0936cec0d31b34f30565c25a8","filename":"packages/jest-haste-map/src/index.ts","status":"modified","additions":21,"deletions":39,"changes":60,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.ts?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -42,6 +42,8 @@ import {\n   ModuleMapData,\n   ModuleMetaData,\n   WorkerMetadata,\n+  CrawlerOptions,\n+  FileData,\n } from './types';\n \n type HType = typeof H;\n@@ -394,27 +396,15 @@ class HasteMap extends EventEmitter {\n    * 2. crawl the file system.\n    */\n   private _buildFileMap(): Promise<{\n-    deprecatedFiles: Array<{moduleName: string; path: string}>;\n+    removedFiles: FileData;\n     hasteMap: InternalHasteMap;\n   }> {\n     const read = this._options.resetCache ? this._createEmptyMap : this.read;\n \n     return Promise.resolve()\n       .then(() => read.call(this))\n       .catch(() => this._createEmptyMap())\n-      .then(cachedHasteMap => {\n-        const cachedFiles: Array<{moduleName: string; path: string}> = [];\n-        for (const [relativeFilePath, fileMetadata] of cachedHasteMap.files) {\n-          const moduleName = fileMetadata[H.ID];\n-          cachedFiles.push({moduleName, path: relativeFilePath});\n-        }\n-        return this._crawl(cachedHasteMap).then(hasteMap => {\n-          const deprecatedFiles = cachedFiles.filter(\n-            file => !hasteMap.files.has(file.path),\n-          );\n-          return {deprecatedFiles, hasteMap};\n-        });\n-      });\n+      .then(hasteMap => this._crawl(hasteMap));\n   }\n \n   /**\n@@ -629,17 +619,16 @@ class HasteMap extends EventEmitter {\n   }\n \n   private _buildHasteMap(data: {\n-    deprecatedFiles: Array<{moduleName: string; path: string}>;\n+    removedFiles: FileData;\n     hasteMap: InternalHasteMap;\n   }): Promise<InternalHasteMap> {\n-    const {deprecatedFiles, hasteMap} = data;\n+    const {removedFiles, hasteMap} = data;\n     const map = new Map();\n     const mocks = new Map();\n     const promises = [];\n \n-    for (let i = 0; i < deprecatedFiles.length; ++i) {\n-      const file = deprecatedFiles[i];\n-      this._recoverDuplicates(hasteMap, file.path, file.moduleName);\n+    for (const [relativeFilePath, fileMetadata] of removedFiles) {\n+      this._recoverDuplicates(hasteMap, relativeFilePath, fileMetadata[H.ID]);\n     }\n \n     for (const relativeFilePath of hasteMap.files.keys()) {\n@@ -712,11 +701,21 @@ class HasteMap extends EventEmitter {\n     return this._worker;\n   }\n \n-  private _crawl(hasteMap: InternalHasteMap): Promise<InternalHasteMap> {\n+  private _crawl(hasteMap: InternalHasteMap) {\n     const options = this._options;\n     const ignore = this._ignore.bind(this);\n     const crawl =\n       canUseWatchman && this._options.useWatchman ? watchmanCrawl : nodeCrawl;\n+    const crawlerOptions: CrawlerOptions = {\n+      computeSha1: options.computeSha1,\n+      data: hasteMap,\n+      extensions: options.extensions,\n+      forceNodeFilesystemAPI: options.forceNodeFilesystemAPI,\n+      ignore,\n+      mapper: options.mapper,\n+      rootDir: options.rootDir,\n+      roots: options.roots,\n+    };\n \n     const retry = (error: Error) => {\n       if (crawl === watchmanCrawl) {\n@@ -729,16 +728,7 @@ class HasteMap extends EventEmitter {\n             `  ` +\n             error,\n         );\n-        return nodeCrawl({\n-          computeSha1: options.computeSha1,\n-          data: hasteMap,\n-          extensions: options.extensions,\n-          forceNodeFilesystemAPI: options.forceNodeFilesystemAPI,\n-          ignore,\n-          mapper: options.mapper,\n-          rootDir: options.rootDir,\n-          roots: options.roots,\n-        }).catch(e => {\n+        return nodeCrawl(crawlerOptions).catch(e => {\n           throw new Error(\n             `Crawler retry failed:\\n` +\n               `  Original error: ${error.message}\\n` +\n@@ -751,15 +741,7 @@ class HasteMap extends EventEmitter {\n     };\n \n     try {\n-      return crawl({\n-        computeSha1: options.computeSha1,\n-        data: hasteMap,\n-        extensions: options.extensions,\n-        forceNodeFilesystemAPI: options.forceNodeFilesystemAPI,\n-        ignore,\n-        rootDir: options.rootDir,\n-        roots: options.roots,\n-      }).catch(retry);\n+      return crawl(crawlerOptions).catch(retry);\n     } catch (error) {\n       return retry(error);\n     }"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8211","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8211/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8211/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8211/events","html_url":"https://github.com/facebook/jest/pull/8211","id":424977770,"node_id":"MDExOlB1bGxSZXF1ZXN0MjY0MTc5NTYy","number":8211,"title":"Watch mode number of CPUs & documentation.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-03-25T15:49:24Z","updated_at":"2021-05-11T21:07:11Z","closed_at":"2019-03-25T16:54:02Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8211","html_url":"https://github.com/facebook/jest/pull/8211","diff_url":"https://github.com/facebook/jest/pull/8211.diff","patch_url":"https://github.com/facebook/jest/pull/8211.patch","merged_at":"2019-03-25T16:54:02Z"},"body":"## Summary\r\n\r\nRevert change to number of CPUs and add docs to resolve @cpojer comment:\r\nhttps://github.com/facebook/jest/pull/8201#issuecomment-476221537\r\n\r\nBenchmarked Jest non-e2e test performance for this branch from 14.973s to 16.504s, which is still a massive win over the original 23.234s and probably points to further optimizations being possible since I'd hope that giving it 5 extra CPUs would do more for the performance.\r\n\r\n## Test plan\r\n\r\n- All tests pass, including the test that specifically touches this number.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8211/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8211/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"92b7e943441f6bf88460b53864c19abe847013ba","filename":"docs/CLI.md","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/docs%2FCLI.md","raw_url":"https://github.com/facebook/jest/raw/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/docs%2FCLI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FCLI.md?ref=612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89","patch":"@@ -214,7 +214,7 @@ Prevents Jest from executing more than the specified amount of tests at the same\n \n ### `--maxWorkers=<num>|<string>`\n \n-Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. This defaults to the number of the cores available on your machine. It may be useful to adjust this in resource limited environments like CIs but the default should be adequate for most use-cases.\n+Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n \n For environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`\n "},{"sha":"aab3290c5357aa4ff3f2bf5db61ab05f9d86e978","filename":"packages/jest-config/src/__tests__/getMaxWorkers.test.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/packages%2Fjest-config%2Fsrc%2F__tests__%2FgetMaxWorkers.test.ts","raw_url":"https://github.com/facebook/jest/raw/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/packages%2Fjest-config%2Fsrc%2F__tests__%2FgetMaxWorkers.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2F__tests__%2FgetMaxWorkers.test.ts?ref=612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89","patch":"@@ -32,7 +32,7 @@ describe('getMaxWorkers', () => {\n \n   it('Returns based on the number of cpus', () => {\n     expect(getMaxWorkers({})).toBe(3);\n-    expect(getMaxWorkers({watch: true})).toBe(3);\n+    expect(getMaxWorkers({watch: true})).toBe(2);\n   });\n \n   describe('% based', () => {"},{"sha":"b96024477d6b9b01fdf08832e58cc9ab154be34e","filename":"packages/jest-config/src/getMaxWorkers.ts","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/packages%2Fjest-config%2Fsrc%2FgetMaxWorkers.ts","raw_url":"https://github.com/facebook/jest/raw/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/packages%2Fjest-config%2Fsrc%2FgetMaxWorkers.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FgetMaxWorkers.ts?ref=612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89","patch":"@@ -31,7 +31,8 @@ export default function getMaxWorkers(\n \n     return parsed > 0 ? parsed : 1;\n   } else {\n+    // In watch mode, Jest should be unobtrusive and not use all available CPUs.\n     const cpus = os.cpus() ? os.cpus().length : 1;\n-    return Math.max(cpus - 1, 1);\n+    return Math.max(argv.watch ? Math.floor(cpus / 2) : cpus - 1, 1);\n   }\n }"},{"sha":"6342983269a1bce24a448dbfb2d8c3e1c434966f","filename":"website/versioned_docs/version-22.x/CLI.md","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/website%2Fversioned_docs%2Fversion-22.x%2FCLI.md","raw_url":"https://github.com/facebook/jest/raw/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/website%2Fversioned_docs%2Fversion-22.x%2FCLI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/website%2Fversioned_docs%2Fversion-22.x%2FCLI.md?ref=612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89","patch":"@@ -184,7 +184,7 @@ Logs the heap usage after every test. Useful to debug memory leaks. Use together\n \n ### `--maxWorkers=<num>`\n \n-Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. This defaults to the number of the cores available on your machine. It may be useful to adjust this in resource limited environments like CIs but the default should be adequate for most use-cases.\n+Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n \n ### `--noStackTrace`\n "},{"sha":"c5e70784dafe4d366d27a76bacb826e48b874382","filename":"website/versioned_docs/version-23.x/CLI.md","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/website%2Fversioned_docs%2Fversion-23.x%2FCLI.md","raw_url":"https://github.com/facebook/jest/raw/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/website%2Fversioned_docs%2Fversion-23.x%2FCLI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/website%2Fversioned_docs%2Fversion-23.x%2FCLI.md?ref=612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89","patch":"@@ -196,7 +196,7 @@ Logs the heap usage after every test. Useful to debug memory leaks. Use together\n \n ### `--maxWorkers=<num>`\n \n-Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. This defaults to the number of the cores available on your machine. It may be useful to adjust this in resource limited environments like CIs but the default should be adequate for most use-cases.\n+Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n \n ### `--noStackTrace`\n "},{"sha":"549d569b280934df8f383f7f71cb35ba0ad0ec59","filename":"website/versioned_docs/version-24.0/CLI.md","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/website%2Fversioned_docs%2Fversion-24.0%2FCLI.md","raw_url":"https://github.com/facebook/jest/raw/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/website%2Fversioned_docs%2Fversion-24.0%2FCLI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/website%2Fversioned_docs%2Fversion-24.0%2FCLI.md?ref=612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89","patch":"@@ -211,7 +211,7 @@ Logs the heap usage after every test. Useful to debug memory leaks. Use together\n \n ### `--maxWorkers=<num>|<string>`\n \n-Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. This defaults to the number of the cores available on your machine. It may be useful to adjust this in resource limited environments like CIs but the default should be adequate for most use-cases.\n+Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n \n For environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`\n "},{"sha":"b11918123a4f6bd66db8dc545a80eb9d1639f0c0","filename":"website/versioned_docs/version-24.1/CLI.md","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/website%2Fversioned_docs%2Fversion-24.1%2FCLI.md","raw_url":"https://github.com/facebook/jest/raw/612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89/website%2Fversioned_docs%2Fversion-24.1%2FCLI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/website%2Fversioned_docs%2Fversion-24.1%2FCLI.md?ref=612ade3a36ee1fb78d8b36dc9af1a12f02b1fd89","patch":"@@ -215,7 +215,7 @@ Prevents Jest from executing more than the specified amount of tests at the same\n \n ### `--maxWorkers=<num>|<string>`\n \n-Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. This defaults to the number of the cores available on your machine. It may be useful to adjust this in resource limited environments like CIs but the default should be adequate for most use-cases.\n+Alias: `-w`. Specifies the maximum number of workers the worker-pool will spawn for running tests. In single run mode, this defaults to the number of the cores available on your machine minus one for the main thread. In watch mode, this defaults to half of the available cores on your machine to ensure Jest is unobtrusive and does not grind your machine to a halt. It may be useful to adjust this in resource limited environments like CIs but the defaults should be adequate for most use-cases.\n \n For environments with variable CPUs available, you can use percentage based configuration: `--maxWorkers=50%`\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8234","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8234/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8234/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8234/events","html_url":"https://github.com/facebook/jest/pull/8234","id":426777337,"node_id":"MDExOlB1bGxSZXF1ZXN0MjY1NTU3ODAx","number":8234,"title":"Memory leak fix: release source map info after processed and minor optimizations","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-03-29T01:42:46Z","updated_at":"2021-05-11T20:07:03Z","closed_at":"2019-03-29T16:14:56Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8234","html_url":"https://github.com/facebook/jest/pull/8234","diff_url":"https://github.com/facebook/jest/pull/8234.diff","patch_url":"https://github.com/facebook/jest/pull/8234.patch","merged_at":"2019-03-29T16:14:56Z"},"body":"## Summary\r\n\r\nPreviously, `sourceMaps`:\r\n- Was always populated with a call to `getSourceMapInfo` and set to an object, even when it was guaranteed to be empty.\r\n- Was never released from memory.\r\n\r\nIt's companion, `coverage`, was released from memory but unfortunately using the `delete` operator, which is significantly slower than `= undefined` even with modern V8 versions:\r\nhttps://jsperf.com/delete-vs-undefined-vs-null/87\r\n\r\nI've resolved the leak and minor performance issues along with a minor change to `formatTestResults` that is slightly more efficient for the same result.\r\n\r\n## Test plan\r\n\r\n- All tests pass.\r\n- Memory and performance characteristics verified.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8234/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8234/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"b3f28d53b1c81e21e5e0410bc9cec6288ec4674c","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719","patch":"@@ -46,6 +46,7 @@\n - `[jest-core]` Improve performance of SearchSource.findMatchingTests by 15% ([#8184](https://github.com/facebook/jest/pull/8184))\n - `[jest-resolve]` Optimize internal cache lookup performance ([#8183](https://github.com/facebook/jest/pull/8183))\n - `[jest-core]` Dramatically improve watch mode performance ([#8201](https://github.com/facebook/jest/pull/8201))\n+- `[jest-core]` Fix memory leak of source map info and minor performance improvements ([#8234](https://github.com/facebook/jest/pull/8234))\n - `[jest-console]` Fix memory leak by releasing console output reference when printed to stdout ([#8233](https://github.com/facebook/jest/pull/8233))\n - `[jest-runtime]` Use `Map` instead of `Object` for module registry ([#8232](https://github.com/facebook/jest/pull/8232))\n "},{"sha":"e76caf5969190d56ae6fbac59b9ce2ce2a3b9270","filename":"packages/jest-core/src/ReporterDispatcher.ts","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-core%2Fsrc%2FReporterDispatcher.ts","raw_url":"https://github.com/facebook/jest/raw/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-core%2Fsrc%2FReporterDispatcher.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-core%2Fsrc%2FReporterDispatcher.ts?ref=ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719","patch":"@@ -38,6 +38,8 @@ export default class ReporterDispatcher {\n     }\n \n     // Release memory if unused later.\n+    testResult.sourceMaps = undefined;\n+    testResult.coverage = undefined;\n     testResult.console = undefined;\n   }\n "},{"sha":"c0832f4daab6198d50bcf1834f1396a531283d5f","filename":"packages/jest-reporters/src/coverage_reporter.ts","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/facebook/jest/blob/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-reporters%2Fsrc%2Fcoverage_reporter.ts","raw_url":"https://github.com/facebook/jest/raw/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-reporters%2Fsrc%2Fcoverage_reporter.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-reporters%2Fsrc%2Fcoverage_reporter.ts?ref=ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719","patch":"@@ -55,23 +55,24 @@ export default class CoverageReporter extends BaseReporter {\n   ) {\n     if (testResult.coverage) {\n       this._coverageMap.merge(testResult.coverage);\n-      // Remove coverage data to free up some memory.\n-      delete testResult.coverage;\n+    }\n \n-      Object.keys(testResult.sourceMaps).forEach(sourcePath => {\n+    const sourceMaps = testResult.sourceMaps;\n+    if (sourceMaps) {\n+      Object.keys(sourceMaps).forEach(sourcePath => {\n         let inputSourceMap: RawSourceMap | undefined;\n         try {\n           const coverage: FileCoverage = this._coverageMap.fileCoverageFor(\n             sourcePath,\n           );\n-          ({inputSourceMap} = coverage.toJSON() as any);\n+          inputSourceMap = (coverage.toJSON() as any).inputSourceMap;\n         } finally {\n           if (inputSourceMap) {\n             this._sourceMapStore.registerMap(sourcePath, inputSourceMap);\n           } else {\n             this._sourceMapStore.registerURL(\n               sourcePath,\n-              testResult.sourceMaps[sourcePath],\n+              sourceMaps[sourcePath],\n             );\n           }\n         }"},{"sha":"18da0d5de17bc5b6adbba547da47c5745bcf743d","filename":"packages/jest-runner/src/runTest.ts","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/facebook/jest/blob/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-runner%2Fsrc%2FrunTest.ts","raw_url":"https://github.com/facebook/jest/raw/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-runner%2Fsrc%2FrunTest.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2FrunTest.ts?ref=ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719","patch":"@@ -253,14 +253,19 @@ async function runTestInternal(\n \n     result.perfStats = {end: Date.now(), start};\n     result.testFilePath = path;\n-    result.coverage = runtime.getAllCoverageInfoCopy();\n-    result.sourceMaps = runtime.getSourceMapInfo(\n-      new Set(Object.keys(result.coverage || {})),\n-    );\n     result.console = testConsole.getBuffer();\n     result.skipped = testCount === result.numPendingTests;\n     result.displayName = config.displayName;\n \n+    const coverage = runtime.getAllCoverageInfoCopy();\n+    if (coverage) {\n+      const coverageKeys = Object.keys(coverage);\n+      if (coverageKeys.length) {\n+        result.coverage = coverage;\n+        result.sourceMaps = runtime.getSourceMapInfo(new Set(coverageKeys));\n+      }\n+    }\n+\n     if (globalConfig.logHeapUsage) {\n       if (global.gc) {\n         global.gc();"},{"sha":"47720db16a29f27d80b0cd52cdac1eaa4c546d08","filename":"packages/jest-test-result/src/formatTestResults.ts","status":"modified","additions":31,"deletions":33,"changes":64,"blob_url":"https://github.com/facebook/jest/blob/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-test-result%2Fsrc%2FformatTestResults.ts","raw_url":"https://github.com/facebook/jest/raw/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-test-result%2Fsrc%2FformatTestResults.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-test-result%2Fsrc%2FformatTestResults.ts?ref=ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719","patch":"@@ -16,41 +16,41 @@ import {\n   TestResult,\n } from './types';\n \n-const formatResult = (\n+const formatTestResult = (\n   testResult: TestResult,\n-  codeCoverageFormatter: CodeCoverageFormatter,\n-  reporter: CodeCoverageReporter,\n+  codeCoverageFormatter?: CodeCoverageFormatter,\n+  reporter?: CodeCoverageReporter,\n ): FormattedTestResult => {\n-  const now = Date.now();\n-  const output: FormattedTestResult = {\n-    assertionResults: [],\n-    coverage: {},\n-    endTime: now,\n-    message: '',\n-    name: testResult.testFilePath,\n-    startTime: now,\n-    status: 'failed',\n-    summary: '',\n-  };\n-\n+  const assertionResults = testResult.testResults.map(formatTestAssertion);\n   if (testResult.testExecError) {\n-    output.message = testResult.testExecError.message;\n-    output.coverage = {};\n+    const now = Date.now();\n+    return {\n+      assertionResults,\n+      coverage: {},\n+      endTime: now,\n+      message: testResult.failureMessage\n+        ? testResult.failureMessage\n+        : testResult.testExecError.message,\n+      name: testResult.testFilePath,\n+      startTime: now,\n+      status: 'failed',\n+      summary: '',\n+    };\n   } else {\n     const allTestsPassed = testResult.numFailingTests === 0;\n-    output.status = allTestsPassed ? 'passed' : 'failed';\n-    output.startTime = testResult.perfStats.start;\n-    output.endTime = testResult.perfStats.end;\n-    output.coverage = codeCoverageFormatter(testResult.coverage, reporter);\n-  }\n-\n-  output.assertionResults = testResult.testResults.map(formatTestAssertion);\n-\n-  if (testResult.failureMessage) {\n-    output.message = testResult.failureMessage;\n+    return {\n+      assertionResults,\n+      coverage: codeCoverageFormatter\n+        ? codeCoverageFormatter(testResult.coverage, reporter)\n+        : testResult.coverage,\n+      endTime: testResult.perfStats.end,\n+      message: testResult.failureMessage || '',\n+      name: testResult.testFilePath,\n+      startTime: testResult.perfStats.start,\n+      status: allTestsPassed ? 'passed' : 'failed',\n+      summary: '',\n+    };\n   }\n-\n-  return output;\n };\n \n function formatTestAssertion(\n@@ -72,13 +72,11 @@ function formatTestAssertion(\n \n export default function formatTestResults(\n   results: AggregatedResult,\n-  codeCoverageFormatter?: CodeCoverageFormatter | null,\n+  codeCoverageFormatter?: CodeCoverageFormatter,\n   reporter?: CodeCoverageReporter,\n ): FormattedTestResults {\n-  const formatter = codeCoverageFormatter || (coverage => coverage);\n-\n   const testResults = results.testResults.map(testResult =>\n-    formatResult(testResult, formatter, reporter),\n+    formatTestResult(testResult, codeCoverageFormatter, reporter),\n   );\n \n   return {...results, testResults};"},{"sha":"e9acdc40fc8638cb05ca230a7420adc029c8b331","filename":"packages/jest-test-result/src/types.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-test-result%2Fsrc%2Ftypes.ts","raw_url":"https://github.com/facebook/jest/raw/ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719/packages%2Fjest-test-result%2Fsrc%2Ftypes.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-test-result%2Fsrc%2Ftypes.ts?ref=ca3c9b2c2d1ebdfbb8c275c6a8380808ff7c4719","patch":"@@ -126,7 +126,7 @@ export type TestResult = {\n     unmatched: number;\n     updated: number;\n   };\n-  sourceMaps: {\n+  sourceMaps?: {\n     [sourcePath: string]: string;\n   };\n   testExecError?: SerializableError;"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/6960","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/6960/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/6960/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/6960/events","html_url":"https://github.com/facebook/jest/pull/6960","id":359179558,"node_id":"MDExOlB1bGxSZXF1ZXN0MjE0NzMzNTUw","number":6960,"title":"HasteMap with native maps","user":{"login":"rubennorte","id":117921,"node_id":"MDQ6VXNlcjExNzkyMQ==","avatar_url":"https://avatars.githubusercontent.com/u/117921?v=4","gravatar_id":"","url":"https://api.github.com/users/rubennorte","html_url":"https://github.com/rubennorte","followers_url":"https://api.github.com/users/rubennorte/followers","following_url":"https://api.github.com/users/rubennorte/following{/other_user}","gists_url":"https://api.github.com/users/rubennorte/gists{/gist_id}","starred_url":"https://api.github.com/users/rubennorte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rubennorte/subscriptions","organizations_url":"https://api.github.com/users/rubennorte/orgs","repos_url":"https://api.github.com/users/rubennorte/repos","events_url":"https://api.github.com/users/rubennorte/events{/privacy}","received_events_url":"https://api.github.com/users/rubennorte/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":9,"created_at":"2018-09-11T19:02:35Z","updated_at":"2021-05-12T06:06:54Z","closed_at":"2018-09-12T13:42:52Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/6960","html_url":"https://github.com/facebook/jest/pull/6960","diff_url":"https://github.com/facebook/jest/pull/6960.diff","patch_url":"https://github.com/facebook/jest/pull/6960.patch","merged_at":"2018-09-12T13:42:52Z"},"body":"## Summary\r\n\r\nThis changes the data structure used to store the metadata for files, modules, mocks and duplicated modules in the Haste Map from `Object` (without prototypes) to `Map`.\r\n\r\nThe performance of `Map` is much better than `Object` to implement dictionaries when they contain a large amount of entries, which is usually what we have here. After testing this change in Facebook we've seen a ~20% reduction of the time to run all tests, which is a massive performance improvement for us.\r\n\r\nThis only modifies the internal data structures used by Jest and its end users will not be affected by it (other than performance). The change in the `jest-haste-map` package is breaking though, as it might affect other packages depending on it (including jest packages, which have been updated here).\r\n\r\n## Test plan\r\n\r\nI've updated all tests related to this change (including a change to make the data structures more encapsulated for the rest of packages). I've also tested this in the Facebook infrastructure (including running all tests, running a subset of the tests, watch mode and coverage reporting).","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/6960/reactions","total_count":46,"+1":26,"-1":0,"laugh":0,"hooray":6,"confused":0,"heart":14,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/6960/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"ead254ff7a78fb4cb6978361d33db1ff844d0452","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -3,6 +3,7 @@\n ### Features\n \n - `[babel-jest]` Add support for `babel.config.js` added in Babel 7.0.0 ([#6911](https://github.com/facebook/jest/pull/6911))\n+- `[jest-haste-map]` [**BREAKING**] Replaced internal data structures to improve performance ([#6960](https://github.com/facebook/jest/pull/6960))\n \n ### Fixes\n "},{"sha":"8afc717dc2d1a34201c85bf73b2b711d53c4853d","filename":"packages/jest-haste-map/src/__tests__/index.test.js","status":"modified","additions":222,"deletions":177,"changes":399,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -47,9 +47,9 @@ jest.mock('../crawlers/watchman', () =>\n         if (list[file]) {\n           const hash = computeSha1 ? mockHashContents(list[file]) : null;\n \n-          data.files[file] = ['', 32, 0, [], hash];\n+          data.files.set(file, ['', 32, 0, [], hash]);\n         } else {\n-          delete data.files[file];\n+          data.files.delete(file);\n         }\n       }\n     }\n@@ -102,14 +102,31 @@ jest.mock('fs', () => require('graceful-fs'));\n const ConditionalTest = require('../../../../scripts/ConditionalTest');\n \n const cacheFilePath = '/cache-file';\n+const object = data => Object.assign(Object.create(null), data);\n+const createMap = obj => new Map(Object.keys(obj).map(key => [key, obj[key]]));\n+\n+// Jest toEqual does not match Map instances from different contexts\n+const normalizePersisted = hasteMap => ({\n+  clocks: normalizeMap(hasteMap.clocks),\n+  duplicates: normalizeMap(hasteMap.duplicates),\n+  files: normalizeMap(hasteMap.files),\n+  map: normalizeMap(hasteMap.map),\n+  mocks: normalizeMap(hasteMap.mocks),\n+});\n+const normalizeMap = map => {\n+  if (Object.prototype.toString.call(map) !== '[object Map]') {\n+    throw new TypeError('expected map instance');\n+  }\n+  return new Map(map);\n+};\n+\n let consoleWarn;\n let defaultConfig;\n let fs;\n let H;\n let HasteMap;\n let mockClocks;\n let mockEmitters;\n-let object;\n let mockEnd;\n let mockWorker;\n let getCacheFilePath;\n@@ -120,8 +137,6 @@ describe('HasteMap', () => {\n   beforeEach(() => {\n     jest.resetModules();\n \n-    object = data => Object.assign(Object.create(null), data);\n-\n     mockEmitters = Object.create(null);\n     mockFs = object({\n       '/fruits/__mocks__/Pear.js': ['const Melon = require(\"Melon\");'].join(\n@@ -151,7 +166,7 @@ describe('HasteMap', () => {\n       ),\n       '/video/video.mp4': Buffer.from([0xfa, 0xce, 0xb0, 0x0c]).toString(),\n     });\n-    mockClocks = object({\n+    mockClocks = createMap({\n       '/fruits': 'c:fake-clock:1',\n       '/vegetables': 'c:fake-clock:2',\n       '/video': 'c:fake-clock:3',\n@@ -271,58 +286,64 @@ describe('HasteMap', () => {\n     return hasteMap.build().then(({__hasteMapForTest: data}) => {\n       expect(data.clocks).toEqual(mockClocks);\n \n-      expect(data.files).toEqual({\n-        '/fruits/__mocks__/Pear.js': ['', 32, 1, ['Melon'], null],\n-        '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry'], null],\n-        // node modules\n-        '/fruits/node_modules/fbjs/lib/flatMap.js': [\n-          'flatMap',\n-          32,\n-          1,\n-          [],\n-          null,\n-        ],\n-        '/fruits/node_modules/react/react.js': [\n-          'React',\n-          32,\n-          1,\n-          ['Component'],\n-          null,\n-        ],\n-\n-        '/fruits/pear.js': ['Pear', 32, 1, ['Banana', 'Strawberry'], null],\n-        '/fruits/strawberry.js': ['Strawberry', 32, 1, [], null],\n-        '/vegetables/melon.js': ['Melon', 32, 1, [], null],\n-      });\n-\n-      expect(data.map).toEqual({\n-        Banana: {[H.GENERIC_PLATFORM]: ['/fruits/banana.js', H.MODULE]},\n-        Melon: {[H.GENERIC_PLATFORM]: ['/vegetables/melon.js', H.MODULE]},\n-        Pear: {[H.GENERIC_PLATFORM]: ['/fruits/pear.js', H.MODULE]},\n-        React: {\n-          [H.GENERIC_PLATFORM]: [\n-            '/fruits/node_modules/react/react.js',\n-            H.MODULE,\n+      expect(data.files).toEqual(\n+        createMap({\n+          '/fruits/__mocks__/Pear.js': ['', 32, 1, ['Melon'], null],\n+          '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry'], null],\n+          // node modules\n+          '/fruits/node_modules/fbjs/lib/flatMap.js': [\n+            'flatMap',\n+            32,\n+            1,\n+            [],\n+            null,\n           ],\n-        },\n-        Strawberry: {\n-          [H.GENERIC_PLATFORM]: ['/fruits/strawberry.js', H.MODULE],\n-        },\n-        flatMap: {\n-          [H.GENERIC_PLATFORM]: [\n-            '/fruits/node_modules/fbjs/lib/flatMap.js',\n-            H.MODULE,\n+          '/fruits/node_modules/react/react.js': [\n+            'React',\n+            32,\n+            1,\n+            ['Component'],\n+            null,\n           ],\n-        },\n-      });\n \n-      expect(data.mocks).toEqual({\n-        Pear: '/fruits/__mocks__/Pear.js',\n-      });\n+          '/fruits/pear.js': ['Pear', 32, 1, ['Banana', 'Strawberry'], null],\n+          '/fruits/strawberry.js': ['Strawberry', 32, 1, [], null],\n+          '/vegetables/melon.js': ['Melon', 32, 1, [], null],\n+        }),\n+      );\n+\n+      expect(data.map).toEqual(\n+        createMap({\n+          Banana: {[H.GENERIC_PLATFORM]: ['/fruits/banana.js', H.MODULE]},\n+          Melon: {[H.GENERIC_PLATFORM]: ['/vegetables/melon.js', H.MODULE]},\n+          Pear: {[H.GENERIC_PLATFORM]: ['/fruits/pear.js', H.MODULE]},\n+          React: {\n+            [H.GENERIC_PLATFORM]: [\n+              '/fruits/node_modules/react/react.js',\n+              H.MODULE,\n+            ],\n+          },\n+          Strawberry: {\n+            [H.GENERIC_PLATFORM]: ['/fruits/strawberry.js', H.MODULE],\n+          },\n+          flatMap: {\n+            [H.GENERIC_PLATFORM]: [\n+              '/fruits/node_modules/fbjs/lib/flatMap.js',\n+              H.MODULE,\n+            ],\n+          },\n+        }),\n+      );\n+\n+      expect(data.mocks).toEqual(\n+        createMap({\n+          Pear: '/fruits/__mocks__/Pear.js',\n+        }),\n+      );\n \n       // The cache file must exactly mirror the data structure returned from a\n-      // build.\n-      expect(hasteMap.read()).toEqual(data);\n+      // build\n+      expect(normalizePersisted(hasteMap.read())).toEqual(data);\n     });\n   });\n \n@@ -335,7 +356,7 @@ describe('HasteMap', () => {\n           const {data} = options;\n \n           // The node crawler returns \"null\" for the SHA-1.\n-          data.files = object({\n+          data.files = createMap({\n             '/fruits/__mocks__/Pear.js': ['', 32, 0, ['Melon'], null],\n             '/fruits/banana.js': ['Banana', 32, 0, ['Strawberry'], null],\n             '/fruits/pear.js': ['Pear', 32, 0, ['Banana', 'Strawberry'], null],\n@@ -356,45 +377,47 @@ describe('HasteMap', () => {\n \n         const data = (await hasteMap.build()).__hasteMapForTest;\n \n-        expect(data.files).toEqual({\n-          '/fruits/__mocks__/Pear.js': [\n-            '',\n-            32,\n-            1,\n-            ['Melon'],\n-            'a315b7804be2b124b77c1f107205397f45226964',\n-          ],\n-          '/fruits/banana.js': [\n-            'Banana',\n-            32,\n-            1,\n-            ['Strawberry'],\n-            'f24c6984cce6f032f6d55d771d04ab8dbbe63c8c',\n-          ],\n-          '/fruits/pear.js': [\n-            'Pear',\n-            32,\n-            1,\n-            ['Banana', 'Strawberry'],\n-            '211a8ff1e67007b204727d26943c15cf9fd00031',\n-          ],\n-          '/fruits/strawberry.js': [\n-            'Strawberry',\n-            32,\n-            1,\n-            [],\n-            'd55d545ad7d997cb2aa10fb412e0cc287d4fbfb3',\n-          ],\n-          '/vegetables/melon.js': [\n-            'Melon',\n-            32,\n-            1,\n-            [],\n-            '45c5d30e29313187829dfd5a16db81c3143fbcc7',\n-          ],\n-        });\n+        expect(data.files).toEqual(\n+          createMap({\n+            '/fruits/__mocks__/Pear.js': [\n+              '',\n+              32,\n+              1,\n+              ['Melon'],\n+              'a315b7804be2b124b77c1f107205397f45226964',\n+            ],\n+            '/fruits/banana.js': [\n+              'Banana',\n+              32,\n+              1,\n+              ['Strawberry'],\n+              'f24c6984cce6f032f6d55d771d04ab8dbbe63c8c',\n+            ],\n+            '/fruits/pear.js': [\n+              'Pear',\n+              32,\n+              1,\n+              ['Banana', 'Strawberry'],\n+              '211a8ff1e67007b204727d26943c15cf9fd00031',\n+            ],\n+            '/fruits/strawberry.js': [\n+              'Strawberry',\n+              32,\n+              1,\n+              [],\n+              'd55d545ad7d997cb2aa10fb412e0cc287d4fbfb3',\n+            ],\n+            '/vegetables/melon.js': [\n+              'Melon',\n+              32,\n+              1,\n+              [],\n+              '45c5d30e29313187829dfd5a16db81c3143fbcc7',\n+            ],\n+          }),\n+        );\n \n-        expect(hasteMap.read()).toEqual(data);\n+        expect(normalizePersisted(hasteMap.read())).toEqual(data);\n       });\n     });\n   });\n@@ -416,8 +439,8 @@ describe('HasteMap', () => {\n \n     const {__hasteMapForTest: data} = await hasteMap.build();\n \n-    expect(data.map.IRequireAVideo).toBeDefined();\n-    expect(data.files['/video/video.mp4']).toBeDefined();\n+    expect(data.map.get('IRequireAVideo')).toBeDefined();\n+    expect(data.files.get('/video/video.mp4')).toBeDefined();\n     expect(fs.readFileSync).not.toBeCalledWith('/video/video.mp4', 'utf8');\n   });\n \n@@ -438,15 +461,15 @@ describe('HasteMap', () => {\n     return hasteMap.build().then(({__hasteMapForTest: data}) => {\n       // Expect the node module to be part of files but make sure it wasn't\n       // read.\n-      expect(data.files['/fruits/node_modules/fbjs/index.js']).toEqual([\n+      expect(data.files.get('/fruits/node_modules/fbjs/index.js')).toEqual([\n         '',\n         32,\n         0,\n         [],\n         null,\n       ]);\n \n-      expect(data.map.fbjs).not.toBeDefined();\n+      expect(data.map.get('fbjs')).not.toBeDefined();\n \n       // cache file + 5 modules - the node_module\n       expect(fs.readFileSync.mock.calls.length).toBe(6);\n@@ -489,7 +512,9 @@ describe('HasteMap', () => {\n       .then(({__hasteMapForTest: data}) => {\n         // Duplicate modules are removed so that it doesn't cause\n         // non-determinism later on.\n-        expect(data.map.Strawberry[H.GENERIC_PLATFORM]).not.toBeDefined();\n+        expect(\n+          data.map.get('Strawberry')[H.GENERIC_PLATFORM],\n+        ).not.toBeDefined();\n \n         expect(console.warn.mock.calls[0][0]).toMatchSnapshot();\n       });\n@@ -539,31 +564,35 @@ describe('HasteMap', () => {\n     return new HasteMap(defaultConfig)\n       .build()\n       .then(({__hasteMapForTest: data}) => {\n-        expect(data.files).toEqual({\n-          '/fruits/strawberry.android.js': [\n-            'Strawberry',\n-            32,\n-            1,\n-            ['Blackberry'],\n-            null,\n-          ],\n-          '/fruits/strawberry.ios.js': [\n-            'Strawberry',\n-            32,\n-            1,\n-            ['Raspberry'],\n-            null,\n-          ],\n-          '/fruits/strawberry.js': ['Strawberry', 32, 1, ['Banana'], null],\n-        });\n+        expect(data.files).toEqual(\n+          createMap({\n+            '/fruits/strawberry.android.js': [\n+              'Strawberry',\n+              32,\n+              1,\n+              ['Blackberry'],\n+              null,\n+            ],\n+            '/fruits/strawberry.ios.js': [\n+              'Strawberry',\n+              32,\n+              1,\n+              ['Raspberry'],\n+              null,\n+            ],\n+            '/fruits/strawberry.js': ['Strawberry', 32, 1, ['Banana'], null],\n+          }),\n+        );\n \n-        expect(data.map).toEqual({\n-          Strawberry: {\n-            [H.GENERIC_PLATFORM]: ['/fruits/strawberry.js', H.MODULE],\n-            android: ['/fruits/strawberry.android.js', H.MODULE],\n-            ios: ['/fruits/strawberry.ios.js', H.MODULE],\n-          },\n-        });\n+        expect(data.map).toEqual(\n+          createMap({\n+            Strawberry: {\n+              [H.GENERIC_PLATFORM]: ['/fruits/strawberry.js', H.MODULE],\n+              android: ['/fruits/strawberry.android.js', H.MODULE],\n+              ios: ['/fruits/strawberry.ios.js', H.MODULE],\n+            },\n+          }),\n+        );\n       });\n   });\n \n@@ -581,7 +610,7 @@ describe('HasteMap', () => {\n         mockChangedFiles = Object.create(null);\n \n         // Watchman would give us different clocks.\n-        mockClocks = object({\n+        mockClocks = createMap({\n           '/fruits': 'c:fake-clock:3',\n           '/vegetables': 'c:fake-clock:4',\n         });\n@@ -595,9 +624,9 @@ describe('HasteMap', () => {\n             } else {\n               expect(fs.readFileSync).toBeCalledWith(cacheFilePath, 'utf8');\n             }\n-            expect(data.clocks).toEqual(mockClocks);\n-            expect(data.files).toEqual(initialData.files);\n-            expect(data.map).toEqual(initialData.map);\n+            expect(normalizeMap(data.clocks)).toEqual(mockClocks);\n+            expect(normalizeMap(data.files)).toEqual(initialData.files);\n+            expect(normalizeMap(data.map)).toEqual(initialData.map);\n           });\n       }));\n \n@@ -618,7 +647,7 @@ describe('HasteMap', () => {\n         });\n \n         // Watchman would give us different clocks for `/fruits`.\n-        mockClocks = object({\n+        mockClocks = createMap({\n           '/fruits': 'c:fake-clock:3',\n           '/vegetables': 'c:fake-clock:2',\n         });\n@@ -635,18 +664,24 @@ describe('HasteMap', () => {\n             }\n             expect(fs.readFileSync).toBeCalledWith('/fruits/banana.js', 'utf8');\n \n-            expect(data.clocks).toEqual(mockClocks);\n+            expect(normalizeMap(data.clocks)).toEqual(mockClocks);\n \n-            const files = object(initialData.files);\n-            files['/fruits/banana.js'] = ['Kiwi', 32, 1, ['Raspberry'], null];\n+            const files = new Map(initialData.files);\n+            files.set('/fruits/banana.js', [\n+              'Kiwi',\n+              32,\n+              1,\n+              ['Raspberry'],\n+              null,\n+            ]);\n \n-            expect(data.files).toEqual(files);\n+            expect(normalizeMap(data.files)).toEqual(files);\n \n-            const map = object(initialData.map);\n+            const map = new Map(initialData.map);\n \n-            map.Kiwi = map.Banana;\n-            delete map.Banana;\n-            expect(data.map).toEqual(map);\n+            map.set('Kiwi', map.get('Banana'));\n+            map.delete('Banana');\n+            expect(normalizeMap(data.map)).toEqual(map);\n           });\n       }));\n \n@@ -663,21 +698,21 @@ describe('HasteMap', () => {\n         });\n \n         // Watchman would give us different clocks for `/fruits`.\n-        mockClocks = object({\n+        mockClocks = createMap({\n           '/fruits': 'c:fake-clock:3',\n           '/vegetables': 'c:fake-clock:2',\n         });\n \n         return new HasteMap(defaultConfig)\n           .build()\n           .then(({__hasteMapForTest: data}) => {\n-            const files = object(initialData.files);\n-            delete files['/fruits/banana.js'];\n-            expect(data.files).toEqual(files);\n+            const files = new Map(initialData.files);\n+            files.delete('/fruits/banana.js');\n+            expect(normalizeMap(data.files)).toEqual(files);\n \n-            const map = object(initialData.map);\n-            delete map.Banana;\n-            expect(data.map).toEqual(map);\n+            const map = new Map(initialData.map);\n+            map.delete('Banana');\n+            expect(normalizeMap(data.map)).toEqual(map);\n           });\n       }));\n \n@@ -691,7 +726,7 @@ describe('HasteMap', () => {\n     ].join('\\n');\n     let data;\n     ({__hasteMapForTest: data} = await new HasteMap(defaultConfig).build());\n-    expect(data.map['Strawberry']).toEqual({\n+    expect(data.map.get('Strawberry')).toEqual({\n       g: ['/fruits/strawberry.js', 0],\n     });\n \n@@ -704,9 +739,9 @@ describe('HasteMap', () => {\n         'const Raspberry = require(\"Raspberry\");',\n       ].join('\\n'),\n     });\n-    mockClocks = object({'/fruits': 'c:fake-clock:3'});\n+    mockClocks = createMap({'/fruits': 'c:fake-clock:3'});\n     ({__hasteMapForTest: data} = await new HasteMap(defaultConfig).build());\n-    expect(data.map['Strawberry']).toEqual({\n+    expect(data.map.get('Strawberry')).toEqual({\n       g: ['/fruits/strawberry.js', 0],\n       ios: ['/fruits/strawberry.ios.js', 0],\n     });\n@@ -728,16 +763,16 @@ describe('HasteMap', () => {\n     ].join('\\n');\n     let data;\n     ({__hasteMapForTest: data} = await new HasteMap(defaultConfig).build());\n-    expect(data.map['Strawberry']).toEqual({\n+    expect(data.map.get('Strawberry')).toEqual({\n       g: ['/fruits/strawberry.js', 0],\n       ios: ['/fruits/strawberry.ios.js', 0],\n     });\n \n     delete mockFs['/fruits/strawberry.ios.js'];\n     mockChangedFiles = object({'/fruits/strawberry.ios.js': null});\n-    mockClocks = object({'/fruits': 'c:fake-clock:3'});\n+    mockClocks = createMap({'/fruits': 'c:fake-clock:3'});\n     ({__hasteMapForTest: data} = await new HasteMap(defaultConfig).build());\n-    expect(data.map['Strawberry']).toEqual({\n+    expect(data.map.get('Strawberry')).toEqual({\n       g: ['/fruits/strawberry.js', 0],\n     });\n   });\n@@ -752,7 +787,7 @@ describe('HasteMap', () => {\n     ].join('\\n');\n     let data;\n     ({__hasteMapForTest: data} = await new HasteMap(defaultConfig).build());\n-    expect(data.map['Strawberry']).toEqual({\n+    expect(data.map.get('Strawberry')).toEqual({\n       ios: ['/fruits/strawberry.ios.js', 0],\n     });\n \n@@ -766,9 +801,9 @@ describe('HasteMap', () => {\n         'const Banana = require(\"Banana\");',\n       ].join('\\n'),\n     });\n-    mockClocks = object({'/fruits': 'c:fake-clock:3'});\n+    mockClocks = createMap({'/fruits': 'c:fake-clock:3'});\n     ({__hasteMapForTest: data} = await new HasteMap(defaultConfig).build());\n-    expect(data.map['Strawberry']).toEqual({\n+    expect(data.map.get('Strawberry')).toEqual({\n       g: ['/fruits/strawberry.js', 0],\n     });\n   });\n@@ -785,31 +820,35 @@ describe('HasteMap', () => {\n       const {__hasteMapForTest: data} = await new HasteMap(\n         defaultConfig,\n       ).build();\n-      expect(data.duplicates).toEqual({\n-        Strawberry: {\n-          g: {'/fruits/another_strawberry.js': 0, '/fruits/strawberry.js': 0},\n-        },\n-      });\n-      expect(data.map['Strawberry']).toEqual({});\n+      expect(normalizeMap(data.duplicates)).toEqual(\n+        createMap({\n+          Strawberry: {\n+            g: {'/fruits/another_strawberry.js': 0, '/fruits/strawberry.js': 0},\n+          },\n+        }),\n+      );\n+      expect(data.map.get('Strawberry')).toEqual({});\n     });\n \n     it('recovers when a duplicate file is deleted', async () => {\n       delete mockFs['/fruits/another_strawberry.js'];\n       mockChangedFiles = object({\n         '/fruits/another_strawberry.js': null,\n       });\n-      mockClocks = object({\n+      mockClocks = createMap({\n         '/fruits': 'c:fake-clock:3',\n         '/vegetables': 'c:fake-clock:2',\n       });\n \n       const {__hasteMapForTest: data} = await new HasteMap(\n         defaultConfig,\n       ).build();\n-      expect(data.duplicates).toEqual({});\n-      expect(data.map['Strawberry']).toEqual({g: ['/fruits/strawberry.js', 0]});\n+      expect(normalizeMap(data.duplicates)).toEqual(new Map());\n+      expect(data.map.get('Strawberry')).toEqual({\n+        g: ['/fruits/strawberry.js', 0],\n+      });\n       // Make sure the other files are not affected.\n-      expect(data.map['Banana']).toEqual({g: ['/fruits/banana.js', 0]});\n+      expect(data.map.get('Banana')).toEqual({g: ['/fruits/banana.js', 0]});\n     });\n \n     it('recovers when a duplicate module is renamed', async () => {\n@@ -821,21 +860,23 @@ describe('HasteMap', () => {\n           'const Blackberry = require(\"Blackberry\");',\n         ].join('\\n'),\n       });\n-      mockClocks = object({\n+      mockClocks = createMap({\n         '/fruits': 'c:fake-clock:3',\n         '/vegetables': 'c:fake-clock:2',\n       });\n \n       const {__hasteMapForTest: data} = await new HasteMap(\n         defaultConfig,\n       ).build();\n-      expect(data.duplicates).toEqual({});\n-      expect(data.map['Strawberry']).toEqual({g: ['/fruits/strawberry.js', 0]});\n-      expect(data.map['AnotherStrawberry']).toEqual({\n+      expect(normalizeMap(data.duplicates)).toEqual(new Map());\n+      expect(data.map.get('Strawberry')).toEqual({\n+        g: ['/fruits/strawberry.js', 0],\n+      });\n+      expect(data.map.get('AnotherStrawberry')).toEqual({\n         g: ['/fruits/another_strawberry.js', 0],\n       });\n       // Make sure the other files are not affected.\n-      expect(data.map['Banana']).toEqual({g: ['/fruits/banana.js', 0]});\n+      expect(data.map.get('Banana')).toEqual({g: ['/fruits/banana.js', 0]});\n     });\n   });\n \n@@ -848,7 +889,7 @@ describe('HasteMap', () => {\n       mockChangedFiles = Object.create(null);\n \n       // Watchman would give us different clocks.\n-      mockClocks = object({\n+      mockClocks = createMap({\n         '/fruits': 'c:fake-clock:3',\n         '/vegetables': 'c:fake-clock:4',\n       });\n@@ -869,17 +910,17 @@ describe('HasteMap', () => {\n     watchman.mockImplementation(options =>\n       mockImpl(options).then(() => {\n         const {data} = options;\n-        data.files['/fruits/invalid/file.js'] = ['', 34, 0, []];\n+        data.files.set('/fruits/invalid/file.js', ['', 34, 0, []]);\n         return data;\n       }),\n     );\n     return new HasteMap(defaultConfig)\n       .build()\n       .then(({__hasteMapForTest: data}) => {\n-        expect(Object.keys(data.files).length).toBe(5);\n+        expect(data.files.size).toBe(5);\n \n         // Ensure this file is not part of the file list.\n-        expect(data.files['/fruits/invalid/file.js']).toBe(undefined);\n+        expect(data.files.get('/fruits/invalid/file.js')).toBe(undefined);\n       });\n   });\n \n@@ -952,7 +993,7 @@ describe('HasteMap', () => {\n     });\n     node.mockImplementation(options => {\n       const {data} = options;\n-      data.files = object({\n+      data.files = createMap({\n         '/fruits/banana.js': ['', 32, 0, [], null],\n       });\n       return Promise.resolve(data);\n@@ -964,9 +1005,11 @@ describe('HasteMap', () => {\n         expect(watchman).toBeCalled();\n         expect(node).toBeCalled();\n \n-        expect(data.files).toEqual({\n-          '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry'], null],\n-        });\n+        expect(data.files).toEqual(\n+          createMap({\n+            '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry'], null],\n+          }),\n+        );\n \n         expect(console.warn.mock.calls[0][0]).toMatchSnapshot();\n       });\n@@ -981,7 +1024,7 @@ describe('HasteMap', () => {\n     );\n     node.mockImplementation(options => {\n       const {data} = options;\n-      data.files = object({\n+      data.files = createMap({\n         '/fruits/banana.js': ['', 32, 0, [], null],\n       });\n       return Promise.resolve(data);\n@@ -993,9 +1036,11 @@ describe('HasteMap', () => {\n         expect(watchman).toBeCalled();\n         expect(node).toBeCalled();\n \n-        expect(data.files).toEqual({\n-          '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry'], null],\n-        });\n+        expect(data.files).toEqual(\n+          createMap({\n+            '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry'], null],\n+          }),\n+        );\n       });\n   });\n "},{"sha":"cd724395ae2716a11365c1a48839fabdb2efa48e","filename":"packages/jest-haste-map/src/crawlers/__tests__/node.test.js","status":"modified","additions":40,"deletions":30,"changes":70,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -68,6 +68,7 @@ jest.mock('fs', () => {\n });\n \n const pearMatcher = path => /pear/.test(path);\n+const createMap = obj => new Map(Object.keys(obj).map(key => [key, obj[key]]));\n \n let mockResponse;\n let nodeCrawl;\n@@ -104,7 +105,7 @@ describe('node crawler', () => {\n \n     const promise = nodeCrawl({\n       data: {\n-        files: Object.create(null),\n+        files: new Map(),\n       },\n       extensions: ['js', 'json'],\n       ignore: pearMatcher,\n@@ -126,11 +127,13 @@ describe('node crawler', () => {\n \n       expect(data.files).not.toBe(null);\n \n-      expect(data.files).toEqual({\n-        '/fruits/strawberry.js': ['', 32, 0, [], null],\n-        '/fruits/tomato.js': ['', 33, 0, [], null],\n-        '/vegetables/melon.json': ['', 34, 0, [], null],\n-      });\n+      expect(data.files).toEqual(\n+        createMap({\n+          '/fruits/strawberry.js': ['', 32, 0, [], null],\n+          '/fruits/tomato.js': ['', 33, 0, [], null],\n+          '/vegetables/melon.json': ['', 34, 0, [], null],\n+        }),\n+      );\n     });\n \n     return promise;\n@@ -141,26 +144,28 @@ describe('node crawler', () => {\n \n     nodeCrawl = require('../node');\n \n-    const files = Object.create(null);\n-\n     // In this test sample, strawberry is changed and tomato is unchanged\n     const tomato = ['', 33, 1, [], null];\n-    files['/fruits/strawberry.js'] = ['', 30, 1, [], null];\n-    files['/fruits/tomato.js'] = tomato;\n+    const files = createMap({\n+      '/fruits/strawberry.js': ['', 30, 1, [], null],\n+      '/fruits/tomato.js': tomato,\n+    });\n \n     return nodeCrawl({\n       data: {files},\n       extensions: ['js'],\n       ignore: pearMatcher,\n       roots: ['/fruits'],\n     }).then(data => {\n-      expect(data.files).toEqual({\n-        '/fruits/strawberry.js': ['', 32, 0, [], null],\n-        '/fruits/tomato.js': tomato,\n-      });\n+      expect(data.files).toEqual(\n+        createMap({\n+          '/fruits/strawberry.js': ['', 32, 0, [], null],\n+          '/fruits/tomato.js': tomato,\n+        }),\n+      );\n \n       // Make sure it is the *same* unchanged object.\n-      expect(data.files['/fruits/tomato.js']).toBe(tomato);\n+      expect(data.files.get('/fruits/tomato.js')).toBe(tomato);\n     });\n   });\n \n@@ -169,17 +174,20 @@ describe('node crawler', () => {\n \n     nodeCrawl = require('../node');\n \n-    const files = Object.create(null);\n     return nodeCrawl({\n-      data: {files},\n+      data: {\n+        files: new Map(),\n+      },\n       extensions: ['js'],\n       ignore: pearMatcher,\n       roots: ['/fruits'],\n     }).then(data => {\n-      expect(data.files).toEqual({\n-        '/fruits/directory/strawberry.js': ['', 33, 0, [], null],\n-        '/fruits/tomato.js': ['', 32, 0, [], null],\n-      });\n+      expect(data.files).toEqual(\n+        createMap({\n+          '/fruits/directory/strawberry.js': ['', 33, 0, [], null],\n+          '/fruits/tomato.js': ['', 32, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -188,18 +196,20 @@ describe('node crawler', () => {\n \n     nodeCrawl = require('../node');\n \n-    const files = Object.create(null);\n+    const files = new Map();\n     return nodeCrawl({\n       data: {files},\n       extensions: ['js'],\n       forceNodeFilesystemAPI: true,\n       ignore: pearMatcher,\n       roots: ['/fruits'],\n     }).then(data => {\n-      expect(data.files).toEqual({\n-        '/fruits/directory/strawberry.js': ['', 33, 0, [], null],\n-        '/fruits/tomato.js': ['', 32, 0, [], null],\n-      });\n+      expect(data.files).toEqual(\n+        createMap({\n+          '/fruits/directory/strawberry.js': ['', 33, 0, [], null],\n+          '/fruits/tomato.js': ['', 32, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -208,15 +218,15 @@ describe('node crawler', () => {\n \n     nodeCrawl = require('../node');\n \n-    const files = Object.create(null);\n+    const files = new Map();\n     return nodeCrawl({\n       data: {files},\n       extensions: ['js'],\n       forceNodeFilesystemAPI: true,\n       ignore: pearMatcher,\n       roots: [],\n     }).then(data => {\n-      expect(data.files).toEqual({});\n+      expect(data.files).toEqual(new Map());\n     });\n   });\n \n@@ -225,14 +235,14 @@ describe('node crawler', () => {\n \n     nodeCrawl = require('../node');\n \n-    const files = Object.create(null);\n+    const files = new Map();\n     return nodeCrawl({\n       data: {files},\n       extensions: ['js'],\n       ignore: pearMatcher,\n       roots: ['/error'],\n     }).then(data => {\n-      expect(data.files).toEqual({});\n+      expect(data.files).toEqual(new Map());\n     });\n   });\n });"},{"sha":"ebb9574e0974a9ad13759b77c695b9b65228c937","filename":"packages/jest-haste-map/src/crawlers/__tests__/watchman.test.js","status":"modified","additions":66,"deletions":48,"changes":114,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -53,6 +53,8 @@ const WATCH_PROJECT_MOCK = {\n   },\n };\n \n+const createMap = obj => new Map(Object.keys(obj).map(key => [key, obj[key]]));\n+\n describe('watchman watch', () => {\n   beforeEach(() => {\n     watchmanCrawl = require('../watchman');\n@@ -97,7 +99,7 @@ describe('watchman watch', () => {\n       'watch-project': WATCH_PROJECT_MOCK,\n     };\n \n-    mockFiles = Object.assign(Object.create(null), {\n+    mockFiles = createMap({\n       [MELON]: ['', 33, 0, [], null],\n       [STRAWBERRY]: ['', 30, 0, [], null],\n       [TOMATO]: ['', 31, 0, [], null],\n@@ -111,8 +113,8 @@ describe('watchman watch', () => {\n   test('returns a list of all files when there are no clocks', () =>\n     watchmanCrawl({\n       data: {\n-        clocks: Object.create(null),\n-        files: Object.create(null),\n+        clocks: new Map(),\n+        files: new Map(),\n       },\n       extensions: ['js', 'json'],\n       ignore: pearMatcher,\n@@ -148,9 +150,11 @@ describe('watchman watch', () => {\n         'vegetables/**/*.json',\n       ]);\n \n-      expect(data.clocks).toEqual({\n-        [ROOT_MOCK]: 'c:fake-clock:1',\n-      });\n+      expect(data.clocks).toEqual(\n+        createMap({\n+          [ROOT_MOCK]: 'c:fake-clock:1',\n+        }),\n+      );\n \n       expect(data.files).toEqual(mockFiles);\n \n@@ -186,7 +190,7 @@ describe('watchman watch', () => {\n       'watch-project': WATCH_PROJECT_MOCK,\n     };\n \n-    const clocks = Object.assign(Object.create(null), {\n+    const clocks = createMap({\n       [ROOT_MOCK]: 'c:fake-clock:1',\n     });\n \n@@ -202,15 +206,19 @@ describe('watchman watch', () => {\n       // The object was reused.\n       expect(data.files).toBe(mockFiles);\n \n-      expect(data.clocks).toEqual({\n-        [ROOT_MOCK]: 'c:fake-clock:2',\n-      });\n-\n-      expect(data.files).toEqual({\n-        [KIWI]: ['', 42, 0, [], null],\n-        [MELON]: ['', 33, 0, [], null],\n-        [STRAWBERRY]: ['', 30, 0, [], null],\n-      });\n+      expect(data.clocks).toEqual(\n+        createMap({\n+          [ROOT_MOCK]: 'c:fake-clock:2',\n+        }),\n+      );\n+\n+      expect(data.files).toEqual(\n+        createMap({\n+          [KIWI]: ['', 42, 0, [], null],\n+          [MELON]: ['', 33, 0, [], null],\n+          [STRAWBERRY]: ['', 30, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -249,9 +257,9 @@ describe('watchman watch', () => {\n     };\n \n     const mockMetadata = ['Banana', 41, 1, ['Raspberry'], null];\n-    mockFiles[BANANA] = mockMetadata;\n+    mockFiles.set(BANANA, mockMetadata);\n \n-    const clocks = Object.assign(Object.create(null), {\n+    const clocks = createMap({\n       [ROOT_MOCK]: 'c:fake-clock:1',\n     });\n \n@@ -267,22 +275,26 @@ describe('watchman watch', () => {\n       // The file object was *not* reused.\n       expect(data.files).not.toBe(mockFiles);\n \n-      expect(data.clocks).toEqual({\n-        [ROOT_MOCK]: 'c:fake-clock:3',\n-      });\n+      expect(data.clocks).toEqual(\n+        createMap({\n+          [ROOT_MOCK]: 'c:fake-clock:3',\n+        }),\n+      );\n \n       // /fruits/strawberry.js was removed from the file list.\n-      expect(data.files).toEqual({\n-        [BANANA]: mockMetadata,\n-        [KIWI]: ['', 42, 0, [], null],\n-        [TOMATO]: mockFiles[TOMATO],\n-      });\n+      expect(data.files).toEqual(\n+        createMap({\n+          [BANANA]: mockMetadata,\n+          [KIWI]: ['', 42, 0, [], null],\n+          [TOMATO]: mockFiles.get(TOMATO),\n+        }),\n+      );\n \n       // Even though the file list was reset, old file objects are still reused\n       // if no changes have been made.\n-      expect(data.files[BANANA]).toBe(mockMetadata);\n+      expect(data.files.get(BANANA)).toBe(mockMetadata);\n \n-      expect(data.files[TOMATO]).toBe(mockFiles[TOMATO]);\n+      expect(data.files.get(TOMATO)).toBe(mockFiles.get(TOMATO));\n     });\n   });\n \n@@ -329,7 +341,7 @@ describe('watchman watch', () => {\n       },\n     };\n \n-    const clocks = Object.assign(Object.create(null), {\n+    const clocks = createMap({\n       [FRUITS]: 'c:fake-clock:1',\n       [VEGETABLES]: 'c:fake-clock:2',\n     });\n@@ -343,15 +355,19 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       roots: ROOTS,\n     }).then(data => {\n-      expect(data.clocks).toEqual({\n-        [FRUITS]: 'c:fake-clock:3',\n-        [VEGETABLES]: 'c:fake-clock:4',\n-      });\n-\n-      expect(data.files).toEqual({\n-        [KIWI]: ['', 42, 0, [], null],\n-        [MELON]: ['', 33, 0, [], null],\n-      });\n+      expect(data.clocks).toEqual(\n+        createMap({\n+          [FRUITS]: 'c:fake-clock:3',\n+          [VEGETABLES]: 'c:fake-clock:4',\n+        }),\n+      );\n+\n+      expect(data.files).toEqual(\n+        createMap({\n+          [KIWI]: ['', 42, 0, [], null],\n+          [MELON]: ['', 33, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -387,8 +403,8 @@ describe('watchman watch', () => {\n \n     return watchmanCrawl({\n       data: {\n-        clocks: Object.create(null),\n-        files: Object.create(null),\n+        clocks: new Map(),\n+        files: new Map(),\n       },\n       extensions: ['js', 'json'],\n       ignore: pearMatcher,\n@@ -419,11 +435,13 @@ describe('watchman watch', () => {\n \n       expect(query[2].glob).toEqual(['**/*.js', '**/*.json']);\n \n-      expect(data.clocks).toEqual({\n-        [ROOT_MOCK]: 'c:fake-clock:1',\n-      });\n+      expect(data.clocks).toEqual(\n+        createMap({\n+          [ROOT_MOCK]: 'c:fake-clock:1',\n+        }),\n+      );\n \n-      expect(data.files).toEqual({});\n+      expect(data.files).toEqual(createMap({}));\n \n       expect(client.end).toBeCalled();\n     });\n@@ -454,8 +472,8 @@ describe('watchman watch', () => {\n     await watchmanCrawl({\n       computeSha1: true,\n       data: {\n-        clocks: Object.create(null),\n-        files: Object.create(null),\n+        clocks: new Map(),\n+        files: new Map(),\n       },\n       extensions: ['js', 'json'],\n       roots: [ROOT_MOCK],\n@@ -493,8 +511,8 @@ describe('watchman watch', () => {\n     await watchmanCrawl({\n       computeSha1: true,\n       data: {\n-        clocks: Object.create(null),\n-        files: Object.create(null),\n+        clocks: new Map(),\n+        files: new Map(),\n       },\n       extensions: ['js', 'json'],\n       roots: [ROOT_MOCK],"},{"sha":"16e1e89114b77e0d6045e3fa9fc70725726e25e2","filename":"packages/jest-haste-map/src/crawlers/node.js","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -131,16 +131,16 @@ module.exports = function nodeCrawl(\n \n   return new Promise(resolve => {\n     const callback = list => {\n-      const files = Object.create(null);\n+      const files = new Map();\n       list.forEach(fileData => {\n         const name = fileData[0];\n         const mtime = fileData[1];\n-        const existingFile = data.files[name];\n+        const existingFile = data.files.get(name);\n         if (existingFile && existingFile[H.MTIME] === mtime) {\n-          files[name] = existingFile;\n+          files.set(name, existingFile);\n         } else {\n           // See ../constants.js; SHA-1 will always be null and fulfilled later.\n-          files[name] = ['', mtime, 0, [], null];\n+          files.set(name, ['', mtime, 0, [], null]);\n         }\n       });\n       data.files = files;"},{"sha":"684d6eeb55e107121a30abb27c0e3f4401091211","filename":"packages/jest-haste-map/src/crawlers/watchman.js","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -112,9 +112,9 @@ module.exports = async function watchmanCrawl(\n             }\n           }\n \n-          const query = clocks[root]\n+          const query = clocks.has(root)\n             ? // Use the `since` generator if we have a clock available\n-              {expression, fields, since: clocks[root]}\n+              {expression, fields, since: clocks.get(root)}\n             : // Otherwise use the `glob` filter\n               {expression, fields, glob};\n \n@@ -145,7 +145,7 @@ module.exports = async function watchmanCrawl(\n     // Reset the file map if watchman was restarted and sends us a list of\n     // files.\n     if (watchmanFileResults.isFresh) {\n-      files = Object.create(null);\n+      files = new Map();\n     }\n \n     watchmanFiles = watchmanFileResults.files;\n@@ -159,20 +159,19 @@ module.exports = async function watchmanCrawl(\n \n   for (const [watchRoot, response] of watchmanFiles) {\n     const fsRoot = normalizePathSep(watchRoot);\n-    clocks[fsRoot] = response.clock;\n+    clocks.set(fsRoot, response.clock);\n     for (const fileData of response.files) {\n       const name = fsRoot + path.sep + normalizePathSep(fileData.name);\n       if (!fileData.exists) {\n-        delete files[name];\n+        files.delete(name);\n       } else if (!ignore(name)) {\n         const mtime =\n           typeof fileData.mtime_ms === 'number'\n             ? fileData.mtime_ms\n             : fileData.mtime_ms.toNumber();\n-        const existingFileData = data.files[name];\n-        const isOld = existingFileData && existingFileData[H.MTIME] === mtime;\n-        if (isOld) {\n-          files[name] = existingFileData;\n+        const existingFileData = data.files.get(name);\n+        if (existingFileData && existingFileData[H.MTIME] === mtime) {\n+          files.set(name, existingFileData);\n         } else {\n           let sha1hex = fileData['content.sha1hex'];\n \n@@ -181,7 +180,7 @@ module.exports = async function watchmanCrawl(\n           }\n \n           // See ../constants.js\n-          files[name] = ['', mtime, 0, [], sha1hex];\n+          files.set(name, ['', mtime, 0, [], sha1hex]);\n         }\n       }\n     }"},{"sha":"f62d84ab19c197ee0ae3999c1ee78463f6177667","filename":"packages/jest-haste-map/src/haste_fs.js","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fhaste_fs.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fhaste_fs.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fhaste_fs.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -22,31 +22,34 @@ export default class HasteFS {\n   }\n \n   getModuleName(file: Path): ?string {\n-    return (this._files[file] && this._files[file][H.ID]) || null;\n+    const fileMetadata = this._files.get(file);\n+    return (fileMetadata && fileMetadata[H.ID]) || null;\n   }\n \n   getDependencies(file: Path): ?Array<string> {\n-    return (this._files[file] && this._files[file][H.DEPENDENCIES]) || null;\n+    const fileMetadata = this._files.get(file);\n+    return (fileMetadata && fileMetadata[H.DEPENDENCIES]) || null;\n   }\n \n   getSha1(file: Path): ?string {\n-    return (this._files[file] && this._files[file][H.SHA1]) || null;\n+    const fileMetadata = this._files.get(file);\n+    return (fileMetadata && fileMetadata[H.SHA1]) || null;\n   }\n \n   exists(file: Path): boolean {\n-    return !!this._files[file];\n+    return this._files.has(file);\n   }\n \n   getAllFiles(): Array<string> {\n-    return Object.keys(this._files);\n+    return Array.from(this._files.keys());\n   }\n \n   matchFiles(pattern: RegExp | string): Array<Path> {\n     if (!(pattern instanceof RegExp)) {\n       pattern = new RegExp(pattern);\n     }\n     const files = [];\n-    for (const file in this._files) {\n+    for (const file of this._files.keys()) {\n       if (pattern.test(file)) {\n         files.push(file);\n       }\n@@ -56,7 +59,7 @@ export default class HasteFS {\n \n   matchFilesWithGlob(globs: Array<Glob>, root: ?Path): Set<Path> {\n     const files = new Set();\n-    for (const file in this._files) {\n+    for (const file of this._files.keys()) {\n       const filePath = root ? path.relative(root, file) : file;\n       if (micromatch([filePath], globs).length) {\n         files.add(file);"},{"sha":"86794bb2a5e0ddf92090af383dec654d08b77fbb","filename":"packages/jest-haste-map/src/index.js","status":"modified","additions":95,"deletions":76,"changes":171,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -41,6 +41,7 @@ import type {\n   HasteRegExp,\n   MockData,\n } from 'types/HasteMap';\n+import type {SerializableModuleMap as HasteSerializableModuleMap} from './module_map';\n \n type HType = typeof H;\n \n@@ -93,6 +94,7 @@ type Watcher = {\n type WorkerInterface = {worker: typeof worker, getSha1: typeof getSha1};\n \n export type ModuleMap = HasteModuleMap;\n+export type SerializableModuleMap = HasteSerializableModuleMap;\n export type FS = HasteFS;\n \n const CHANGE_INTERVAL = 30;\n@@ -311,10 +313,6 @@ class HasteMap extends EventEmitter {\n       hasteMap = this._createEmptyMap();\n     }\n \n-    for (const key in hasteMap) {\n-      Object.setPrototypeOf(hasteMap[key], null);\n-    }\n-\n     return hasteMap;\n   }\n \n@@ -340,13 +338,14 @@ class HasteMap extends EventEmitter {\n       .then(() => read.call(this))\n       .catch(() => this._createEmptyMap())\n       .then(cachedHasteMap => {\n-        const cachedFiles = Object.keys(cachedHasteMap.files).map(filePath => {\n-          const moduleName = cachedHasteMap.files[filePath][H.ID];\n-          return {moduleName, path: filePath};\n-        });\n+        const cachedFiles = [];\n+        for (const [filePath, fileMetadata] of cachedHasteMap.files) {\n+          const moduleName = fileMetadata[H.ID];\n+          cachedFiles.push({moduleName, path: filePath});\n+        }\n         return this._crawl(cachedHasteMap).then(hasteMap => {\n           const deprecatedFiles = cachedFiles.filter(file => {\n-            const fileData = hasteMap.files[file.path];\n+            const fileData = hasteMap.files.get(file.path);\n             return fileData == null || file.moduleName !== fileData[H.ID];\n           });\n           return {deprecatedFiles, hasteMap};\n@@ -365,11 +364,11 @@ class HasteMap extends EventEmitter {\n     workerOptions: ?{forceInBand: boolean},\n   ): ?Promise<void> {\n     const setModule = (id: string, module: ModuleMetaData) => {\n-      if (!map[id]) {\n-        // $FlowFixMe\n-        map[id] = Object.create(null);\n+      let moduleMap = map.get(id);\n+      if (!moduleMap) {\n+        moduleMap = Object.create(null);\n+        map.set(id, moduleMap);\n       }\n-      const moduleMap = map[id];\n       const platform =\n         getPlatformExtension(module[H.PATH], this._options.platforms) ||\n         H.GENERIC_PLATFORM;\n@@ -391,19 +390,20 @@ class HasteMap extends EventEmitter {\n         // We do NOT want consumers to use a module that is ambiguous.\n         delete moduleMap[platform];\n         if (Object.keys(moduleMap).length === 1) {\n-          delete map[id];\n+          map.delete(id);\n         }\n-        let dupsByPlatform = hasteMap.duplicates[id];\n+        let dupsByPlatform = hasteMap.duplicates.get(id);\n         if (dupsByPlatform == null) {\n-          dupsByPlatform = hasteMap.duplicates[id] = (Object.create(null): any);\n+          dupsByPlatform = Object.create(null);\n+          hasteMap.duplicates.set(id, dupsByPlatform);\n         }\n-        const dups = (dupsByPlatform[platform] = (Object.create(null): any));\n+        const dups = (dupsByPlatform[platform] = Object.create(null));\n         dups[module[H.PATH]] = module[H.TYPE];\n         dups[existingModule[H.PATH]] = existingModule[H.TYPE];\n         return;\n       }\n \n-      const dupsByPlatform = hasteMap.duplicates[id];\n+      const dupsByPlatform = hasteMap.duplicates.get(id);\n       if (dupsByPlatform != null) {\n         const dups = dupsByPlatform[platform];\n         if (dups != null) {\n@@ -415,8 +415,14 @@ class HasteMap extends EventEmitter {\n       moduleMap[platform] = module;\n     };\n \n-    const fileMetadata = hasteMap.files[filePath];\n-    const moduleMetadata = hasteMap.map[fileMetadata[H.ID]];\n+    const fileMetadata = hasteMap.files.get(filePath);\n+    if (!fileMetadata) {\n+      throw new Error(\n+        'jest-haste-map: File to process was not found in the haste map.',\n+      );\n+    }\n+\n+    const moduleMetadata = hasteMap.map.get(fileMetadata[H.ID]);\n     const computeSha1 = this._options.computeSha1 && !fileMetadata[H.SHA1];\n \n     // Callback called when the response from the worker is successful.\n@@ -453,7 +459,7 @@ class HasteMap extends EventEmitter {\n \n       // If a file cannot be read we remove it from the file list and\n       // ignore the failure silently.\n-      delete hasteMap.files[filePath];\n+      hasteMap.files.delete(filePath);\n     };\n \n     // If we retain all files in the virtual HasteFS representation, we avoid\n@@ -478,7 +484,8 @@ class HasteMap extends EventEmitter {\n       this._options.mocksPattern.test(filePath)\n     ) {\n       const mockPath = getMockName(filePath);\n-      if (mocks[mockPath]) {\n+      const existingMockPath = mocks.get(mockPath);\n+      if (existingMockPath) {\n         this._console.warn(\n           `jest-haste-map: duplicate manual mock found:\\n` +\n             `  Module name: ${mockPath}\\n` +\n@@ -487,10 +494,10 @@ class HasteMap extends EventEmitter {\n             `Jest will use the mock file found in: \\n` +\n             `${filePath}\\n` +\n             ` Please delete one of the following two files: \\n ` +\n-            `${mocks[mockPath]}\\n${filePath}\\n\\n`,\n+            `${existingMockPath}\\n${filePath}\\n\\n`,\n         );\n       }\n-      mocks[mockPath] = filePath;\n+      mocks.set(mockPath, filePath);\n     }\n \n     if (fileMetadata[H.VISITED]) {\n@@ -509,8 +516,12 @@ class HasteMap extends EventEmitter {\n           return null;\n         }\n \n-        const modulesByPlatform =\n-          map[fileMetadata[H.ID]] || (map[fileMetadata[H.ID]] = {});\n+        const moduleId = fileMetadata[H.ID];\n+        let modulesByPlatform = map.get(moduleId);\n+        if (!modulesByPlatform) {\n+          modulesByPlatform = Object.create(null);\n+          map.set(moduleId, modulesByPlatform);\n+        }\n         modulesByPlatform[platform] = module;\n \n         return null;\n@@ -532,16 +543,16 @@ class HasteMap extends EventEmitter {\n     hasteMap: InternalHasteMap,\n   }): Promise<InternalHasteMap> {\n     const {deprecatedFiles, hasteMap} = data;\n-    const map = Object.create(null);\n-    const mocks = Object.create(null);\n+    const map = new Map();\n+    const mocks = new Map();\n     const promises = [];\n \n     for (let i = 0; i < deprecatedFiles.length; ++i) {\n       const file = deprecatedFiles[i];\n       this._recoverDuplicates(hasteMap, file.path, file.moduleName);\n     }\n \n-    for (const filePath in hasteMap.files) {\n+    for (const filePath of hasteMap.files.keys()) {\n       // SHA-1, if requested, should already be present thanks to the crawler.\n       const promise = this._processFile(hasteMap, map, mocks, filePath);\n       if (promise) {\n@@ -752,45 +763,49 @@ class HasteMap extends EventEmitter {\n           if (mustCopy) {\n             mustCopy = false;\n             hasteMap = {\n-              clocks: copy(hasteMap.clocks),\n-              duplicates: copy(hasteMap.duplicates),\n-              files: copy(hasteMap.files),\n-              map: copy(hasteMap.map),\n-              mocks: copy(hasteMap.mocks),\n+              clocks: new Map(hasteMap.clocks),\n+              duplicates: new Map(hasteMap.duplicates),\n+              files: new Map(hasteMap.files),\n+              map: new Map(hasteMap.map),\n+              mocks: new Map(hasteMap.mocks),\n             };\n           }\n \n           const add = () => eventsQueue.push({filePath, stat, type});\n \n-          // Delete the file and all of its metadata.\n-          const moduleName =\n-            hasteMap.files[filePath] && hasteMap.files[filePath][H.ID];\n-          const platform: string =\n-            getPlatformExtension(filePath, this._options.platforms) ||\n-            H.GENERIC_PLATFORM;\n-\n-          delete hasteMap.files[filePath];\n-          let moduleMap = hasteMap.map[moduleName];\n-          if (moduleMap != null) {\n-            // We are forced to copy the object because jest-haste-map exposes\n-            // the map as an immutable entity.\n-            moduleMap = copy(moduleMap);\n-            delete moduleMap[platform];\n-            if (Object.keys(moduleMap).length === 0) {\n-              delete hasteMap.map[moduleName];\n-            } else {\n-              hasteMap.map[moduleName] = moduleMap;\n+          const fileMetadata = hasteMap.files.get(filePath);\n+\n+          // If it's not an addition, delete the file and all its metadata\n+          if (fileMetadata != null) {\n+            const moduleName = fileMetadata[H.ID];\n+            const platform =\n+              getPlatformExtension(filePath, this._options.platforms) ||\n+              H.GENERIC_PLATFORM;\n+            hasteMap.files.delete(filePath);\n+\n+            let moduleMap = hasteMap.map.get(moduleName);\n+            if (moduleMap != null) {\n+              // We are forced to copy the object because jest-haste-map exposes\n+              // the map as an immutable entity.\n+              moduleMap = copy(moduleMap);\n+              delete moduleMap[platform];\n+              if (Object.keys(moduleMap).length === 0) {\n+                hasteMap.map.delete(moduleName);\n+              } else {\n+                hasteMap.map.set(moduleName, moduleMap);\n+              }\n             }\n-          }\n-          if (\n-            this._options.mocksPattern &&\n-            this._options.mocksPattern.test(filePath)\n-          ) {\n-            const mockName = getMockName(filePath);\n-            delete hasteMap.mocks[mockName];\n-          }\n \n-          this._recoverDuplicates(hasteMap, filePath, moduleName);\n+            if (\n+              this._options.mocksPattern &&\n+              this._options.mocksPattern.test(filePath)\n+            ) {\n+              const mockName = getMockName(filePath);\n+              hasteMap.mocks.delete(mockName);\n+            }\n+\n+            this._recoverDuplicates(hasteMap, filePath, moduleName);\n+          }\n \n           // If the file was added or changed,\n           // parse it and update the haste map.\n@@ -800,7 +815,7 @@ class HasteMap extends EventEmitter {\n               'since the file exists or changed, it should have stats',\n             );\n             const fileMetadata = ['', stat.mtime.getTime(), 0, [], null];\n-            hasteMap.files[filePath] = fileMetadata;\n+            hasteMap.files.set(filePath, fileMetadata);\n             const promise = this._processFile(\n               hasteMap,\n               hasteMap.map,\n@@ -850,35 +865,40 @@ class HasteMap extends EventEmitter {\n     filePath: string,\n     moduleName: string,\n   ) {\n-    let dupsByPlatform = hasteMap.duplicates[moduleName];\n+    let dupsByPlatform = hasteMap.duplicates.get(moduleName);\n     if (dupsByPlatform == null) {\n       return;\n     }\n+\n     const platform =\n       getPlatformExtension(filePath, this._options.platforms) ||\n       H.GENERIC_PLATFORM;\n     let dups = dupsByPlatform[platform];\n     if (dups == null) {\n       return;\n     }\n-    dupsByPlatform = hasteMap.duplicates[moduleName] = (copy(\n-      dupsByPlatform,\n-    ): any);\n-    dups = dupsByPlatform[platform] = (copy(dups): any);\n+\n+    dupsByPlatform = copy(dupsByPlatform);\n+    hasteMap.duplicates.set(moduleName, dupsByPlatform);\n+    dups = copy(dups);\n+    dupsByPlatform[platform] = dups;\n+\n     const dedupType = dups[filePath];\n     delete dups[filePath];\n     const filePaths = Object.keys(dups);\n     if (filePaths.length > 1) {\n       return;\n     }\n-    let dedupMap = hasteMap.map[moduleName];\n+\n+    let dedupMap = hasteMap.map.get(moduleName);\n     if (dedupMap == null) {\n-      dedupMap = hasteMap.map[moduleName] = (Object.create(null): any);\n+      dedupMap = Object.create(null);\n+      hasteMap.map.set(moduleName, dedupMap);\n     }\n     dedupMap[platform] = [filePaths[0], dedupType];\n     delete dupsByPlatform[platform];\n     if (Object.keys(dupsByPlatform).length === 0) {\n-      delete hasteMap.duplicates[moduleName];\n+      hasteMap.duplicates.delete(moduleName);\n     }\n   }\n \n@@ -936,13 +956,12 @@ class HasteMap extends EventEmitter {\n   }\n \n   _createEmptyMap(): InternalHasteMap {\n-    // $FlowFixMe\n     return {\n-      clocks: Object.create(null),\n-      duplicates: Object.create(null),\n-      files: Object.create(null),\n-      map: Object.create(null),\n-      mocks: Object.create(null),\n+      clocks: new Map(),\n+      duplicates: new Map(),\n+      files: new Map(),\n+      map: new Map(),\n+      mocks: new Map(),\n     };\n   }\n "},{"sha":"fdf673d01cd06df0066382549302b06db5ba6c83","filename":"packages/jest-haste-map/src/module_map.js","status":"modified","additions":40,"deletions":3,"changes":43,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fmodule_map.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-haste-map%2Fsrc%2Fmodule_map.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fmodule_map.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -13,12 +13,25 @@ import type {\n   HTypeValue,\n   ModuleMetaData,\n   RawModuleMap,\n+  ModuleMapData,\n+  DuplicatesIndex,\n+  MockData,\n } from 'types/HasteMap';\n \n import H from './constants';\n \n const EMPTY_MAP = {};\n \n+export opaque type SerializableModuleMap = {\n+  // There is no easier way to extract the type of the entries of a Map\n+  duplicates: $Call<\n+    typeof Array.from,\n+    $Call<$PropertyType<DuplicatesIndex, 'entries'>>,\n+  >,\n+  map: $Call<typeof Array.from, $Call<$PropertyType<ModuleMapData, 'entries'>>>,\n+  mocks: $Call<typeof Array.from, $Call<$PropertyType<MockData, 'entries'>>>,\n+};\n+\n export default class ModuleMap {\n   _raw: RawModuleMap;\n   static DuplicateHasteCandidatesError: Class<DuplicateHasteCandidatesError>;\n@@ -56,7 +69,7 @@ export default class ModuleMap {\n   }\n \n   getMockModule(name: string): ?Path {\n-    return this._raw.mocks[name] || this._raw.mocks[name + '/index'];\n+    return this._raw.mocks.get(name) || this._raw.mocks.get(name + '/index');\n   }\n \n   getRawModuleMap(): RawModuleMap {\n@@ -67,6 +80,22 @@ export default class ModuleMap {\n     };\n   }\n \n+  toJSON(): SerializableModuleMap {\n+    return {\n+      duplicates: Array.from(this._raw.duplicates),\n+      map: Array.from(this._raw.map),\n+      mocks: Array.from(this._raw.mocks),\n+    };\n+  }\n+\n+  static fromJSON(serializableModuleMap: SerializableModuleMap) {\n+    return new ModuleMap({\n+      duplicates: new Map(serializableModuleMap.duplicates),\n+      map: new Map(serializableModuleMap.map),\n+      mocks: new Map(serializableModuleMap.mocks),\n+    });\n+  }\n+\n   /**\n    * When looking up a module's data, we walk through each eligible platform for\n    * the query. For each platform, we want to check if there are known\n@@ -80,8 +109,8 @@ export default class ModuleMap {\n     platform: ?string,\n     supportsNativePlatform: boolean,\n   ): ?ModuleMetaData {\n-    const map = this._raw.map[name] || EMPTY_MAP;\n-    const dupMap = this._raw.duplicates[name] || EMPTY_MAP;\n+    const map = this._raw.map.get(name) || EMPTY_MAP;\n+    const dupMap = this._raw.duplicates.get(name) || EMPTY_MAP;\n     if (platform != null) {\n       this._assertNoDuplicates(\n         name,\n@@ -132,6 +161,14 @@ export default class ModuleMap {\n       set,\n     );\n   }\n+\n+  static create() {\n+    return new ModuleMap({\n+      duplicates: new Map(),\n+      map: new Map(),\n+      mocks: new Map(),\n+    });\n+  }\n }\n \n class DuplicateHasteCandidatesError extends Error {"},{"sha":"837f4c4c3c980517fa5168ce28d168bdca580b8b","filename":"packages/jest-resolve/src/__tests__/resolve.test.js","status":"modified","additions":6,"deletions":18,"changes":24,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-resolve%2Fsrc%2F__tests__%2Fresolve.test.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-resolve%2Fsrc%2F__tests__%2Fresolve.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve%2Fsrc%2F__tests__%2Fresolve.test.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -23,7 +23,7 @@ beforeEach(() => {\n \n describe('isCoreModule', () => {\n   it('returns false if `hasCoreModules` is false.', () => {\n-    const moduleMap = new ModuleMap();\n+    const moduleMap = ModuleMap.create();\n     const resolver = new Resolver(moduleMap, {\n       hasCoreModules: false,\n     });\n@@ -32,14 +32,14 @@ describe('isCoreModule', () => {\n   });\n \n   it('returns true if `hasCoreModules` is true and `moduleName` is a core module.', () => {\n-    const moduleMap = new ModuleMap();\n+    const moduleMap = ModuleMap.create();\n     const resolver = new Resolver(moduleMap, {});\n     const isCore = resolver.isCoreModule('assert');\n     expect(isCore).toEqual(true);\n   });\n \n   it('returns false if `hasCoreModules` is true and `moduleName` is not a core module.', () => {\n-    const moduleMap = new ModuleMap();\n+    const moduleMap = ModuleMap.create();\n     const resolver = new Resolver(moduleMap, {});\n     const isCore = resolver.isCoreModule('not-a-core-module');\n     expect(isCore).toEqual(false);\n@@ -82,11 +82,7 @@ describe('findNodeModule', () => {\n describe('resolveModule', () => {\n   let moduleMap;\n   beforeEach(() => {\n-    moduleMap = new ModuleMap({\n-      duplicates: [],\n-      map: [],\n-      mocks: [],\n-    });\n+    moduleMap = ModuleMap.create();\n   });\n \n   it('is possible to resolve node modules', () => {\n@@ -163,11 +159,7 @@ describe('getMockModule', () => {\n   it('is possible to use custom resolver to resolve deps inside mock modules with moduleNameMapper', () => {\n     userResolver.mockImplementation(() => 'module');\n \n-    const moduleMap = new ModuleMap({\n-      duplicates: [],\n-      map: [],\n-      mocks: [],\n-    });\n+    const moduleMap = ModuleMap.create();\n     const resolver = new Resolver(moduleMap, {\n       moduleNameMapper: [\n         {\n@@ -204,11 +196,7 @@ describe('Resolver.getModulePaths() -> nodeModulesPaths()', () => {\n   beforeEach(() => {\n     jest.resetModules();\n \n-    moduleMap = new ModuleMap({\n-      duplicates: [],\n-      map: [],\n-      mocks: [],\n-    });\n+    moduleMap = ModuleMap.create();\n \n     // Mocking realpath to function the old way, where it just looks at\n     // pathstrings instead of actually trying to access the physical directory."},{"sha":"94ae275e4aa30fccec6e25c14132ee59628d8715","filename":"packages/jest-runner/src/__tests__/test_runner.test.js","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-runner%2Fsrc%2F__tests__%2Ftest_runner.test.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-runner%2Fsrc%2F__tests__%2Ftest_runner.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2F__tests__%2Ftest_runner.test.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -27,13 +27,13 @@ jest.mock('jest-worker', () =>\n \n jest.mock('../test_worker', () => {});\n \n-test('injects the rawModuleMap into each worker in watch mode', () => {\n+test('injects the serializable module map into each worker in watch mode', () => {\n   const globalConfig = {maxWorkers: 2, watch: true};\n   const config = {rootDir: '/path/'};\n-  const rawModuleMap = jest.fn();\n+  const serializableModuleMap = jest.fn();\n   const context = {\n     config,\n-    moduleMap: {getRawModuleMap: () => rawModuleMap},\n+    moduleMap: {toJSON: () => serializableModuleMap},\n   };\n   return new TestRunner(globalConfig)\n     .runTests(\n@@ -46,13 +46,20 @@ test('injects the rawModuleMap into each worker in watch mode', () => {\n     )\n     .then(() => {\n       expect(mockWorkerFarm.worker.mock.calls).toEqual([\n-        [{config, globalConfig, path: './file.test.js', rawModuleMap}],\n-        [{config, globalConfig, path: './file2.test.js', rawModuleMap}],\n+        [{config, globalConfig, path: './file.test.js', serializableModuleMap}],\n+        [\n+          {\n+            config,\n+            globalConfig,\n+            path: './file2.test.js',\n+            serializableModuleMap,\n+          },\n+        ],\n       ]);\n     });\n });\n \n-test('does not inject the rawModuleMap in serial mode', () => {\n+test('does not inject the serializable module map in serial mode', () => {\n   const globalConfig = {maxWorkers: 1, watch: false};\n   const config = {rootDir: '/path/'};\n   const context = {config};\n@@ -73,15 +80,15 @@ test('does not inject the rawModuleMap in serial mode', () => {\n             config,\n             globalConfig,\n             path: './file.test.js',\n-            rawModuleMap: null,\n+            serializableModuleMap: null,\n           },\n         ],\n         [\n           {\n             config,\n             globalConfig,\n             path: './file2.test.js',\n-            rawModuleMap: null,\n+            serializableModuleMap: null,\n           },\n         ],\n       ]);"},{"sha":"aa4c55e40b965db04328839378598f16fdcfcd98","filename":"packages/jest-runner/src/index.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-runner%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-runner%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2Findex.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -118,8 +118,8 @@ class TestRunner {\n           config: test.context.config,\n           globalConfig: this._globalConfig,\n           path: test.path,\n-          rawModuleMap: watcher.isWatchMode()\n-            ? test.context.moduleMap.getRawModuleMap()\n+          serializableModuleMap: watcher.isWatchMode()\n+            ? test.context.moduleMap.toJSON()\n             : null,\n         });\n       });"},{"sha":"5cca559c8fe909210fc1883e592c3f5cd2c157b0","filename":"packages/jest-runner/src/test_worker.js","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-runner%2Fsrc%2Ftest_worker.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/packages%2Fjest-runner%2Fsrc%2Ftest_worker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2Ftest_worker.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -9,7 +9,7 @@\n \n import type {GlobalConfig, Path, ProjectConfig} from 'types/Config';\n import type {SerializableError, TestResult} from 'types/TestResult';\n-import type {RawModuleMap} from 'types/HasteMap';\n+import type {SerializableModuleMap} from 'types/HasteMap';\n import type {ErrorWithCode} from 'types/Errors';\n \n import exit from 'exit';\n@@ -22,7 +22,7 @@ export type WorkerData = {|\n   config: ProjectConfig,\n   globalConfig: GlobalConfig,\n   path: Path,\n-  rawModuleMap: ?RawModuleMap,\n+  serializableModuleMap: ?SerializableModuleMap,\n |};\n \n // Make sure uncaught errors are logged before we exit.\n@@ -50,13 +50,13 @@ const formatError = (error: string | ErrorWithCode): SerializableError => {\n };\n \n const resolvers = Object.create(null);\n-const getResolver = (config, rawModuleMap) => {\n+const getResolver = (config, moduleMap) => {\n   // In watch mode, the raw module map with all haste modules is passed from\n   // the test runner to the watch command. This is because jest-haste-map's\n   // watch mode does not persist the haste map on disk after every file change.\n   // To make this fast and consistent, we pass it from the TestRunner.\n-  if (rawModuleMap) {\n-    return Runtime.createResolver(config, new HasteMap.ModuleMap(rawModuleMap));\n+  if (moduleMap) {\n+    return Runtime.createResolver(config, moduleMap);\n   } else {\n     const name = config.name;\n     if (!resolvers[name]) {\n@@ -73,14 +73,17 @@ export async function worker({\n   config,\n   globalConfig,\n   path,\n-  rawModuleMap,\n+  serializableModuleMap,\n }: WorkerData): Promise<TestResult> {\n   try {\n+    const moduleMap = serializableModuleMap\n+      ? HasteMap.ModuleMap.fromJSON(serializableModuleMap)\n+      : null;\n     return await runTest(\n       path,\n       globalConfig,\n       config,\n-      getResolver(config, rawModuleMap),\n+      getResolver(config, moduleMap),\n     );\n   } catch (error) {\n     throw formatError(error);"},{"sha":"f4ad4b42e2a6798bea81f67852b2ac255c7dd32c","filename":"types/HasteMap.js","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/facebook/jest/blob/2ee6b7d40a2c2132206b808f3b3caf70899707c6/types%2FHasteMap.js","raw_url":"https://github.com/facebook/jest/raw/2ee6b7d40a2c2132206b808f3b3caf70899707c6/types%2FHasteMap.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/types%2FHasteMap.js?ref=2ee6b7d40a2c2132206b808f3b3caf70899707c6","patch":"@@ -7,25 +7,31 @@\n  * @flow\n  */\n \n-import type {ModuleMap as _ModuleMap, FS} from 'jest-haste-map';\n+import type {\n+  ModuleMap as _ModuleMap,\n+  SerializableModuleMap as _SerializableModuleMap,\n+  FS,\n+} from 'jest-haste-map';\n import type {Path} from 'types/Config';\n \n export type HasteFS = FS;\n export type ModuleMap = _ModuleMap;\n+export type SerializableModuleMap = _SerializableModuleMap;\n \n-export type FileData = {[filepath: Path]: FileMetaData, __proto__: null};\n-export type MockData = {[id: string]: Path, __proto__: null};\n-export type ModuleMapData = {[id: string]: ModuleMapItem, __proto__: null};\n-export type WatchmanClocks = {[filepath: Path]: string, __proto__: null};\n+export type FileData = Map<Path, FileMetaData>;\n+export type MockData = Map<string, Path>;\n+export type ModuleMapData = Map<string, ModuleMapItem>;\n+export type WatchmanClocks = Map<Path, string>;\n export type HasteRegExp = RegExp | ((str: string) => boolean);\n \n export type DuplicatesSet = {\n   [filePath: string]: /* type */ number,\n   __proto__: null,\n };\n-export type DuplicatesIndex = {\n-  [id: string]: {[platform: string]: DuplicatesSet, __proto__: null},\n-};\n+export type DuplicatesIndex = Map<\n+  string,\n+  {[platform: string]: DuplicatesSet, __proto__: null},\n+>;\n \n export type InternalHasteMap = {|\n   clocks: WatchmanClocks,\n@@ -55,7 +61,7 @@ export type FileMetaData = [\n   /* sha1 */ ?string,\n ];\n \n-type ModuleMapItem = {[platform: string]: ModuleMetaData};\n+type ModuleMapItem = {[platform: string]: ModuleMetaData, __proto__: null};\n export type ModuleMetaData = [Path, /* type */ number];\n \n export type HType = {|"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/9695","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/9695/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/9695/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/9695/events","html_url":"https://github.com/facebook/jest/pull/9695","id":586543892,"node_id":"MDExOlB1bGxSZXF1ZXN0MzkyNjU5OTA1","number":9695,"title":"fix: fsync: false when writing cache files","user":{"login":"FauxFaux","id":328180,"node_id":"MDQ6VXNlcjMyODE4MA==","avatar_url":"https://avatars.githubusercontent.com/u/328180?v=4","gravatar_id":"","url":"https://api.github.com/users/FauxFaux","html_url":"https://github.com/FauxFaux","followers_url":"https://api.github.com/users/FauxFaux/followers","following_url":"https://api.github.com/users/FauxFaux/following{/other_user}","gists_url":"https://api.github.com/users/FauxFaux/gists{/gist_id}","starred_url":"https://api.github.com/users/FauxFaux/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/FauxFaux/subscriptions","organizations_url":"https://api.github.com/users/FauxFaux/orgs","repos_url":"https://api.github.com/users/FauxFaux/repos","events_url":"https://api.github.com/users/FauxFaux/events{/privacy}","received_events_url":"https://api.github.com/users/FauxFaux/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2020-03-23T21:58:18Z","updated_at":"2021-05-11T10:06:36Z","closed_at":"2020-03-24T08:57:17Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/9695","html_url":"https://github.com/facebook/jest/pull/9695","diff_url":"https://github.com/facebook/jest/pull/9695.diff","patch_url":"https://github.com/facebook/jest/pull/9695.patch","merged_at":"2020-03-24T08:57:17Z"},"body":"##  Summary\r\n\r\n`writeFileAtomic` defaults to running `fsync` on the file after use.\r\n\r\n`fsync` is a nearly 3x slowdown for me, ts-jest'ing my whole codebase (~900 files in testcase).\r\n\r\n`ubuntu` defaults to `/tmp` as regular filesystem (i.e. not tmpfs), and some filesystems/devices have a large overhead for these repeated `fsync`s. I happen to be on nvme (sm961), and `btrfs`.\r\n\r\nWe're using `writeFileAtomic` here in order to get atomic rename, not to get full system power failure resilience. Most(tm) filesystems will guarantee either/or during a system power failure here, which is plenty enough for us.\r\n\r\n## Test plan\r\n\r\nThere should be no functional changes here (even during a system power failure), only a performance increase in all cases, and a drastic performance increase in some cases.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/9695/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/9695/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"56f61ede0f5b0f201bd6128567ac01d923c415d9","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/4ef8aa7d627a64dfe61023ded436d59225221d77/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/4ef8aa7d627a64dfe61023ded436d59225221d77/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=4ef8aa7d627a64dfe61023ded436d59225221d77","patch":"@@ -7,6 +7,7 @@\n - `[jest-haste-map]` [**BREAKING**] Remove `mapper` option ([#9581](https://github.com/facebook/jest/pull/9581))\n - `[*]` Support array of paths for `moduleNameMapper` aliases ([#9465](https://github.com/facebook/jest/pull/9465))\n - `[jest-reporters]` Adds ability to pass options to the istanbul-reporter through `coverageReporters` ([#9572](https://github.com/facebook/jest/pull/9572))\n+- `[jest-transform]` `writeCacheFile` no longer calls `fsync` ([#9695](https://github.com/facebook/jest/pull/9695))\n \n ### Fixes\n "},{"sha":"a3658842f164c3350745736e672f1f3643efdccc","filename":"packages/jest-transform/src/ScriptTransformer.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/4ef8aa7d627a64dfe61023ded436d59225221d77/packages%2Fjest-transform%2Fsrc%2FScriptTransformer.ts","raw_url":"https://github.com/facebook/jest/raw/4ef8aa7d627a64dfe61023ded436d59225221d77/packages%2Fjest-transform%2Fsrc%2FScriptTransformer.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-transform%2Fsrc%2FScriptTransformer.ts?ref=4ef8aa7d627a64dfe61023ded436d59225221d77","patch":"@@ -630,7 +630,7 @@ function readCodeCacheFile(cachePath: Config.Path): string | null {\n  */\n const writeCacheFile = (cachePath: Config.Path, fileData: string) => {\n   try {\n-    writeFileAtomic(cachePath, fileData, {encoding: 'utf8'});\n+    writeFileAtomic(cachePath, fileData, {encoding: 'utf8', fsync: false});\n   } catch (e) {\n     if (cacheWriteErrorSafeToIgnore(e, cachePath)) {\n       return;"},{"sha":"596116eb34412f435baaa22ef43e1a530c0b8555","filename":"packages/jest-transform/src/__tests__/script_transformer.test.js","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/4ef8aa7d627a64dfe61023ded436d59225221d77/packages%2Fjest-transform%2Fsrc%2F__tests__%2Fscript_transformer.test.js","raw_url":"https://github.com/facebook/jest/raw/4ef8aa7d627a64dfe61023ded436d59225221d77/packages%2Fjest-transform%2Fsrc%2F__tests__%2Fscript_transformer.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-transform%2Fsrc%2F__tests__%2Fscript_transformer.test.js?ref=4ef8aa7d627a64dfe61023ded436d59225221d77","patch":"@@ -407,6 +407,7 @@ describe('ScriptTransformer', () => {\n     expect(writeFileAtomic.sync).toBeCalledTimes(2);\n     expect(writeFileAtomic.sync).toBeCalledWith(result.sourceMapPath, mapStr, {\n       encoding: 'utf8',\n+      fsync: false,\n     });\n   });\n \n@@ -438,7 +439,7 @@ describe('ScriptTransformer', () => {\n     expect(writeFileAtomic.sync).toBeCalledWith(\n       result.sourceMapPath,\n       sourceMap,\n-      {encoding: 'utf8'},\n+      {encoding: 'utf8', fsync: false},\n     );\n   });\n \n@@ -507,6 +508,7 @@ describe('ScriptTransformer', () => {\n       JSON.stringify(map),\n       {\n         encoding: 'utf8',\n+        fsync: false,\n       },\n     );\n   });\n@@ -574,6 +576,7 @@ describe('ScriptTransformer', () => {\n       JSON.stringify(instrumentedCodeMap),\n       {\n         encoding: 'utf8',\n+        fsync: false,\n       },\n     );\n \n@@ -614,6 +617,7 @@ describe('ScriptTransformer', () => {\n       JSON.stringify(instrumentedCodeMap),\n       {\n         encoding: 'utf8',\n+        fsync: false,\n       },\n     );\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/406","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/406/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/406/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/406/events","html_url":"https://github.com/facebook/jest/pull/406","id":88947660,"node_id":"MDExOlB1bGxSZXF1ZXN0Mzc4NzQ2MTA=","number":406,"title":"Replace Q with Bluebird","user":{"login":"DmitrySoshnikov","id":244010,"node_id":"MDQ6VXNlcjI0NDAxMA==","avatar_url":"https://avatars.githubusercontent.com/u/244010?v=4","gravatar_id":"","url":"https://api.github.com/users/DmitrySoshnikov","html_url":"https://github.com/DmitrySoshnikov","followers_url":"https://api.github.com/users/DmitrySoshnikov/followers","following_url":"https://api.github.com/users/DmitrySoshnikov/following{/other_user}","gists_url":"https://api.github.com/users/DmitrySoshnikov/gists{/gist_id}","starred_url":"https://api.github.com/users/DmitrySoshnikov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DmitrySoshnikov/subscriptions","organizations_url":"https://api.github.com/users/DmitrySoshnikov/orgs","repos_url":"https://api.github.com/users/DmitrySoshnikov/repos","events_url":"https://api.github.com/users/DmitrySoshnikov/events{/privacy}","received_events_url":"https://api.github.com/users/DmitrySoshnikov/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-06-17T08:01:05Z","updated_at":"2021-05-14T23:06:32Z","closed_at":"2015-06-19T05:45:35Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/406","html_url":"https://github.com/facebook/jest/pull/406","diff_url":"https://github.com/facebook/jest/pull/406.diff","patch_url":"https://github.com/facebook/jest/pull/406.patch","merged_at":"2015-06-19T05:45:35Z"},"body":"The [bluebird](https://github.com/petkaantonov/bluebird) seems to have better performance than [Q](https://github.com/kriskowal/q).\n\nAn [issue](https://github.com/petkaantonov/bluebird/issues/661) was noticed after the switch, which is solved locally, but probably Bluebird will fix it at library level.\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/406/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/406/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"698e083de51e634374eb2e2bfaf9f54b6bd11e33","filename":".jshintrc","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/.jshintrc","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/.jshintrc","contents_url":"https://api.github.com/repos/facebook/jest/contents/.jshintrc?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -1,5 +1,6 @@\n {\n   \"-W093\": true,\n+  \"-W079\": true,\n   \"asi\": false,\n   \"bitwise\": true,\n   \"boss\": false,"},{"sha":"3ffd7eb8cbd45fb3ce854b710d56ea6a89e7a528","filename":"package.json","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/package.json","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/package.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/package.json?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -16,7 +16,7 @@\n     \"node-haste\": \"^1.2.8\",\n     \"node-worker-pool\": \"~2.4.2\",\n     \"optimist\": \"~0.6.0\",\n-    \"q\": \"~0.9.7\",\n+    \"bluebird\": \"~2.9.30\",\n     \"resolve\": \"~0.6.1\",\n     \"through\": \"^2.3.4\",\n     \"lodash.template\": \"^3.0.0\""},{"sha":"3489b8c301490330dcfb2ef34615bf81153c2e02","filename":"src/HasteModuleLoader/HasteModuleLoader.js","status":"modified","additions":27,"deletions":35,"changes":62,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2FHasteModuleLoader.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2FHasteModuleLoader.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2FHasteModuleLoader.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -21,7 +21,7 @@ var moduleMocker = require('../lib/moduleMocker');\n var NodeHaste = require('node-haste/lib/Haste');\n var os = require('os');\n var path = require('path');\n-var Q = require('q');\n+var Promise = require('bluebird');\n var resolve = require('resolve');\n var utils = require('../lib/utils');\n \n@@ -162,44 +162,36 @@ function Loader(config, environment, resourceMap) {\n }\n \n Loader.loadResourceMap = function(config, options) {\n-  options = options || {};\n-\n-  var deferred = Q.defer();\n-  try {\n-    _constructHasteInst(config, options).update(\n-      _getCacheFilePath(config),\n-      function(resourceMap) {\n-        deferred.resolve(resourceMap);\n-      }\n-    );\n-  } catch (e) {\n-    deferred.reject(e);\n-  }\n-\n-  return deferred.promise;\n+  return new Promise(function(resolve, reject) {\n+    try {\n+      _constructHasteInst(config, options || {}).update(\n+        _getCacheFilePath(config),\n+        resolve\n+      );\n+    } catch (e) {\n+      reject(e);\n+    }\n+  });\n };\n \n Loader.loadResourceMapFromCacheFile = function(config, options) {\n-  options = options || {};\n-\n-  var deferred = Q.defer();\n-  try {\n-    var hasteInst = _constructHasteInst(config, options);\n-    hasteInst.loadMap(\n-      _getCacheFilePath(config),\n-      function(err, map) {\n-        if (err) {\n-          deferred.reject(err);\n-        } else {\n-          deferred.resolve(map);\n+  return new Promise(function(resolve, reject) {\n+    try {\n+      var hasteInst = _constructHasteInst(config, options || {});\n+      hasteInst.loadMap(\n+        _getCacheFilePath(config),\n+        function(err, map) {\n+          if (err) {\n+            reject(err);\n+          } else {\n+            resolve(map);\n+          }\n         }\n-      }\n-    );\n-  } catch (e) {\n-    deferred.reject(e);\n-  }\n-\n-  return deferred.promise;\n+      );\n+    } catch (e) {\n+      reject(e);\n+    }\n+  });\n };\n \n /**"},{"sha":"5d4abeb636aea114638808582bc0b645c1e7db10","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-NODE_PATH-test.js","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-NODE_PATH-test.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-NODE_PATH-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-NODE_PATH-test.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -10,7 +10,7 @@\n jest.autoMockOff();\n \n var path = require('path');\n-var q = require('q');\n+var Promise = require('bluebird');\n var utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n@@ -30,7 +30,9 @@ describe('HasteModuleLoader', function() {\n         return buildLoader();\n       });\n     } else {\n-      return q(new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap));\n+      return Promise.resolve(\n+        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n+      );\n     }\n   }\n "},{"sha":"ea8719e146a3c6eb41d3973872bbe9104d936a11","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-genMockFromModule-test.js","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-genMockFromModule-test.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-genMockFromModule-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-genMockFromModule-test.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -10,7 +10,7 @@\n jest.autoMockOff();\n \n var path = require('path');\n-var q = require('q');\n+var Promise = require('bluebird');\n var utils = require('../../lib/utils');\n \n describe('nodeHasteModuleLoader', function() {\n@@ -30,7 +30,9 @@ describe('nodeHasteModuleLoader', function() {\n         return buildLoader();\n       });\n     } else {\n-      return q(new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap));\n+      return Promise.resolve(\n+        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n+      );\n     }\n   }\n "},{"sha":"331e6c11ca721edf126caa7025ed1a4ff93dc1ae","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-getTestEnvData-test.js","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-getTestEnvData-test.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-getTestEnvData-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-getTestEnvData-test.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -10,7 +10,7 @@\n jest.autoMockOff();\n \n var path = require('path');\n-var q = require('q');\n+var Promise = require('bluebird');\n var utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n@@ -35,7 +35,9 @@ describe('HasteModuleLoader', function() {\n         return buildLoader();\n       });\n     } else {\n-      return q(new HasteModuleLoader(config, mockEnvironment, resourceMap));\n+      return Promise.resolve(\n+        new HasteModuleLoader(config, mockEnvironment, resourceMap)\n+      );\n     }\n   }\n "},{"sha":"b3b658e8d3f05d3be92aee7d889830775cc04996","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-requireMock-test.js","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireMock-test.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireMock-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireMock-test.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -10,7 +10,7 @@\n jest.autoMockOff();\n \n var path = require('path');\n-var q = require('q');\n+var Promise = require('bluebird');\n var utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n@@ -30,7 +30,9 @@ describe('HasteModuleLoader', function() {\n         return buildLoader();\n       });\n     } else {\n-      return q(new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap));\n+      return Promise.resolve(\n+        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n+      );\n     }\n   }\n \n@@ -144,7 +146,7 @@ describe('HasteModuleLoader', function() {\n         expect(loader.requireMock(null, 'events').EventEmitter).toBeDefined();\n       });\n     });\n-\t  \n+\n     pit('throws on non-existant @providesModule modules', function() {\n       return buildLoader().then(function(loader) {\n         expect(function() {"},{"sha":"c1ef374b72bf767a826ae4c844a6a23016978231","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-requireModule-test.js","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModule-test.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModule-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModule-test.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -10,7 +10,7 @@\n jest.autoMockOff();\n \n var path = require('path');\n-var q = require('q');\n+var Promise = require('bluebird');\n var utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n@@ -30,7 +30,9 @@ describe('HasteModuleLoader', function() {\n         return buildLoader();\n       });\n     } else {\n-      return q(new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap));\n+      return Promise.resolve(\n+        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n+      );\n     }\n   }\n "},{"sha":"1477cf0d1fcbbf6db0cd07aa64c5709224226601","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-requireModuleOrMock-test.js","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModuleOrMock-test.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModuleOrMock-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModuleOrMock-test.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -10,7 +10,7 @@\n jest.autoMockOff();\n \n var path = require('path');\n-var q = require('q');\n+var Promise = require('bluebird');\n var utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n@@ -30,7 +30,9 @@ describe('HasteModuleLoader', function() {\n         return buildLoader();\n       });\n     } else {\n-      return q(new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap));\n+      return Promise.resolve(\n+        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n+      );\n     }\n   }\n "},{"sha":"f7f42c626ab06966a7978931415b9b7c7780005e","filename":"src/TestRunner.js","status":"modified","additions":18,"deletions":14,"changes":32,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FTestRunner.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FTestRunner.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FTestRunner.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -10,14 +10,18 @@\n var fs = require('graceful-fs');\n var os = require('os');\n var path = require('path');\n-var q = require('q');\n+var Promise = require('bluebird');\n var through = require('through');\n var utils = require('./lib/utils');\n var WorkerPool = require('node-worker-pool');\n var Console = require('./Console');\n \n var TEST_WORKER_PATH = require.resolve('./TestWorker');\n \n+// To suppress warning caused by Bluebird, see:\n+// https://github.com/petkaantonov/bluebird/issues/661\n+process.setMaxListeners(0);\n+\n var DEFAULT_OPTIONS = {\n \n   /**\n@@ -472,7 +476,7 @@ TestRunner.prototype._createTestRun = function(\n TestRunner.prototype._createInBandTestRun = function(\n   testPaths, onTestResult, onRunFailure\n ) {\n-  var testSequence = q();\n+  var testSequence = Promise.resolve();\n   testPaths.forEach(function(testPath) {\n     testSequence = testSequence.then(this.runTest.bind(this, testPath))\n       .then(function(testResult) {\n@@ -500,7 +504,7 @@ TestRunner.prototype._createParallelTestRun = function(\n \n   return this._getModuleLoaderResourceMap()\n     .then(function() {\n-      return q.all(testPaths.map(function(testPath) {\n+      return Promise.all(testPaths.map(function(testPath) {\n         return workerPool.sendMessage({testFilePath: testPath})\n           .then(function(testResult) {\n             onTestResult(testPath, testResult);\n@@ -542,18 +546,18 @@ TestRunner.prototype._createParallelTestRun = function(\n };\n \n function _pathStreamToPromise(stream) {\n-  var defer = q.defer();\n-  var paths = [];\n-  stream.on('data', function(path) {\n-    paths.push(path);\n-  });\n-  stream.on('error', function(err) {\n-    defer.reject(err);\n-  });\n-  stream.on('end', function() {\n-    defer.resolve(paths);\n+  return new Promise(function(resolve, reject) {\n+    var paths = [];\n+    stream.on('data', function(path) {\n+      paths.push(path);\n+    });\n+    stream.on('error', function(err) {\n+      reject(err);\n+    });\n+    stream.on('end', function() {\n+      resolve(paths);\n+    });\n   });\n-  return defer.promise;\n }\n \n "},{"sha":"5cc495b9a2d3bef53da61c0293e56e4a2d7e2bca","filename":"src/TestWorker.js","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FTestWorker.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FTestWorker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FTestWorker.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -8,7 +8,6 @@\n 'use strict';\n \n var optimist = require('optimist');\n-//var q = require('q');\n var TestRunner = require('./TestRunner');\n var workerUtils = require('node-worker-pool/nodeWorkerUtils');\n "},{"sha":"997265644cd3ddf0117cc2eeb6385af637bc1eef","filename":"src/__tests__/TestRunner-test.js","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2F__tests__%2FTestRunner-test.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2F__tests__%2FTestRunner-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2F__tests__%2FTestRunner-test.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -9,7 +9,7 @@\n \n jest.autoMockOff().mock('fs');\n \n-var q = require('q');\n+var Promise = require('bluebird');\n \n describe('TestRunner', function() {\n   var TestRunner;\n@@ -66,22 +66,21 @@ describe('TestRunner', function() {\n     var utils;\n \n     function pathStreamToPromise(pathStream) {\n-      var deferred = q.defer();\n+      return new Promise(function(resolve, reject) {\n+        var paths = [];\n+        pathStream.on('data', function(pathStr) {\n+          paths.push(pathStr);\n+        });\n \n-      var paths = [];\n-      pathStream.on('data', function(pathStr) {\n-        paths.push(pathStr);\n-      });\n+        pathStream.on('error', function(err) {\n+          reject(err);\n+        });\n \n-      pathStream.on('error', function(err) {\n-        deferred.reject(err);\n-      });\n+        pathStream.on('end', function() {\n+          resolve(paths);\n+        });\n \n-      pathStream.on('end', function() {\n-        deferred.resolve(paths);\n       });\n-\n-      return deferred.promise;\n     }\n \n     beforeEach(function() {\n@@ -94,7 +93,7 @@ describe('TestRunner', function() {\n \n       fakeDepsFromPath = {};\n       runner._constructModuleLoader = function() {\n-        return q({\n+        return Promise.resolve({\n           getDependentsFromPath: function(modulePath) {\n             return fakeDepsFromPath[modulePath] || [];\n           }"},{"sha":"7b727efe45f07b013b768355e4ec6a94e8d7df6a","filename":"src/jasmineTestRunner/JasmineReporter.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FjasmineTestRunner%2FJasmineReporter.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2FjasmineTestRunner%2FJasmineReporter.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FjasmineTestRunner%2FJasmineReporter.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -11,7 +11,7 @@ var colors = require('../lib/colors');\n var diff = require('diff');\n var formatMsg = require('../lib/utils').formatMsg;\n var jasmine = require('../../vendor/jasmine/jasmine-1.3.0').jasmine;\n-var Q = require('q');\n+var Promise = require('bluebird');\n \n var ERROR_TITLE_COLOR = colors.RED + colors.BOLD + colors.UNDERLINE;\n var DIFFABLE_MATCHERS = {\n@@ -26,7 +26,7 @@ function JasmineReporter(config) {\n   jasmine.Reporter.call(this);\n   this._config = config || {};\n   this._logs = [];\n-  this._resultsDeferred = Q.defer();\n+  this._resultsDeferred = Promise.defer();\n }\n \n JasmineReporter.prototype = Object.create(jasmine.Reporter.prototype);"},{"sha":"8e85f0a794c4c2a41d371eccc7a6752ad332e8b1","filename":"src/jest.js","status":"modified","additions":38,"deletions":42,"changes":80,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2Fjest.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2Fjest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2Fjest.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -10,7 +10,7 @@\n var childProcess = require('child_process');\n var fs = require('fs');\n var path = require('path');\n-var q = require('q');\n+var Promise = require('bluebird');\n var TestRunner = require('./TestRunner');\n var utils = require('./lib/utils');\n \n@@ -24,50 +24,46 @@ function getVersion() {\n }\n \n function _findChangedFiles(dirPath) {\n-  var deferred = q.defer();\n-\n-  var args =\n-    ['diff', '--name-only', '--diff-filter=ACMR'];\n-  var child = childProcess.spawn('git', args, {cwd: dirPath});\n-\n-  var stdout = '';\n-  child.stdout.on('data', function(data) {\n-    stdout += data;\n-  });\n+  return new Promise(function(resolve, reject) {\n+    var args =\n+      ['diff', '--name-only', '--diff-filter=ACMR'];\n+    var child = childProcess.spawn('git', args, {cwd: dirPath});\n+\n+    var stdout = '';\n+    child.stdout.on('data', function(data) {\n+      stdout += data;\n+    });\n \n-  var stderr = '';\n-  child.stderr.on('data', function(data) {\n-    stderr += data;\n-  });\n+    var stderr = '';\n+    child.stderr.on('data', function(data) {\n+      stderr += data;\n+    });\n \n-  child.on('close', function(code) {\n-    if (code === 0) {\n-      stdout = stdout.trim();\n-      if (stdout === '') {\n-        deferred.resolve([]);\n+    child.on('close', function(code) {\n+      if (code === 0) {\n+        stdout = stdout.trim();\n+        if (stdout === '') {\n+          resolve([]);\n+        } else {\n+          resolve(stdout.split('\\n').map(function(changedPath) {\n+            return path.resolve(dirPath, changedPath);\n+          }));\n+        }\n       } else {\n-        deferred.resolve(stdout.split('\\n').map(function(changedPath) {\n-          return path.resolve(dirPath, changedPath);\n-        }));\n+        reject(code + ': ' + stderr);\n       }\n-    } else {\n-      deferred.reject(code + ': ' + stderr);\n-    }\n+    });\n   });\n-\n-  return deferred.promise;\n }\n \n function _verifyIsGitRepository(dirPath) {\n-  var deferred = q.defer();\n-\n-  childProcess.spawn('git', ['rev-parse', '--git-dir'], {cwd: dirPath})\n-    .on('close', function(code) {\n-      var isGitRepo = code === 0;\n-      deferred.resolve(isGitRepo);\n-    });\n-\n-  return deferred.promise;\n+  return new Promise(function(resolve) {\n+    childProcess.spawn('git', ['rev-parse', '--git-dir'], {cwd: dirPath})\n+      .on('close', function(code) {\n+        var isGitRepo = code === 0;\n+        resolve(isGitRepo);\n+      });\n+  });\n }\n \n function _testRunnerOptions(argv) {\n@@ -111,7 +107,7 @@ function _promiseRawConfig(argv, packageRoot) {\n   }\n \n   if (typeof argv.config === 'object') {\n-    return q(utils.normalizeConfig(argv.config));\n+    return Promise.resolve(utils.normalizeConfig(argv.config));\n   }\n \n   var pkgJsonPath = path.join(packageRoot, 'package.json');\n@@ -126,11 +122,11 @@ function _promiseRawConfig(argv, packageRoot) {\n     }\n     var config = utils.normalizeConfig(pkgJson.jest);\n     config.name = pkgJson.name;\n-    return q(config);\n+    return Promise.resolve(config);\n   }\n \n   // Sane default config\n-  return q(utils.normalizeConfig({\n+  return Promise.resolve(utils.normalizeConfig({\n     name: packageRoot.replace(/[/\\\\]/g, '_'),\n     rootDir: packageRoot,\n     testPathDirs: [packageRoot],\n@@ -140,7 +136,7 @@ function _promiseRawConfig(argv, packageRoot) {\n \n function _promiseOnlyChangedTestPaths(testRunner, config) {\n   var testPathDirsAreGit = config.testPathDirs.map(_verifyIsGitRepository);\n-  return q.all(testPathDirsAreGit)\n+  return Promise.all(testPathDirsAreGit)\n     .then(function(results) {\n       if (!results.every(function(result) { return result; })) {\n         throw (\n@@ -149,7 +145,7 @@ function _promiseOnlyChangedTestPaths(testRunner, config) {\n           'with git projects.\\n'\n         );\n       }\n-      return q.all(config.testPathDirs.map(_findChangedFiles));\n+      return Promise.all(config.testPathDirs.map(_findChangedFiles));\n     })\n     .then(function(changedPathSets) {\n       // Collapse changed files from each of the testPathDirs into a single list"},{"sha":"cb8b761c6550efc29b50b0d90d40593f33455c56","filename":"src/lib/utils.js","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/facebook/jest/blob/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2Flib%2Futils.js","raw_url":"https://github.com/facebook/jest/raw/5c9bcf80e2da55fca7d934a478bc4beefe6e261d/src%2Flib%2Futils.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2Flib%2Futils.js?ref=5c9bcf80e2da55fca7d934a478bc4beefe6e261d","patch":"@@ -10,7 +10,7 @@\n var colors = require('./colors');\n var fs = require('graceful-fs');\n var path = require('path');\n-var Q = require('q');\n+var Promise = require('bluebird');\n \n var DEFAULT_CONFIG_VALUES = {\n   cacheDirectory: path.resolve(__dirname, '..', '..', '.haste_cache'),\n@@ -291,9 +291,10 @@ function pathNormalize(dir) {\n   return path.normalize(dir.replace(/\\\\/g, '/')).replace(/\\\\/g, '/');\n }\n \n+var readFile = Promise.promisify(fs.readFile);\n function loadConfigFromFile(filePath) {\n   var fileDir = path.dirname(filePath);\n-  return Q.nfcall(fs.readFile, filePath, 'utf8').then(function(fileData) {\n+  return readFile(filePath, 'utf8').then(function(fileData) {\n     var config = JSON.parse(fileData);\n     if (!config.hasOwnProperty('rootDir')) {\n       config.rootDir = fileDir;\n@@ -306,7 +307,7 @@ function loadConfigFromFile(filePath) {\n \n function loadConfigFromPackageJson(filePath) {\n   var pkgJsonDir = path.dirname(filePath);\n-  return Q.nfcall(fs.readFile, filePath, 'utf8').then(function(fileData) {\n+  return readFile(filePath, 'utf8').then(function(fileData) {\n     var packageJsonData = JSON.parse(fileData);\n     var config = packageJsonData.jest;\n     config.name = packageJsonData.name;\n@@ -443,6 +444,7 @@ function formatMsg(msg, color, _config) {\n // (mostly because these paths represent noisy/unhelpful libs)\n var STACK_TRACE_LINE_IGNORE_RE = new RegExp('^(?:' + [\n     path.resolve(__dirname, '..', 'node_modules', 'q'),\n+    path.resolve(__dirname, '..', 'node_modules', 'bluebird'),\n     path.resolve(__dirname, '..', 'vendor', 'jasmine')\n ].join('|') + ')');\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8237","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8237/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8237/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8237/events","html_url":"https://github.com/facebook/jest/pull/8237","id":426821093,"node_id":"MDExOlB1bGxSZXF1ZXN0MjY1NTg4Nzk5","number":8237,"title":"Unify worker module map transmission w/ small perf benefit.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2019-03-29T05:17:59Z","updated_at":"2021-05-24T00:05:36Z","closed_at":"2019-03-29T21:41:28Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8237","html_url":"https://github.com/facebook/jest/pull/8237","diff_url":"https://github.com/facebook/jest/pull/8237.diff","patch_url":"https://github.com/facebook/jest/pull/8237.patch","merged_at":"2019-03-29T21:41:27Z"},"body":"## Summary\r\n\r\nThis PR unifies the way module maps are passed to the worker. Previously, we did it one way for watch mode and a different way for non-watch mode because our watch mode way was a lot slower.\r\n\r\nI fixed that slowness for watch mode and realized while doing some performance and memory profiling that the watch mode way is now actually faster on a few levels:\r\n1) It's straight-up faster to transmit it to the process because the module map is significantly smaller than the whole haste map you have to deserialize if you get at it via the file.\r\n2) If you load the whole haste map and want to discard half of it, suddenly there is a bunch of stuff that will need to be GC'd in the future. This happens in the worker because it only wants the module map but has to deserialize the whole file.\r\n3) Not requiring the haste map be written to disk at this point opens up further optimizations in the future.\r\n\r\nHere's a benchmark of running `yarn jest packages/expect`, meant to profile starting up some workers and running a couple tests. Each profile was run 10 times after 3 warm ups.\r\n\r\n### master\r\nTime (mean ± σ):      3.902 s ±  0.120 s    [User: 21.570 s, System: 5.105 s]\r\nRange (min … max):    3.682 s …  4.084 s    10 run\r\n\r\n### this branch\r\nTime (mean ± σ):      3.522 s ±  0.175 s    [User: 19.722 s, System: 4.777 s]\r\nRange (min … max):    3.356 s …  3.897 s    10 runs\r\n\r\nIt's faster. It's less code with a unified code path. It opens up more optimizations in the future.\r\n\r\n## Test plan\r\n\r\n1. All tests pass.\r\n2. Benchmarks show better performance in all situations.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8237/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"81f8952cf0d0f4bdecad3951b56425307ac60a9c","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -28,6 +28,7 @@\n - `[jest-resolve]`: Remove internal peer dependencies ([#8215](https://github.com/facebook/jest/pull/8215))\n - `[jest-snapshot]`: Remove internal peer dependencies ([#8215](https://github.com/facebook/jest/pull/8215))\n - `[jest-resolve]` Fix requireActual with moduleNameMapper ([#8210](https://github.com/facebook/jest/pull/8210))\n+- `[jest-haste-map]` Fix haste map duplicate detection in watch mode ([#8237](https://github.com/facebook/jest/pull/8237))\n \n ### Chore & Maintenance\n "},{"sha":"cfc308b970f4055d5340fe9fe49b925f2be6c386","filename":"packages/jest-haste-map/src/ModuleMap.ts","status":"modified","additions":31,"deletions":4,"changes":35,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -12,7 +12,6 @@ import {\n   ModuleMetaData,\n   RawModuleMap,\n   ModuleMapData,\n-  DuplicatesIndex,\n   MockData,\n } from './types';\n \n@@ -25,7 +24,7 @@ const EMPTY_MAP = new Map();\n type ValueType<T> = T extends Map<string, infer V> ? V : never;\n \n export type SerializableModuleMap = {\n-  duplicates: ReadonlyArray<[string, ValueType<DuplicatesIndex>]>;\n+  duplicates: ReadonlyArray<[string, [string, [string, [string, number]]]]>;\n   map: ReadonlyArray<[string, ValueType<ModuleMapData>]>;\n   mocks: ReadonlyArray<[string, ValueType<MockData>]>;\n   rootDir: Config.Path;\n@@ -36,6 +35,30 @@ export default class ModuleMap {\n   private readonly _raw: RawModuleMap;\n   private json: SerializableModuleMap | undefined;\n \n+  private static mapToArrayRecursive(\n+    map: Map<any, any>,\n+  ): Array<[string, unknown]> {\n+    let arr = Array.from(map);\n+    if (arr[0] && arr[0][1] instanceof Map) {\n+      arr = arr.map(\n+        el => [el[0], this.mapToArrayRecursive(el[1])] as [string, unknown],\n+      );\n+    }\n+    return arr;\n+  }\n+\n+  private static mapFromArrayRecursive(\n+    arr: ReadonlyArray<[string, unknown]>,\n+  ): Map<string, unknown> {\n+    if (arr[0] && Array.isArray(arr[1])) {\n+      arr = arr.map(el => [\n+        el[0],\n+        this.mapFromArrayRecursive(el[1] as Array<[string, unknown]>),\n+      ]) as Array<[string, unknown]>;\n+    }\n+    return new Map(arr);\n+  }\n+\n   constructor(raw: RawModuleMap) {\n     this._raw = raw;\n   }\n@@ -87,7 +110,9 @@ export default class ModuleMap {\n   toJSON(): SerializableModuleMap {\n     if (!this.json) {\n       this.json = {\n-        duplicates: Array.from(this._raw.duplicates),\n+        duplicates: ModuleMap.mapToArrayRecursive(\n+          this._raw.duplicates,\n+        ) as SerializableModuleMap['duplicates'],\n         map: Array.from(this._raw.map),\n         mocks: Array.from(this._raw.mocks),\n         rootDir: this._raw.rootDir,\n@@ -98,7 +123,9 @@ export default class ModuleMap {\n \n   static fromJSON(serializableModuleMap: SerializableModuleMap) {\n     return new ModuleMap({\n-      duplicates: new Map(serializableModuleMap.duplicates),\n+      duplicates: ModuleMap.mapFromArrayRecursive(\n+        serializableModuleMap.duplicates,\n+      ) as RawModuleMap['duplicates'],\n       map: new Map(serializableModuleMap.map),\n       mocks: new Map(serializableModuleMap.mocks),\n       rootDir: serializableModuleMap.rootDir,"},{"sha":"99f1425a0c05dd65238d6cd5aa06e6a05ddf0e7b","filename":"packages/jest-runner/src/__tests__/testRunner.test.js","status":"modified","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -65,43 +65,6 @@ test('injects the serializable module map into each worker in watch mode', () =>\n     });\n });\n \n-test('does not inject the serializable module map in serial mode', () => {\n-  const globalConfig = {maxWorkers: 1, watch: false};\n-  const config = {rootDir: '/path/'};\n-  const context = {config};\n-  const runContext = {};\n-\n-  return new TestRunner(globalConfig, runContext)\n-    .runTests(\n-      [{context, path: './file.test.js'}, {context, path: './file2.test.js'}],\n-      new TestWatcher({isWatchMode: globalConfig.watch}),\n-      () => {},\n-      () => {},\n-      () => {},\n-      {serial: false},\n-    )\n-    .then(() => {\n-      expect(mockWorkerFarm.worker.mock.calls).toEqual([\n-        [\n-          {\n-            config,\n-            context: runContext,\n-            globalConfig,\n-            path: './file.test.js',\n-          },\n-        ],\n-        [\n-          {\n-            config,\n-            context: runContext,\n-            globalConfig,\n-            path: './file2.test.js',\n-          },\n-        ],\n-      ]);\n-    });\n-});\n-\n test('assign process.env.JEST_WORKER_ID = 1 when in runInBand mode', () => {\n   const globalConfig = {maxWorkers: 1, watch: false};\n   const config = {rootDir: '/path/'};"},{"sha":"7cfdbc1fc7c7dd9fc1290cd0eda0008c37171d5c","filename":"packages/jest-runner/src/index.ts","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2Findex.ts?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -103,16 +103,13 @@ class TestRunner {\n     onResult: OnTestSuccess,\n     onFailure: OnTestFailure,\n   ) {\n-    let resolvers: Map<string, SerializableResolver> | undefined = undefined;\n-    if (watcher.isWatchMode()) {\n-      resolvers = new Map();\n-      for (const test of tests) {\n-        if (!resolvers.has(test.context.config.name)) {\n-          resolvers.set(test.context.config.name, {\n-            config: test.context.config,\n-            serializableModuleMap: test.context.moduleMap.toJSON(),\n-          });\n-        }\n+    const resolvers: Map<string, SerializableResolver> = new Map();\n+    for (const test of tests) {\n+      if (!resolvers.has(test.context.config.name)) {\n+        resolvers.set(test.context.config.name, {\n+          config: test.context.config,\n+          serializableModuleMap: test.context.moduleMap.toJSON(),\n+        });\n       }\n     }\n \n@@ -121,13 +118,11 @@ class TestRunner {\n       forkOptions: {stdio: 'pipe'},\n       maxRetries: 3,\n       numWorkers: this._globalConfig.maxWorkers,\n-      setupArgs: resolvers\n-        ? [\n-            {\n-              serializableResolvers: Array.from(resolvers.values()),\n-            },\n-          ]\n-        : undefined,\n+      setupArgs: [\n+        {\n+          serializableResolvers: Array.from(resolvers.values()),\n+        },\n+      ],\n     }) as WorkerInterface;\n \n     if (worker.getStdout()) worker.getStdout().pipe(process.stdout);"},{"sha":"a815feb652a38f48b9045af57637a3959b6a8501","filename":"packages/jest-runner/src/testWorker.ts","status":"modified","additions":14,"deletions":24,"changes":38,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -8,7 +8,7 @@\n \n import {Config} from '@jest/types';\n import {SerializableError, TestResult} from '@jest/test-result';\n-import HasteMap, {ModuleMap, SerializableModuleMap} from 'jest-haste-map';\n+import HasteMap, {SerializableModuleMap} from 'jest-haste-map';\n import exit from 'exit';\n import {separateMessageFromStack} from 'jest-message-util';\n import Runtime from 'jest-runtime';\n@@ -53,34 +53,24 @@ const formatError = (error: string | ErrorWithCode): SerializableError => {\n };\n \n const resolvers = new Map<string, Resolver>();\n-const getResolver = (config: Config.ProjectConfig, moduleMap?: ModuleMap) => {\n-  const name = config.name;\n-  if (moduleMap || !resolvers.has(name)) {\n-    resolvers.set(\n-      name,\n-      Runtime.createResolver(\n-        config,\n-        moduleMap || Runtime.createHasteMap(config).readModuleMap(),\n-      ),\n-    );\n+const getResolver = (config: Config.ProjectConfig) => {\n+  const resolver = resolvers.get(config.name);\n+  if (!resolver) {\n+    throw new Error('Cannot find resolver for: ' + config.name);\n   }\n-  return resolvers.get(name)!;\n+  return resolver;\n };\n \n-export function setup(setupData?: {\n+export function setup(setupData: {\n   serializableResolvers: Array<SerializableResolver>;\n }) {\n-  // Setup data is only used in watch mode to pass the latest version of all\n-  // module maps that will be used during the test runs. Otherwise, module maps\n-  // are loaded from disk as needed.\n-  if (setupData) {\n-    for (const {\n-      config,\n-      serializableModuleMap,\n-    } of setupData.serializableResolvers) {\n-      const moduleMap = HasteMap.ModuleMap.fromJSON(serializableModuleMap);\n-      getResolver(config, moduleMap);\n-    }\n+  // Module maps that will be needed for the test runs are passed.\n+  for (const {\n+    config,\n+    serializableModuleMap,\n+  } of setupData.serializableResolvers) {\n+    const moduleMap = HasteMap.ModuleMap.fromJSON(serializableModuleMap);\n+    resolvers.set(config.name, Runtime.createResolver(config, moduleMap));\n   }\n }\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/2148","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/2148/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/2148/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/2148/events","html_url":"https://github.com/facebook/jest/pull/2148","id":190852994,"node_id":"MDExOlB1bGxSZXF1ZXN0OTQ3MDkwODQ=","number":2148,"title":"reduce maxDepth for very large objects","user":{"login":"aaronabramov","id":940133,"node_id":"MDQ6VXNlcjk0MDEzMw==","avatar_url":"https://avatars.githubusercontent.com/u/940133?v=4","gravatar_id":"","url":"https://api.github.com/users/aaronabramov","html_url":"https://github.com/aaronabramov","followers_url":"https://api.github.com/users/aaronabramov/followers","following_url":"https://api.github.com/users/aaronabramov/following{/other_user}","gists_url":"https://api.github.com/users/aaronabramov/gists{/gist_id}","starred_url":"https://api.github.com/users/aaronabramov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aaronabramov/subscriptions","organizations_url":"https://api.github.com/users/aaronabramov/orgs","repos_url":"https://api.github.com/users/aaronabramov/repos","events_url":"https://api.github.com/users/aaronabramov/events{/privacy}","received_events_url":"https://api.github.com/users/aaronabramov/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2016-11-21T22:22:27Z","updated_at":"2021-05-14T05:11:06Z","closed_at":"2016-11-24T18:38:15Z","author_association":"MEMBER","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/2148","html_url":"https://github.com/facebook/jest/pull/2148","diff_url":"https://github.com/facebook/jest/pull/2148.diff","patch_url":"https://github.com/facebook/jest/pull/2148.patch","merged_at":"2016-11-24T18:38:15Z"},"body":"reduce `maxDepth` when pretty formatting the object if the resulting string is too long.\r\nIt will reduce depth by 1 every time until it either fits the `MAX_LENGTH` or becomes 1 (just printing the top level keys). This should happen only on failures, so the performance hit from running `format` multiple times should not be that bad.\r\n\r\ncc @gaearon ","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/2148/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/2148/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"d424d8eaac8d9504bc2adc678497aa1fd50b2302","filename":"packages/jest-matcher-utils/src/__tests__/__snapshots__/index-test.js.snap","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/454a48a442e6e164abeb38501d9774d3bd21e8f0/packages%2Fjest-matcher-utils%2Fsrc%2F__tests__%2F__snapshots__%2Findex-test.js.snap","raw_url":"https://github.com/facebook/jest/raw/454a48a442e6e164abeb38501d9774d3bd21e8f0/packages%2Fjest-matcher-utils%2Fsrc%2F__tests__%2F__snapshots__%2Findex-test.js.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matcher-utils%2Fsrc%2F__tests__%2F__snapshots__%2Findex-test.js.snap?ref=454a48a442e6e164abeb38501d9774d3bd21e8f0","patch":"@@ -1,3 +1,7 @@\n+exports[`.stringify() reduces maxDepth if stringifying very large objects 1`] = `\"{\\\"a\\\": 1, \\\"b\\\": [Object]}\"`;\n+\n+exports[`.stringify() reduces maxDepth if stringifying very large objects 2`] = `\"{\\\"a\\\": 1, \\\"b\\\": {\\\"0\\\": \\\"test\\\", \\\"1\\\": \\\"test\\\", \\\"2\\\": \\\"test\\\", \\\"3\\\": \\\"test\\\", \\\"4\\\": \\\"test\\\", \\\"5\\\": \\\"test\\\", \\\"6\\\": \\\"test\\\", \\\"7\\\": \\\"test\\\", \\\"8\\\": \\\"test\\\", \\\"9\\\": \\\"test\\\"}}\"`;\n+\n exports[`.stringify() toJSON errors when comparing two objects 1`] = `\n \"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).toEqual(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n "},{"sha":"3532f7e3f2deaf4c3b1704361710cbe3f695028d","filename":"packages/jest-matcher-utils/src/__tests__/index-test.js","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/facebook/jest/blob/454a48a442e6e164abeb38501d9774d3bd21e8f0/packages%2Fjest-matcher-utils%2Fsrc%2F__tests__%2Findex-test.js","raw_url":"https://github.com/facebook/jest/raw/454a48a442e6e164abeb38501d9774d3bd21e8f0/packages%2Fjest-matcher-utils%2Fsrc%2F__tests__%2Findex-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matcher-utils%2Fsrc%2F__tests__%2Findex-test.js?ref=454a48a442e6e164abeb38501d9774d3bd21e8f0","patch":"@@ -70,6 +70,21 @@ describe('.stringify()', () => {\n     expect(() => expect(evilA).toEqual(evilB))\n       .toThrowErrorMatchingSnapshot();\n   });\n+\n+  test('reduces maxDepth if stringifying very large objects', () => {\n+    const big = {a: 1, b: {}};\n+    const small = {a: 1, b: {}};\n+    for (let i = 0; i < 10000; i += 1) {\n+      big.b[i] = 'test';\n+    }\n+\n+    for (let i = 0; i < 10; i += 1) {\n+      small.b[i] = 'test';\n+    }\n+\n+    expect(stringify(big)).toMatchSnapshot();\n+    expect(stringify(small)).toMatchSnapshot();\n+  });\n });\n \n "},{"sha":"061d3acf0f7030986e242ce3005034357db6e946","filename":"packages/jest-matcher-utils/src/index.js","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/facebook/jest/blob/454a48a442e6e164abeb38501d9774d3bd21e8f0/packages%2Fjest-matcher-utils%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/454a48a442e6e164abeb38501d9774d3bd21e8f0/packages%2Fjest-matcher-utils%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matcher-utils%2Fsrc%2Findex.js?ref=454a48a442e6e164abeb38501d9774d3bd21e8f0","patch":"@@ -81,19 +81,26 @@ const getType = (value: any): ValueType => {\n   throw new Error(`value of unknown type: ${value}`);\n };\n \n-const stringify = (object: any): string => {\n+const stringify = (object: any, maxDepth?: number = 10): string => {\n+  const MAX_LENGTH = 10000;\n+  let result;\n+\n   try {\n-    return prettyFormat(object, {\n-      maxDepth: 10,\n+    result = prettyFormat(object, {\n+      maxDepth,\n       min: true,\n     });\n   } catch (e) {\n-    return prettyFormat(object, {\n+    result = prettyFormat(object, {\n       callToJSON: false,\n-      maxDepth: 10,\n+      maxDepth,\n       min: true,\n     });\n   }\n+\n+  return result.length >= MAX_LENGTH && maxDepth > 1\n+    ? stringify(object, Math.floor(maxDepth / 2))\n+    : result;\n };\n \n const printReceived = (object: any) => RECEIVED_COLOR(stringify(object));"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/4240","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/4240/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/4240/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/4240/events","html_url":"https://github.com/facebook/jest/pull/4240","id":249389032,"node_id":"MDExOlB1bGxSZXF1ZXN0MTM1MTU2OTA5","number":4240,"title":"Make Jest's Test Runner configurable.","user":{"login":"cpojer","id":13352,"node_id":"MDQ6VXNlcjEzMzUy","avatar_url":"https://avatars.githubusercontent.com/u/13352?v=4","gravatar_id":"","url":"https://api.github.com/users/cpojer","html_url":"https://github.com/cpojer","followers_url":"https://api.github.com/users/cpojer/followers","following_url":"https://api.github.com/users/cpojer/following{/other_user}","gists_url":"https://api.github.com/users/cpojer/gists{/gist_id}","starred_url":"https://api.github.com/users/cpojer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpojer/subscriptions","organizations_url":"https://api.github.com/users/cpojer/orgs","repos_url":"https://api.github.com/users/cpojer/repos","events_url":"https://api.github.com/users/cpojer/events{/privacy}","received_events_url":"https://api.github.com/users/cpojer/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-08-10T15:37:51Z","updated_at":"2021-05-13T08:07:21Z","closed_at":"2017-08-10T21:00:47Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/4240","html_url":"https://github.com/facebook/jest/pull/4240","diff_url":"https://github.com/facebook/jest/pull/4240.diff","patch_url":"https://github.com/facebook/jest/pull/4240.patch","merged_at":"2017-08-10T21:00:47Z"},"body":"**Summary**\r\n\r\nThis change adds a `runner` option to `ProjectConfig` that points to `jest-runner` but can be customized per project to any test runner. To ensure performance doesn't suffer with this new feature when using the MPR, multiple contexts that point to the same runner are merged and tests are run in the same runner instance, rather than creating a new instance per context. This means that there should be no performance penalty for existing MPR projects.\r\n\r\nThis is conflicting somewhat with the `testRunner` option that allows to pick `jest-jasmine2` or `jest-circus`, however in this new world ProjectConfigs will be entirely jest-runner specific and variadic, and out of Jest's immediate control, so I don't think this matters long term and there are pending changes to be made to configs to support that. I think it makes more sense to consider this option the `runner`, add an option `library` (for lack of a better name) which replaces `testRunner`. I think we can make this decision later and I expect there to be more `runner`s than `testRunner`s going forward, so we may even want to kill the setting entirely and make the `runner` as compose-able as possible.\r\n\r\n**Test plan**\r\n\r\njest + manual verification that it only creates one runner for the MPR right now.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/4240/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/4240/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"c0cc76370e97f210593870aa0e11e90d2f6f7492","filename":"integration_tests/__tests__/__snapshots__/show_config.test.js.snap","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/81b9cb88d5b3d0583c10101b8745afcd00890d0b/integration_tests%2F__tests__%2F__snapshots__%2Fshow_config.test.js.snap","raw_url":"https://github.com/facebook/jest/raw/81b9cb88d5b3d0583c10101b8745afcd00890d0b/integration_tests%2F__tests__%2F__snapshots__%2Fshow_config.test.js.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/integration_tests%2F__tests__%2F__snapshots__%2Fshow_config.test.js.snap?ref=81b9cb88d5b3d0583c10101b8745afcd00890d0b","patch":"@@ -34,6 +34,7 @@ exports[`--showConfig outputs config info and exits 1`] = `\n       \\\\\"roots\\\\\": [\n         \\\\\"<<REPLACED_ROOT_DIR>>\\\\\"\n       ],\n+      \\\\\"runner\\\\\": \\\\\"jest-runner\\\\\",\n       \\\\\"setupFiles\\\\\": [],\n       \\\\\"snapshotSerializers\\\\\": [],\n       \\\\\"testEnvironment\\\\\": \\\\\"jest-environment-jsdom\\\\\","},{"sha":"99aa26746902112b90df48898755306afd514067","filename":"packages/jest-cli/src/run_jest.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-cli%2Fsrc%2Frun_jest.js","raw_url":"https://github.com/facebook/jest/raw/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-cli%2Fsrc%2Frun_jest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Frun_jest.js?ref=81b9cb88d5b3d0583c10101b8745afcd00890d0b","patch":"@@ -200,7 +200,7 @@ const runJest = async ({\n \n   const results = await new TestScheduler(globalConfig, {\n     startRun,\n-  }).runTests(allTests, testWatcher);\n+  }).scheduleTests(allTests, testWatcher);\n \n   sequencer.cacheResults(allTests, results);\n "},{"sha":"60e1a6b89674494be1eaf7b7fdfffb670b7d25fd","filename":"packages/jest-cli/src/test_scheduler.js","status":"modified","additions":58,"deletions":17,"changes":75,"blob_url":"https://github.com/facebook/jest/blob/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-cli%2Fsrc%2Ftest_scheduler.js","raw_url":"https://github.com/facebook/jest/raw/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-cli%2Fsrc%2Ftest_scheduler.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Ftest_scheduler.js?ref=81b9cb88d5b3d0583c10101b8745afcd00890d0b","patch":"@@ -31,6 +31,10 @@ import VerboseReporter from './reporters/verbose_reporter';\n \n const SLOW_TEST_TIME = 3000;\n \n+// The default jest-runner is required because it is the default test runner\n+// and required implicitly through the `runner` ProjectConfig option.\n+TestRunner;\n+\n export type TestSchedulerOptions = {|\n   startRun: (globalConfig: GlobalConfig) => *,\n |};\n@@ -39,12 +43,10 @@ class TestScheduler {\n   _dispatcher: ReporterDispatcher;\n   _globalConfig: GlobalConfig;\n   _options: TestSchedulerOptions;\n-  _testRunner: TestRunner;\n \n   constructor(globalConfig: GlobalConfig, options: TestSchedulerOptions) {\n     this._dispatcher = new ReporterDispatcher();\n     this._globalConfig = globalConfig;\n-    this._testRunner = new TestRunner(globalConfig);\n     this._options = options;\n     this._setupReporters();\n   }\n@@ -57,7 +59,7 @@ class TestScheduler {\n     this._dispatcher.unregister(ReporterClass);\n   }\n \n-  async runTests(tests: Array<Test>, watcher: TestWatcher) {\n+  async scheduleTests(tests: Array<Test>, watcher: TestWatcher) {\n     const onStart = this._dispatcher.onTestStart.bind(this._dispatcher);\n     const timings = [];\n     const contexts = new Set();\n@@ -138,20 +140,36 @@ class TestScheduler {\n       showStatus: !runInBand,\n     });\n \n-    try {\n-      await this._testRunner.runTests(\n-        tests,\n-        watcher,\n-        onStart,\n-        onResult,\n-        onFailure,\n-        {\n-          serial: runInBand,\n-        },\n-      );\n-    } catch (error) {\n-      if (!watcher.isInterrupted()) {\n-        throw error;\n+    const testRunners = Object.create(null);\n+    contexts.forEach(({config}) => {\n+      if (!testRunners[config.runner]) {\n+        // $FlowFixMe\n+        testRunners[config.runner] = new (require(config.runner): TestRunner)(\n+          this._globalConfig,\n+        );\n+      }\n+    });\n+\n+    const testsByRunner = this._partitionTests(testRunners, tests);\n+\n+    if (testsByRunner) {\n+      try {\n+        for (const runner of Object.keys(testRunners)) {\n+          await testRunners[runner].runTests(\n+            testsByRunner[runner],\n+            watcher,\n+            onStart,\n+            onResult,\n+            onFailure,\n+            {\n+              serial: runInBand,\n+            },\n+          );\n+        }\n+      } catch (error) {\n+        if (!watcher.isInterrupted()) {\n+          throw error;\n+        }\n       }\n     }\n \n@@ -174,6 +192,29 @@ class TestScheduler {\n     return aggregatedResults;\n   }\n \n+  _partitionTests(\n+    testRunners: {[key: string]: TestRunner},\n+    tests: Array<Test>,\n+  ) {\n+    if (Object.keys(testRunners).length > 1) {\n+      return tests.reduce((testRuns, test) => {\n+        const runner = test.context.config.runner;\n+        if (!testRuns[runner]) {\n+          testRuns[runner] = [];\n+        }\n+        testRuns[runner].push(test);\n+        return testRuns;\n+      }, Object.create(null));\n+    } else if (tests.length > 0 && tests[0] != null) {\n+      // If there is only one runner, don't partition the tests.\n+      return Object.assign(Object.create(null), {\n+        [tests[0].context.config.runner]: tests,\n+      });\n+    } else {\n+      return null;\n+    }\n+  }\n+\n   _shouldAddDefaultReporters(reporters?: Array<ReporterConfig>): boolean {\n     return (\n       !reporters ||"},{"sha":"08c0983096855815480f65c9cf600f2b04b74e83","filename":"packages/jest-config/src/defaults.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-config%2Fsrc%2Fdefaults.js","raw_url":"https://github.com/facebook/jest/raw/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-config%2Fsrc%2Fdefaults.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2Fdefaults.js?ref=81b9cb88d5b3d0583c10101b8745afcd00890d0b","patch":"@@ -52,6 +52,7 @@ module.exports = ({\n   preset: null,\n   resetMocks: false,\n   resetModules: false,\n+  runner: 'jest-runner',\n   snapshotSerializers: [],\n   testEnvironment: 'jest-environment-jsdom',\n   testFailureExitCode: 1,"},{"sha":"d5ff0416e7c686e790d5076c2d2f628f9f35ee5b","filename":"packages/jest-config/src/index.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-config%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-config%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2Findex.js?ref=81b9cb88d5b3d0583c10101b8745afcd00890d0b","patch":"@@ -134,6 +134,7 @@ const getConfigs = (\n       resolver: options.resolver,\n       rootDir: options.rootDir,\n       roots: options.roots,\n+      runner: options.runner,\n       setupFiles: options.setupFiles,\n       setupTestFrameworkScriptFile: options.setupTestFrameworkScriptFile,\n       skipNodeResolution: options.skipNodeResolution,"},{"sha":"6bf35faca52ccbe51a4f717f49333cf5c6b649dc","filename":"packages/jest-config/src/normalize.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-config%2Fsrc%2Fnormalize.js","raw_url":"https://github.com/facebook/jest/raw/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-config%2Fsrc%2Fnormalize.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2Fnormalize.js?ref=81b9cb88d5b3d0583c10101b8745afcd00890d0b","patch":"@@ -387,6 +387,7 @@ function normalize(options: InitialOptions, argv: Argv) {\n         break;\n       case 'moduleLoader':\n       case 'resolver':\n+      case 'runner':\n       case 'setupTestFrameworkScriptFile':\n       case 'testResultsProcessor':\n       case 'testRunner':"},{"sha":"b1e9a2d2869f8222f7d7e349540a54d5f7e72d01","filename":"packages/jest-runner/src/run_test.js","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-runner%2Fsrc%2Frun_test.js","raw_url":"https://github.com/facebook/jest/raw/81b9cb88d5b3d0583c10101b8745afcd00890d0b/packages%2Fjest-runner%2Fsrc%2Frun_test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2Frun_test.js?ref=81b9cb88d5b3d0583c10101b8745afcd00890d0b","patch":"@@ -23,9 +23,14 @@ import {\n   getConsoleOutput,\n   setGlobal,\n } from 'jest-util';\n+import jasmine2 from 'jest-jasmine2';\n import {getTestEnvironment} from 'jest-config';\n import docblock from 'jest-docblock';\n \n+// The default jest-runner is required because it is the default test runner\n+// and required implicitly through the `testRunner` ProjectConfig option.\n+jasmine2;\n+\n function runTest(\n   path: Path,\n   globalConfig: GlobalConfig,"},{"sha":"82f55427b88965f2a00dff9e42f0b60541278100","filename":"test_utils.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/81b9cb88d5b3d0583c10101b8745afcd00890d0b/test_utils.js","raw_url":"https://github.com/facebook/jest/raw/81b9cb88d5b3d0583c10101b8745afcd00890d0b/test_utils.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/test_utils.js?ref=81b9cb88d5b3d0583c10101b8745afcd00890d0b","patch":"@@ -76,6 +76,7 @@ const DEFAULT_PROJECT_CONFIG: ProjectConfig = {\n   resolver: null,\n   rootDir: '/test_root_dir/',\n   roots: [],\n+  runner: 'jest-runner',\n   setupFiles: [],\n   setupTestFrameworkScriptFile: null,\n   skipNodeResolution: false,"},{"sha":"8d17d4b06ced551a2e9ddaeb5ab90e8b02935a7a","filename":"types/Config.js","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/81b9cb88d5b3d0583c10101b8745afcd00890d0b/types%2FConfig.js","raw_url":"https://github.com/facebook/jest/raw/81b9cb88d5b3d0583c10101b8745afcd00890d0b/types%2FConfig.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/types%2FConfig.js?ref=81b9cb88d5b3d0583c10101b8745afcd00890d0b","patch":"@@ -44,6 +44,7 @@ export type DefaultOptions = {|\n   preset: ?string,\n   resetMocks: boolean,\n   resetModules: boolean,\n+  runner: string,\n   snapshotSerializers: Array<Path>,\n   testEnvironment: string,\n   testFailureExitCode: string | number,\n@@ -105,6 +106,7 @@ export type InitialOptions = {\n   resolver?: ?Path,\n   rootDir: Path,\n   roots?: Array<Path>,\n+  runner?: string,\n   scriptPreprocessor?: string,\n   setupFiles?: Array<Path>,\n   setupTestFrameworkScriptFile?: Path,\n@@ -115,8 +117,8 @@ export type InitialOptions = {\n   testFailureExitCode?: string | number,\n   testMatch?: Array<Glob>,\n   testNamePattern?: string,\n-  testPathIgnorePatterns?: Array<string>,\n   testPathDirs?: Array<Path>,\n+  testPathIgnorePatterns?: Array<string>,\n   testRegex?: string,\n   testResultsProcessor?: ?string,\n   testRunner?: string,\n@@ -197,6 +199,7 @@ export type ProjectConfig = {|\n   resolver: ?Path,\n   rootDir: Path,\n   roots: Array<Path>,\n+  runner: string,\n   setupFiles: Array<Path>,\n   setupTestFrameworkScriptFile: ?Path,\n   skipNodeResolution: boolean,"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/3166","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/3166/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/3166/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/3166/events","html_url":"https://github.com/facebook/jest/pull/3166","id":214884066,"node_id":"MDExOlB1bGxSZXF1ZXN0MTExMTk3OTUy","number":3166,"title":"Refactor runner","user":{"login":"cpojer","id":13352,"node_id":"MDQ6VXNlcjEzMzUy","avatar_url":"https://avatars.githubusercontent.com/u/13352?v=4","gravatar_id":"","url":"https://api.github.com/users/cpojer","html_url":"https://github.com/cpojer","followers_url":"https://api.github.com/users/cpojer/followers","following_url":"https://api.github.com/users/cpojer/following{/other_user}","gists_url":"https://api.github.com/users/cpojer/gists{/gist_id}","starred_url":"https://api.github.com/users/cpojer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpojer/subscriptions","organizations_url":"https://api.github.com/users/cpojer/orgs","repos_url":"https://api.github.com/users/cpojer/repos","events_url":"https://api.github.com/users/cpojer/events{/privacy}","received_events_url":"https://api.github.com/users/cpojer/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-03-17T01:28:34Z","updated_at":"2021-05-13T17:24:17Z","closed_at":"2017-03-17T06:26:14Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/3166","html_url":"https://github.com/facebook/jest/pull/3166","diff_url":"https://github.com/facebook/jest/pull/3166.diff","patch_url":"https://github.com/facebook/jest/pull/3166.patch","merged_at":"2017-03-17T06:26:14Z"},"body":"**Summary**\r\nThis is the preparatory work I did for the multi-config runner. It splits up the test performance cache into a TestSequencer class, uses async/await and moves a few things around. No behavior changes expected. Before merging, I will add a test for the TestSequencer.\r\n\r\nSee #3156\r\n\r\n**Test plan**\r\njest","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/3166/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/3166/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"29e718ffe9a9b98a2981c37c3ff2c2a86d0f53e4","filename":"packages/jest-cli/src/TestRunner.js","status":"modified","additions":86,"deletions":174,"changes":260,"blob_url":"https://github.com/facebook/jest/blob/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2FTestRunner.js","raw_url":"https://github.com/facebook/jest/raw/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2FTestRunner.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2FTestRunner.js?ref=53b7766d9dda145e3b1db40138a2714f5fc516ee","patch":"@@ -14,14 +14,14 @@ import type {\n   SerializableError as TestError,\n   TestResult,\n } from 'types/TestResult';\n-import type {Config, Path} from 'types/Config';\n+import type {Config} from 'types/Config';\n import type {HasteContext, HasteFS} from 'types/HasteMap';\n import type {RunnerContext} from 'types/Reporters';\n+import type {Test, Tests} from 'types/TestRunner';\n import type BaseReporter from './reporters/BaseReporter';\n \n const {formatExecError} = require('jest-message-util');\n-const fs = require('graceful-fs');\n-const getCacheFilePath = require('jest-haste-map').getCacheFilePath;\n+\n const DefaultReporter = require('./reporters/DefaultReporter');\n const NotifyReporter = require('./reporters/NotifyReporter');\n const SummaryReporter = require('./reporters/SummaryReporter');\n@@ -33,9 +33,7 @@ const throat = require('throat');\n const workerFarm = require('worker-farm');\n const TestWatcher = require('./TestWatcher');\n \n-const FAIL = 0;\n const SLOW_TEST_TIME = 3000;\n-const SUCCESS = 1;\n \n class CancelRun extends Error {\n   constructor(message: ?string) {\n@@ -49,9 +47,8 @@ type Options = {|\n   getTestSummary: () => string,\n |};\n \n-type OnRunFailure = (path: string, err: TestError) => void;\n-\n-type OnTestResult = (path: string, result: TestResult) => void;\n+type OnTestFailure = (test: Test, err: TestError) => void;\n+type OnTestSuccess = (test: Test, result: TestResult) => void;\n \n const TEST_WORKER_PATH = require.resolve('./TestWorker');\n \n@@ -61,7 +58,6 @@ class TestRunner {\n   _options: Options;\n   _startRun: () => *;\n   _dispatcher: ReporterDispatcher;\n-  _testPerformanceCache: Object;\n \n   constructor(\n     hasteContext: HasteContext,\n@@ -78,10 +74,6 @@ class TestRunner {\n     this._options = options;\n     this._startRun = startRun;\n     this._setupReporters();\n-\n-    // Map from testFilePath -> time it takes to run the test. Used to\n-    // optimally schedule bigger test runs.\n-    this._testPerformanceCache = {};\n   }\n \n   addReporter(reporter: BaseReporter) {\n@@ -92,95 +84,36 @@ class TestRunner {\n     this._dispatcher.unregister(ReporterClass);\n   }\n \n-  _getTestPerformanceCachePath() {\n-    const config = this._config;\n-    return getCacheFilePath(config.cacheDirectory, 'perf-cache-' + config.name);\n-  }\n-\n-  _sortTests(testPaths: Array<string>) {\n-    // When running more tests than we have workers available, sort the tests\n-    // by size - big test files usually take longer to complete, so we run\n-    // them first in an effort to minimize worker idle time at the end of a\n-    // long test run.\n-    //\n-    // After a test run we store the time it took to run a test and on\n-    // subsequent runs we use that to run the slowest tests first, yielding the\n-    // fastest results.\n-    try {\n-      if (this._config.cache) {\n-        this._testPerformanceCache = JSON.parse(\n-          fs.readFileSync(this._getTestPerformanceCachePath(), 'utf8'),\n-        );\n-      } else {\n-        this._testPerformanceCache = {};\n-      }\n-    } catch (e) {\n-      this._testPerformanceCache = {};\n-    }\n-\n-    const cache = this._testPerformanceCache;\n+  async runTests(tests: Tests, watcher: TestWatcher) {\n     const timings = [];\n-    const stats = {};\n-    const getFileSize = filePath =>\n-      stats[filePath] || (stats[filePath] = fs.statSync(filePath).size);\n-    const getTestRunTime = filePath => {\n-      if (cache[filePath]) {\n-        return cache[filePath][0] === FAIL ? Infinity : cache[filePath][1];\n-      }\n-      return null;\n-    };\n-\n-    testPaths = testPaths.sort((pathA, pathB) => {\n-      const timeA = getTestRunTime(pathA);\n-      const timeB = getTestRunTime(pathB);\n-      if (timeA != null && timeB != null) {\n-        return timeA < timeB ? 1 : -1;\n-      }\n-      return getFileSize(pathA) < getFileSize(pathB) ? 1 : -1;\n-    });\n-\n-    testPaths.forEach(filePath => {\n-      const timing = cache[filePath] && cache[filePath][1];\n-      if (timing) {\n-        timings.push(timing);\n+    tests.forEach(test => {\n+      if (test.duration) {\n+        timings.push(test.duration);\n       }\n     });\n \n-    return {testPaths, timings};\n-  }\n-\n-  _cacheTestResults(aggregatedResults: AggregatedResult) {\n-    const cache = this._testPerformanceCache;\n-    aggregatedResults.testResults.forEach(test => {\n-      if (test && !test.skipped) {\n-        const perf = test.perfStats;\n-        cache[test.testFilePath] = [\n-          test.numFailingTests ? FAIL : SUCCESS,\n-          perf.end - perf.start || 0,\n-        ];\n-      }\n-    });\n-    fs.writeFileSync(\n-      this._getTestPerformanceCachePath(),\n-      JSON.stringify(cache),\n-    );\n-  }\n-\n-  runTests(paths: Array<string>, watcher: TestWatcher) {\n     const config = this._config;\n-    const {testPaths, timings} = this._sortTests(paths);\n-    const aggregatedResults = createAggregatedResults(testPaths.length);\n+    const aggregatedResults = createAggregatedResults(tests.length);\n     const estimatedTime = Math.ceil(\n       getEstimatedTime(timings, this._options.maxWorkers) / 1000,\n     );\n \n-    const onResult = (testPath: Path, testResult: TestResult) => {\n+    // Run in band if we only have one test or one worker available.\n+    // If we are confident from previous runs that the tests will finish quickly\n+    // we also run in band to reduce the overhead of spawning workers.\n+    const runInBand = this._options.maxWorkers <= 1 ||\n+      tests.length <= 1 ||\n+      (tests.length <= 20 &&\n+        timings.length > 0 &&\n+        timings.every(timing => timing < SLOW_TEST_TIME));\n+\n+    const onResult = (test: Test, testResult: TestResult) => {\n       if (watcher.isInterrupted()) {\n         return;\n       }\n       if (testResult.testResults.length === 0) {\n         const message = 'Your test suite must contain at least one test.';\n-        onFailure(testPath, {\n+        onFailure(test, {\n           message,\n           stack: new Error(message).stack,\n         });\n@@ -191,26 +124,20 @@ class TestRunner {\n       this._bailIfNeeded(aggregatedResults, watcher);\n     };\n \n-    const onFailure = (testPath: Path, error: TestError) => {\n+    const onFailure = (test: Test, error: TestError) => {\n       if (watcher.isInterrupted()) {\n         return;\n       }\n-      const testResult = buildFailureTestResult(testPath, error);\n-      testResult.failureMessage = formatExecError(testResult, config, testPath);\n+      const testResult = buildFailureTestResult(test.path, error);\n+      testResult.failureMessage = formatExecError(\n+        testResult,\n+        test.config,\n+        test.path,\n+      );\n       addResult(aggregatedResults, testResult);\n       this._dispatcher.onTestResult(config, testResult, aggregatedResults);\n     };\n \n-    // Run in band if we only have one test or one worker available.\n-    // If we are confident from previous runs that the tests will finish quickly\n-    // we also run in band to reduce the overhead of spawning workers.\n-    const shouldRunInBand = () =>\n-      this._options.maxWorkers <= 1 ||\n-      testPaths.length <= 1 ||\n-      (testPaths.length <= 20 &&\n-        timings.length > 0 &&\n-        timings.every(timing => timing < SLOW_TEST_TIME));\n-\n     const updateSnapshotState = () => {\n       const status = snapshot.cleanup(\n         this._hasteContext.hasteFS,\n@@ -224,74 +151,66 @@ class TestRunner {\n           aggregatedResults.snapshot.filesRemoved));\n     };\n \n-    const runInBand = shouldRunInBand();\n-\n     this._dispatcher.onRunStart(config, aggregatedResults, {\n       estimatedTime,\n       showStatus: !runInBand,\n     });\n \n-    const testRun = runInBand\n-      ? this._createInBandTestRun(testPaths, watcher, onResult, onFailure)\n-      : this._createParallelTestRun(testPaths, watcher, onResult, onFailure);\n+    try {\n+      await (runInBand\n+        ? this._createInBandTestRun(tests, watcher, onResult, onFailure)\n+        : this._createParallelTestRun(tests, watcher, onResult, onFailure));\n+    } catch (error) {\n+      if (!watcher.isInterrupted()) {\n+        throw error;\n+      }\n+    }\n \n-    return testRun\n-      .catch(error => {\n-        if (!watcher.isInterrupted()) {\n-          throw error;\n-        }\n-      })\n-      .then(() => {\n-        updateSnapshotState();\n-        aggregatedResults.wasInterrupted = watcher.isInterrupted();\n+    updateSnapshotState();\n+    aggregatedResults.wasInterrupted = watcher.isInterrupted();\n \n-        this._dispatcher.onRunComplete(config, aggregatedResults);\n+    this._dispatcher.onRunComplete(config, aggregatedResults);\n \n-        const anyTestFailures = !(aggregatedResults.numFailedTests === 0 &&\n-          aggregatedResults.numRuntimeErrorTestSuites === 0);\n-        const anyReporterErrors = this._dispatcher.hasErrors();\n+    const anyTestFailures = !(aggregatedResults.numFailedTests === 0 &&\n+      aggregatedResults.numRuntimeErrorTestSuites === 0);\n+    const anyReporterErrors = this._dispatcher.hasErrors();\n \n-        aggregatedResults.success = !(anyTestFailures ||\n-          aggregatedResults.snapshot.failure ||\n-          anyReporterErrors);\n+    aggregatedResults.success = !(anyTestFailures ||\n+      aggregatedResults.snapshot.failure ||\n+      anyReporterErrors);\n \n-        this._cacheTestResults(aggregatedResults);\n-        return aggregatedResults;\n-      });\n+    return aggregatedResults;\n   }\n \n   _createInBandTestRun(\n-    testPaths: Array<Path>,\n+    tests: Tests,\n     watcher: TestWatcher,\n-    onResult: OnTestResult,\n-    onFailure: OnRunFailure,\n+    onResult: OnTestSuccess,\n+    onFailure: OnTestFailure,\n   ) {\n     const mutex = throat(1);\n-    return testPaths.reduce(\n-      (promise, path) =>\n-        mutex(() =>\n-          promise\n-            .then(() => {\n-              if (watcher.isInterrupted()) {\n-                throw new CancelRun();\n-              }\n-\n-              this._dispatcher.onTestStart(this._config, path);\n-              return runTest(path, this._config, this._hasteContext.resolver);\n-            })\n-            .then(result => onResult(path, result))\n-            .catch(err => onFailure(path, err))),\n+    return tests.reduce(\n+      (promise, test) => mutex(() => promise\n+        .then(() => {\n+          if (watcher.isInterrupted()) {\n+            throw new CancelRun();\n+          }\n+\n+          this._dispatcher.onTestStart(test.config, test.path);\n+          return runTest(test.path, test.config, this._hasteContext.resolver);\n+        })\n+        .then(result => onResult(test, result))\n+        .catch(err => onFailure(test, err))),\n       Promise.resolve(),\n     );\n   }\n \n   _createParallelTestRun(\n-    testPaths: Array<Path>,\n+    tests: Tests,\n     watcher: TestWatcher,\n-    onResult: OnTestResult,\n-    onFailure: OnRunFailure,\n+    onResult: OnTestSuccess,\n+    onFailure: OnTestFailure,\n   ) {\n-    const config = this._config;\n     const farm = workerFarm(\n       {\n         autoStart: true,\n@@ -306,23 +225,22 @@ class TestRunner {\n \n     // Send test suites to workers continuously instead of all at once to track\n     // the start time of individual tests.\n-    const runTestInWorker = ({config, path}) =>\n-      mutex(() => {\n-        if (watcher.isInterrupted()) {\n-          return Promise.reject();\n-        }\n-        this._dispatcher.onTestStart(config, path);\n-        return worker({\n-          config,\n-          path,\n-          rawModuleMap: watcher.isWatchMode()\n-            ? this._hasteContext.moduleMap.getRawModuleMap()\n-            : null,\n-        });\n+    const runTestInWorker = ({config, path}) => mutex(() => {\n+      if (watcher.isInterrupted()) {\n+        return Promise.reject();\n+      }\n+      this._dispatcher.onTestStart(config, path);\n+      return worker({\n+        config,\n+        path,\n+        rawModuleMap: watcher.isWatchMode()\n+          ? this._hasteContext.moduleMap.getRawModuleMap()\n+          : null,\n       });\n+    });\n \n-    const onError = (err, path) => {\n-      onFailure(path, err);\n+    const onError = (err, test) => {\n+      onFailure(test, err);\n       if (err.type === 'ProcessTerminatedError') {\n         console.error(\n           'A worker process has quit unexpectedly! ' +\n@@ -341,15 +259,13 @@ class TestRunner {\n     });\n \n     const runAllTests = Promise.all(\n-      testPaths.map(path => {\n-        return runTestInWorker({config, path})\n-          .then(testResult => onResult(path, testResult))\n-          .catch(error => onError(error, path));\n-      }),\n+      tests.map(test =>\n+        runTestInWorker(test)\n+          .then(testResult => onResult(test, testResult))\n+          .catch(error => onError(error, test))),\n     );\n \n     const cleanup = () => workerFarm.end(farm);\n-\n     return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n   }\n \n@@ -497,8 +413,6 @@ const buildFailureTestResult = (\n   };\n };\n \n-// Proxy class that holds all reporter and dispatchers events to each\n-// of them.\n class ReporterDispatcher {\n   _disabled: boolean;\n   _reporters: Array<BaseReporter>;\n@@ -561,11 +475,9 @@ const getEstimatedTime = (timings, workers) => {\n   }\n \n   const max = Math.max.apply(null, timings);\n-  if (timings.length <= workers) {\n-    return max;\n-  }\n-\n-  return Math.max(timings.reduce((sum, time) => sum + time) / workers, max);\n+  return timings.length <= workers\n+    ? max\n+    : Math.max(timings.reduce((sum, time) => sum + time) / workers, max);\n };\n \n module.exports = TestRunner;"},{"sha":"4af0d39add7727025a39dc191da401c798771a36","filename":"packages/jest-cli/src/TestSequencer.js","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/facebook/jest/blob/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2FTestSequencer.js","raw_url":"https://github.com/facebook/jest/raw/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2FTestSequencer.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2FTestSequencer.js?ref=53b7766d9dda145e3b1db40138a2714f5fc516ee","patch":"@@ -0,0 +1,111 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+'use strict';\n+\n+import type {AggregatedResult} from 'types/TestResult';\n+import type {Config} from 'types/Config';\n+import type {Tests} from 'types/TestRunner';\n+\n+const fs = require('fs');\n+const getCacheFilePath = require('jest-haste-map').getCacheFilePath;\n+\n+const FAIL = 0;\n+const SUCCESS = 1;\n+\n+class TestSequencer {\n+  _config: Config;\n+  _cache: Object;\n+\n+  constructor(config: Config) {\n+    this._config = config;\n+    this._cache = {};\n+  }\n+\n+  _getTestPerformanceCachePath() {\n+    return getCacheFilePath(\n+      this._config.cacheDirectory,\n+      'perf-cache-' + this._config.name,\n+    );\n+  }\n+\n+  // When running more tests than we have workers available, sort the tests\n+  // by size - big test files usually take longer to complete, so we run\n+  // them first in an effort to minimize worker idle time at the end of a\n+  // long test run.\n+  //\n+  // After a test run we store the time it took to run a test and on\n+  // subsequent runs we use that to run the slowest tests first, yielding the\n+  // fastest results.\n+  sort(testPaths: Array<string>): Tests {\n+    const config = this._config;\n+    const stats = {};\n+    const fileSize = filePath =>\n+      stats[filePath] || (stats[filePath] = fs.statSync(filePath).size);\n+    const failed = filePath =>\n+      this._cache[filePath] && this._cache[filePath][0] === FAIL;\n+    const time = filePath => this._cache[filePath] && this._cache[filePath][1];\n+\n+    this._cache = {};\n+    try {\n+      if (this._config.cache) {\n+        this._cache = JSON.parse(\n+          fs.readFileSync(this._getTestPerformanceCachePath(), 'utf8'),\n+        );\n+      }\n+    } catch (e) {}\n+\n+    testPaths = testPaths.sort((pathA, pathB) => {\n+      const failedA = failed(pathA);\n+      const failedB = failed(pathB);\n+      if (failedA !== failedB) {\n+        return failedA ? -1 : 1;\n+      }\n+      const timeA = time(pathA);\n+      const timeB = time(pathB);\n+      const hasTimeA = timeA != null;\n+      const hasTimeB = timeB != null;\n+      // Check if only one of two tests has timing information\n+      if (hasTimeA != hasTimeB) {\n+        return hasTimeA ? 1 : -1;\n+      }\n+      if (timeA != null && !timeB != null) {\n+        return timeA < timeB ? 1 : -1;\n+      }\n+      return fileSize(pathA) < fileSize(pathB) ? 1 : -1;\n+    });\n+\n+    return testPaths.map(path => ({\n+      config,\n+      duration: this._cache[path] && this._cache[path][1],\n+      path,\n+    }));\n+  }\n+\n+  cacheResults(tests: Tests, results: AggregatedResult) {\n+    const cache = this._cache;\n+    const map = Object.create(null);\n+    tests.forEach(({path}) => map[path] = true);\n+    results.testResults.forEach(testResult => {\n+      if (testResult && map[testResult.testFilePath] && !testResult.skipped) {\n+        const perf = testResult.perfStats;\n+        cache[testResult.testFilePath] = [\n+          testResult.numFailingTests ? FAIL : SUCCESS,\n+          perf.end - perf.start || 0,\n+        ];\n+      }\n+    });\n+    fs.writeFileSync(\n+      this._getTestPerformanceCachePath(),\n+      JSON.stringify(cache),\n+    );\n+  }\n+}\n+\n+module.exports = TestSequencer;"},{"sha":"a00188c525d3f1a62972768d9cca06aea23ab2f9","filename":"packages/jest-cli/src/__tests__/TestRunner-test.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2F__tests__%2FTestRunner-test.js","raw_url":"https://github.com/facebook/jest/raw/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2F__tests__%2FTestRunner-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2F__tests__%2FTestRunner-test.js?ref=53b7766d9dda145e3b1db40138a2714f5fc516ee","patch":"@@ -48,7 +48,7 @@ describe('_createInBandTestRun()', () => {\n \n     return runner\n       ._createParallelTestRun(\n-        ['./file-test.js', './file2-test.js'],\n+        [{config, path: './file-test.js'}, {config, path: './file2-test.js'}],\n         new TestWatcher({isWatchMode: config.watch}),\n         () => {},\n         () => {},\n@@ -75,7 +75,7 @@ describe('_createInBandTestRun()', () => {\n \n     return runner\n       ._createParallelTestRun(\n-        ['./file-test.js', './file2-test.js'],\n+        [{config, path: './file-test.js'}, {config, path: './file2-test.js'}],\n         new TestWatcher({isWatchMode: config.watch}),\n         () => {},\n         () => {},"},{"sha":"76054157897c57bfbcd29e51a96b616defa6f3b3","filename":"packages/jest-cli/src/__tests__/TestSequencer-test.js","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/facebook/jest/blob/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2F__tests__%2FTestSequencer-test.js","raw_url":"https://github.com/facebook/jest/raw/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2F__tests__%2FTestSequencer-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2F__tests__%2FTestSequencer-test.js?ref=53b7766d9dda145e3b1db40138a2714f5fc516ee","patch":"@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+'use strict';\n+\n+jest.mock('fs');\n+\n+const TestSequencer = require('../TestSequencer');\n+\n+const fs = require('fs');\n+\n+const FAIL = 0;\n+const SUCCESS = 1;\n+\n+let sequencer;\n+\n+const config = {\n+  cache: true,\n+  cacheDirectory: '/cache',\n+  name: 'test',\n+};\n+\n+beforeEach(() => {\n+  sequencer = new TestSequencer(config);\n+\n+  fs.readFileSync = jest.fn(() => '{}');\n+  fs.statSync = jest.fn(filePath => ({size: filePath.length}));\n+});\n+\n+test('sorts by file size if there is no timing information', () => {\n+  expect(sequencer.sort(['/test-a.js', '/test-ab.js'])).toEqual([\n+    {config, duration: undefined, path: '/test-ab.js'},\n+    {config, duration: undefined, path: '/test-a.js'},\n+  ]);\n+});\n+\n+test('sorts based on timing information', () => {\n+  fs.readFileSync = jest.fn(() => JSON.stringify({\n+    '/test-a.js': [SUCCESS, 5],\n+    '/test-ab.js': [SUCCESS, 3],\n+  }));\n+  expect(sequencer.sort(['/test-a.js', '/test-ab.js'])).toEqual([\n+    {config, duration: 5, path: '/test-a.js'},\n+    {config, duration: 3, path: '/test-ab.js'},\n+  ]);\n+});\n+\n+test('sorts based on failures and timing information', () => {\n+  fs.readFileSync = jest.fn(() => JSON.stringify({\n+    '/test-a.js': [SUCCESS, 5],\n+    '/test-ab.js': [FAIL, 0],\n+    '/test-c.js': [FAIL, 6],\n+    '/test-d.js': [SUCCESS, 2],\n+  }));\n+  expect(\n+    sequencer.sort(['/test-a.js', '/test-ab.js', '/test-c.js', '/test-d.js']),\n+  ).toEqual([\n+    {config, duration: 6, path: '/test-c.js'},\n+    {config, duration: 0, path: '/test-ab.js'},\n+    {config, duration: 5, path: '/test-a.js'},\n+    {config, duration: 2, path: '/test-d.js'},\n+  ]);\n+});\n+\n+test('sorts based on failures, timing information and file size', () => {\n+  fs.readFileSync = jest.fn(() => JSON.stringify({\n+    '/test-a.js': [SUCCESS, 5],\n+    '/test-ab.js': [FAIL, 1],\n+    '/test-c.js': [FAIL],\n+    '/test-d.js': [SUCCESS, 2],\n+    '/test-efg.js': [FAIL],\n+  }));\n+  expect(\n+    sequencer.sort([\n+      '/test-a.js',\n+      '/test-ab.js',\n+      '/test-c.js',\n+      '/test-d.js',\n+      '/test-efg.js',\n+    ]),\n+  ).toEqual([\n+    {config, duration: undefined, path: '/test-efg.js'},\n+    {config, duration: undefined, path: '/test-c.js'},\n+    {config, duration: 1, path: '/test-ab.js'},\n+    {config, duration: 5, path: '/test-a.js'},\n+    {config, duration: 2, path: '/test-d.js'},\n+  ]);\n+});\n+\n+test('writes the cache based on the results', () => {\n+  fs.readFileSync = jest.fn(() => JSON.stringify({\n+    '/test-a.js': [SUCCESS, 5],\n+    '/test-b.js': [FAIL, 1],\n+    '/test-c.js': [FAIL],\n+  }));\n+\n+  const testPaths = ['/test-a.js', '/test-b.js', '/test-c.js'];\n+  const tests = sequencer.sort(testPaths);\n+  sequencer.cacheResults(tests, {\n+    testResults: [\n+      {\n+        numFailingTests: 0,\n+        perfStats: {end: 2, start: 1},\n+        testFilePath: '/test-a.js',\n+      },\n+      {\n+        numFailingTests: 0,\n+        perfStats: {end: 0, start: 0},\n+        skipped: true,\n+        testFilePath: '/test-b.js',\n+      },\n+      {\n+        numFailingTests: 1,\n+        perfStats: {end: 4, start: 1},\n+        testFilePath: '/test-c.js',\n+      },\n+      {\n+        numFailingTests: 1,\n+        perfStats: {end: 2, start: 1},\n+        testFilePath: '/test-x.js',\n+      },\n+    ],\n+  });\n+  const fileData = JSON.parse(fs.writeFileSync.mock.calls[0][1]);\n+  expect(fileData).toEqual({\n+    '/test-a.js': [SUCCESS, 1],\n+    '/test-b.js': [FAIL, 1],\n+    '/test-c.js': [FAIL, 3],\n+  });\n+});"},{"sha":"8819bf08b236448b653ba5b891f277ba90b383cf","filename":"packages/jest-cli/src/cli/index.js","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2Fcli%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2Fcli%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fcli%2Findex.js?ref=53b7766d9dda145e3b1db40138a2714f5fc516ee","patch":"@@ -15,6 +15,7 @@ import type {Path} from 'types/Config';\n const args = require('./args');\n const getJest = require('./getJest');\n const pkgDir = require('pkg-dir');\n+const runCLI = require('./runCLI');\n const validateCLIOptions = require('jest-util').validateCLIOptions;\n const yargs = require('yargs');\n \n@@ -49,3 +50,4 @@ function run(argv?: Object, root?: Path) {\n }\n \n exports.run = run;\n+exports.runCLI = runCLI;"},{"sha":"ed454bec763f0b4d246bdb8af09c041e4f988874","filename":"packages/jest-cli/src/cli/runCLI.js","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/facebook/jest/blob/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2Fcli%2FrunCLI.js","raw_url":"https://github.com/facebook/jest/raw/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2Fcli%2FrunCLI.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fcli%2FrunCLI.js?ref=53b7766d9dda145e3b1db40138a2714f5fc516ee","patch":"@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+'use strict';\n+\n+import type {AggregatedResult} from 'types/TestResult';\n+import type {Path} from 'types/Config';\n+\n+const Runtime = require('jest-runtime');\n+\n+const chalk = require('chalk');\n+const {Console, clearLine} = require('jest-util');\n+const {createDirectory} = require('jest-util');\n+const createHasteContext = require('../lib/createHasteContext');\n+const getMaxWorkers = require('../lib/getMaxWorkers');\n+const logDebugMessages = require('../lib/logDebugMessages');\n+const preRunMessage = require('../preRunMessage');\n+const readConfig = require('jest-config').readConfig;\n+const runJest = require('../runJest');\n+const TestWatcher = require('../TestWatcher');\n+const watch = require('../watch');\n+\n+const VERSION = require('../../package.json').version;\n+\n+module.exports = (\n+  argv: Object,\n+  root: Path,\n+  onComplete: (results: ?AggregatedResult) => void,\n+) => {\n+  const realFs = require('fs');\n+  const fs = require('graceful-fs');\n+  fs.gracefulify(realFs);\n+\n+  const pipe = argv.json ? process.stderr : process.stdout;\n+  argv = argv || {};\n+  if (argv.version) {\n+    pipe.write(`v${VERSION}\\n`);\n+    onComplete && onComplete();\n+    return;\n+  }\n+\n+  const _run = async ({config, hasDeprecationWarnings}) => {\n+    if (argv.debug) {\n+      logDebugMessages(config, pipe);\n+    }\n+\n+    createDirectory(config.cacheDirectory);\n+    const hasteMapInstance = Runtime.createHasteMap(config, {\n+      console: new Console(pipe, pipe),\n+      maxWorkers: getMaxWorkers(argv),\n+      resetCache: !config.cache,\n+      watch: config.watch,\n+    });\n+\n+    const hasteMap = await hasteMapInstance.build();\n+    const hasteContext = createHasteContext(config, hasteMap);\n+    if (argv.watch || argv.watchAll) {\n+      return watch(\n+        config,\n+        pipe,\n+        argv,\n+        hasteMapInstance,\n+        hasteContext,\n+        hasDeprecationWarnings,\n+      );\n+    } else {\n+      const startRun = () => {\n+        preRunMessage.print(pipe);\n+        const testWatcher = new TestWatcher({isWatchMode: false});\n+        return runJest(\n+          hasteContext,\n+          config,\n+          argv,\n+          pipe,\n+          testWatcher,\n+          startRun,\n+          onComplete,\n+        );\n+      };\n+      return startRun();\n+    }\n+  };\n+\n+  readConfig(argv, root).then(_run).catch(error => {\n+    clearLine(process.stderr);\n+    clearLine(process.stdout);\n+    console.error(chalk.red(error.stack));\n+    process.exit(1);\n+  });\n+};"},{"sha":"5d5998ec4b8316d09f466e25e8224317a4bd6ae1","filename":"packages/jest-cli/src/jest.js","status":"modified","additions":2,"deletions":97,"changes":99,"blob_url":"https://github.com/facebook/jest/blob/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2Fjest.js","raw_url":"https://github.com/facebook/jest/raw/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2Fjest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fjest.js?ref=53b7766d9dda145e3b1db40138a2714f5fc516ee","patch":"@@ -9,108 +9,13 @@\n  */\n 'use strict';\n \n-import type {AggregatedResult} from 'types/TestResult';\n-import type {Path, Config} from 'types/Config';\n-\n-const realFs = require('fs');\n-const fs = require('graceful-fs');\n-fs.gracefulify(realFs);\n-\n-const Runtime = require('jest-runtime');\n const SearchSource = require('./SearchSource');\n const TestRunner = require('./TestRunner');\n-\n-const chalk = require('chalk');\n-const {Console, clearLine} = require('jest-util');\n-const {createDirectory} = require('jest-util');\n-const createHasteContext = require('./lib/createHasteContext');\n-const getMaxWorkers = require('./lib/getMaxWorkers');\n-const logDebugMessages = require('./lib/logDebugMessages');\n-const preRunMessage = require('./preRunMessage');\n-const readConfig = require('jest-config').readConfig;\n-const {run} = require('./cli');\n-const runJest = require('./runJest');\n const TestWatcher = require('./TestWatcher');\n-const watch = require('./watch');\n-\n-const VERSION = require('../package.json').version;\n \n-const runCLI = (\n-  argv: Object,\n-  root: Path,\n-  onComplete: (results: ?AggregatedResult) => void,\n-) => {\n-  const pipe = argv.json ? process.stderr : process.stdout;\n-  argv = argv || {};\n-  if (argv.version) {\n-    pipe.write(`v${VERSION}\\n`);\n-    onComplete && onComplete();\n-    return;\n-  }\n+const {run, runCLI} = require('./cli');\n \n-  readConfig(argv, root)\n-    .then(({\n-      config,\n-      hasDeprecationWarnings,\n-    }: {\n-      config: Config,\n-      hasDeprecationWarnings: boolean,\n-    }) => {\n-      if (argv.debug) {\n-        logDebugMessages(config, pipe);\n-      }\n-\n-      createDirectory(config.cacheDirectory);\n-      const jestHasteMap = Runtime.createHasteMap(config, {\n-        console: new Console(pipe, pipe),\n-        maxWorkers: getMaxWorkers(argv),\n-        resetCache: !config.cache,\n-        watch: config.watch,\n-      });\n-\n-      return jestHasteMap\n-        .build()\n-        .then(\n-          hasteMap => createHasteContext(config, hasteMap),\n-          error => {\n-            throw error;\n-          },\n-        )\n-        .then(hasteContext => {\n-          if (argv.watch || argv.watchAll) {\n-            return watch(\n-              config,\n-              pipe,\n-              argv,\n-              jestHasteMap,\n-              hasteContext,\n-              hasDeprecationWarnings,\n-            );\n-          } else {\n-            const startRun = () => {\n-              preRunMessage.print(pipe);\n-              const testWatcher = new TestWatcher({isWatchMode: false});\n-              return runJest(\n-                hasteContext,\n-                config,\n-                argv,\n-                pipe,\n-                testWatcher,\n-                startRun,\n-                onComplete,\n-              );\n-            };\n-            return startRun();\n-          }\n-        });\n-    })\n-    .catch(error => {\n-      clearLine(process.stderr);\n-      clearLine(process.stdout);\n-      console.error(chalk.red(error.stack));\n-      process.exit(1);\n-    });\n-};\n+const VERSION = require('../package.json').version;\n \n module.exports = {\n   SearchSource,"},{"sha":"c7d44f61f003387c98cb6985703de3a14942b5bd","filename":"packages/jest-cli/src/runJest.js","status":"modified","additions":79,"deletions":73,"changes":152,"blob_url":"https://github.com/facebook/jest/blob/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2FrunJest.js","raw_url":"https://github.com/facebook/jest/raw/53b7766d9dda145e3b1db40138a2714f5fc516ee/packages%2Fjest-cli%2Fsrc%2FrunJest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2FrunJest.js?ref=53b7766d9dda145e3b1db40138a2714f5fc516ee","patch":"@@ -17,6 +17,7 @@ const fs = require('graceful-fs');\n \n const SearchSource = require('./SearchSource');\n const TestRunner = require('./TestRunner');\n+const TestSequencer = require('./TestSequencer');\n \n const getTestPathPatternInfo = require('./lib/getTestPathPatternInfo');\n const chalk = require('chalk');\n@@ -41,7 +42,7 @@ const getTestSummary = (argv: Object, patternInfo: PatternInfo) => {\n     chalk.dim('.');\n };\n \n-const runJest = (\n+const runJest = async (\n   hasteContext: HasteContext,\n   config: Config,\n   argv: Object,\n@@ -51,84 +52,89 @@ const runJest = (\n   onComplete: (testResults: any) => void,\n ) => {\n   const maxWorkers = getMaxWorkers(argv);\n-  const localConsole = new Console(pipe, pipe);\n+  const source = new SearchSource(hasteContext, config);\n   let patternInfo = getTestPathPatternInfo(argv);\n-  return Promise.resolve().then(() => {\n-    const source = new SearchSource(hasteContext, config);\n-    return source\n-      .getTestPaths(patternInfo)\n-      .then(data => {\n-        if (!data.paths.length) {\n-          if (patternInfo.onlyChanged && data.noSCM) {\n-            if (config.watch) {\n-              // Run all the tests\n-              setState(argv, 'watchAll', {\n-                noSCM: true,\n-              });\n-              patternInfo = getTestPathPatternInfo(argv);\n-              return source.getTestPaths(patternInfo);\n-            } else {\n-              localConsole.log(\n-                'Jest can only find uncommitted changed files in a git or hg ' +\n-                  'repository. If you make your project a git or hg ' +\n-                  'repository (`git init` or `hg init`), Jest will be able ' +\n-                  'to only run tests related to files changed since the last ' +\n-                  'commit.',\n-              );\n-            }\n-          }\n \n+  const processTests = data => {\n+    if (!data.paths.length) {\n+      const localConsole = new Console(pipe, pipe);\n+      if (patternInfo.onlyChanged && data.noSCM) {\n+        if (config.watch) {\n+          // Run all the tests\n+          setState(argv, 'watchAll', {\n+            noSCM: true,\n+          });\n+          patternInfo = getTestPathPatternInfo(argv);\n+          return source.getTestPaths(patternInfo);\n+        } else {\n           localConsole.log(\n-            source.getNoTestsFoundMessage(patternInfo, config, data),\n+            'Jest can only find uncommitted changed files in a git or hg ' +\n+              'repository. If you make your project a git or hg ' +\n+              'repository (`git init` or `hg init`), Jest will be able ' +\n+              'to only run tests related to files changed since the last ' +\n+              'commit.',\n           );\n         }\n-        return data;\n-      })\n-      .then(data => {\n-        if (data.paths.length === 1) {\n-          if (config.silent !== true && config.verbose !== false) {\n-            // $FlowFixMe\n-            config = Object.assign({}, config, {verbose: true});\n-          }\n-        }\n+      }\n \n-        return new TestRunner(\n-          hasteContext,\n-          config,\n-          {\n-            getTestSummary: () => getTestSummary(argv, patternInfo),\n-            maxWorkers,\n-          },\n-          startRun,\n-        ).runTests(data.paths, testWatcher);\n-      })\n-      .then(runResults => {\n-        if (config.testResultsProcessor) {\n-          /* $FlowFixMe */\n-          runResults = require(config.testResultsProcessor)(runResults);\n-        }\n-        if (argv.json) {\n-          if (argv.outputFile) {\n-            const outputFile = path.resolve(process.cwd(), argv.outputFile);\n-\n-            fs.writeFileSync(\n-              outputFile,\n-              JSON.stringify(formatTestResults(runResults)),\n-            );\n-            process.stdout.write(\n-              `Test results written to: ` +\n-                `${path.relative(process.cwd(), outputFile)}\\n`,\n-            );\n-          } else {\n-            process.stdout.write(JSON.stringify(formatTestResults(runResults)));\n-          }\n-        }\n-        return onComplete && onComplete(runResults);\n-      })\n-      .catch(error => {\n-        throw error;\n-      });\n-  });\n+      localConsole.log(\n+        source.getNoTestsFoundMessage(patternInfo, config, data),\n+      );\n+    }\n+\n+    if (\n+      data.paths.length === 1 &&\n+      config.silent !== true &&\n+      config.verbose !== false\n+    ) {\n+      // $FlowFixMe\n+      config = Object.assign({}, config, {verbose: true});\n+    }\n+\n+    return data;\n+  };\n+\n+  const runTests = async tests => new TestRunner(\n+    hasteContext,\n+    config,\n+    {\n+      getTestSummary: () => getTestSummary(argv, patternInfo),\n+      maxWorkers,\n+    },\n+    startRun,\n+  ).runTests(tests, testWatcher);\n+\n+  const processResults = runResults => {\n+    if (config.testResultsProcessor) {\n+      /* $FlowFixMe */\n+      runResults = require(config.testResultsProcessor)(runResults);\n+    }\n+    if (argv.json) {\n+      if (argv.outputFile) {\n+        const outputFile = path.resolve(process.cwd(), argv.outputFile);\n+\n+        fs.writeFileSync(\n+          outputFile,\n+          JSON.stringify(formatTestResults(runResults)),\n+        );\n+        process.stdout.write(\n+          `Test results written to: ` +\n+            `${path.relative(process.cwd(), outputFile)}\\n`,\n+        );\n+      } else {\n+        process.stdout.write(JSON.stringify(formatTestResults(runResults)));\n+      }\n+    }\n+    return onComplete && onComplete(runResults);\n+  };\n+\n+  const data = await source.getTestPaths(patternInfo);\n+  processTests(data);\n+  const sequencer = new TestSequencer(config);\n+  const tests = sequencer.sort(data.paths);\n+  const results = await runTests(tests);\n+  sequencer.cacheResults(tests, results);\n+  return processResults(results);\n };\n \n module.exports = runJest;"},{"sha":"50a345dfed3670f17ccff1c80f33e3b81b935cef","filename":"types/TestRunner.js","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/facebook/jest/blob/53b7766d9dda145e3b1db40138a2714f5fc516ee/types%2FTestRunner.js","raw_url":"https://github.com/facebook/jest/raw/53b7766d9dda145e3b1db40138a2714f5fc516ee/types%2FTestRunner.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/types%2FTestRunner.js?ref=53b7766d9dda145e3b1db40138a2714f5fc516ee","patch":"@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+'use strict';\n+\n+import type {Config, Path} from './Config';\n+\n+export type Test = {\n+  config: Config,\n+  path: Path,\n+  duration?: number,\n+};\n+\n+export type Tests = Array<Test>;"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/4497","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/4497/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/4497/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/4497/events","html_url":"https://github.com/facebook/jest/pull/4497","id":258314972,"node_id":"MDExOlB1bGxSZXF1ZXN0MTQxNDkyNjM3","number":4497,"title":"Initial version of jest-worker","user":{"login":"mjesun","id":829269,"node_id":"MDQ6VXNlcjgyOTI2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/829269?v=4","gravatar_id":"","url":"https://api.github.com/users/mjesun","html_url":"https://github.com/mjesun","followers_url":"https://api.github.com/users/mjesun/followers","following_url":"https://api.github.com/users/mjesun/following{/other_user}","gists_url":"https://api.github.com/users/mjesun/gists{/gist_id}","starred_url":"https://api.github.com/users/mjesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjesun/subscriptions","organizations_url":"https://api.github.com/users/mjesun/orgs","repos_url":"https://api.github.com/users/mjesun/repos","events_url":"https://api.github.com/users/mjesun/events{/privacy}","received_events_url":"https://api.github.com/users/mjesun/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":32,"created_at":"2017-09-17T16:26:27Z","updated_at":"2021-05-13T01:32:27Z","closed_at":"2017-10-04T10:14:23Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/4497","html_url":"https://github.com/facebook/jest/pull/4497","diff_url":"https://github.com/facebook/jest/pull/4497.diff","patch_url":"https://github.com/facebook/jest/pull/4497.patch","merged_at":"2017-10-04T10:14:23Z"},"body":"This PR introduces a new module, `jest-worker`, intended to allow heavy task parallelization over multiple workers. \r\n\r\nThe module has a few advantages over the currently one used both in `jest` and `metro-bundler`:\r\n\r\n* 100% `flow`-ified.\r\n\r\n* 100% test coverage on it, all statements, methods and branches.\r\n\r\n* Slightly faster than the currenly used one.\r\n\r\n* Natively provides a `Promise` based interface, which allow us to avoid the extra wrapping layer in order to be used with `async`/`await.\r\n\r\n* It only has one single dependency (`merge-stream`), which we could also remove.\r\n\r\n* Lazily instantiated code in worker, meaning no code is loaded on child processes until the first call is done (lazy require). This allows to spawn a farm with minimal RAM consumption, and only load them when needed.\r\n\r\n* Sticky workers: tasks will be processed by the first available worker if no stickyness is needed, or by a particular one if the task is forced to do so. Specially useful for workers implementing caches.\r\n\r\n\r\n## Performance test\r\n\r\nIt can be run by doing `node --expose-gc test.js` under `__performance_tests__`. Note that the percentage improvement shown (~ 10%) applies to 10,000 calls, meaning the performance improvement per single call is negligible. The test implements a `Promise` wrapper over the current implementation, so we can equivalently test both implementations as we use them in real scenarios.\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 738, processingTime: 707 }\r\nworker-farm: { globalTime: 885, processingTime: 866 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 738, processingTime: 718 }\r\nworker-farm: { globalTime: 865, processingTime: 849 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 708, processingTime: 685 }\r\nworker-farm: { globalTime: 769, processingTime: 753 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 682, processingTime: 656 }\r\nworker-farm: { globalTime: 780, processingTime: 764 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 704, processingTime: 684 }\r\nworker-farm: { globalTime: 775, processingTime: 757 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 705, processingTime: 677 }\r\nworker-farm: { globalTime: 767, processingTime: 748 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 700, processingTime: 675 }\r\nworker-farm: { globalTime: 766, processingTime: 751 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 728, processingTime: 702 }\r\nworker-farm: { globalTime: 770, processingTime: 755 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 721, processingTime: 695 }\r\nworker-farm: { globalTime: 769, processingTime: 756 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 702, processingTime: 675 }\r\nworker-farm: { globalTime: 801, processingTime: 784 }\r\n---------------------------------------------------------------------------\r\ntotal worker-farm: { wFGT: 7947, wFPT: 7783 }\r\ntotal jest-worker: { jWGT: 7126, jWPT: 6874 }\r\n---------------------------------------------------------------------------\r\n% improvement over 10000 calls (global time): 10.330942494022901\r\n% improvement over 10000 calls (processing time): 11.679301040729795\r\n```\r\n\r\n\r\n## Coverage\r\n\r\n![Coverage](https://user-images.githubusercontent.com/829269/31123180-badf2e92-a836-11e7-8460-1b5c88719517.png)\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/4497/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/4497/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"dcbdc04f9819ba2c963981e20910fab0bd5ad44e","filename":"packages/jest-worker/README.md","status":"added","additions":193,"deletions":0,"changes":193,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2FREADME.md","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2FREADME.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2FREADME.md?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,193 @@\n+# jest-worker\n+\n+Module for executing heavy tasks under forked processes in parallel, by providing a `Promise` based interface, minimum overhead, and bound workers.\n+\n+The module works by providing an absolute path of the module to be loaded in all forked processes. Files relative to a node module are also accepted. All methods are exposed on the parent process as promises, so they can be `await`'ed. Child (worker) methods can either be synchronous or asynchronous.\n+\n+The module also implements support for bound workers. Binding a worker means that, based on certain parameters, the same task will always be executed by the same worker. The way bound workers work is by using the returned string of the `computeWorkerKey` method. If the string was used before for a task, the call will be queued to the related worker that processed the task earlier; if not, it will be executed by the first available worker, then sticked to the worker that executed it; so the next time it will be processed by the same worker. If you have no preference on the worker executing the task, but you have defined a `computeWorkerKey` method because you want _some_ of the tasks to be sticked, you can return `null` from it.\n+\n+The list of exposed methods can be explicitly provided via the `exposedMethods` option. If it is not provided, it will be obtained by requiring the child module into the main process, and analyzed via reflection. Check the \"minimal example\" section for a valid one.\n+\n+## Install\n+\n+```sh\n+$ yarn add jest-worker\n+```\n+\n+\n+## API\n+\n+The only exposed method is a constructor (`Worker`) that is initialized by passing the worker path, plus an options object.\n+\n+\n+### `workerPath: string` (required)\n+\n+Node module name or absolute path of the file to be loaded in the child processes. Use `require.resolve` to transform a relative path into an absolute one.\n+\n+\n+### `options: Object` (optional)\n+\n+#### `exposedMethods: $ReadOnlyArray<string>` (optional)\n+\n+List of method names that can be called on the child processes from the parent process. You cannot expose any method named like a public `Worker` method, or starting with `_`. If you use method auto-discovery, then these methods will not be exposed, even if they exist.\n+\n+#### `numWorkers: number` (optional)\n+\n+Amount of workers to spwan. Defaults to the number of CPUs minus 1.\n+\n+#### `forkOptions: Object` (optional)\n+\n+Allow customizing all options passed to `childProcess.fork`. By default, some values are set (`cwd` and `env`), but you can override them and customize the rest. For a list of valid values, check [the Node documentation](https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options).\n+\n+### `computeWorkerKey: (method: string, ...args: Array<any>) => ?string` (optional)\n+\n+Every time a method exposed via the API is called, `computeWorkerKey` is also called in order to bound the call to a worker. This is useful for workers that are able to cache the result or part of it. You bound calls to a worker by making `computeWorkerKey` return the same identifier for all different calls. If you do not want to bind the call to any worker, return `null`.\n+\n+The callback you provide is called with the method name, plus all the rest of the arguments of the call. Thus, you have full control to decide what to return. Check a practical example on bound workers under the \"bound worker usage\" section.\n+\n+By default, no process is bound to any worker.\n+\n+\n+## Worker\n+\n+The returned `Worker` instance has all the exposed methods, plus some additional ones to interact with the workers itself:\n+\n+\n+### `getStdout(): Readable`\n+\n+Returns a `ReadableStream` where the standard output of all workers is piped. Note that the `silent` option of the child workers must be set to `true` to make it work. This is the default set by `jest-worker`, but keep it in mind when overriding options through `forkOptions`.\n+\n+\n+### `getStderr(): Readable`\n+\n+Returns a `ReadableStream` where the standard error of all workers is piped. Note that the `silent` option of the child workers must be set to `true` to make it work. This is the default set by `jest-worker`, but keep it in mind when overriding options through `forkOptions`.\n+\n+\n+### `end()`\n+\n+Finishes the workers by killing all workers. No further calls can be done to the `Worker` instance.\n+\n+\n+## Minimal example\n+\n+This example covers the minmal usage:\n+\n+### File `parent.js`\n+\n+```javascript\n+import Worker from 'jest-worker';\n+\n+async function main() {\n+  const worker = new Worker(require.resolve('./worker'));\n+  const result = await worker.hello('Alice'); // \"Hello, Alice\"\n+}\n+\n+main();\n+```\n+\n+### File `worker.js`\n+\n+```javascript\n+export function hello(param) {\n+  return 'Hello, ' + param;\n+}\n+```\n+\n+\n+## Standard usage\n+\n+This example covers the standard usage:\n+\n+### File `parent.js`\n+\n+```javascript\n+import Worker from 'jest-worker';\n+\n+async function main() {\n+  const myWorker = new Worker({\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 4,\n+    workerPath: require.resolve('./worker'),\n+  });\n+\n+  console.log(await myWorker.foo('Alice')); // \"Hello from foo: Alice\"\n+  console.log(await myWorker.bar('Bob')); // \"Hello from bar: Bob\"\n+\n+  myWorker.end();\n+}\n+\n+main();\n+```\n+\n+### File `worker.js`\n+\n+```javascript\n+export function foo(param) {\n+  return 'Hello from foo: ' + param;\n+}\n+\n+export function bar(param) {\n+  return 'Hello from bar: ' + param;\n+}\n+```\n+\n+\n+## Bound worker usage:\n+\n+This example covers the usage with a `computeWorkerKey` method:\n+\n+### File `parent.js`\n+\n+```javascript\n+import Worker from 'jest-worker';\n+\n+async function main() {\n+  const myWorker = new Worker({\n+    computeWorkerKey: (method, filename) => filename,\n+    exposedMethods: ['foo', 'bar'],\n+    workerPath: require.resolve('./worker'),\n+  });\n+\n+  // Transform the given file, within the first available worker.\n+  console.log(await myWorker.transform('/tmp/foo.js'));\n+\n+  // Wait a bit.\n+  await sleep(10000);\n+\n+  // Transform the same file again. Will immediately return because the\n+  // transformed file is cached in the worker, and `computeWorkerKey` ensures\n+  // the same worker that processed the file the first time will process it now.\n+  console.log(await myWorker.transform('/tmp/foo.js'));\n+\n+  myWorker.end();\n+}\n+\n+main();\n+```\n+\n+### File `worker.js`\n+\n+```javascript\n+\n+import babel from 'babel-core';\n+\n+const cache = Object.create(null);\n+\n+export function transform(filename) {\n+  if (cache[filename]) {\n+    return cache[filename];\n+  }\n+\n+  // jest-worker can handle both immediate results and thenables. If a\n+  // thenable is returned, it will be await'ed until it resolves.\n+  return new Promise((resolve, reject) => {\n+    babel.transformFile(filename, (err, result) => {\n+      if (err) {\n+        reject(err);\n+      } else {\n+        resolve(cache[filename] = result);\n+      }\n+    });\n+  });\n+}\n+```"},{"sha":"57518305240f7be97e17b84c23ce6b6e27e86200","filename":"packages/jest-worker/package.json","status":"added","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fpackage.json?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,13 @@\n+{\n+  \"name\": \"jest-worker\",\n+  \"version\": \"21.1.0\",\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"https://github.com/facebook/jest.git\"\n+  },\n+  \"license\": \"MIT\",\n+  \"main\": \"build/index.js\",\n+  \"dependencies\": {\n+    \"merge-stream\": \"^1.0.1\"\n+  }\n+}"},{"sha":"aeff514657af303d2abb168e34187822543e7fd7","filename":"packages/jest-worker/src/__performance_tests__/test.js","status":"added","additions":173,"deletions":0,"changes":173,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,173 @@\n+'use strict';\n+\n+// eslint-disable-next-line import/no-extraneous-dependencies\n+const workerFarm = require('worker-farm');\n+import JestWorker from '../../build';\n+\n+const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n+const calls = 10000;\n+const threads = 6;\n+\n+function testWorkerFarm() {\n+  return new Promise(async (resolve, reject) => {\n+    const startTime = Date.now();\n+    let count = 0;\n+\n+    async function countToFinish() {\n+      if (++count === calls) {\n+        workerFarm.end(api);\n+        const endTime = Date.now();\n+\n+        // Let all workers go down.\n+        await sleep(2000);\n+\n+        resolve({\n+          globalTime: endTime - startTime - 2000,\n+          processingTime: endTime - startProcess,\n+        });\n+      }\n+    }\n+\n+    const api = workerFarm(\n+      {\n+        autoStart: true,\n+        maxConcurrentCallsPerWorker: 1,\n+        maxConcurrentWorkers: threads,\n+      },\n+      require.resolve('./workers/worker_farm'),\n+      ['loadTest'],\n+    );\n+\n+    // Let all workers come up.\n+    await sleep(2000);\n+\n+    const startProcess = Date.now();\n+\n+    for (let i = 0; i < calls; i++) {\n+      const promisified = new Promise((resolve, reject) => {\n+        api.loadTest((err, result) => {\n+          if (err) {\n+            reject(err);\n+          } else {\n+            resolve(result);\n+          }\n+        });\n+      });\n+\n+      promisified.then(countToFinish);\n+    }\n+  });\n+}\n+\n+function testJestWorker() {\n+  return new Promise(async (resolve, reject) => {\n+    const startTime = Date.now();\n+    let count = 0;\n+\n+    async function countToFinish() {\n+      if (++count === calls) {\n+        farm.end();\n+        const endTime = Date.now();\n+\n+        // Let all workers go down.\n+        await sleep(2000);\n+\n+        resolve({\n+          globalTime: endTime - startTime - 2000,\n+          processingTime: endTime - startProcess,\n+        });\n+      }\n+    }\n+\n+    const farm = new JestWorker(require.resolve('./workers/jest_worker'), {\n+      exposedMethods: ['loadTest'],\n+      forkOptions: {execArgv: []},\n+      workers: threads,\n+    });\n+\n+    farm.getStdout().pipe(process.stdout);\n+    farm.getStderr().pipe(process.stderr);\n+\n+    // Let all workers come up.\n+    await sleep(2000);\n+\n+    const startProcess = Date.now();\n+\n+    for (let i = 0; i < calls; i++) {\n+      const promisified = farm.loadTest();\n+\n+      promisified.then(countToFinish);\n+    }\n+  });\n+}\n+\n+function profile(x) {\n+  console.profile(x);\n+}\n+\n+function profileEnd(x) {\n+  console.profileEnd(x);\n+}\n+\n+async function main() {\n+  if (!global.gc) {\n+    console.log('GC not present');\n+  }\n+\n+  const wFResults = [];\n+  const jWResults = [];\n+\n+  for (let i = 0; i < 10; i++) {\n+    console.log('-'.repeat(75));\n+\n+    profile('worker farm');\n+    const wF = await testWorkerFarm();\n+    profileEnd('worker farm');\n+    await sleep(3000);\n+    // eslint-disable-next-line no-undef\n+    global.gc && gc();\n+\n+    profile('jest worker');\n+    const jW = await testJestWorker();\n+    profileEnd('jest worker');\n+    await sleep(3000);\n+    // eslint-disable-next-line no-undef\n+    global.gc && gc();\n+\n+    wFResults.push(wF);\n+    jWResults.push(jW);\n+\n+    console.log('jest-worker:', jW);\n+    console.log('worker-farm:', wF);\n+  }\n+\n+  let wFGT = 0;\n+  let wFPT = 0;\n+  let jWGT = 0;\n+  let jWPT = 0;\n+\n+  for (let i = 0; i < 10; i++) {\n+    wFGT += wFResults[i].globalTime;\n+    wFPT += wFResults[i].processingTime;\n+\n+    jWGT += jWResults[i].globalTime;\n+    jWPT += jWResults[i].processingTime;\n+  }\n+\n+  console.log('-'.repeat(75));\n+  console.log('total worker-farm:', {wFGT, wFPT});\n+  console.log('total jest-worker:', {jWGT, jWPT});\n+\n+  console.log('-'.repeat(75));\n+  console.log(\n+    `% improvement over ${calls} calls (global time):`,\n+    100 * (wFGT - jWGT) / wFGT,\n+  );\n+\n+  console.log(\n+    `% improvement over ${calls} calls (processing time):`,\n+    100 * (wFPT - jWPT) / wFPT,\n+  );\n+}\n+\n+main();"},{"sha":"e48d8527c4f8f8d98bd110f33774ec31034f7e42","filename":"packages/jest-worker/src/__performance_tests__/workers/jest_worker.js","status":"added","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,7 @@\n+'use strict';\n+\n+const pi = require('./pi');\n+\n+module.exports.loadTest = function() {\n+  return pi();\n+};"},{"sha":"76ffd79a4a3dd81f166d1f3145a9872e850601b0","filename":"packages/jest-worker/src/__performance_tests__/workers/pi.js","status":"added","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fpi.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fpi.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fpi.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,14 @@\n+'use strict';\n+\n+module.exports = function() {\n+  const points = 10000;\n+  let inside = 0;\n+\n+  for (let i = 0; i < points; i++) {\n+    if (Math.pow(Math.random(), 2) + Math.pow(Math.random(), 2) <= 1) {\n+      inside++;\n+    }\n+  }\n+\n+  return 4 * inside / points;\n+};"},{"sha":"4213db2463b4309742b356058bfdc2e706bd7138","filename":"packages/jest-worker/src/__performance_tests__/workers/worker_farm.js","status":"added","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,7 @@\n+'use strict';\n+\n+const pi = require('./pi');\n+\n+module.exports.loadTest = function(callback) {\n+  callback(null, pi());\n+};"},{"sha":"2cf358cb9777d0f8dc65e5bbd75670e41c78e394","filename":"packages/jest-worker/src/__tests__/child.test.js","status":"added","additions":331,"deletions":0,"changes":331,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fchild.test.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fchild.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fchild.test.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,331 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+const mockError = new TypeError('Booo');\n+const mockExtendedError = new ReferenceError('Booo extended');\n+const processExit = process.exit;\n+const processSend = process.send;\n+const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n+\n+import {\n+  CHILD_MESSAGE_INITIALIZE,\n+  CHILD_MESSAGE_CALL,\n+  CHILD_MESSAGE_END,\n+  PARENT_MESSAGE_OK,\n+  PARENT_MESSAGE_ERROR,\n+} from '../types';\n+\n+let mockCount;\n+\n+beforeEach(() => {\n+  mockCount = 0;\n+\n+  jest.mock(\n+    '../my-fancy-worker',\n+    () => {\n+      mockCount++;\n+\n+      return {\n+        fooPromiseThrows() {\n+          return new Promise((resolve, reject) => {\n+            setTimeout(() => reject(mockError), 5);\n+          });\n+        },\n+\n+        fooPromiseWorks() {\n+          return new Promise((resolve, reject) => {\n+            setTimeout(() => resolve(1989), 5);\n+          });\n+        },\n+\n+        fooThrows() {\n+          throw mockError;\n+        },\n+\n+        fooThrowsANumber() {\n+          // eslint-disable-next-line no-throw-literal\n+          throw 412;\n+        },\n+\n+        fooThrowsAnErrorWithExtraProperties() {\n+          mockExtendedError.baz = 123;\n+          mockExtendedError.qux = 456;\n+\n+          throw mockExtendedError;\n+        },\n+\n+        fooThrowsNull() {\n+          // eslint-disable-next-line no-throw-literal\n+          throw null;\n+        },\n+\n+        fooWorks() {\n+          return 1989;\n+        },\n+      };\n+    },\n+    {virtual: true},\n+  );\n+\n+  jest.mock(\n+    '../my-fancy-standalone-worker',\n+    () => jest.fn().mockImplementation(() => 12345),\n+    {virtual: true},\n+  );\n+\n+  // This mock emulates a transpiled Babel module that carries a default export\n+  // that corresponds to a method.\n+  jest.mock(\n+    '../my-fancy-babel-worker',\n+    () => ({\n+      __esModule: true,\n+      default: jest.fn().mockImplementation(() => 67890),\n+    }),\n+    {virtual: true},\n+  );\n+\n+  process.exit = jest.fn();\n+  process.send = jest.fn();\n+\n+  // Require the child!\n+  require('../child');\n+});\n+\n+afterEach(() => {\n+  jest.resetModules();\n+\n+  process.removeAllListeners('message');\n+\n+  process.exit = processExit;\n+  process.send = processSend;\n+});\n+\n+it('lazily requires the file', () => {\n+  expect(mockCount).toBe(0);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  expect(mockCount).toBe(0);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooWorks',\n+    [],\n+  ]);\n+\n+  expect(mockCount).toBe(1);\n+});\n+\n+it('returns results immediately when function is synchronous', () => {\n+  process.send = jest.fn();\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooWorks',\n+    [],\n+  ]);\n+\n+  expect(process.send.mock.calls[0][0]).toEqual([PARENT_MESSAGE_OK, 1989]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooThrows',\n+    [],\n+  ]);\n+\n+  expect(process.send.mock.calls[1][0]).toEqual([\n+    PARENT_MESSAGE_ERROR,\n+    'TypeError',\n+    'Booo',\n+    mockError.stack,\n+    {},\n+  ]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooThrowsANumber',\n+    [],\n+  ]);\n+\n+  expect(process.send.mock.calls[2][0]).toEqual([\n+    PARENT_MESSAGE_ERROR,\n+    'Number',\n+    void 0,\n+    void 0,\n+    412,\n+  ]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooThrowsAnErrorWithExtraProperties',\n+    [],\n+  ]);\n+\n+  expect(process.send.mock.calls[3][0]).toEqual([\n+    PARENT_MESSAGE_ERROR,\n+    'ReferenceError',\n+    'Booo extended',\n+    mockExtendedError.stack,\n+    {baz: 123, qux: 456},\n+  ]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooThrowsNull',\n+    [],\n+  ]);\n+\n+  expect(process.send.mock.calls[4][0][0]).toBe(PARENT_MESSAGE_ERROR);\n+  expect(process.send.mock.calls[4][0][1]).toBe('Error');\n+  expect(process.send.mock.calls[4][0][2]).toEqual(\n+    '\"null\" or \"undefined\" thrown',\n+  );\n+\n+  expect(process.send.mock.calls.length).toBe(5);\n+});\n+\n+it('returns results when it gets resolved if function is asynchronous', async () => {\n+  jest.useRealTimers();\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooPromiseWorks',\n+    [],\n+  ]);\n+\n+  await sleep(10);\n+\n+  expect(process.send.mock.calls[0][0]).toEqual([PARENT_MESSAGE_OK, 1989]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooPromiseThrows',\n+    [],\n+  ]);\n+\n+  await sleep(10);\n+\n+  expect(process.send.mock.calls[1][0]).toEqual([\n+    PARENT_MESSAGE_ERROR,\n+    'TypeError',\n+    'Booo',\n+    mockError.stack,\n+    {},\n+  ]);\n+\n+  expect(process.send.mock.calls.length).toBe(2);\n+});\n+\n+it('calls the main module if the method call is \"default\"', () => {\n+  process.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-standalone-worker',\n+  ]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'default',\n+    [],\n+  ]);\n+\n+  expect(process.send.mock.calls[0][0]).toEqual([PARENT_MESSAGE_OK, 12345]);\n+});\n+\n+it('calls the main export if the method call is \"default\" and it is a Babel transpiled one', () => {\n+  process.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-babel-worker',\n+  ]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'default',\n+    [],\n+  ]);\n+\n+  expect(process.send.mock.calls[0][0]).toEqual([PARENT_MESSAGE_OK, 67890]);\n+});\n+\n+it('finishes the process with exit code 0 if requested', () => {\n+  process.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_END,\n+    true, // Not really used here, but for flow type purity.\n+  ]);\n+\n+  expect(process.exit.mock.calls[0]).toEqual([0]);\n+});\n+\n+it('throws if an invalid message is detected', () => {\n+  // Type 27 does not exist.\n+  expect(() => {\n+    process.emit('message', [27]);\n+  }).toThrow(TypeError);\n+});\n+\n+it('throws if child is not forked', () => {\n+  delete process.send;\n+\n+  process.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  expect(() => {\n+    process.emit('message', [\n+      CHILD_MESSAGE_CALL,\n+      true, // Not really used here, but for flow type purity.\n+      'fooWorks',\n+      [],\n+    ]);\n+  }).toThrow();\n+\n+  expect(() => {\n+    process.emit('message', [\n+      CHILD_MESSAGE_CALL,\n+      true, // Not really used here, but for flow type purity.\n+      'fooThrows',\n+      [],\n+    ]);\n+  }).toThrow();\n+});"},{"sha":"4f63ff7746d678ab6ffe6a09eb2dd2794fde5f6e","filename":"packages/jest-worker/src/__tests__/index.test.js","status":"added","additions":325,"deletions":0,"changes":325,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Findex.test.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Findex.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2Findex.test.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,325 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+let Farm;\n+let Worker;\n+let mockWorkers;\n+\n+function workerReply(i, error, result) {\n+  return mockWorkers[i].send.mock.calls[0][1].call(\n+    mockWorkers[i],\n+    error,\n+    result,\n+  );\n+}\n+\n+beforeEach(() => {\n+  mockWorkers = [];\n+\n+  // The worker mock returns a worker with custom methods, plus it stores them\n+  // in a global list, so that they can be accessed later. This list is reset in\n+  // every test.\n+  jest.mock('../worker', () => {\n+    const fakeClass = jest.fn(() => {\n+      const fakeWorker = {\n+        getStderr: () => ({once() {}, pipe() {}}),\n+        getStdout: () => ({once() {}, pipe() {}}),\n+        send: jest.fn(),\n+      };\n+\n+      mockWorkers.push(fakeWorker);\n+\n+      return fakeWorker;\n+    });\n+\n+    return {\n+      __esModule: true,\n+      default: fakeClass,\n+    };\n+  });\n+\n+  jest.mock(\n+    '/fake-worker.js',\n+    () => {\n+      return {\n+        _shouldNotExist1() {},\n+        methodA() {},\n+        methodB() {},\n+      };\n+    },\n+    {virtual: true},\n+  );\n+\n+  jest.mock(\n+    '/fake-worker-with-default-method.js',\n+    () => {\n+      return () => {};\n+    },\n+    {virtual: true},\n+  );\n+\n+  Worker = require('../worker').default;\n+  Farm = require('../index').default;\n+});\n+\n+afterEach(() => {\n+  jest.resetModules();\n+});\n+\n+it('exposes the right API', () => {\n+  const farm = new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 4,\n+  });\n+\n+  expect(typeof farm.foo).toBe('function');\n+  expect(typeof farm.bar).toBe('function');\n+});\n+\n+it('breaks if any of the forbidden methods is tried to be exposed', () => {\n+  expect(\n+    () => new Farm('/tmp/baz.js', {exposedMethods: ['getStdout']}),\n+  ).toThrow();\n+\n+  expect(\n+    () => new Farm('/tmp/baz.js', {exposedMethods: ['getStderr']}),\n+  ).toThrow();\n+\n+  expect(() => new Farm('/tmp/baz.js', {exposedMethods: ['end']})).toThrow();\n+});\n+\n+it('works with minimal options', () => {\n+  // eslint-disable-next-line no-new\n+  const farm1 = new Farm('/fake-worker.js');\n+\n+  expect(Worker.mock.calls.length).toBe(require('os').cpus().length - 1);\n+  expect(typeof farm1.methodA).toBe('function');\n+  expect(typeof farm1.methodB).toBe('function');\n+  expect(typeof farm1._shouldNotExist).not.toBe('function');\n+\n+  // eslint-disable-next-line no-new\n+  const farm2 = new Farm('/fake-worker-with-default-method.js');\n+\n+  expect(typeof farm2.default).toBe('function');\n+});\n+\n+it('tries instantiating workers with the right options', () => {\n+  // eslint-disable-next-line no-new\n+  new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    forkOptions: {execArgv: []},\n+    numWorkers: 4,\n+  });\n+\n+  expect(Worker.mock.calls.length).toBe(4);\n+  expect(Worker.mock.calls[0][0]).toEqual({\n+    forkOptions: {execArgv: []},\n+    workerPath: '/tmp/baz.js',\n+  });\n+});\n+\n+it('makes a non-existing relative worker throw', () => {\n+  expect(\n+    () =>\n+      new Farm('./baz.js', {\n+        exposedMethods: [],\n+        numWorkers: 1,\n+      }),\n+  ).toThrow();\n+});\n+\n+it('aggregates all stdouts and stderrs from all workers', () => {\n+  const out = [];\n+  const err = [];\n+\n+  Worker.mockImplementation(() => {\n+    return {\n+      getStderr: () => ({\n+        once() {},\n+        pipe(errStream) {\n+          err.push(errStream);\n+        },\n+      }),\n+      getStdout: () => ({\n+        once() {},\n+        pipe(outStream) {\n+          out.push(outStream);\n+        },\n+      }),\n+    };\n+  });\n+\n+  const farm = new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 2,\n+  });\n+\n+  expect(out.length).toBe(2);\n+  expect(err.length).toBe(2);\n+\n+  const stdout = jest.fn();\n+  const stderr = jest.fn();\n+\n+  farm.getStdout().on('data', stdout);\n+  farm.getStderr().on('data', stderr);\n+\n+  out[0].write(Buffer.from('hello'));\n+  out[1].write(Buffer.from('bye'));\n+  err[1].write(Buffer.from('house'));\n+  err[0].write(Buffer.from('tree'));\n+\n+  expect(stdout.mock.calls[0][0].toString()).toBe('hello');\n+  expect(stdout.mock.calls[1][0].toString()).toBe('bye');\n+  expect(stderr.mock.calls[0][0].toString()).toBe('house');\n+  expect(stderr.mock.calls[1][0].toString()).toBe('tree');\n+});\n+\n+it('does not let make calls after the farm is ended', () => {\n+  const farm = new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 4,\n+  });\n+\n+  farm.end();\n+\n+  expect(() => farm.foo()).toThrow();\n+  expect(() => farm.bar()).toThrow();\n+});\n+\n+it('does not let end the farm after it is ended', () => {\n+  const farm = new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 4,\n+  });\n+\n+  farm.end();\n+\n+  expect(() => farm.end()).toThrow();\n+});\n+\n+it('calls \"computeWorkerKey\" for each of the calls', () => {\n+  const computeWorkerKey = jest.fn();\n+  const farm = new Farm('/tmp/baz.js', {\n+    computeWorkerKey,\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 3,\n+  });\n+\n+  farm.foo('car', 'plane');\n+\n+  expect(computeWorkerKey.mock.calls[0]).toEqual(['foo', 'car', 'plane']);\n+});\n+\n+it('returns the result if the call worked', async () => {\n+  const farm = new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 1,\n+  });\n+\n+  const promise = farm.foo('car', 'plane');\n+\n+  workerReply(0, null, 34);\n+  expect(await promise).toEqual(34);\n+});\n+\n+it('throws if the call failed', async () => {\n+  const farm = new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 1,\n+  });\n+\n+  const promise = farm.foo('car', 'plane');\n+  let error = null;\n+\n+  workerReply(0, new TypeError('Massively broken'));\n+\n+  try {\n+    await promise;\n+  } catch (err) {\n+    error = err;\n+  }\n+\n+  expect(error).not.toBe(null);\n+  expect(error).toBeInstanceOf(TypeError);\n+});\n+\n+it('sends non-sticked tasks to all workers', () => {\n+  const farm = new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 3,\n+  });\n+\n+  farm.foo('car', 'plane');\n+\n+  expect(mockWorkers[0].send.mock.calls.length).toBe(1);\n+  expect(mockWorkers[1].send.mock.calls.length).toBe(1);\n+  expect(mockWorkers[2].send.mock.calls.length).toBe(1);\n+});\n+\n+it('sends first-time sticked tasks to all workers', () => {\n+  const farm = new Farm('/tmp/baz.js', {\n+    computeWorkerKey: () => '1234567890abcdef',\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 3,\n+  });\n+\n+  farm.foo('car', 'plane');\n+\n+  expect(mockWorkers[0].send.mock.calls.length).toBe(1);\n+  expect(mockWorkers[1].send.mock.calls.length).toBe(1);\n+  expect(mockWorkers[2].send.mock.calls.length).toBe(1);\n+});\n+\n+it('checks that once a sticked task finishes, next time is sent to that worker', async () => {\n+  const farm = new Farm('/tmp/baz.js', {\n+    computeWorkerKey: () => '1234567890abcdef',\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 3,\n+  });\n+\n+  // Worker 1 successfully replies with \"17\" as a result.\n+  const promise = farm.foo('car', 'plane');\n+  workerReply(1, null, 17);\n+  await promise;\n+\n+  // Note that the stickiness is not created by the method name or the arguments\n+  // it is solely controlled by the provided \"computeWorkerKey\" method, which in the\n+  // test example always returns the same key, so all calls should be redirected\n+  // to worker 1 (which is the one that resolved the first call).\n+  farm.bar();\n+\n+  // The first time, a call with a \"1234567890abcdef\" hash had never been done\n+  // earlier (\"foo\" call), so it got queued to all workers. Later, since the one\n+  // that resolved the call was the one in position 1, all subsequent calls are\n+  // only redirected to that worker.\n+  expect(mockWorkers[0].send.mock.calls.length).toBe(1); // Only \"foo\".\n+  expect(mockWorkers[1].send.mock.calls.length).toBe(2); // \"foo\" + \"bar\".\n+  expect(mockWorkers[2].send.mock.calls.length).toBe(1); // Only \"foo\".\n+});\n+\n+it('checks that once a non-sticked task finishes, next time is sent to all workers', async () => {\n+  // Note there is no \"computeWorkerKey\".\n+  const farm = new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 3,\n+  });\n+\n+  // Worker 1 successfully replies with \"17\" as a result.\n+  const promise = farm.foo('car', 'plane');\n+  workerReply(1, null, 17);\n+  await promise;\n+\n+  farm.bar();\n+\n+  // Since \"computeWorkerKey\" does not return anything, new jobs are sent again to\n+  // all existing workers.\n+  expect(mockWorkers[0].send.mock.calls.length).toBe(2);\n+  expect(mockWorkers[1].send.mock.calls.length).toBe(2);\n+  expect(mockWorkers[2].send.mock.calls.length).toBe(2);\n+});"},{"sha":"09c5ebb7915bba8b5bc59dffb2d96e6dd0a01610","filename":"packages/jest-worker/src/__tests__/worker.test.js","status":"added","additions":242,"deletions":0,"changes":242,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fworker.test.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fworker.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fworker.test.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+/* eslint-disable no-new */\n+\n+import {EventEmitter} from 'events';\n+\n+import {\n+  CHILD_MESSAGE_CALL,\n+  CHILD_MESSAGE_INITIALIZE,\n+  PARENT_MESSAGE_ERROR,\n+  PARENT_MESSAGE_OK,\n+} from '../types';\n+\n+let Worker;\n+let forkInterface;\n+let childProcess;\n+\n+beforeEach(() => {\n+  forkInterface = Object.assign(new EventEmitter(), {\n+    send: jest.fn(),\n+    stderr: {},\n+    stdout: {},\n+  });\n+\n+  jest.mock('child_process');\n+\n+  childProcess = require('child_process');\n+  childProcess.fork.mockImplementation(() => forkInterface);\n+\n+  Worker = require('../worker').default;\n+});\n+\n+afterEach(() => {\n+  jest.resetModules();\n+});\n+\n+it('passes fork options down to child_process.fork, adding the defaults', () => {\n+  const child = require.resolve('../child');\n+  new Worker({\n+    forkOptions: {\n+      cwd: '/tmp',\n+      execArgv: ['--no-warnings'],\n+    },\n+    workerPath: '/tmp/foo/bar/baz.js',\n+  });\n+\n+  expect(childProcess.fork.mock.calls[0][0]).toBe(child);\n+  expect(childProcess.fork.mock.calls[0][1]).toEqual({\n+    cwd: '/tmp', // Overridden default option.\n+    env: process.env, // Default option.\n+    execArgv: ['--no-warnings'], // Added option.\n+    silent: true, // Default option.\n+  });\n+});\n+\n+it('initializes the child process with the given workerPath', () => {\n+  new Worker({\n+    workerPath: '/tmp/foo/bar/baz.js',\n+  });\n+\n+  expect(forkInterface.send.mock.calls[0][0]).toEqual([\n+    CHILD_MESSAGE_INITIALIZE,\n+    false,\n+    '/tmp/foo/bar/baz.js',\n+  ]);\n+});\n+\n+it('provides stdout and stderr fields from the child process', () => {\n+  const worker = new Worker({\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  expect(worker.getStdout()).toBe(forkInterface.stdout);\n+  expect(worker.getStderr()).toBe(forkInterface.stderr);\n+});\n+\n+it('swtiches the processed flag of a task as soon as it is processed', () => {\n+  const worker = new Worker({\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  const request1 = [CHILD_MESSAGE_CALL, false, 'foo', []];\n+  const request2 = [CHILD_MESSAGE_CALL, false, 'bar', []];\n+\n+  worker.send(request1, () => {});\n+  worker.send(request2, () => {});\n+\n+  // The queue is empty when it got send, so the task is processed.\n+  expect(request1[1]).toBe(true);\n+\n+  // The previous one is being processed, so that one stays as unprocessed.\n+  expect(request2[1]).toBe(false);\n+});\n+\n+it('sends the task to the child process', () => {\n+  const worker = new Worker({\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  const request = [CHILD_MESSAGE_CALL, false, 'foo', []];\n+\n+  worker.send(request, () => {});\n+\n+  // Skipping call \"0\" because it corresponds to the \"initialize\" one.\n+  expect(forkInterface.send.mock.calls[1][0]).toEqual(request);\n+});\n+\n+it('relates replies to requests, in order', () => {\n+  const worker = new Worker({\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  const callback1 = jest.fn();\n+  const request1 = [CHILD_MESSAGE_CALL, false, 'foo', []];\n+\n+  const callback2 = jest.fn();\n+  const request2 = [CHILD_MESSAGE_CALL, false, 'bar', []];\n+\n+  worker.send(request1, callback1);\n+  worker.send(request2, callback2);\n+\n+  // 2nd call waits on the queue...\n+  expect(request2[1]).toBe(false);\n+\n+  // then first call replies...\n+  forkInterface.emit('message', [PARENT_MESSAGE_OK, 44]);\n+\n+  expect(callback1.mock.calls[0][0]).toBeFalsy();\n+  expect(callback1.mock.calls[0][1]).toBe(44);\n+  expect(callback1.mock.instances[0]).toBe(worker);\n+\n+  // which causes the second call to be processed...\n+  expect(request2[1]).toBe(true);\n+\n+  // and then the second call replies...\n+  forkInterface.emit('message', [\n+    PARENT_MESSAGE_ERROR,\n+    'TypeError',\n+    'foo',\n+    'TypeError: foo',\n+    {},\n+  ]);\n+\n+  expect(callback2.mock.calls[0][0].message).toBe('foo');\n+  expect(callback2.mock.instances[0]).toBe(worker);\n+});\n+\n+it('creates error instances for known errors', () => {\n+  const worker = new Worker({\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  const callback1 = jest.fn();\n+  const callback2 = jest.fn();\n+  const callback3 = jest.fn();\n+\n+  // Testing a generic ECMAScript error.\n+  worker.send([CHILD_MESSAGE_CALL, false, 'method', []], callback1);\n+\n+  forkInterface.emit('message', [\n+    PARENT_MESSAGE_ERROR,\n+    'TypeError',\n+    'bar',\n+    'TypeError: bar',\n+    {},\n+  ]);\n+\n+  expect(callback1.mock.calls[0][0]).toBeInstanceOf(TypeError);\n+  expect(callback1.mock.calls[0][0].message).toBe('bar');\n+  expect(callback1.mock.calls[0][0].type).toBe('TypeError');\n+  expect(callback1.mock.calls[0][0].stack).toBe('TypeError: bar');\n+\n+  // Testing a custom error.\n+  worker.send([CHILD_MESSAGE_CALL, false, 'method', []], callback2);\n+\n+  forkInterface.emit('message', [\n+    PARENT_MESSAGE_ERROR,\n+    'RandomCustomError',\n+    'bar',\n+    'RandomCustomError: bar',\n+    {qux: 'extra property'},\n+  ]);\n+\n+  expect(callback2.mock.calls[0][0]).toBeInstanceOf(Error);\n+  expect(callback2.mock.calls[0][0].message).toBe('bar');\n+  expect(callback2.mock.calls[0][0].type).toBe('RandomCustomError');\n+  expect(callback2.mock.calls[0][0].stack).toBe('RandomCustomError: bar');\n+  expect(callback2.mock.calls[0][0].qux).toBe('extra property');\n+\n+  // Testing a non-object throw.\n+  worker.send([CHILD_MESSAGE_CALL, false, 'method', []], callback3);\n+\n+  forkInterface.emit('message', [\n+    PARENT_MESSAGE_ERROR,\n+    'Number',\n+    null,\n+    null,\n+    412,\n+  ]);\n+\n+  expect(callback3.mock.calls[0][0]).toBe(412);\n+});\n+\n+it('throws when the child process returns a strange message', () => {\n+  const worker = new Worker({\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  worker.send([CHILD_MESSAGE_CALL, false, 'method', []], () => {});\n+\n+  // Type 27 does not exist.\n+  expect(() => {\n+    forkInterface.emit('message', [27]);\n+  }).toThrow(TypeError);\n+});\n+\n+it('does not restart the child if it cleanly exited', () => {\n+  new Worker({\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  expect(childProcess.fork.mock.calls.length).toBe(1);\n+  forkInterface.emit('exit', 0);\n+  expect(childProcess.fork.mock.calls.length).toBe(1);\n+});\n+\n+it('restarts the child when the child process dies', () => {\n+  new Worker({\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  expect(childProcess.fork.mock.calls.length).toBe(1);\n+  forkInterface.emit('exit', 1);\n+  expect(childProcess.fork.mock.calls.length).toBe(2);\n+});"},{"sha":"dc372bf9a0882b4b43f2bc63c062587ee929aac2","filename":"packages/jest-worker/src/child.js","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2Fchild.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2Fchild.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fchild.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import {\n+  CHILD_MESSAGE_CALL,\n+  CHILD_MESSAGE_END,\n+  CHILD_MESSAGE_INITIALIZE,\n+  PARENT_MESSAGE_ERROR,\n+  PARENT_MESSAGE_OK,\n+} from './types';\n+\n+let file = null;\n+\n+/**\n+ * This file is a small bootstrapper for workers. It sets up the communication\n+ * between the worker and the parent process, interpreting parent messages and\n+ * sending results back.\n+ *\n+ * The file loaded will be lazily initialized the first time any of the workers\n+ * is called. This is done for optimal performance: if the farm is initialized,\n+ * but no call is made to it, child Node processes will be consuming the least\n+ * possible amount of memory.\n+ *\n+ * If an invalid message is detected, the child will exit (by throwing) with a\n+ * non-zero exit code.\n+ */\n+process.on('message', (request: any /* Should be ChildMessage */) => {\n+  switch (request[0]) {\n+    case CHILD_MESSAGE_INITIALIZE:\n+      file = request[2];\n+      break;\n+\n+    case CHILD_MESSAGE_CALL:\n+      execMethod(request[2], request[3]);\n+      break;\n+\n+    case CHILD_MESSAGE_END:\n+      process.exit(0);\n+      break;\n+\n+    default:\n+      throw new TypeError(\n+        'Unexpected request from parent process: ' + request[0],\n+      );\n+  }\n+});\n+\n+function reportSuccess(result: any) {\n+  if (!process || !process.send) {\n+    throw new Error('Child can only be used on a forked process');\n+  }\n+\n+  process.send([PARENT_MESSAGE_OK, result]);\n+}\n+\n+function reportError(error: Error) {\n+  if (!process || !process.send) {\n+    throw new Error('Child can only be used on a forked process');\n+  }\n+\n+  if (error == null) {\n+    error = new Error('\"null\" or \"undefined\" thrown');\n+  }\n+\n+  process.send([\n+    PARENT_MESSAGE_ERROR,\n+    error.constructor && error.constructor.name,\n+    error.message,\n+    error.stack,\n+    // $FlowFixMe: this is safe to just inherit from Object.\n+    typeof error === 'object' ? Object.assign({}, error) : error,\n+  ]);\n+}\n+\n+function execMethod(method: string, args: $ReadOnlyArray<any>): void {\n+  // $FlowFixMe: This has to be a dynamic require.\n+  const main = require(file);\n+  let result;\n+\n+  try {\n+    if (method === 'default') {\n+      result = (main.__esModule ? main['default'] : main).apply(global, args);\n+    } else {\n+      result = main[method].apply(main, args);\n+    }\n+  } catch (err) {\n+    reportError(err);\n+    return;\n+  }\n+\n+  if (result && typeof result.then === 'function') {\n+    result.then(reportSuccess, reportError);\n+  } else {\n+    reportSuccess(result);\n+  }\n+}"},{"sha":"fce49cf96208260a7a6c66e9caf0b943b93e4039","filename":"packages/jest-worker/src/index.js","status":"added","additions":190,"deletions":0,"changes":190,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Findex.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,190 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import mergeStream from 'merge-stream';\n+import os from 'os';\n+import path from 'path';\n+\n+import type {FarmOptions} from './types';\n+import type {Readable} from 'stream';\n+\n+import {CHILD_MESSAGE_CALL, CHILD_MESSAGE_END} from './types';\n+import Worker from './worker';\n+\n+/* istanbul ignore next */\n+const emptyMethod = () => {};\n+\n+/**\n+ * The Jest farm (publicly called \"Worker\") is a class that allows you to queue\n+ * methods across multiple child processes, in order to parallelize work. This\n+ * is done by providing an absolute path to a module that will be loaded on each\n+ * of the child processes, and bridged to the main process.\n+ *\n+ * Bridged methods are specified by using the \"exposedMethods\" property of the\n+ * options \"object\". This is an array of strings, where each of them corresponds\n+ * to the exported name in the loaded module.\n+ *\n+ * You can also control the amount of workers by using the \"numWorkers\" property\n+ * of the \"options\" object, and the settings passed to fork the process through\n+ * the \"forkOptions\" property. The amount of workers defaults to the amount of\n+ * CPUS minus one.\n+ *\n+ * Queueing calls can be done in two ways:\n+ *   - Standard method: calls will be redirected to the first available worker,\n+ *     so they will get executed as soon as they can.\n+ *\n+ *   - Sticky method: if a \"computeWorkerKey\" method is provided within the\n+ *   config, the resulting string of this method will be used as a key.\n+ *   Everytime this key is returned, it is guaranteed that your job will be\n+ *   processed by the same worker. This is specially useful if your workers are\n+ *   caching results.\n+ */\n+export default class {\n+  _stdout: Readable;\n+  _stderr: Readable;\n+  _ending: boolean;\n+  _cacheKeys: {[string]: Worker};\n+  _options: FarmOptions;\n+  _workers: Array<Worker>;\n+\n+  constructor(workerPath: string, options?: FarmOptions = {}) {\n+    const numWorkers = options.numWorkers || os.cpus().length - 1;\n+    const workers = new Array(numWorkers);\n+    const stdout = mergeStream();\n+    const stderr = mergeStream();\n+\n+    if (!path.isAbsolute(workerPath)) {\n+      workerPath = require.resolve(workerPath);\n+    }\n+\n+    // Build the options once for all workers to avoid allocating extra objects.\n+    const workerOptions = {\n+      forkOptions: options.forkOptions || {},\n+      workerPath,\n+    };\n+\n+    for (let i = 0; i < numWorkers; i++) {\n+      const worker = new Worker(workerOptions);\n+\n+      stdout.add(worker.getStdout());\n+      stderr.add(worker.getStderr());\n+\n+      workers[i] = worker;\n+    }\n+\n+    let exposedMethods = options.exposedMethods;\n+\n+    // If no methods list is given, try getting it by auto-requiring the module.\n+    if (!exposedMethods) {\n+      // $FlowFixMe: This has to be a dynamic require.\n+      const child = require(workerPath);\n+\n+      exposedMethods = Object.keys(child).filter(\n+        name => typeof child[name] === 'function',\n+      );\n+\n+      if (typeof child === 'function') {\n+        exposedMethods.push('default');\n+      }\n+    }\n+\n+    exposedMethods.forEach(name => {\n+      if (name.startsWith('_')) {\n+        return;\n+      }\n+\n+      if (this.constructor.prototype.hasOwnProperty(name)) {\n+        throw new TypeError('Cannot define a method called ' + name);\n+      }\n+\n+      // $FlowFixMe: dynamic extension of the class instance is expected.\n+      this[name] = this._makeCall.bind(this, name);\n+    });\n+\n+    this._stdout = stdout;\n+    this._stderr = stderr;\n+    this._ending = false;\n+    this._cacheKeys = Object.create(null);\n+    this._options = options;\n+    this._workers = workers;\n+  }\n+\n+  getStdout(): Readable {\n+    return this._stdout;\n+  }\n+\n+  getStderr(): Readable {\n+    return this._stderr;\n+  }\n+\n+  end() {\n+    if (this._ending) {\n+      throw new Error('Farm is ended, no more calls can be done to it');\n+    }\n+\n+    const workers = this._workers;\n+\n+    // We do not cache the request object here. If so, it would only be only\n+    // processed by one of the workers, and we want them all to close.\n+    for (let i = 0; i < workers.length; i++) {\n+      workers[i].send([CHILD_MESSAGE_END, false], emptyMethod);\n+    }\n+\n+    this._ending = true;\n+  }\n+\n+  // eslint-disable-next-line no-unclear-flowtypes\n+  _makeCall(method: string, ...args: Array<any>): Promise<any> {\n+    if (this._ending) {\n+      throw new Error('Farm is ended, no more calls can be done to it');\n+    }\n+\n+    return new Promise((resolve, reject) => {\n+      const {computeWorkerKey} = this._options;\n+      const workers = this._workers;\n+      const cacheKeys = this._cacheKeys;\n+      const request = [CHILD_MESSAGE_CALL, false, method, args];\n+\n+      let worker = null;\n+      let hash = null;\n+\n+      if (computeWorkerKey) {\n+        hash = computeWorkerKey.apply(this, [method].concat(args));\n+        worker = hash == null ? null : cacheKeys[hash];\n+      }\n+\n+      // Do not use a fat arrow since we need the \"this\" value, which points to\n+      // the worker that executed the call.\n+      function callback(error, result) {\n+        if (hash != null) {\n+          cacheKeys[hash] = this;\n+        }\n+\n+        if (error) {\n+          reject(error);\n+        } else {\n+          resolve(result);\n+        }\n+      }\n+\n+      // If a worker is pre-selected, use it...\n+      if (worker) {\n+        worker.send(request, callback);\n+        return;\n+      }\n+\n+      // ... otherwise use all workers, so the first one available will pick it.\n+      for (let i = 0; i < workers.length; i++) {\n+        workers[i].send(request, callback);\n+      }\n+    });\n+  }\n+}"},{"sha":"81305118d500b0e7692fb09beb67c3e659c632a5","filename":"packages/jest-worker/src/types.js","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2Ftypes.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2Ftypes.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Ftypes.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+// Because of the dynamic nature of a worker communication process, all messages\n+// coming from any of the other processes cannot be typed. Thus, many types\n+// include \"any\" as a flow type, which is (unfortunately) correct here.\n+\n+/* eslint-disable no-unclear-flowtypes */\n+\n+export const CHILD_MESSAGE_INITIALIZE: 0 = 0;\n+export const CHILD_MESSAGE_CALL: 1 = 1;\n+export const CHILD_MESSAGE_END: 2 = 2;\n+\n+export const PARENT_MESSAGE_OK: 0 = 0;\n+export const PARENT_MESSAGE_ERROR: 1 = 1;\n+\n+// Option objects.\n+\n+export type ForkOptions = {\n+  cwd?: string,\n+  env?: Object,\n+  execPath?: string,\n+  execArgv?: Array<string>,\n+  silent?: boolean,\n+  stdio?: Array<any>,\n+  uid?: number,\n+  gid?: number,\n+};\n+\n+export type FarmOptions = {\n+  computeWorkerKey?: (string, ...Array<any>) => ?string,\n+  exposedMethods?: $ReadOnlyArray<string>,\n+  forkOptions?: ForkOptions,\n+  numWorkers?: number,\n+};\n+\n+export type WorkerOptions = {|\n+  forkOptions?: ForkOptions,\n+  workerPath: string,\n+|};\n+\n+// Messages passed from the parent to the children.\n+\n+export type ChildMessageInitialize = [\n+  typeof CHILD_MESSAGE_INITIALIZE, // type\n+  boolean, // processed\n+  string, // file\n+];\n+\n+export type ChildMessageCall = [\n+  typeof CHILD_MESSAGE_CALL, // type\n+  boolean, // processed\n+  string, // method\n+  $ReadOnlyArray<any>, // args\n+];\n+\n+export type ChildMessageEnd = [\n+  typeof CHILD_MESSAGE_END, // type\n+  boolean, // processed\n+];\n+\n+export type ChildMessage =\n+  | ChildMessageInitialize\n+  | ChildMessageCall\n+  | ChildMessageEnd;\n+\n+// Messages passed from the children to the parent.\n+\n+export type ParentMessageOk = [\n+  typeof PARENT_MESSAGE_OK, // type\n+  any, // result\n+];\n+\n+export type ParentMessageError = [\n+  typeof PARENT_MESSAGE_ERROR, // type\n+  string, // constructor\n+  string, // message\n+  string, // stack\n+  any, // extra\n+];\n+\n+export type ParentMessage = ParentMessageOk | ParentMessageError;\n+\n+// Queue types.\n+\n+export type QueueCallback = (?Error, ?any) => void;\n+\n+export type QueueChildMessage = {|\n+  request: ChildMessage,\n+  callback: QueueCallback,\n+|};"},{"sha":"5a12fd573b6190b41bee447da23f818deb0df456","filename":"packages/jest-worker/src/worker.js","status":"added","additions":171,"deletions":0,"changes":171,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2Fworker.js","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/packages%2Fjest-worker%2Fsrc%2Fworker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworker.js?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -0,0 +1,171 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import childProcess from 'child_process';\n+\n+import {\n+  CHILD_MESSAGE_INITIALIZE,\n+  PARENT_MESSAGE_ERROR,\n+  PARENT_MESSAGE_OK,\n+} from './types';\n+\n+import type {ChildProcess} from 'child_process';\n+import type {Readable} from 'stream';\n+\n+import type {\n+  ChildMessage,\n+  QueueCallback,\n+  QueueChildMessage,\n+  WorkerOptions,\n+} from './types';\n+\n+/**\n+ * This class wraps the child process and provides a nice interface to\n+ * communicate with. It takes care of:\n+ *\n+ *  - Re-spawning the process if it dies.\n+ *  - Queues calls while the worker is busy.\n+ *  - Re-sends the requests if the worker blew up.\n+ *\n+ * The reason for queueing them here (since childProcess.send also has an\n+ * internal queue) is because the worker could be doing asynchronous work, and\n+ * this would lead to the child process to read its receiving buffer and start a\n+ * second call. By queueing calls here, we don't send the next call to the\n+ * children until we receive the result of the previous one.\n+ *\n+ * As soon as a request starts to be processed by a worker, its \"processed\"\n+ * field is changed to \"true\", so that other workers which might encounter the\n+ * same call skip it.\n+ */\n+export default class {\n+  _busy: boolean;\n+  _child: ChildProcess;\n+  _options: WorkerOptions;\n+  _queue: Array<QueueChildMessage>;\n+\n+  constructor(options: WorkerOptions) {\n+    this._options = options;\n+    this._queue = [];\n+\n+    this._initialize();\n+  }\n+\n+  getStdout(): Readable {\n+    return this._child.stdout;\n+  }\n+\n+  getStderr(): Readable {\n+    return this._child.stderr;\n+  }\n+\n+  send(request: ChildMessage, callback: QueueCallback) {\n+    this._queue.push({callback, request});\n+    this._process();\n+  }\n+\n+  _initialize() {\n+    const child = childProcess.fork(\n+      require.resolve('./child'),\n+      // $FlowFixMe: Flow does not work well with Object.assign.\n+      Object.assign(\n+        {\n+          cwd: process.cwd(),\n+          env: process.env,\n+          silent: true,\n+        },\n+        this._options.forkOptions,\n+      ),\n+    );\n+\n+    child.on('message', this._receive.bind(this));\n+    child.on('exit', this._exit.bind(this));\n+\n+    // $FlowFixMe: wrong \"ChildProcess.send\" signature.\n+    child.send([CHILD_MESSAGE_INITIALIZE, false, this._options.workerPath]);\n+\n+    this._child = child;\n+    this._busy = false;\n+  }\n+\n+  _process() {\n+    if (this._busy) {\n+      return;\n+    }\n+\n+    const queue = this._queue;\n+    let skip = 0;\n+\n+    // Calls in the queue might have already been processed by another worker,\n+    // so we have to skip them.\n+    while (queue.length > skip && queue[skip].request[1]) {\n+      skip++;\n+    }\n+\n+    // Remove all pieces at once.\n+    queue.splice(0, skip);\n+\n+    if (queue.length) {\n+      const call = queue[0];\n+\n+      // Flag the call as processed, so that other workers know that they don't\n+      // have to process it as well.\n+      call.request[1] = true;\n+\n+      this._busy = true;\n+      // $FlowFixMe: wrong \"ChildProcess.send\" signature.\n+      this._child.send(call.request);\n+    }\n+  }\n+\n+  _receive(response: any /* Should be ParentMessage */) {\n+    const callback = this._queue[0].callback;\n+\n+    this._busy = false;\n+    this._process();\n+\n+    switch (response[0]) {\n+      case PARENT_MESSAGE_OK:\n+        callback.call(this, null, response[1]);\n+        break;\n+\n+      case PARENT_MESSAGE_ERROR:\n+        let error = response[4];\n+\n+        if (error != null && typeof error === 'object') {\n+          const extra = error;\n+          const NativeCtor = global[response[1]];\n+          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n+\n+          error = new Ctor(response[2]);\n+          // $FlowFixMe: adding custom properties to errors.\n+          error.type = response[1];\n+          error.stack = response[3];\n+\n+          for (const key in extra) {\n+            // $FlowFixMe: adding custom properties to errors.\n+            error[key] = extra[key];\n+          }\n+        }\n+\n+        callback.call(this, error, null);\n+        break;\n+\n+      default:\n+        throw new TypeError('Unexpected response from worker: ' + response[0]);\n+    }\n+  }\n+\n+  _exit(exitCode: number) {\n+    if (exitCode !== 0) {\n+      this._initialize();\n+    }\n+  }\n+}"},{"sha":"c6d9fc24ab6048928f084f5a0354f0f2408622d6","filename":"yarn.lock","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/facebook/jest/blob/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/yarn.lock","raw_url":"https://github.com/facebook/jest/raw/007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c/yarn.lock","contents_url":"https://api.github.com/repos/facebook/jest/contents/yarn.lock?ref=007b3d2b981559ec513dfa0e25c0b1d9a29a9e3c","patch":"@@ -4125,6 +4125,12 @@ meow@^3.3.0, meow@^3.7.0:\n     redent \"^1.0.0\"\n     trim-newlines \"^1.0.0\"\n \n+merge-stream@^1.0.1:\n+  version \"1.0.1\"\n+  resolved \"https://registry.yarnpkg.com/merge-stream/-/merge-stream-1.0.1.tgz#4041202d508a342ba00174008df0c251b8c135e1\"\n+  dependencies:\n+    readable-stream \"^2.0.1\"\n+\n merge@^1.1.3:\n   version \"1.2.0\"\n   resolved \"https://registry.yarnpkg.com/merge/-/merge-1.2.0.tgz#7531e39d4949c281a66b8c5a6e0265e8b05894da\"\n@@ -4954,7 +4960,7 @@ readable-stream@^1.0.26-4, readable-stream@~1.0.2, readable-stream@~1.0.26, read\n     isarray \"0.0.1\"\n     string_decoder \"~0.10.x\"\n \n-readable-stream@^2.0.2, readable-stream@^2.0.6, readable-stream@^2.1.4, readable-stream@^2.1.5, readable-stream@^2.2.2, readable-stream@^2.2.6:\n+readable-stream@^2.0.1, readable-stream@^2.0.2, readable-stream@^2.0.6, readable-stream@^2.1.4, readable-stream@^2.1.5, readable-stream@^2.2.2, readable-stream@^2.2.6:\n   version \"2.3.3\"\n   resolved \"https://registry.yarnpkg.com/readable-stream/-/readable-stream-2.3.3.tgz#368f2512d79f9d46fdfc71349ae7878bbc1eb95c\"\n   dependencies:"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/3979","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/3979/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/3979/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/3979/events","html_url":"https://github.com/facebook/jest/pull/3979","id":241128698,"node_id":"MDExOlB1bGxSZXF1ZXN0MTI5MzExMDAx","number":3979,"title":"changed files eager loading","user":{"login":"aaronabramov","id":940133,"node_id":"MDQ6VXNlcjk0MDEzMw==","avatar_url":"https://avatars.githubusercontent.com/u/940133?v=4","gravatar_id":"","url":"https://api.github.com/users/aaronabramov","html_url":"https://github.com/aaronabramov","followers_url":"https://api.github.com/users/aaronabramov/followers","following_url":"https://api.github.com/users/aaronabramov/following{/other_user}","gists_url":"https://api.github.com/users/aaronabramov/gists{/gist_id}","starred_url":"https://api.github.com/users/aaronabramov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aaronabramov/subscriptions","organizations_url":"https://api.github.com/users/aaronabramov/orgs","repos_url":"https://api.github.com/users/aaronabramov/repos","events_url":"https://api.github.com/users/aaronabramov/events{/privacy}","received_events_url":"https://api.github.com/users/aaronabramov/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-07-07T01:05:16Z","updated_at":"2021-05-13T11:06:49Z","closed_at":"2017-07-07T21:14:37Z","author_association":"MEMBER","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/3979","html_url":"https://github.com/facebook/jest/pull/3979","diff_url":"https://github.com/facebook/jest/pull/3979.diff","patch_url":"https://github.com/facebook/jest/pull/3979.patch","merged_at":"2017-07-07T21:14:37Z"},"body":"should solve the performance regression in www.\r\nI'm not a fan of passing this promise all the way down, but there isn't really a nice way of doing this yet\r\n\r\ncc @rogeliog can you look at the watch stuff? i wanna make sure i didn't break anything accidentally","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/3979/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/3979/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"f725bf5881cdd6868875c60c8b654f7d6422fab7","filename":"packages/jest-changed-files/src/git.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-changed-files%2Fsrc%2Fgit.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-changed-files%2Fsrc%2Fgit.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fsrc%2Fgit.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -9,7 +9,7 @@\n  */\n \n import type {Path} from 'types/Config';\n-import type {Options, SCMAdapter} from '../types';\n+import type {Options, SCMAdapter} from 'types/ChangedFiles';\n \n import path from 'path';\n import childProcess from 'child_process';"},{"sha":"767e03eb3053a18d8c38932b823763c87102a11f","filename":"packages/jest-changed-files/src/hg.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-changed-files%2Fsrc%2Fhg.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-changed-files%2Fsrc%2Fhg.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fsrc%2Fhg.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -9,7 +9,7 @@\n  */\n \n import type {Path} from 'types/Config';\n-import type {Options, SCMAdapter} from '../types';\n+import type {Options, SCMAdapter} from 'types/ChangedFiles';\n \n import path from 'path';\n import childProcess from 'child_process';"},{"sha":"97388763653894bd46faea54a5581eadd9e076c5","filename":"packages/jest-changed-files/src/index.js","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-changed-files%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-changed-files%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fsrc%2Findex.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -9,7 +9,7 @@\n  */\n \n import type {Path} from 'types/Config';\n-import type {Options, Repos} from '../types';\n+import type {ChangedFilesPromise, Options, Repos} from 'types/ChangedFiles';\n \n import git from './git';\n import hg from './hg';\n@@ -25,8 +25,9 @@ const findHgRoot = dir => mutex(() => hg.getRoot(dir));\n const getChangedFilesForRoots = async (\n   roots: Array<Path>,\n   options: Options,\n-): Promise<{changedFiles: Set<Path>, repos: Repos}> => {\n+): ChangedFilesPromise => {\n   const repos = await findRepos(roots);\n+\n   const gitPromises = Array.from(repos.git).map(repo =>\n     git.findChangedFiles(repo, options),\n   );"},{"sha":"a34fe7b8ab45751cc7fdd8287f10d60a605aa43a","filename":"packages/jest-cli/src/__tests__/watch.test.js","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2F__tests__%2Fwatch.test.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2F__tests__%2Fwatch.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2F__tests__%2Fwatch.test.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -65,6 +65,7 @@ describe('Watch mode flows', () => {\n       pipe,\n       new TestWatcher({isWatchMode: true}),\n       expect.any(Function),\n+      undefined,\n       expect.any(Function),\n     );\n   });\n@@ -82,6 +83,7 @@ describe('Watch mode flows', () => {\n       pipe,\n       new TestWatcher({isWatchMode: true}),\n       expect.any(Function),\n+      undefined,\n       expect.any(Function),\n     );\n   });\n@@ -95,6 +97,7 @@ describe('Watch mode flows', () => {\n       pipe,\n       new TestWatcher({isWatchMode: true}),\n       expect.any(Function),\n+      undefined,\n       expect.any(Function),\n     );\n     expect(pipe.write.mock.calls.reverse()[0]).toMatchSnapshot();"},{"sha":"c27b9fa7a1490b914e032cc871a12cc62506c9aa","filename":"packages/jest-cli/src/cli/index.js","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Fcli%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Fcli%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fcli%2Findex.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -23,6 +23,7 @@ import {version as VERSION} from '../../package.json';\n import args from './args';\n import chalk from 'chalk';\n import createContext from '../lib/create_context';\n+import getChangedFilesPromise from '../get_changed_files_promise';\n import getJest from './get_jest';\n import getMaxWorkers from '../lib/get_max_workers';\n import handleDeprecationWarnings from '../lib/handle_deprecation_warnings';\n@@ -251,6 +252,9 @@ const _run = async (\n   argv,\n   onComplete,\n ) => {\n+  // Queries to hg/git can take a while, so we need to start the process\n+  // as soon as possible, so by the time we need the result it's already there.\n+  const changedFilesPromise = getChangedFilesPromise(argv, configs);\n   const {contexts, hasteMapInstances} = await _buildContextsAndHasteMaps(\n     configs,\n     globalConfig,\n@@ -267,8 +271,16 @@ const _run = async (\n         globalConfig,\n         outputStream,\n         hasteMapInstances,\n+        changedFilesPromise,\n       )\n-    : _runWithoutWatch(globalConfig, contexts, argv, outputStream, onComplete);\n+    : _runWithoutWatch(\n+        globalConfig,\n+        contexts,\n+        argv,\n+        outputStream,\n+        onComplete,\n+        changedFilesPromise,\n+      );\n };\n \n const _runWatch = async (\n@@ -279,6 +291,7 @@ const _runWatch = async (\n   globalConfig,\n   outputStream,\n   hasteMapInstances,\n+  changedFilesPromise,\n ) => {\n   if (hasDeprecationWarnings) {\n     try {\n@@ -304,6 +317,7 @@ const _runWithoutWatch = async (\n   argv,\n   outputStream,\n   onComplete,\n+  changedFilesPromise,\n ) => {\n   const startRun = () => {\n     if (!argv.listTests) {\n@@ -316,6 +330,7 @@ const _runWithoutWatch = async (\n       outputStream,\n       new TestWatcher({isWatchMode: false}),\n       startRun,\n+      changedFilesPromise,\n       onComplete,\n     );\n   };"},{"sha":"8f9c0857933e61a460f026827cafebf0c7b37a96","filename":"packages/jest-cli/src/get_changed_files_promise.js","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Fget_changed_files_promise.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Fget_changed_files_promise.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fget_changed_files_promise.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) 2014, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+\n+import type {Argv} from 'types/Argv';\n+import type {ProjectConfig} from 'types/Config';\n+import type {ChangedFilesPromise} from 'types/ChangedFiles';\n+import {getChangedFilesForRoots} from 'jest-changed-files';\n+\n+module.exports = (\n+  argv: Argv,\n+  configs: Array<ProjectConfig>,\n+): ?ChangedFilesPromise => {\n+  if (argv.onlyChanged) {\n+    const allRootsForAllProjects = configs.reduce(\n+      (roots, config) => roots.concat(config.roots || []),\n+      [],\n+    );\n+    return getChangedFilesForRoots(allRootsForAllProjects, {\n+      lastCommit: argv.lastCommit,\n+    });\n+  }\n+\n+  return undefined;\n+};"},{"sha":"c4071bddfe639b4029da118a3ad21b71e887a6f6","filename":"packages/jest-cli/src/lib/get_test_path_pattern.js","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Flib%2Fget_test_path_pattern.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Flib%2Fget_test_path_pattern.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Flib%2Fget_test_path_pattern.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -36,7 +36,6 @@ module.exports = (argv: Argv): TestSelectionConfig => {\n   if (argv.onlyChanged) {\n     return {\n       input: '',\n-      lastCommit: argv.lastCommit,\n       onlyChanged: true,\n       watch: argv.watch,\n     };"},{"sha":"89ca21105cf2aa65cf89c98e9e0fff9fbebce8c5","filename":"packages/jest-cli/src/run_jest.js","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Frun_jest.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Frun_jest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Frun_jest.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -10,6 +10,7 @@\n \n import type {Argv} from 'types/Argv';\n import type {Context} from 'types/Context';\n+import type {ChangedFilesPromise} from 'types/ChangedFiles';\n import type {GlobalConfig} from 'types/Config';\n import type {TestSelectionConfig} from './search_source';\n import type {AggregatedResult} from 'types/TestResult';\n@@ -102,19 +103,23 @@ const getNoTestsFoundMessage = (testRunData, pattern) => {\n const getTestPaths = async (\n   globalConfig,\n   context,\n-  pattern,\n+  testSelectionConfig,\n   argv,\n   outputStream,\n+  changedFilesPromise,\n ) => {\n   const source = new SearchSource(context);\n-  let data = await source.getTestPaths(pattern);\n+  let data = await source.getTestPaths(\n+    testSelectionConfig,\n+    changedFilesPromise,\n+  );\n   if (!data.tests.length) {\n-    if (pattern.onlyChanged && data.noSCM) {\n+    if (testSelectionConfig.onlyChanged && data.noSCM) {\n       if (globalConfig.watch) {\n         // Run all the tests\n         updateArgv(argv, 'watchAll', {noSCM: true});\n-        pattern = getTestPathPattern(argv);\n-        data = await source.getTestPaths(pattern);\n+        testSelectionConfig = getTestPathPattern(argv);\n+        data = await source.getTestPaths(testSelectionConfig);\n       } else {\n         new Console(outputStream, outputStream).log(\n           'Jest can only find uncommitted changed files in a git or hg ' +\n@@ -160,6 +165,7 @@ const runJest = async (\n   outputStream: stream$Writable | tty$WriteStream,\n   testWatcher: TestWatcher,\n   startRun: () => *,\n+  changedFilesPromise: ?ChangedFilesPromise,\n   onComplete: (testResults: AggregatedResult) => any,\n   // We use this internaly at FB. Since we run multiple processes and most\n   // of them don't match any tests, we don't want to print 'no tests found'\n@@ -184,6 +190,7 @@ const runJest = async (\n         testSelectionConfig,\n         argv,\n         outputStream,\n+        changedFilesPromise,\n       );\n       allTests = allTests.concat(matches.tests);\n       return {context, matches};"},{"sha":"e396baf4fea7f7ba94cbfb6448b1b06cb0a0106a","filename":"packages/jest-cli/src/search_source.js","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Fsearch_source.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Fsearch_source.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fsearch_source.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -12,11 +12,11 @@ import type {Context} from 'types/Context';\n import type {Glob, Path} from 'types/Config';\n import type {ResolveModuleConfig} from 'types/Resolve';\n import type {Test} from 'types/TestRunner';\n+import type {ChangedFilesPromise} from 'types/ChangedFiles';\n \n import path from 'path';\n import micromatch from 'micromatch';\n import DependencyResolver from 'jest-resolve-dependencies';\n-import {getChangedFilesForRoots} from 'jest-changed-files';\n import {escapePathForRegex, replacePathSepForRegex} from 'jest-regex-util';\n \n type SearchResult = {|\n@@ -28,15 +28,9 @@ type SearchResult = {|\n \n type StrOrRegExpPattern = RegExp | string;\n \n-type Options = {|\n-  lastCommit?: boolean,\n-  withAncestor?: boolean,\n-|};\n-\n export type TestSelectionConfig = {|\n   input?: string,\n   findRelatedTests?: boolean,\n-  lastCommit?: boolean,\n   onlyChanged?: boolean,\n   paths?: Array<Path>,\n   shouldTreatInputAsPattern?: boolean,\n@@ -183,27 +177,28 @@ class SearchSource {\n     return {tests: []};\n   }\n \n-  async findChangedTests(options: Options): Promise<SearchResult> {\n-    const {repos, changedFiles} = await getChangedFilesForRoots(\n-      this._context.config.roots,\n-      options,\n-    );\n+  async findTestRelatedToChangedFiles(\n+    changedFilesPromise: ChangedFilesPromise,\n+  ) {\n+    const {repos, changedFiles} = await changedFilesPromise;\n \n     // no SCM (git/hg/...) is found in any of the roots.\n     const noSCM = Object.keys(repos).every(scm => repos[scm].size === 0);\n-\n     return noSCM\n       ? {noSCM: true, tests: []}\n       : this.findRelatedTests(changedFiles);\n   }\n \n-  getTestPaths(\n+  async getTestPaths(\n     testSelectionConfig: TestSelectionConfig,\n+    changedFilesPromise: ?ChangedFilesPromise,\n   ): Promise<SearchResult> {\n     if (testSelectionConfig.onlyChanged) {\n-      return this.findChangedTests({\n-        lastCommit: testSelectionConfig.lastCommit,\n-      });\n+      if (!changedFilesPromise) {\n+        throw new Error('This promise must be present when running with -o.');\n+      }\n+\n+      return this.findTestRelatedToChangedFiles(changedFilesPromise);\n     } else if (\n       testSelectionConfig.findRelatedTests &&\n       testSelectionConfig.paths"},{"sha":"c73c8cfb6e49d61480d80af541cbd39b8f6131b5","filename":"packages/jest-cli/src/watch.js","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Fwatch.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/packages%2Fjest-cli%2Fsrc%2Fwatch.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fwatch.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -14,6 +14,7 @@ import type {Context} from 'types/Context';\n \n import ansiEscapes from 'ansi-escapes';\n import chalk from 'chalk';\n+import getChangedFilesPromise from './get_changed_files_promise';\n import {replacePathSepForRegex} from 'jest-regex-util';\n import HasteMap from 'jest-haste-map';\n import isCI from 'is-ci';\n@@ -115,6 +116,8 @@ const watch = (\n         testPathPattern: argv.testPathPattern,\n       }),\n     );\n+    const configs = contexts.map(context => context.config);\n+    const changedFilesPromise = getChangedFilesPromise(argv, configs);\n     return runJest(\n       // $FlowFixMe\n       globalConfig,\n@@ -123,6 +126,7 @@ const watch = (\n       pipe,\n       testWatcher,\n       startRun,\n+      changedFilesPromise,\n       results => {\n         isRunning = false;\n         hasSnapshotFailure = !!results.snapshot.failure;"},{"sha":"c00e94609bfdea79c620fc100ce82a30a7176a06","filename":"types/ChangedFiles.js","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/facebook/jest/blob/8b47815e484b65d1e5e1effb987681cfd098b58e/types%2FChangedFiles.js","raw_url":"https://github.com/facebook/jest/raw/8b47815e484b65d1e5e1effb987681cfd098b58e/types%2FChangedFiles.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/types%2FChangedFiles.js?ref=8b47815e484b65d1e5e1effb987681cfd098b58e","patch":"@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+\n+import type {Path} from 'types/Config';\n+\n+export type Options = {|\n+  lastCommit?: boolean,\n+  withAncestor?: boolean,\n+|};\n+\n+export type ChangedFiles = Set<Path>;\n+export type Repos = {|git: Set<Path>, hg: Set<Path>|};\n+export type ChangedFilesPromise = Promise<{|\n+  repos: Repos,\n+  changedFiles: ChangedFiles,\n+|}>;\n+\n+export type SCMAdapter = {|\n+  findChangedFiles: (cwd: Path, options: Options) => Promise<Array<Path>>,\n+  getRoot: (cwd: Path) => Promise<?Path>,\n+|};"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/599","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/599/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/599/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/599/events","html_url":"https://github.com/facebook/jest/pull/599","id":115637085,"node_id":"MDExOlB1bGxSZXF1ZXN0NTAwMjkxNjc=","number":599,"title":"Haste2","user":{"login":"cpojer","id":13352,"node_id":"MDQ6VXNlcjEzMzUy","avatar_url":"https://avatars.githubusercontent.com/u/13352?v=4","gravatar_id":"","url":"https://api.github.com/users/cpojer","html_url":"https://github.com/cpojer","followers_url":"https://api.github.com/users/cpojer/followers","following_url":"https://api.github.com/users/cpojer/following{/other_user}","gists_url":"https://api.github.com/users/cpojer/gists{/gist_id}","starred_url":"https://api.github.com/users/cpojer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpojer/subscriptions","organizations_url":"https://api.github.com/users/cpojer/orgs","repos_url":"https://api.github.com/users/cpojer/repos","events_url":"https://api.github.com/users/cpojer/events{/privacy}","received_events_url":"https://api.github.com/users/cpojer/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":48,"created_at":"2015-11-07T05:43:43Z","updated_at":"2021-05-14T16:09:05Z","closed_at":"2016-02-16T23:39:56Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/599","html_url":"https://github.com/facebook/jest/pull/599","diff_url":"https://github.com/facebook/jest/pull/599.diff","patch_url":"https://github.com/facebook/jest/pull/599.patch","merged_at":"2016-02-16T23:39:56Z"},"body":"This pull request is used to track the implementation of node-haste2.\n##### Summary\n- Implemented node-haste2, a re-implementation of Facebook's haste dependency system, based on Facebook's react-native packager. We now create the entire haste-map upfront and pass it to the worker threads instead of creating node-haste instances in each worker.\n- Changed the core architecture of Jest to abstract the HasteModuleLoader into a ModuleLoader and HasteResolver piece. Added a Test class so we aren't creating instances of a TestRunner in every worker. The new code should bring a lot of clarity but there is also a lot more to be done.\n- Performance improvements\n  - fixed startup time of Jest, both on cold and warm start. node_modules are now lazily analyzed.\n  - fixed require-resolution time for relative requires. Loading modules without haste is now much faster and uses more caching.\n- New implementation of `--onlyChanged` that should work much better and find the correct set of related tests to run.\n- Numerous bugfixes and cleanups all around Jest.\n##### Performance Improvements\n- The Relay test suite (GitHub) now takes 20s vs. 60-100s previously (on 13” MBP)\n- The react-native test suite now takes 8 seconds instead of ~70s (on 13” MBP)\n- Starting up Jest on react-native (fb internal) now takes 1 second vs. ~10-15 seconds from before.\n- FB's frontend codebase test run was already heavily optimized but there is ~10 % win down to ~97s from about 107s.\n\nThis diff/PR forms the basis for all the work on Jest that I'm planning to do in the near term and will set up Jest for further success. It should be much easier to iterate on Jest from now on given that we have replaced the biggest legacy system and I can finally focus on solving some of the community problems.\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/599/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/599/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"c37c03748dc58905c63ca5e48ccc3f4763ed51bc","filename":"CHANGELOG.md","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -1,5 +1,10 @@\n ## master\n \n+## 0.9.0\n+\n+* New implementation of node-haste and rewrite of internal module loading and\n+  resolution.\n+\n ## 0.8.2\n \n * Performance improvements."},{"sha":"89e6598f5467abab2ac10f6150b6fbcdb1efb9c6","filename":"bin/jest.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/bin%2Fjest.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/bin%2Fjest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/bin%2Fjest.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -9,7 +9,7 @@\n \n 'use strict';\n \n-const fs = require('fs');\n+const fs = require('graceful-fs');\n const optimist = require('optimist');\n const path = require('path');\n "},{"sha":"e08898ed20da02af9ab03388e9071410e9263889","filename":"docs/API.md","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/docs%2FAPI.md","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/docs%2FAPI.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FAPI.md?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -41,6 +41,7 @@ permalink: docs/api.html\n   - [`config.collectCoverage` [boolean]](#config-collectcoverage-boolean)\n   - [`config.collectCoverageOnlyFrom` [object]](#config-collectcoverageonlyfrom-object)\n   - [`config.globals` [object]](#config-globals-object)\n+  - [`config.mocksPattern` [string]](#config-mockspattern-string)\n   - [`config.moduleFileExtensions` [array<string>]](#config-modulefileextensions-array-string)\n   - [`config.modulePathIgnorePatterns` [array<string>]](#config-modulepathignorepatterns-array-string)\n   - [`config.moduleNameMapper` [object<string, string>]](#config-modulenamemapper-object-string-string)\n@@ -317,6 +318,11 @@ For example, the following would create a global `__DEV__` variable set to `true\n \n Note that, if you specify a global reference value (like an object or array) here, and some code mutates that value in the midst of running a test, that mutation will *not* be persisted across test runs for other test files.\n \n+### `config.mocksPattern` [string]\n+(default: `(?:[\\\\/]|^)__mocks__[\\\\/]`)\n+\n+A pattern that is matched against file paths to determine which folder contains manual mocks.\n+\n ### `config.moduleFileExtensions` [array<string>]\n (default: `['js', 'json', 'node']`)\n "},{"sha":"7d836cc29fc1a501fa6b6ff2b1974b61b2aa3b22","filename":"package.json","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/package.json","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/package.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/package.json?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -1,19 +1,20 @@\n {\n   \"name\": \"jest-cli\",\n   \"description\": \"Painless JavaScript Unit Testing.\",\n-  \"version\": \"0.8.2\",\n+  \"version\": \"0.9.0\",\n   \"main\": \"src/jest.js\",\n   \"dependencies\": {\n     \"chalk\": \"^1.1.1\",\n     \"cover\": \"^0.2.9\",\n     \"diff\": \"^2.1.1\",\n-    \"graceful-fs\": \"^4.1.2\",\n+    \"fast-path\": \"^1.1.0\",\n+    \"graceful-fs\": \"^4.1.3\",\n     \"istanbul\": \"^0.4.2\",\n     \"jsdom\": \"^7.2.0\",\n     \"json-stable-stringify\": \"^1.0.0\",\n+    \"lodash.template\": \"^3.6.2\",\n     \"mkdirp\": \"^0.5.1\",\n-    \"node-haste\": \"^1.2.8\",\n-    \"object-assign\": \"^4.0.1\",\n+    \"node-haste\": \"2.0.0-alpha18\",\n     \"optimist\": \"^0.6.1\",\n     \"resolve\": \"^1.1.6\",\n     \"sane\": \"^1.2.0\",\n@@ -38,12 +39,12 @@\n   \"scripts\": {\n     \"lint\": \"eslint .\",\n     \"prepublish\": \"npm test\",\n-    \"test\": \"npm run lint && npm run jasmine1 && npm run jasmine2\",\n-    \"jasmine1\": \"node bin/jest.js --testRunner='<rootDir>/testRunners/jasmine/jasmine1.js'\",\n-    \"jasmine2\": \"node bin/jest.js --testRunner='<rootDir>/testRunners/jasmine/jasmine2.js'\"\n+    \"test\": \"npm run lint && node bin/jest.js && npm run jasmine1\",\n+    \"jasmine1\": \"node bin/jest.js --testRunner='<rootDir>/testRunners/jasmine/jasmine1.js'\"\n   },\n   \"jest\": {\n     \"rootDir\": \"src\",\n+    \"testRunner\": \"<rootDir>/testRunners/jasmine/jasmine2.js\",\n     \"testPathIgnorePatterns\": [\n       \"/__tests__/[^/]*/.+\"\n     ],"},{"sha":"12c1387edbfbed3e864ccafc3ab214ba98a8a24b","filename":"src/HasteModuleLoader/HasteModuleLoader.js","status":"modified","additions":298,"deletions":546,"changes":844,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2FHasteModuleLoader.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2FHasteModuleLoader.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2FHasteModuleLoader.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -6,15 +6,11 @@\n  * of patent rights can be found in the PATENTS file in the same directory.\n  */\n \n-/* eslint-disable fb-www/require-args */\n+/* eslint-disable fb-www/require-args, fb-www/object-create-only-one-param */\n 'use strict';\n \n const fs = require('graceful-fs');\n-const hasteLoaders = require('node-haste/lib/loaders');\n-const mkdirp = require('mkdirp');\n const moduleMocker = require('../lib/moduleMocker');\n-const NodeHaste = require('node-haste/lib/Haste');\n-const os = require('os');\n const path = require('path');\n const resolve = require('resolve');\n const transform = require('../lib/transform');\n@@ -29,6 +25,9 @@ const mockParentModule = {\n   exports: {},\n };\n \n+const normalizedIDCache = Object.create(null);\n+const moduleNameCache = Object.create(null);\n+\n const isFile = file => {\n   let stat;\n   try {\n@@ -41,61 +40,25 @@ const isFile = file => {\n   return stat.isFile() || stat.isFIFO();\n };\n \n-const hasOwnProperty = Object.prototype.hasOwnProperty;\n-\n let _configUnmockListRegExpCache = null;\n \n-function _buildLoadersList(config) {\n-  return [\n-    new hasteLoaders.ProjectConfigurationLoader(),\n-    new hasteLoaders.JSTestLoader(config.setupJSTestLoaderOptions),\n-    new hasteLoaders.JSMockLoader(config.setupJSMockLoaderOptions),\n-    new hasteLoaders.JSLoader(config.setupJSLoaderOptions),\n-    new hasteLoaders.ResourceLoader(),\n-  ];\n-}\n-\n-function _constructHasteInst(config, options) {\n-  const HASTE_IGNORE_REGEX = new RegExp(\n-    [config.cacheDirectory].concat(config.modulePathIgnorePatterns).join('|')\n-  );\n-\n-  // Support npm package scopes that add an extra directory to the path\n-  const scopedCacheDirectory = path.dirname(_getCacheFilePath(config));\n-  if (!fs.existsSync(scopedCacheDirectory)) {\n-    mkdirp.sync(scopedCacheDirectory, {mode: '777', fs});\n-  }\n-\n-  return new NodeHaste(_buildLoadersList(config), (config.testPathDirs || []), {\n-    ignorePaths: path => path.match(HASTE_IGNORE_REGEX),\n-    version: JSON.stringify(config),\n-    useNativeFind: true,\n-    maxProcesses: options.maxWorkers || os.cpus().length,\n-    maxOpenFiles: options.maxOpenFiles || 100,\n-  });\n-}\n-\n-function _getCacheFilePath(config) {\n-  return path.join(config.cacheDirectory, 'cache-' + config.name);\n-}\n-\n class Loader {\n-  constructor(config, environment, resourceMap) {\n+  constructor(config, environment, moduleMap) {\n     this._config = config;\n-    this._coverageCollectors = {};\n+    this._coverageCollectors = Object.create(null);\n     this._currentlyExecutingModulePath = '';\n     this._environment = environment;\n-    this._explicitShouldMock = {};\n-    this._explicitlySetMocks = {};\n+    this._explicitShouldMock = Object.create(null);\n+    this._explicitlySetMocks = Object.create(null);\n     this._isCurrentlyExecutingManualMock = null;\n-    this._mockMetaDataCache = {};\n-    this._nodeModuleProjectConfigNameToResource = null;\n-    this._resourceMap = resourceMap;\n-    this._reverseDependencyMap = null;\n+    this._mockMetaDataCache = Object.create(null);\n     this._shouldAutoMock = true;\n-    this._configShouldMockModuleNames = {};\n+    this._configShouldMockModuleNames = Object.create(null);\n     this._extensions = config.moduleFileExtensions.map(ext => '.' + ext);\n \n+    this._modules = moduleMap.modules;\n+    this._mocks = moduleMap.mocks;\n+\n     if (config.collectCoverage) {\n       this._CoverageCollector = require(config.coverageCollector);\n     }\n@@ -130,41 +93,186 @@ class Loader {\n     this.resetModuleRegistry();\n   }\n \n-  static loadResourceMap(config, options) {\n-    return new Promise((resolve, reject) => {\n-      try {\n-        _constructHasteInst(config, options || {}).update(\n-          _getCacheFilePath(config),\n-          resolve\n+  requireModule(currPath, moduleName) {\n+    const moduleID = this._getNormalizedModuleID(currPath, moduleName);\n+    let modulePath;\n+\n+    // I don't like this behavior as it makes the module system's mocking\n+    // rules harder to understand. Would much prefer that mock state were\n+    // either \"on\" or \"off\" -- rather than \"automock on\", \"automock off\",\n+    // \"automock off -- but there's a manual mock, so you get that if you ask\n+    // for the module and one doesnt exist\", or \"automock off -- but theres a\n+    // useAutoMock: false entry in the package.json -- and theres a manual\n+    // mock -- and the module is listed in the unMockList in the test config\n+    // -- soooo...uhh...fuck I lost track\".\n+    //\n+    // To simplify things I'd like to move to a system where tests must\n+    // explicitly call .mock() on a module to receive the mocked version if\n+    // automocking is off. If a manual mock exists, that is used. Otherwise\n+    // we fall back to the automocking system to generate one for you.\n+    //\n+    // The only reason we're supporting this in jest for now is because we\n+    // have some tests that depend on this behavior. I'd like to clean this\n+    // up at some point in the future.\n+    let manualMockResource = null;\n+    let moduleResource = null;\n+    moduleResource = this._getModule(moduleName);\n+    manualMockResource = this._getMockModule(moduleName);\n+    if (\n+      !moduleResource &&\n+      manualMockResource &&\n+      manualMockResource !== this._isCurrentlyExecutingManualMock &&\n+      this._explicitShouldMock[moduleID] !== false\n+    ) {\n+      modulePath = manualMockResource;\n+    }\n+\n+    if (resolve.isCore(moduleName)) {\n+      return require(moduleName);\n+    }\n+\n+    if (!modulePath) {\n+      modulePath = this._resolveModuleName(currPath, moduleName);\n+    }\n+\n+    // Always natively require the jasmine runner.\n+    if (modulePath.indexOf(VENDOR_PATH) === 0) {\n+      return require(modulePath);\n+    }\n+\n+    if (!modulePath) {\n+      throw new Error(`Cannot find module '${moduleName}' from '${currPath}'`);\n+    }\n+\n+    let moduleObj;\n+    moduleObj = this._moduleRegistry[modulePath];\n+    if (!moduleObj) {\n+      // We must register the pre-allocated module object first so that any\n+      // circular dependencies that may arise while evaluating the module can\n+      // be satisfied.\n+      moduleObj = {\n+        __filename: modulePath,\n+        exports: {},\n+      };\n+\n+      this._moduleRegistry[modulePath] = moduleObj;\n+      if (path.extname(modulePath) === '.json') {\n+        moduleObj.exports = this._environment.global.JSON.parse(\n+          fs.readFileSync(modulePath, 'utf8')\n         );\n-      } catch (e) {\n-        reject(e);\n+      } else if (path.extname(modulePath) === '.node') {\n+        moduleObj.exports = require(modulePath);\n+      } else {\n+        this._execModule(moduleObj);\n       }\n-    });\n+    }\n+\n+    return moduleObj.exports;\n   }\n \n-  static loadResourceMapFromCacheFile(config, options) {\n-    return new Promise((resolve, reject) => {\n-      try {\n-        const hasteInst = _constructHasteInst(config, options || {});\n-        hasteInst.loadMap(_getCacheFilePath(config), (err, map) => {\n-          if (err) {\n-            reject(err);\n-          } else {\n-            resolve(map);\n-          }\n-        });\n-      } catch (e) {\n-        reject(e);\n+  requireMock(currPath, moduleName) {\n+    const moduleID = this._getNormalizedModuleID(currPath, moduleName);\n+\n+    if (moduleID in this._explicitlySetMocks) {\n+      return this._explicitlySetMocks[moduleID];\n+    }\n+\n+    let manualMockResource = this._getMockModule(moduleName);\n+    let modulePath;\n+    if (manualMockResource) {\n+      modulePath = manualMockResource;\n+    } else {\n+      modulePath = this._resolveModuleName(currPath, moduleName);\n+\n+      // If the actual module file has a __mocks__ dir sitting immediately next\n+      // to it, look to see if there is a manual mock for this file in that dir.\n+      //\n+      // The reason why node-haste isn't good enough for this is because\n+      // node-haste only handles manual mocks for @providesModules well.\n+      // Otherwise it's not good enough to disambiguate something like the\n+      // following scenario:\n+      //\n+      // subDir1/MyModule.js\n+      // subDir1/__mocks__/MyModule.js\n+      // subDir2/MyModule.js\n+      // subDir2/__mocks__/MyModule.js\n+      //\n+      // Where some other module does a relative require into each of the\n+      // respective subDir{1,2} directories and expects a manual mock\n+      // corresponding to that particular MyModule.js file.\n+      const moduleDir = path.dirname(modulePath);\n+      const moduleFileName = path.basename(modulePath);\n+      const potentialManualMock =\n+        path.join(moduleDir, '__mocks__', moduleFileName);\n+      if (fs.existsSync(potentialManualMock)) {\n+        manualMockResource = true;\n+        modulePath = potentialManualMock;\n       }\n-    });\n+    }\n+\n+    if (modulePath in this._mockRegistry) {\n+      return this._mockRegistry[modulePath];\n+    }\n+\n+    if (manualMockResource) {\n+      const moduleObj = {\n+        exports: {},\n+        __filename: modulePath,\n+      };\n+      this._execModule(moduleObj);\n+      this._mockRegistry[modulePath] = moduleObj.exports;\n+    } else {\n+      // Look for a real module to generate an automock from\n+      this._mockRegistry[modulePath] = this._generateMock(\n+        currPath,\n+        moduleName\n+      );\n+    }\n+\n+    return this._mockRegistry[modulePath];\n+  }\n+\n+  requireModuleOrMock(currPath, moduleName) {\n+    if (this._shouldMock(currPath, moduleName)) {\n+      return this.requireMock(currPath, moduleName);\n+    } else {\n+      return this.requireModule(currPath, moduleName);\n+    }\n+  }\n+\n+  resetModuleRegistry() {\n+    this._mockRegistry = Object.create(null);\n+    this._moduleRegistry = Object.create(null);\n+\n+    if (this._environment && this._environment.global) {\n+      var envGlobal = this._environment.global;\n+      Object.keys(envGlobal).forEach(key => {\n+        const globalMock = envGlobal[key];\n+        if (\n+          (typeof globalMock === 'object' && globalMock !== null) ||\n+          typeof globalMock === 'function'\n+        ) {\n+          globalMock._isMockFunction && globalMock.mockClear();\n+        }\n+      });\n+\n+      if (envGlobal.mockClearTimers) {\n+        envGlobal.mockClearTimers();\n+      }\n+    }\n+  }\n+\n+  getAllCoverageInfo() {\n+    const coverage = Object.create(null);\n+    if (this._config.collectCoverage) {\n+      const collectors = this._coverageCollectors;\n+      for (const filePath in collectors) {\n+        coverage[filePath] = collectors[filePath].extractRuntimeCoverageInfo();\n+      }\n+    }\n+    return coverage;\n   }\n \n-  /**\n-   * Given the path to a module: Read it from disk (synchronously) and\n-   * evaluate it's constructor function to generate the module and exports\n-   * objects.\n-   */\n   _execModule(moduleObj) {\n     // If the environment was disposed, prevent this module from\n     // being executed.\n@@ -173,22 +281,22 @@ class Loader {\n     }\n \n     const filename = moduleObj.__filename;\n+    const collectors = this._coverageCollectors;\n     let moduleContent = transform(filename, this._config);\n     let collectorStore;\n-    const onlyCollectFrom = this._config.collectCoverageOnlyFrom;\n-    const shouldCollectCoverage =\n-      (this._config.collectCoverage === true && !onlyCollectFrom) ||\n-      (onlyCollectFrom && onlyCollectFrom[filename] === true);\n-\n-    if (shouldCollectCoverage) {\n-      if (!hasOwnProperty.call(this._coverageCollectors, filename)) {\n-        this._coverageCollectors[filename] =\n-          new this._CoverageCollector(moduleContent, filename);\n+    if (\n+      this._config.collectCoverage &&\n+      !filename.includes('/node_modules/')\n+    ) {\n+      if (!collectors[filename]) {\n+        collectors[filename] = new this._CoverageCollector(\n+          moduleContent,\n+          filename\n+        );\n       }\n-      const collector = this._coverageCollectors[filename];\n+      const collector = collectors[filename];\n       collectorStore = collector.getCoverageDataStore();\n-      moduleContent =\n-        collector.getInstrumentedSource('____JEST_COVERAGE_DATA____');\n+      moduleContent = collector.getInstrumentedSource('$JEST_COVERAGE_DATA');\n     }\n \n     const lastExecutingModulePath = this._currentlyExecutingModulePath;\n@@ -199,31 +307,31 @@ class Loader {\n     // Every module receives a mock parent so they don't assume they are run\n     // standalone.\n     moduleObj.parent = mockParentModule;\n-    moduleObj.require = this.constructBoundRequire(filename);\n+    moduleObj.require = this._createRequireImplementation(filename);\n \n     const evalResultVariable = 'Object.<anonymous>';\n-    const wrapper = '({ \"' + evalResultVariable + '\": function(module, exports, require, __dirname, __filename, global, jest, ____JEST_COVERAGE_DATA____) {' + moduleContent + '\\n}});';\n+    const wrapper = '({ \"' + evalResultVariable + '\": function(module, exports, require, __dirname, __filename, global, jest, $JEST_COVERAGE_DATA) {' + moduleContent + '\\n}});';\n     const wrapperFunc = this._environment.runSourceText(wrapper, filename)[evalResultVariable];\n     wrapperFunc.call(\n       moduleObj.exports, // module context\n-      moduleObj,\n-      moduleObj.exports,\n-      moduleObj.require,\n-      path.dirname(filename),\n-      filename,\n-      this._environment.global,\n-      this._createRuntimeFor(filename),\n-      collectorStore\n+      moduleObj, // module object\n+      moduleObj.exports, // module exports\n+      moduleObj.require, // require implementation\n+      path.dirname(filename), // __dirname\n+      filename, // __filename\n+      this._environment.global, // global object\n+      this._createRuntimeFor(filename), // jest object\n+      collectorStore // the coverage object\n     );\n \n     this._isCurrentlyExecutingManualMock = origCurrExecutingManualMock;\n     this._currentlyExecutingModulePath = lastExecutingModulePath;\n   }\n \n   _generateMock(currPath, moduleName) {\n-    const modulePath = this._moduleNameToPath(currPath, moduleName);\n+    const modulePath = this._resolveModuleName(currPath, moduleName);\n \n-    if (!hasOwnProperty.call(this._mockMetaDataCache, modulePath)) {\n+    if (!(modulePath in this._mockMetaDataCache)) {\n       // This allows us to handle circular dependencies while generating an\n       // automock\n       this._mockMetaDataCache[modulePath] = moduleMocker.getMetadata({});\n@@ -238,8 +346,8 @@ class Loader {\n       // mocked has calls into side-effectful APIs on another module.\n       const origMockRegistry = this._mockRegistry;\n       const origModuleRegistry = this._moduleRegistry;\n-      this._mockRegistry = {};\n-      this._moduleRegistry = {};\n+      this._mockRegistry = Object.create(null);\n+      this._moduleRegistry = Object.create(null);\n \n       const moduleExports = this.requireModule(currPath, moduleName);\n \n@@ -259,58 +367,73 @@ class Loader {\n     );\n   }\n \n-  _getDependencyPathsFromResource(resource) {\n-    const dependencyPaths = [];\n-    for (let i = 0; i < resource.requiredModules.length; i++) {\n-      let requiredModule = resource.requiredModules[i];\n-\n-      // *facepalm* node-haste is pretty clowny\n-      if (resource.getModuleIDByOrigin) {\n-        requiredModule =\n-          resource.getModuleIDByOrigin(requiredModule) || requiredModule;\n-      }\n-\n-      let moduleID;\n-      try {\n-        moduleID = this._getNormalizedModuleID(resource.path, requiredModule);\n-      } catch (e) {\n-        continue;\n+  _resolveModuleName(currPath, moduleName) {\n+    // Check if the resolver knows about this module\n+    if (this._modules[moduleName]) {\n+      return this._modules[moduleName];\n+    } else {\n+      // Otherwise it is likely a node_module.\n+      const key = currPath + ' : ' + moduleName;\n+      if (moduleNameCache[key]) {\n+        return moduleNameCache[key];\n       }\n-\n-      dependencyPaths.push(this._getRealPathFromNormalizedModuleID(moduleID));\n+      moduleNameCache[key] = this._resolveNodeModule(currPath, moduleName);\n+      return moduleNameCache[key];\n     }\n-    return dependencyPaths;\n   }\n \n-  _getResource(resourceType, resourceName) {\n-    let resource = this._resourceMap.getResource(resourceType, resourceName);\n+  _resolveNodeModule(currPath, moduleName) {\n+    const basedir = path.dirname(currPath);\n+    try {\n+      return resolve.sync(moduleName, {\n+        basedir,\n+        extensions: this._extensions,\n+        isFile,\n+        paths: NODE_PATH,\n+        readFileSync: fs.readFileSync,\n+      });\n+    } catch (e) {\n+      const parts = moduleName.split('/');\n+      const nodeModuleName = parts.shift();\n+      const module = this._getModule(nodeModuleName);\n+      if (module) {\n+        try {\n+          return require.resolve(\n+            path.join.apply(path, [path.dirname(module)].concat(parts))\n+          );\n+        } catch (ignoredError) {}\n+      }\n \n-    if (\n-      resource === undefined &&\n-      resourceType === 'JS' &&\n-      /\\//.test(resourceName) &&\n-      !/\\.js$/.test(resourceName)\n-    ) {\n-      resource = this._resourceMap.getResource(\n-        resourceType,\n-        resourceName + '.js'\n+      // resolve.sync uses the basedir instead of currPath and therefore\n+      // doesn't throw an accurate error message.\n+      const relativePath = path.relative(basedir, currPath);\n+      throw new Error(\n+        `Cannot find module '${moduleName}' from '${relativePath || '.'}'`\n       );\n     }\n+  }\n \n-    if (\n-      resource === undefined &&\n-      resourceType === 'JSMock'\n-    ) {\n+  _getModule(resourceName) {\n+    return this._modules[resourceName];\n+  }\n+\n+  _getMockModule(resourceName) {\n+    if (this._mocks[resourceName]) {\n+      return this._mocks[resourceName];\n+    } else {\n       const moduleName = this._resolveStubModuleName(resourceName);\n       if (moduleName) {\n-        resource = this._resourceMap.getResource('JS', moduleName);\n+        return this._getModule(moduleName);\n       }\n     }\n-\n-    return resource;\n   }\n \n   _getNormalizedModuleID(currPath, moduleName) {\n+    const key = currPath + ' : ' + moduleName;\n+    if (normalizedIDCache[key]) {\n+      return normalizedIDCache[key];\n+    }\n+\n     let moduleType;\n     let mockAbsPath = null;\n     let realAbsPath = null;\n@@ -323,147 +446,63 @@ class Loader {\n       if (\n         IS_PATH_BASED_MODULE_NAME.test(moduleName) ||\n         (\n-          this._getResource('JS', moduleName) === undefined &&\n-          this._getResource('JSMock', moduleName) === undefined\n+          this._getModule(moduleName) === undefined &&\n+          this._getMockModule(moduleName) === undefined\n         )\n       ) {\n-        const absolutePath = this._moduleNameToPath(currPath, moduleName);\n-        if (absolutePath === undefined) {\n+        realAbsPath = this._resolveModuleName(currPath, moduleName);\n+        if (realAbsPath == null) {\n           throw new Error(\n             `Cannot find module '${moduleName}' from '${currPath || '.'}'`\n           );\n         }\n \n-        // See if node-haste is already aware of this resource. If so, we need\n-        // to look up if it has an associated manual mock.\n-        const resource = this._resourceMap.getResourceByPath(absolutePath);\n-        if (resource) {\n-          if (resource.type === 'JS') {\n-            realAbsPath = absolutePath;\n-          } else if (resource.type === 'JSMock') {\n-            mockAbsPath = absolutePath;\n-          }\n-          moduleName = resource.id;\n+        // Look up if this module has an associated manual mock.\n+        const mockModule = this._getMockModule(moduleName);\n+        if (mockModule) {\n+          mockAbsPath = mockModule;\n         }\n       }\n \n       if (realAbsPath === null) {\n-        const moduleResource = this._getResource('JS', moduleName);\n+        const moduleResource = this._getModule(moduleName);\n         if (moduleResource) {\n-          realAbsPath = moduleResource.path;\n+          realAbsPath = moduleResource;\n         }\n       }\n \n       if (mockAbsPath === null) {\n-        const mockResource = this._getResource('JSMock', moduleName);\n+        const mockResource = this._getMockModule(moduleName);\n         if (mockResource) {\n-          mockAbsPath = mockResource.path;\n+          mockAbsPath = mockResource;\n         }\n       }\n     }\n \n     const delimiter = path.delimiter;\n-    return moduleType + delimiter + realAbsPath + delimiter + mockAbsPath;\n-  }\n-\n-  _getRealPathFromNormalizedModuleID(moduleID) {\n-    return moduleID.split(path.delimiter)[1];\n-  }\n-\n-\n-  _moduleNameToPath(currPath, moduleName) {\n-    const resource = this._getResource('JS', moduleName);\n-    if (!resource) {\n-      return this._nodeModuleNameToPath(currPath, moduleName);\n-    }\n-    return resource.path;\n+    const id = moduleType + delimiter + realAbsPath + delimiter + mockAbsPath;\n+    normalizedIDCache[key] = id;\n+    return id;\n   }\n \n-  _nodeModuleNameToPath(currPath, moduleName) {\n-    // Handle module names like require('jest/lib/util')\n-    let subModulePath = null;\n-    let moduleProjectPart = moduleName;\n-    const basedir = path.dirname(currPath);\n-    if (/\\//.test(moduleName)) {\n-      const projectPathParts = moduleName.split('/');\n-      moduleProjectPart = projectPathParts.shift();\n-      subModulePath = projectPathParts.join('/');\n-    }\n-\n-    let resolveError = null;\n-    try {\n-      return resolve.sync(moduleName, {\n-        basedir,\n-        extensions: this._extensions,\n-        isFile,\n-        paths: NODE_PATH,\n-        readFileSync: fs.readFileSync,\n-      });\n-    } catch (e) {\n-      // resolve.sync uses the basedir instead of currPath and therefore\n-      // doesn't throw an accurate error message.\n-      resolveError = new Error(\n-        `Cannot find module '${moduleName}' from '${currPath || '.'}'`\n-      );\n-    }\n-\n-    // Memoize the project name -> package.json resource lookup map\n-    if (this._nodeModuleProjectConfigNameToResource === null) {\n-      this._nodeModuleProjectConfigNameToResource = {};\n-      const resources =\n-        this._resourceMap.getAllResourcesByType('ProjectConfiguration');\n-      resources.forEach(\n-        res => this._nodeModuleProjectConfigNameToResource[res.data.name] = res\n-      );\n-    }\n-\n-    // Get the resource for the package.json file\n-    const resource =\n-      this._nodeModuleProjectConfigNameToResource[moduleProjectPart];\n-    if (!resource) {\n-      throw resolveError;\n-    }\n-\n-    // Make sure the resource path is above the currPath in the fs path\n-    // tree. If so, just use node's resolve\n-    const resourceDirname = path.dirname(resource.path);\n-    if (resourceDirname.indexOf(basedir) > 0) {\n-      throw resolveError;\n-    }\n-\n-    if (subModulePath === null) {\n-      subModulePath = hasOwnProperty.call(resource.data, 'main')\n-        ? resource.data.main\n-        : 'index.js';\n-    }\n-\n-    return this._moduleNameToPath(resource.path, './' + subModulePath);\n-  }\n-\n-  /**\n-   * Indicates whether a given module is mocked per the current state of the\n-   * module loader. When a module is \"mocked\", that means calling\n-   * `requireModuleOrMock()` for the module will return the mock version\n-   * rather than the real version.\n-   */\n   _shouldMock(currPath, moduleName) {\n     const moduleID = this._getNormalizedModuleID(currPath, moduleName);\n-    if (hasOwnProperty.call(this._explicitShouldMock, moduleID)) {\n+    if (moduleID in this._explicitShouldMock) {\n       return this._explicitShouldMock[moduleID];\n     } else if (resolve.isCore(moduleName)) {\n       return false;\n     } else if (this._shouldAutoMock) {\n       // See if the module is specified in the config as a module that should\n       // never be mocked\n-      if (hasOwnProperty.call(this._configShouldMockModuleNames, moduleName)) {\n+      if (moduleName in this._configShouldMockModuleNames) {\n         return this._configShouldMockModuleNames[moduleName];\n       } else if (this._unmockListRegExps.length > 0) {\n         this._configShouldMockModuleNames[moduleName] = true;\n \n-        const manualMockResource = this._getResource('JSMock', moduleName);\n+        const manualMockResource = this._getMockModule(moduleName);\n         let modulePath;\n         try {\n-          modulePath = this._moduleNameToPath(currPath, moduleName);\n+          modulePath = this._resolveModuleName(currPath, moduleName);\n         } catch (e) {\n           // If there isn't a real module, we don't have a path to match\n           // against the unmockList regexps. If there is also not a manual\n@@ -508,267 +547,6 @@ class Loader {\n     }\n   }\n \n-  constructBoundRequire(modulePath) {\n-    const moduleRequire = this.requireModuleOrMock.bind(this, modulePath);\n-\n-    moduleRequire.resolve = moduleName => {\n-      const ret = this._moduleNameToPath(modulePath, moduleName);\n-      if (!ret) {\n-        throw new Error(`Module(${moduleName}) not found!`);\n-      }\n-      return ret;\n-    };\n-    moduleRequire.requireMock = this.requireMock.bind(this, modulePath);\n-    moduleRequire.requireActual = this.requireModule.bind(this, modulePath);\n-\n-    // Compatibility with modules using enumerable keys of \"require\"\n-    moduleRequire.cache = Object.create(null);\n-    moduleRequire.extensions = Object.create(null);\n-\n-    return moduleRequire;\n-  }\n-\n-  /**\n-   * Returns a map from modulePath -> coverageInfo, where coverageInfo is of the\n-   * structure returned By CoverageCollector.extractRuntimeCoverageInfo()\n-   */\n-  getAllCoverageInfo() {\n-    if (!this._config.collectCoverage) {\n-      throw new Error(\n-        'config.collectCoverage was not set, so no coverage info has been ' +\n-        '(or will be) collected!'\n-      );\n-    }\n-\n-    const coverageInfo = {};\n-    for (const filePath in this._coverageCollectors) {\n-      coverageInfo[filePath] =\n-        this._coverageCollectors[filePath].extractRuntimeCoverageInfo();\n-    }\n-    return coverageInfo;\n-  }\n-\n-  getCoverageForFilePath(filePath) {\n-    if (!this._config.collectCoverage) {\n-      throw new Error(\n-        'config.collectCoverage was not set, so no coverage info has been ' +\n-        '(or will be) collected!'\n-      );\n-    }\n-\n-    return (\n-      hasOwnProperty.call(this._coverageCollectors, filePath)\n-      ? this._coverageCollectors[filePath].extractRuntimeCoverageInfo()\n-      : null\n-    );\n-  }\n-\n-  /**\n-   * Given the path to some file, find the path to all other files that it\n-   * *directly* depends on.\n-   */\n-  getDependenciesFromPath(modulePath) {\n-    const resource = this._resourceMap.getResourceByPath(modulePath);\n-    if (!resource) {\n-      throw new Error(`Unknown modulePath: ${modulePath}`);\n-    }\n-\n-    if (\n-      resource.type === 'ProjectConfiguration' ||\n-      resource.type === 'Resource'\n-    ) {\n-      throw new Error(\n-        `Could not extract dependency information from this type of file!`\n-      );\n-    }\n-\n-    return this._getDependencyPathsFromResource(resource);\n-  }\n-\n-  /**\n-   * Given the path to some module, find all other files that *directly* depend\n-   * on it.\n-   */\n-  getDependentsFromPath(modulePath) {\n-    if (this._reverseDependencyMap === null) {\n-      const resourceMap = this._resourceMap;\n-      const reverseDepMap = this._reverseDependencyMap = {};\n-      const allResources = resourceMap.getAllResources();\n-      Object.keys(allResources).forEach(resourceID => {\n-        const resource = allResources[resourceID];\n-        if (\n-          resource.type === 'ProjectConfiguration' ||\n-          resource.type === 'Resource'\n-        ) {\n-          return;\n-        }\n-\n-        const dependencyPaths = this._getDependencyPathsFromResource(resource);\n-        for (let i = 0; i < dependencyPaths.length; i++) {\n-          const requiredModulePath = dependencyPaths[i];\n-          if (!hasOwnProperty.call(reverseDepMap, requiredModulePath)) {\n-            reverseDepMap[requiredModulePath] = {};\n-          }\n-          reverseDepMap[requiredModulePath][resource.path] = true;\n-        }\n-      });\n-    }\n-\n-    const reverseDeps = this._reverseDependencyMap[modulePath];\n-    return reverseDeps ? Object.keys(reverseDeps) : [];\n-  }\n-\n-  /**\n-   * Given a module name, return the mock version of said module.\n-   */\n-  requireMock(currPath, moduleName) {\n-    const moduleID = this._getNormalizedModuleID(currPath, moduleName);\n-\n-    if (hasOwnProperty.call(this._explicitlySetMocks, moduleID)) {\n-      return this._explicitlySetMocks[moduleID];\n-    }\n-\n-    // Look in the node-haste resource map\n-    let manualMockResource = this._getResource('JSMock', moduleName);\n-    let modulePath;\n-    if (manualMockResource) {\n-      modulePath = manualMockResource.path;\n-    } else {\n-      modulePath = this._moduleNameToPath(currPath, moduleName);\n-\n-      // If the actual module file has a __mocks__ dir sitting immediately next\n-      // to it, look to see if there is a manual mock for this file in that dir.\n-      //\n-      // The reason why node-haste isn't good enough for this is because\n-      // node-haste only handles manual mocks for @providesModules well.\n-      // Otherwise it's not good enough to disambiguate something like the\n-      // following scenario:\n-      //\n-      // subDir1/MyModule.js\n-      // subDir1/__mocks__/MyModule.js\n-      // subDir2/MyModule.js\n-      // subDir2/__mocks__/MyModule.js\n-      //\n-      // Where some other module does a relative require into each of the\n-      // respective subDir{1,2} directories and expects a manual mock\n-      // corresponding to that particular MyModule.js file.\n-      const moduleDir = path.dirname(modulePath);\n-      const moduleFileName = path.basename(modulePath);\n-      const potentialManualMock =\n-        path.join(moduleDir, '__mocks__', moduleFileName);\n-      if (fs.existsSync(potentialManualMock)) {\n-        manualMockResource = true;\n-        modulePath = potentialManualMock;\n-      }\n-    }\n-\n-    if (hasOwnProperty.call(this._mockRegistry, modulePath)) {\n-      return this._mockRegistry[modulePath];\n-    }\n-\n-    if (manualMockResource) {\n-      const moduleObj = {\n-        exports: {},\n-        __filename: modulePath,\n-      };\n-      this._execModule(moduleObj);\n-      this._mockRegistry[modulePath] = moduleObj.exports;\n-    } else {\n-      // Look for a real module to generate an automock from\n-      this._mockRegistry[modulePath] = this._generateMock(\n-        currPath,\n-        moduleName\n-      );\n-    }\n-\n-    return this._mockRegistry[modulePath];\n-  }\n-\n-  /**\n-   * Given a module name, return the *real* (un-mocked) version of said\n-   * module.\n-   */\n-  requireModule(currPath, moduleName) {\n-    const moduleID = this._getNormalizedModuleID(currPath, moduleName);\n-    let modulePath;\n-\n-    // I don't like this behavior as it makes the module system's mocking\n-    // rules harder to understand. Would much prefer that mock state were\n-    // either \"on\" or \"off\" -- rather than \"automock on\", \"automock off\",\n-    // \"automock off -- but there's a manual mock, so you get that if you ask\n-    // for the module and one doesnt exist\", or \"automock off -- but theres a\n-    // useAutoMock: false entry in the package.json -- and theres a manual\n-    // mock -- and the module is listed in the unMockList in the test config\n-    // -- soooo...uhh...fuck I lost track\".\n-    //\n-    // To simplify things I'd like to move to a system where tests must\n-    // explicitly call .mock() on a module to receive the mocked version if\n-    // automocking is off. If a manual mock exists, that is used. Otherwise\n-    // we fall back to the automocking system to generate one for you.\n-    //\n-    // The only reason we're supporting this in jest for now is because we\n-    // have some tests that depend on this behavior. I'd like to clean this\n-    // up at some point in the future.\n-    let manualMockResource = null;\n-    let moduleResource = null;\n-    moduleResource = this._getResource('JS', moduleName);\n-    manualMockResource = this._getResource('JSMock', moduleName);\n-    if (\n-      !moduleResource &&\n-      manualMockResource &&\n-      manualMockResource.path !== this._isCurrentlyExecutingManualMock &&\n-      this._explicitShouldMock[moduleID] !== false\n-    ) {\n-      modulePath = manualMockResource.path;\n-    }\n-\n-    if (resolve.isCore(moduleName)) {\n-      return require(moduleName);\n-    }\n-\n-    if (!modulePath) {\n-      modulePath = this._moduleNameToPath(currPath, moduleName);\n-    }\n-\n-    // Always natively require the jasmine runner.\n-    if (modulePath.indexOf(VENDOR_PATH) === 0) {\n-      return require(modulePath);\n-    }\n-\n-    if (!modulePath) {\n-      throw new Error(`Cannot find module '${moduleName}' from '${currPath}'`);\n-    }\n-\n-    let moduleObj;\n-    moduleObj = this._moduleRegistry[modulePath];\n-    if (!moduleObj) {\n-      // We must register the pre-allocated module object first so that any\n-      // circular dependencies that may arise while evaluating the module can\n-      // be satisfied.\n-      moduleObj = {\n-        __filename: modulePath,\n-        exports: {},\n-      };\n-\n-      this._moduleRegistry[modulePath] = moduleObj;\n-      if (path.extname(modulePath) === '.json') {\n-        moduleObj.exports = this._environment.global.JSON.parse(\n-          fs.readFileSync(modulePath, 'utf8')\n-        );\n-      } else if (path.extname(modulePath) === '.node') {\n-        moduleObj.exports = require(modulePath);\n-      } else {\n-        this._execModule(moduleObj);\n-      }\n-    }\n-\n-    return moduleObj.exports;\n-  }\n-\n-  /**\n-   * If the moduleNameMapper config is set, go through all the mappings\n-   * and resolve the module name.\n-   */\n   _resolveStubModuleName(moduleName) {\n     const nameMapper = this._mappedModuleNames;\n     for (const mappedModuleName in nameMapper) {\n@@ -779,17 +557,20 @@ class Loader {\n     }\n   }\n \n-  /**\n-   * Given a module name, return either the real module or the mock version of\n-   * that module -- depending on the mocking state of the loader (and, perhaps\n-   * the mocking state for the requested module).\n-   */\n-  requireModuleOrMock(currPath, moduleName) {\n-    if (this._shouldMock(currPath, moduleName)) {\n-      return this.requireMock(currPath, moduleName);\n-    } else {\n-      return this.requireModule(currPath, moduleName);\n-    }\n+  _createRequireImplementation(path) {\n+    const moduleRequire = this.requireModuleOrMock.bind(this, path);\n+    moduleRequire.requireMock = this.requireMock.bind(this, path);\n+    moduleRequire.requireActual = this.requireModule.bind(this, path);\n+    moduleRequire.resolve = moduleName => {\n+      const ret = this._resolveModuleName(path, moduleName);\n+      if (!ret) {\n+        throw new Error(`Module(${moduleName}) not found!`);\n+      }\n+      return ret;\n+    };\n+    moduleRequire.cache = Object.create(null);\n+    moduleRequire.extensions = Object.create(null);\n+    return moduleRequire;\n   }\n \n   _createRuntimeFor(currPath) {\n@@ -829,11 +610,7 @@ class Loader {\n         return frozenCopy;\n       },\n \n-      genMockFromModule: moduleName => this._generateMock(\n-        this._currentlyExecutingModulePath,\n-        moduleName\n-      ),\n-\n+      genMockFromModule: moduleName => this._generateMock(currPath, moduleName),\n       genMockFunction: moduleMocker.getMockFunction,\n       genMockFn: moduleMocker.getMockFunction,\n \n@@ -867,31 +644,6 @@ class Loader {\n     return runtime;\n   }\n \n-  resetModuleRegistry() {\n-    this._mockRegistry = {};\n-    this._moduleRegistry = {};\n-\n-    if (this._environment && this._environment.global) {\n-      var envGlobal = this._environment.global;\n-      Object.keys(envGlobal).forEach(key => {\n-        const globalMock = envGlobal[key];\n-        if (\n-          (typeof globalMock === 'object' && globalMock !== null) ||\n-          typeof globalMock === 'function'\n-        ) {\n-          globalMock._isMockFunction && globalMock.mockClear();\n-        }\n-      });\n-\n-      if (envGlobal.mockClearTimers) {\n-        envGlobal.mockClearTimers();\n-      }\n-    }\n-  }\n-\n-  __getJestRuntimeForTest(dir) {\n-    return this._createRuntimeFor(dir);\n-  }\n }\n \n module.exports = Loader;"},{"sha":"2bf1d8d17d782d9509105ca7f5bf2edb8852312c","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-NODE_PATH-test.js","status":"modified","additions":30,"deletions":32,"changes":62,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-NODE_PATH-test.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-NODE_PATH-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-NODE_PATH-test.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -12,76 +12,74 @@\n jest.autoMockOff();\n jest.mock('../../environments/JSDOMEnvironment');\n \n-var path = require('path');\n-var utils = require('../../lib/utils');\n+const path = require('path');\n+const utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n-  var HasteModuleLoader;\n-  var JSDOMEnvironment;\n-  var resourceMap;\n+  let HasteModuleLoader;\n+  let HasteResolver;\n+  let JSDOMEnvironment;\n \n-  var CONFIG = utils.normalizeConfig({\n+  const rootDir = path.join(__dirname, 'test_root');\n+  const rootPath = path.join(rootDir, 'root.js');\n+  const config = utils.normalizeConfig({\n     cacheDirectory: global.CACHE_DIRECTORY,\n     name: 'HasteModuleLoader-NODE_PATH-tests',\n     rootDir: path.resolve(__dirname, 'test_root'),\n   });\n \n   function buildLoader() {\n-    if (!resourceMap) {\n-      return HasteModuleLoader.loadResourceMap(CONFIG).then(function(map) {\n-        resourceMap = map;\n-        return buildLoader();\n-      });\n-    } else {\n-      var mockEnvironment = new JSDOMEnvironment(CONFIG);\n-      return Promise.resolve(\n-        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n-      );\n-    }\n+    const environment = new JSDOMEnvironment(config);\n+    const resolver = new HasteResolver(config, {resetCache: false});\n+    return resolver.getHasteMap().then(\n+      response => resolver.end().then(() =>\n+        new HasteModuleLoader(config, environment, response)\n+      )\n+    );\n   }\n \n   function initHasteModuleLoader(nodePath) {\n     process.env.NODE_PATH = nodePath;\n     HasteModuleLoader = require('../HasteModuleLoader');\n+    HasteResolver = require('../../resolvers/HasteResolver');\n     JSDOMEnvironment = require('../../environments/JSDOMEnvironment');\n   }\n \n   pit('uses NODE_PATH to find modules', function() {\n-    var nodePath = __dirname + '/NODE_PATH_dir';\n+    const nodePath = __dirname + '/NODE_PATH_dir';\n     initHasteModuleLoader(nodePath);\n     return buildLoader().then(function(loader) {\n-      var exports = loader.requireModuleOrMock(null, 'RegularModuleInNodePath');\n+      const exports =\n+        loader.requireModuleOrMock(rootPath, 'RegularModuleInNodePath');\n       expect(exports).toBeDefined();\n     });\n   });\n \n   pit('finds modules in NODE_PATH containing multiple paths', function() {\n-    var cwd = process.cwd();\n-    var nodePath = cwd + '/some/other/path' + path.delimiter + __dirname +\n+    const cwd = process.cwd();\n+    const nodePath = cwd + '/some/other/path' + path.delimiter + __dirname +\n       '/NODE_PATH_dir';\n     initHasteModuleLoader(nodePath);\n     return buildLoader().then(function(loader) {\n-      var exports = loader.requireModuleOrMock(null, 'RegularModuleInNodePath');\n+      const exports =\n+        loader.requireModuleOrMock(rootPath, 'RegularModuleInNodePath');\n       expect(exports).toBeDefined();\n     });\n   });\n \n   pit('doesnt find modules if NODE_PATH is relative', function() {\n-    var nodePath = process.cwd().substr(path.sep.length) +\n+    const nodePath = process.cwd().substr(path.sep.length) +\n       'src/HasteModuleLoader/__tests__/NODE_PATH_dir';\n     initHasteModuleLoader(nodePath);\n     return buildLoader().then(function(loader) {\n-      try {\n-        var exports = loader.requireModuleOrMock(\n-          null,\n+      expect(() => {\n+        loader.requireModuleOrMock(\n+          rootPath,\n           'RegularModuleInNodePath'\n         );\n-        expect(exports).toBeUndefined();\n-      } catch (e) {\n-        expect(\n-          (e.message.indexOf('Cannot find module'))\n-        ).toBeGreaterThan(-1);\n-      }\n+      }).toThrow(\n+        new Error(`Cannot find module 'RegularModuleInNodePath' from 'root.js'`)\n+      );\n     });\n   });\n "},{"sha":"3112004bab08e8fd65cdd4e0caf9a20c2f6e9931","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-genMockFromModule-test.js","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-genMockFromModule-test.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-genMockFromModule-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-genMockFromModule-test.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -12,36 +12,35 @@\n jest.autoMockOff();\n jest.mock('../../environments/JSDOMEnvironment');\n \n-var path = require('path');\n-var utils = require('../../lib/utils');\n+const path = require('path');\n+const utils = require('../../lib/utils');\n \n describe('nodeHasteModuleLoader', function() {\n-  var HasteModuleLoader;\n-  var JSDOMEnvironment;\n-  var resourceMap;\n+  let HasteModuleLoader;\n+  let HasteResolver;\n+  let JSDOMEnvironment;\n \n-  var CONFIG = utils.normalizeConfig({\n+  const rootDir = path.resolve(__dirname, 'test_root');\n+  const rootPath = path.resolve(rootDir, 'root.js');\n+  const config = utils.normalizeConfig({\n     cacheDirectory: global.CACHE_DIRECTORY,\n     name: 'nodeHasteModuleLoader-genMockFromModule-tests',\n-    rootDir: path.resolve(__dirname, 'test_root'),\n+    rootDir,\n   });\n \n   function buildLoader() {\n-    if (!resourceMap) {\n-      return HasteModuleLoader.loadResourceMap(CONFIG).then(function(map) {\n-        resourceMap = map;\n-        return buildLoader();\n-      });\n-    } else {\n-      var mockEnvironment = new JSDOMEnvironment(CONFIG);\n-      return Promise.resolve(\n-        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n-      );\n-    }\n+    const environment = new JSDOMEnvironment(config);\n+    const resolver = new HasteResolver(config, {resetCache: false});\n+    return resolver.getHasteMap().then(\n+      response => resolver.end().then(() =>\n+        new HasteModuleLoader(config, environment, response)\n+      )\n+    );\n   }\n \n   beforeEach(function() {\n     HasteModuleLoader = require('../HasteModuleLoader');\n+    HasteResolver = require('../../resolvers/HasteResolver');\n     JSDOMEnvironment = require('../../environments/JSDOMEnvironment');\n   });\n \n@@ -50,18 +49,19 @@ describe('nodeHasteModuleLoader', function() {\n       'does not cause side effects in the rest of the module system when ' +\n       'generating a mock',\n       function() {\n-        return buildLoader().then(function(loader) {\n-          var testRequire = loader.requireModule.bind(loader, __filename);\n+        return buildLoader().then(loader => {\n+          const testRequire = loader.requireModule.bind(loader, rootPath);\n \n-          var regularModule = testRequire('RegularModule');\n-          var origModuleStateValue = regularModule.getModuleStateValue();\n+          const regularModule = testRequire('RegularModule');\n+          const origModuleStateValue = regularModule.getModuleStateValue();\n \n-          loader.__getJestRuntimeForTest().dontMock('RegularModule');\n+          expect(origModuleStateValue).toBe('default');\n \n           // Generate a mock for a module with side effects\n-          loader.__getJestRuntimeForTest().genMockFromModule(\n-            'ModuleWithSideEffects'\n-          );\n+          const mock = regularModule.jest.genMockFromModule('ModuleWithSideEffects');\n+\n+          // Make sure we get a mock.\n+          expect(mock.fn()).toBe(undefined);\n \n           expect(regularModule.getModuleStateValue()).toBe(\n             origModuleStateValue"},{"sha":"f6914681679c31e9e9b6a0ba826804dbe1fa466f","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-getTestEnvData-test.js","status":"modified","additions":30,"deletions":26,"changes":56,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-getTestEnvData-test.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-getTestEnvData-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-getTestEnvData-test.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -10,49 +10,53 @@\n 'use strict';\n \n jest.autoMockOff();\n+jest.mock('../../environments/JSDOMEnvironment');\n \n-var path = require('path');\n-var utils = require('../../lib/utils');\n+const path = require('path');\n+const utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n-  var HasteModuleLoader;\n-  var mockEnvironment;\n-  var resourceMap;\n+  let HasteModuleLoader;\n+  let HasteResolver;\n+  let JSDOMEnvironment;\n \n-  var config;\n-  beforeEach(function() {\n-    HasteModuleLoader = require('../HasteModuleLoader');\n-    config = utils.normalizeConfig({\n-      cacheDirectory: global.CACHE_DIRECTORY,\n-      name: 'HasteModuleLoader-getTestEnvData-tests',\n-      rootDir: path.resolve(__dirname, 'test_root'),\n-      testEnvData: {someTestData: 42},\n-    });\n+  const rootDir = path.join(__dirname, 'test_root');\n+  const rootPath = path.join(rootDir, 'root.js');\n+  const config = utils.normalizeConfig({\n+    cacheDirectory: global.CACHE_DIRECTORY,\n+    name: 'HasteModuleLoader-getTestEnvData-tests',\n+    rootDir,\n+    testEnvData: {someTestData: 42},\n   });\n \n   function buildLoader() {\n-    if (!resourceMap) {\n-      return HasteModuleLoader.loadResourceMap(config).then(function(map) {\n-        resourceMap = map;\n-        return buildLoader();\n-      });\n-    } else {\n-      return Promise.resolve(\n-        new HasteModuleLoader(config, mockEnvironment, resourceMap)\n-      );\n-    }\n+    const environment = new JSDOMEnvironment(config);\n+    const resolver = new HasteResolver(config, {resetCache: false});\n+    return resolver.getHasteMap().then(\n+      response => resolver.end().then(() =>\n+        new HasteModuleLoader(config, environment, response)\n+      )\n+    );\n   }\n \n+  beforeEach(function() {\n+    HasteModuleLoader = require('../HasteModuleLoader');\n+    HasteResolver = require('../../resolvers/HasteResolver');\n+    JSDOMEnvironment = require('../../environments/JSDOMEnvironment');\n+  });\n+\n   pit('passes config data through to jest.envData', function() {\n     return buildLoader().then(function(loader) {\n-      var envData = loader.__getJestRuntimeForTest().getTestEnvData();\n+      const root = loader.requireModule(rootDir, rootPath);\n+      const envData = root.jest.getTestEnvData();\n       expect(envData).toEqual(config.testEnvData);\n     });\n   });\n \n   pit('freezes jest.envData object', function() {\n     return buildLoader().then(function(loader) {\n-      var envData = loader.__getJestRuntimeForTest().getTestEnvData();\n+      const root = loader.requireModule(rootDir, rootPath);\n+      const envData = root.jest.getTestEnvData();\n       expect(Object.isFrozen(envData)).toBe(true);\n     });\n   });"},{"sha":"d96f487aa6e65d1a2ada09cf635aa18bb7a1b287","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-jsdom-env-test.js","status":"modified","additions":16,"deletions":18,"changes":34,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-jsdom-env-test.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-jsdom-env-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-jsdom-env-test.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -11,36 +11,34 @@\n \n jest.autoMockOff();\n \n-var path = require('path');\n-var utils = require('../../lib/utils');\n+const path = require('path');\n+const utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n-  var HasteModuleLoader;\n-  var JSDOMEnvironment;\n-  var resourceMap;\n+  let HasteModuleLoader;\n+  let HasteResolver;\n+  let JSDOMEnvironment;\n \n-  var CONFIG = utils.normalizeConfig({\n+  const rootDir = path.join(__dirname, 'test_root');\n+  const config = utils.normalizeConfig({\n     cacheDirectory: global.CACHE_DIRECTORY,\n     name: 'HasteModuleLoader-jsdom-env-tests',\n-    rootDir: path.join(__dirname, 'test_root'),\n+    rootDir,\n   });\n \n   function buildLoader() {\n-    if (!resourceMap) {\n-      return HasteModuleLoader.loadResourceMap(CONFIG).then(function(map) {\n-        resourceMap = map;\n-        return buildLoader();\n-      });\n-    } else {\n-      var mockEnvironment = new JSDOMEnvironment(CONFIG);\n-      return Promise.resolve(\n-        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n-      );\n-    }\n+    const environment = new JSDOMEnvironment(config);\n+    const resolver = new HasteResolver(config, {resetCache: false});\n+    return resolver.getHasteMap().then(\n+      response => resolver.end().then(() =>\n+        new HasteModuleLoader(config, environment, response)\n+      )\n+    );\n   }\n \n   beforeEach(function() {\n     HasteModuleLoader = require('../HasteModuleLoader');\n+    HasteResolver = require('../../resolvers/HasteResolver');\n     JSDOMEnvironment = require('../../environments/JSDOMEnvironment');\n   });\n "},{"sha":"5148aae65a240f537a8ca7d049783b1c1f1cf6a4","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-requireMock-test.js","status":"modified","additions":41,"deletions":33,"changes":74,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireMock-test.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireMock-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireMock-test.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -12,66 +12,74 @@\n jest.autoMockOff();\n jest.mock('../../environments/JSDOMEnvironment');\n \n-var path = require('path');\n-var utils = require('../../lib/utils');\n+const path = require('path');\n+const utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n-  var HasteModuleLoader;\n-  var JSDOMEnvironment;\n-  var resourceMap;\n+  let HasteModuleLoader;\n+  let HasteResolver;\n+  let JSDOMEnvironment;\n \n-  var CONFIG = utils.normalizeConfig({\n+  const rootDir = path.join(__dirname, 'test_root');\n+  const rootPath = path.join(rootDir, 'root.js');\n+  const config = utils.normalizeConfig({\n     cacheDirectory: global.CACHE_DIRECTORY,\n     name: 'HasteModuleLoader-requireMock-tests',\n-    rootDir: path.resolve(__dirname, 'test_root'),\n+    rootDir,\n   });\n \n   function buildLoader() {\n-    if (!resourceMap) {\n-      return HasteModuleLoader.loadResourceMap(CONFIG).then(function(map) {\n-        resourceMap = map;\n-        return buildLoader();\n-      });\n-    } else {\n-      var mockEnvironment = new JSDOMEnvironment(CONFIG);\n-      return Promise.resolve(\n-        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n-      );\n-    }\n+    const environment = new JSDOMEnvironment(config);\n+    const resolver = new HasteResolver(config, {resetCache: false});\n+    return resolver.getHasteMap().then(\n+      response => resolver.end().then(() =>\n+        new HasteModuleLoader(config, environment, response)\n+      )\n+    );\n   }\n \n   beforeEach(function() {\n     HasteModuleLoader = require('../HasteModuleLoader');\n+    HasteResolver = require('../../resolvers/HasteResolver');\n     JSDOMEnvironment = require('../../environments/JSDOMEnvironment');\n   });\n \n   describe('requireMock', function() {\n     pit('uses manual mocks before attempting to automock', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireMock(null, 'ManuallyMocked');\n+        const exports = loader.requireMock(rootPath, 'ManuallyMocked');\n         expect(exports.isManualMockModule).toBe(true);\n       });\n     });\n \n+    pit('can resolve modules that are only referenced from mocks', function() {\n+      return buildLoader().then(function(loader) {\n+        const exports = loader.requireMock(rootPath, 'ManuallyMocked');\n+        expect(\n+          exports.onlyRequiredFromMockModuleValue\n+        ).toBe('banana banana banana');\n+      });\n+    });\n+\n     pit('stores and re-uses manual mock exports', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireMock(null, 'ManuallyMocked');\n+        let exports = loader.requireMock(rootPath, 'ManuallyMocked');\n         exports.setModuleStateValue('test value');\n-        exports = loader.requireMock(null, 'ManuallyMocked');\n+        exports = loader.requireMock(rootPath, 'ManuallyMocked');\n         expect(exports.getModuleStateValue()).toBe('test value');\n       });\n     });\n \n     pit('automocks @providesModule modules without a manual mock', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireMock(null, 'RegularModule');\n+        const exports = loader.requireMock(rootPath, 'RegularModule');\n         expect(exports.getModuleStateValue._isMockFunction).toBe(true);\n       });\n     });\n \n     pit('automocks relative-path modules without a file extension', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireMock(\n+        const exports = loader.requireMock(\n           __filename,\n           './test_root/RegularModule'\n         );\n@@ -81,7 +89,7 @@ describe('HasteModuleLoader', function() {\n \n     pit('automocks relative-path modules with a file extension', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireMock(\n+        const exports = loader.requireMock(\n           __filename,\n           './test_root/RegularModule.js'\n         );\n@@ -91,7 +99,7 @@ describe('HasteModuleLoader', function() {\n \n     pit('just falls back when loading a native module', function() {\n       return buildLoader().then(function(loader) {\n-        var error;\n+        let error;\n         // Okay so this is a really WAT way to test this, but we\n         // are going to require an empty .node file which should\n         // throw an error letting us know that the file is too\n@@ -114,16 +122,16 @@ describe('HasteModuleLoader', function() {\n \n     pit('stores and re-uses automocked @providesModule exports', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireMock(null, 'RegularModule');\n+        let exports = loader.requireMock(rootPath, 'RegularModule');\n         exports.externalMutation = 'test value';\n-        exports = loader.requireMock(null, 'RegularModule');\n+        exports = loader.requireMock(rootPath, 'RegularModule');\n         expect(exports.externalMutation).toBe('test value');\n       });\n     });\n \n     pit('stores and re-uses automocked relative-path modules', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireMock(\n+        let exports = loader.requireMock(\n           __filename,\n           './test_root/RegularModule'\n         );\n@@ -138,30 +146,30 @@ describe('HasteModuleLoader', function() {\n \n     pit('multiple node core modules returns correct module', function() {\n       return buildLoader().then(function(loader) {\n-        loader.requireMock(null, 'fs');\n-        expect(loader.requireMock(null, 'events').EventEmitter).toBeDefined();\n+        loader.requireMock(rootPath, 'fs');\n+        expect(loader.requireMock(rootPath, 'events').EventEmitter).toBeDefined();\n       });\n     });\n \n     pit('throws on non-existant @providesModule modules', function() {\n       return buildLoader().then(function(loader) {\n         expect(function() {\n-          loader.requireMock(null, 'DoesntExist');\n+          loader.requireMock(rootPath, 'DoesntExist');\n         }).toThrow();\n       });\n     });\n \n     pit('uses the closest manual mock when duplicates exist', function() {\n       return buildLoader().then(function(loader) {\n-        var exports1 = loader.requireMock(\n+        const exports1 = loader.requireMock(\n           __dirname,\n           path.resolve(__dirname, './test_root/subdir1/MyModule')\n         );\n         expect(exports1.modulePath).toEqual(\n           'subdir1/__mocks__/MyModule.js'\n         );\n \n-        var exports2 = loader.requireMock(\n+        const exports2 = loader.requireMock(\n           __dirname,\n           path.resolve(__dirname, './test_root/subdir2/MyModule')\n         );"},{"sha":"f51920ff233e8b9574e3a766bc1a2c3b3378b956","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-requireModule-test.js","status":"modified","additions":52,"deletions":50,"changes":102,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModule-test.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModule-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModule-test.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -12,50 +12,49 @@\n jest.autoMockOff();\n jest.mock('../../environments/JSDOMEnvironment');\n \n-var path = require('path');\n-var utils = require('../../lib/utils');\n+const path = require('path');\n+const utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n-  var HasteModuleLoader;\n-  var JSDOMEnvironment;\n-  var resourceMap;\n+  let HasteModuleLoader;\n+  let HasteResolver;\n+  let JSDOMEnvironment;\n \n-  var CONFIG = utils.normalizeConfig({\n+  const rootDir = path.join(__dirname, 'test_root');\n+  const rootPath = path.join(rootDir, 'root.js');\n+  const config = utils.normalizeConfig({\n     cacheDirectory: global.CACHE_DIRECTORY,\n     name: 'HasteModuleLoader-requireModule-tests',\n-    rootDir: path.join(__dirname, 'test_root'),\n+    rootDir,\n   });\n \n   function buildLoader() {\n-    if (!resourceMap) {\n-      return HasteModuleLoader.loadResourceMap(CONFIG).then(function(map) {\n-        resourceMap = map;\n-        return buildLoader();\n-      });\n-    } else {\n-      var mockEnvironment = new JSDOMEnvironment(CONFIG);\n-      return Promise.resolve(\n-        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n-      );\n-    }\n+    const environment = new JSDOMEnvironment(config);\n+    const resolver = new HasteResolver(config, {resetCache: false});\n+    return resolver.getHasteMap().then(\n+      response => resolver.end().then(() =>\n+        new HasteModuleLoader(config, environment, response)\n+      )\n+    );\n   }\n \n   beforeEach(function() {\n     HasteModuleLoader = require('../HasteModuleLoader');\n+    HasteResolver = require('../../resolvers/HasteResolver');\n     JSDOMEnvironment = require('../../environments/JSDOMEnvironment');\n   });\n \n   describe('requireModule', function() {\n     pit('finds @providesModule modules', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireModule(null, 'RegularModule');\n+        const exports = loader.requireModule(rootPath, 'RegularModule');\n         expect(exports.isRealModule).toBe(true);\n       });\n     });\n \n     pit('provides `module.parent` to modules', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireModule(null, 'RegularModule');\n+        const exports = loader.requireModule(rootPath, 'RegularModule');\n         expect(exports.parent).toEqual({\n           id: 'mockParent',\n           exports: {},\n@@ -66,26 +65,28 @@ describe('HasteModuleLoader', function() {\n     pit('throws on non-existant @providesModule modules', function() {\n       return buildLoader().then(function(loader) {\n         expect(function() {\n-          loader.requireModule(null, 'DoesntExist');\n-        }).toThrow(new Error('Cannot find module \\'DoesntExist\\' from \\'.\\''));\n+          loader.requireModule(rootPath, 'DoesntExist');\n+        }).toThrow(\n+          new Error('Cannot find module \\'DoesntExist\\' from \\'root.js\\'')\n+        );\n       });\n     });\n \n     pit('finds relative-path modules without file extension', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireModule(\n-          __filename,\n-          './test_root/RegularModule'\n+        const exports = loader.requireModule(\n+          rootPath,\n+          './RegularModule'\n         );\n         expect(exports.isRealModule).toBe(true);\n       });\n     });\n \n     pit('finds relative-path modules with file extension', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireModule(\n-          __filename,\n-          './test_root/RegularModule.js'\n+        const exports = loader.requireModule(\n+          rootPath,\n+          './RegularModule.js'\n         );\n         expect(exports.isRealModule).toBe(true);\n       });\n@@ -94,47 +95,47 @@ describe('HasteModuleLoader', function() {\n     pit('throws on non-existant relative-path modules', function() {\n       return buildLoader().then(function(loader) {\n         expect(function() {\n-          loader.requireModule(__filename, './DoesntExist');\n-        }).toThrow(new Error(\n-          'Cannot find module \\'./DoesntExist\\' from \\'' + __filename + '\\''\n-        ));\n+          loader.requireModule(rootPath, './DoesntExist');\n+        }).toThrow(\n+          new Error('Cannot find module \\'./DoesntExist\\' from \\'root.js\\'')\n+        );\n       });\n     });\n \n     pit('finds node core built-in modules', function() {\n       return buildLoader().then(function(loader) {\n         expect(function() {\n-          loader.requireModule(null, 'fs');\n+          loader.requireModule(rootPath, 'fs');\n         }).not.toThrow();\n       });\n     });\n \n     pit('finds and loads JSON files without file extension', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireModule(__filename, './test_root/JSONFile');\n+        const exports = loader.requireModule(rootPath, './JSONFile');\n         expect(exports.isJSONModule).toBe(true);\n       });\n     });\n \n     pit('finds and loads JSON files with file extension', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireModule(\n-          __filename,\n-          './test_root/JSONFile.json'\n+        const exports = loader.requireModule(\n+          rootPath,\n+          './JSONFile.json'\n         );\n         expect(exports.isJSONModule).toBe(true);\n       });\n     });\n \n     pit('requires a JSON file twice successfully', function() {\n       return buildLoader().then(function(loader) {\n-        var exports1 = loader.requireModule(\n-          __filename,\n-          './test_root/JSONFile.json'\n+        const exports1 = loader.requireModule(\n+          rootPath,\n+          './JSONFile.json'\n         );\n-        var exports2 = loader.requireModule(\n-          __filename,\n-          './test_root/JSONFile.json'\n+        const exports2 = loader.requireModule(\n+          rootPath,\n+          './JSONFile.json'\n         );\n         expect(exports1.isJSONModule).toBe(true);\n         expect(exports2.isJSONModule).toBe(true);\n@@ -148,19 +149,19 @@ describe('HasteModuleLoader', function() {\n        * when they want a manual mock, like:\n        *\n        *   require.mock('MyManualMock');\n-       *   var ManuallyMocked = require('ManuallyMocked');\n+       *   const ManuallyMocked = require('ManuallyMocked');\n        *\n        *   --or--\n        *\n-       *   var ManuallyMocked = require.manualMock('ManuallyMocked');\n+       *   const ManuallyMocked = require.manualMock('ManuallyMocked');\n        *\n        * For now, however, this is built-in and many tests rely on it, so we\n        * must support it until we can do some cleanup.\n        */\n       pit('provides manual mock when real module doesnt exist', function() {\n         return buildLoader().then(function(loader) {\n-          var exports = loader.requireModule(\n-            __filename,\n+          const exports = loader.requireModule(\n+            rootPath,\n             'ExclusivelyManualMock'\n           );\n           expect(exports.isExclusivelyManualMockModule).toBe(true);\n@@ -179,9 +180,10 @@ describe('HasteModuleLoader', function() {\n           'marked with .dontMock()',\n           function() {\n             return buildLoader().then(function(loader) {\n-              loader.__getJestRuntimeForTest(__filename)\n-                .dontMock('ManuallyMocked');\n-              var exports = loader.requireModule(__filename, 'ManuallyMocked');\n+              const root = loader.requireModule(rootPath, './root.js');\n+              root.jest.resetModuleRegistry();\n+              root.jest.dontMock('ManuallyMocked');\n+              const exports = loader.requireModule(rootPath, 'ManuallyMocked');\n               expect(exports.isManualMockModule).toBe(false);\n             });\n           }"},{"sha":"b68855eea8201200b956c5539c88572e254d9ebd","filename":"src/HasteModuleLoader/__tests__/HasteModuleLoader-requireModuleOrMock-test.js","status":"modified","additions":36,"deletions":34,"changes":70,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModuleOrMock-test.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModuleOrMock-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2FHasteModuleLoader-requireModuleOrMock-test.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -12,55 +12,55 @@\n jest.autoMockOff();\n jest.mock('../../environments/JSDOMEnvironment');\n \n-var path = require('path');\n-var utils = require('../../lib/utils');\n+const path = require('path');\n+const utils = require('../../lib/utils');\n \n describe('HasteModuleLoader', function() {\n-  var HasteModuleLoader;\n-  var JSDOMEnvironment;\n-  var resourceMap;\n+  let HasteModuleLoader;\n+  let HasteResolver;\n+  let JSDOMEnvironment;\n \n-  var CONFIG = utils.normalizeConfig({\n+  const rootDir = path.join(__dirname, 'test_root');\n+  const rootPath = path.join(rootDir, 'root.js');\n+  const config = utils.normalizeConfig({\n     cacheDirectory: global.CACHE_DIRECTORY,\n     name: 'HasteModuleLoader-requireModuleOrMock-tests',\n-    rootDir: path.resolve(__dirname, 'test_root'),\n+    rootDir,\n     moduleNameMapper: {\n       '^image![a-zA-Z0-9$_-]+$': 'GlobalImageStub',\n       '^[./a-zA-Z0-9$_-]+\\.png$': 'RelativeImageStub',\n     },\n   });\n \n   function buildLoader() {\n-    if (!resourceMap) {\n-      return HasteModuleLoader.loadResourceMap(CONFIG).then(function(map) {\n-        resourceMap = map;\n-        return buildLoader();\n-      });\n-    } else {\n-      var mockEnvironment = new JSDOMEnvironment(CONFIG);\n-      return Promise.resolve(\n-        new HasteModuleLoader(CONFIG, mockEnvironment, resourceMap)\n-      );\n-    }\n+    const environment = new JSDOMEnvironment(config);\n+    const resolver = new HasteResolver(config, {resetCache: false});\n+    return resolver.getHasteMap().then(\n+      response => resolver.end().then(() =>\n+        new HasteModuleLoader(config, environment, response)\n+      )\n+    );\n   }\n \n   beforeEach(function() {\n     HasteModuleLoader = require('../HasteModuleLoader');\n+    HasteResolver = require('../../resolvers/HasteResolver');\n     JSDOMEnvironment = require('../../environments/JSDOMEnvironment');\n   });\n \n   describe('requireModuleOrMock', function() {\n     pit('mocks modules by default', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireModuleOrMock(null, 'RegularModule');\n+        const exports = loader.requireModuleOrMock(rootPath, 'RegularModule');\n         expect(exports.setModuleStateValue._isMockFunction).toBe(true);\n       });\n     });\n \n     pit('doesnt mock modules when explicitly dontMock()ed', function() {\n       return buildLoader().then(function(loader) {\n-        loader.__getJestRuntimeForTest().dontMock('RegularModule');\n-        var exports = loader.requireModuleOrMock(null, 'RegularModule');\n+        const root = loader.requireModule(rootDir, rootPath);\n+        root.jest.dontMock('RegularModule');\n+        const exports = loader.requireModuleOrMock(rootPath, 'RegularModule');\n         expect(exports.isRealModule).toBe(true);\n       });\n     });\n@@ -70,25 +70,26 @@ describe('HasteModuleLoader', function() {\n       'denormalized module name',\n       function() {\n         return buildLoader().then(function(loader) {\n-          loader.__getJestRuntimeForTest(__filename)\n-            .dontMock('./test_root/RegularModule');\n-          var exports = loader.requireModuleOrMock(__filename, 'RegularModule');\n+          const root = loader.requireModule(rootDir, rootPath);\n+          root.jest.dontMock('./RegularModule');\n+          const exports = loader.requireModuleOrMock(rootPath, 'RegularModule');\n           expect(exports.isRealModule).toBe(true);\n         });\n       }\n     );\n \n     pit('doesnt mock modules when autoMockOff() has been called', function() {\n       return buildLoader().then(function(loader) {\n-        loader.__getJestRuntimeForTest().autoMockOff();\n-        var exports = loader.requireModuleOrMock(null, 'RegularModule');\n+        const root = loader.requireModule(rootDir, rootPath);\n+        root.jest.autoMockOff();\n+        const exports = loader.requireModuleOrMock(rootPath, 'RegularModule');\n         expect(exports.isRealModule).toBe(true);\n       });\n     });\n \n     pit('uses manual mock when automocking on and mock is avail', function() {\n       return buildLoader().then(function(loader) {\n-        var exports = loader.requireModuleOrMock(null, 'ManuallyMocked');\n+        const exports = loader.requireModuleOrMock(rootPath, 'ManuallyMocked');\n         expect(exports.isManualMockModule).toBe(true);\n       });\n     });\n@@ -98,9 +99,10 @@ describe('HasteModuleLoader', function() {\n       'available',\n       function() {\n         return buildLoader().then(function(loader) {\n-          loader.__getJestRuntimeForTest().autoMockOff();\n-          var exports = loader.requireModuleOrMock(\n-            __filename,\n+          const root = loader.requireModule(rootDir, rootPath);\n+          root.jest.autoMockOff();\n+          const exports = loader.requireModuleOrMock(\n+            rootPath,\n             'ManuallyMocked'\n           );\n           expect(exports.isManualMockModule).toBe(false);\n@@ -110,14 +112,14 @@ describe('HasteModuleLoader', function() {\n \n     pit('resolves mapped module names and unmocks them by default', function() {\n       return buildLoader().then(function(loader) {\n-        var exports =\n-          loader.requireModuleOrMock(__filename, 'image!not-really-a-module');\n+        let exports =\n+          loader.requireModuleOrMock(rootPath, 'image!not-really-a-module');\n         expect(exports.isGlobalImageStub).toBe(true);\n \n-        exports = loader.requireModuleOrMock(__filename, 'cat.png');\n+        exports = loader.requireModuleOrMock(rootPath, 'cat.png');\n         expect(exports.isRelativeImageStub).toBe(true);\n \n-        exports = loader.requireModuleOrMock(__filename, 'dog.png');\n+        exports = loader.requireModuleOrMock(rootPath, 'dog.png');\n         expect(exports.isRelativeImageStub).toBe(true);\n       });\n     });"},{"sha":"e22fead33a80dd5f93db66f01702ded821c86caa","filename":"src/HasteModuleLoader/__tests__/test_root/ManuallyMocked.js","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FManuallyMocked.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FManuallyMocked.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FManuallyMocked.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -8,5 +8,4 @@\n  * @providesModule ManuallyMocked\n  */\n \n-\n exports.isManualMockModule = false;"},{"sha":"f273633b60fa78546964c0fcc6da292e581eea99","filename":"src/HasteModuleLoader/__tests__/test_root/ModuleWithSideEffects.js","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FModuleWithSideEffects.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FModuleWithSideEffects.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FModuleWithSideEffects.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -13,3 +13,5 @@\n var RegularModule = require('RegularModule');\n \n RegularModule.setModuleStateValue('Side effect value');\n+\n+exports.fn = () => '42';"},{"sha":"a600b0def1c4a541f273b7a600b5c5609a8e4909","filename":"src/HasteModuleLoader/__tests__/test_root/OnlyRequiredFromMock.js","status":"added","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FOnlyRequiredFromMock.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FOnlyRequiredFromMock.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FOnlyRequiredFromMock.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -0,0 +1,13 @@\n+/**\n+ * Copyright (c) 2014, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @providesModule OnlyRequiredFromMock\n+ */\n+\n+'use strict';\n+\n+exports.value = 'banana banana banana';"},{"sha":"3b2ce9974acb50f5f486e009023d4e98801be8f9","filename":"src/HasteModuleLoader/__tests__/test_root/RegularModule.js","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FRegularModule.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FRegularModule.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2FRegularModule.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -25,7 +25,14 @@ function getModuleStateValue() {\n   return moduleStateValue;\n }\n \n+() => {\n+  // Make sure ModuleWithSideEffects is part of the module map for\n+  // RegularModule.\n+  require('ModuleWithSideEffects');\n+};\n+\n exports.getModuleStateValue = getModuleStateValue;\n exports.isRealModule = true;\n exports.setModuleStateValue = setModuleStateValue;\n exports.parent = module.parent;\n+exports.jest = jest;"},{"sha":"3ac8e7301df82d03e89aca2e529e006b928b9b01","filename":"src/HasteModuleLoader/__tests__/test_root/__mocks__/ManuallyMocked.js","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2F__mocks__%2FManuallyMocked.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2F__mocks__%2FManuallyMocked.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2F__mocks__%2FManuallyMocked.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -7,6 +7,17 @@\n  */\n 'use strict';\n \n+let OnlyRequiredFromMock;\n+try {\n+  OnlyRequiredFromMock = require.requireActual('OnlyRequiredFromMock');\n+} catch (e) {\n+  // If the module cannot be loaded, use a dummy value. There is one test\n+  // that specifically tests for the correct value which ensures this feature\n+  // works. If the feature is broken, it doesn't cause additional log-spew in\n+  // surrounding tests.\n+  OnlyRequiredFromMock = {value: 'module OnlyRequiredFromMock not found'};\n+}\n+\n var moduleStateValue = 'default';\n \n function setModuleStateValue(value) {\n@@ -17,6 +28,7 @@ function getModuleStateValue() {\n   return moduleStateValue;\n }\n \n+exports.onlyRequiredFromMockModuleValue = OnlyRequiredFromMock.value;\n exports.getModuleStateValue = getModuleStateValue;\n exports.isManualMockModule = true;\n exports.setModuleStateValue = setModuleStateValue;"},{"sha":"f30d4f215f4396c27867e048ccff46b09879d66f","filename":"src/HasteModuleLoader/__tests__/test_root/root.js","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2Froot.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2Froot.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FHasteModuleLoader%2F__tests__%2Ftest_root%2Froot.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2014, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @providesModule root\n+ */\n+\n+require('ManuallyMocked');\n+require('ModuleWithSideEffects');\n+require('RegularModule');\n+require('ExclusivelyManualMock');\n+\n+// We only care about the static analysis, not about the runtime.\n+() => {\n+  require('image!not-really-a-module');\n+  require('cat.png');\n+  require('dog.png');\n+};\n+\n+exports.jest = jest;"},{"sha":"581bc21f9e7b679ff0999c4fd269957e2d7c035c","filename":"src/Test.js","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FTest.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FTest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FTest.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2014, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+'use strict';\n+\n+const Console = require('./Console');\n+\n+class Test {\n+\n+  constructor(path, config, moduleMap) {\n+    this._path = path;\n+    this._config = config;\n+    this._moduleMap = moduleMap;\n+  }\n+\n+  run() {\n+    const path = this._path;\n+    const config = this._config;\n+    const moduleMap = this._moduleMap;\n+    const TestEnvironment = require(config.testEnvironment);\n+    const TestRunner = require(config.testRunner);\n+    const ModuleLoader = require(config.moduleLoader);\n+\n+    const env = new TestEnvironment(config);\n+    env.global.console = new Console(\n+      config.useStderr ? process.stderr : process.stdout,\n+      process.stderr\n+    );\n+    env.testFilePath = path;\n+    const moduleLoader = new ModuleLoader(config, env, moduleMap);\n+    if (config.setupEnvScriptFile) {\n+      moduleLoader.requireModule(null, config.setupEnvScriptFile);\n+    }\n+    const start = Date.now();\n+    return TestRunner(config, env, moduleLoader, path)\n+      .then(result => {\n+        result.perfStats = {start, end: Date.now()};\n+        result.testFilePath = path;\n+        result.coverage = moduleLoader.getAllCoverageInfo();\n+        return result;\n+      })\n+      .then(\n+        result => Promise.resolve().then(() => {\n+          env.dispose();\n+          if (config.logHeapUsage) {\n+            if (global.gc) {\n+              global.gc();\n+            }\n+            result.memoryUsage = process.memoryUsage().heapUsed;\n+          }\n+          return result;\n+        }),\n+        err => Promise.resolve().then(() => {\n+          env.dispose();\n+          throw err;\n+        })\n+      );\n+  }\n+\n+}\n+\n+module.exports = Test;"},{"sha":"e8d65034f44799c574984e0b98519eae0e6f6cf3","filename":"src/TestRunner.js","status":"modified","additions":192,"deletions":264,"changes":456,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FTestRunner.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FTestRunner.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FTestRunner.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -5,16 +5,21 @@\n  * LICENSE file in the root directory of this source tree. An additional grant\n  * of patent rights can be found in the PATENTS file in the same directory.\n  */\n+\n+ /* eslint-disable fb-www/object-create-only-one-param */\n 'use strict';\n \n+const Test = require('./Test');\n+\n const fs = require('graceful-fs');\n+const getCacheFilePath = require('node-haste/lib/Cache/lib/getCacheFilePath');\n+const getCacheKey = require('./lib/getCacheKey');\n+const mkdirp = require('mkdirp');\n const os = require('os');\n const path = require('path');\n-const assign = require('object-assign');\n+const promisify = require('./lib/promisify');\n const utils = require('./lib/utils');\n const workerFarm = require('worker-farm');\n-const Console = require('./Console');\n-const promisify = require('./lib/promisify');\n \n const TEST_WORKER_PATH = require.resolve('./TestWorker');\n \n@@ -59,22 +64,25 @@ function optionPathToRegex(p) {\n   return utils.escapeStrForRegex(p.replace(/\\//g, path.sep));\n }\n \n-/**\n- * A class that takes a project's test config and provides various utilities for\n- * executing its tests.\n- *\n- * @param config The jest configuration\n- * @param options See DEFAULT_OPTIONS for descriptions on the various options\n- *                and their defaults.\n- */\n class TestRunner {\n \n   constructor(config, options) {\n-    this._config = config;\n-    this._configDeps = null;\n-    this._moduleLoaderResourceMap = null;\n-    // Maximum memory usage if `logHeapUsage` is enabled.\n-    this._maxMemoryUsage = 0;\n+    this._opts = Object.assign({}, DEFAULT_OPTIONS, options);\n+    this._config = Object.freeze(config);\n+\n+    try {\n+      mkdirp.sync(this._config.cacheDirectory, '777');\n+    } catch (e) {\n+      if (e.code !== 'EEXIST') {\n+        throw e;\n+      }\n+    }\n+\n+    const Resolver = require(config.moduleResolver);\n+    this._resolver = new Resolver(config, {\n+      resetCache: !config.cache,\n+    });\n+\n     this._testPathDirsRegExp = new RegExp(\n       config.testPathDirs\n         .map(dir => optionPathToRegex(dir))\n@@ -93,207 +101,148 @@ class TestRunner {\n     // Map from testFilePath -> time it takes to run the test. Used to\n     // optimally schedule bigger test runs.\n     this._testPerformanceCache = null;\n-\n-    this._opts = assign({}, DEFAULT_OPTIONS, options);\n   }\n \n-  _constructModuleLoader(environment, customCfg) {\n-    const config = customCfg || this._config;\n-    const ModuleLoader = this._loadConfigDependencies().ModuleLoader;\n-    return this._getModuleLoaderResourceMap().then(\n-      resourceMap => new ModuleLoader(config, environment, resourceMap)\n-    );\n+  _getAllTestPaths() {\n+    return this._resolver\n+      .matchFilesByPattern(this._config.testDirectoryName)\n+      .then(paths => paths.filter(path => this._isTestFilePath(path)));\n   }\n \n-  _getModuleLoaderResourceMap() {\n-    const ModuleLoader = this._loadConfigDependencies().ModuleLoader;\n-    if (this._moduleLoaderResourceMap === null) {\n-      if (this._opts.useCachedModuleLoaderResourceMap) {\n-        this._moduleLoaderResourceMap =\n-          ModuleLoader.loadResourceMapFromCacheFile(this._config, this._opts);\n-      } else {\n-        this._moduleLoaderResourceMap =\n-          ModuleLoader.loadResourceMap(this._config, this._opts);\n-      }\n-    }\n-    return this._moduleLoaderResourceMap;\n-  }\n-\n-  _isTestFilePath(filePath) {\n-    // get filePath into OS-appropriate format before testing patterns\n-    filePath = path.normalize(filePath);\n+  _isTestFilePath(path) {\n     const testPathIgnorePattern =\n       this._config.testPathIgnorePatterns.length\n       ? new RegExp(this._config.testPathIgnorePatterns.join('|'))\n       : null;\n \n     return (\n-      this._nodeHasteTestRegExp.test(filePath)\n-      && !HIDDEN_FILE_RE.test(filePath)\n-      && (!testPathIgnorePattern || !testPathIgnorePattern.test(filePath))\n-      && this._testPathDirsRegExp.test(filePath)\n+      this._nodeHasteTestRegExp.test(path)\n+      && !HIDDEN_FILE_RE.test(path)\n+      && (!testPathIgnorePattern || !testPathIgnorePattern.test(path))\n+      && this._testPathDirsRegExp.test(path)\n     );\n   }\n \n-  _loadConfigDependencies() {\n-    const config = this._config;\n-    if (this._configDeps === null) {\n-      this._configDeps = {\n-        ModuleLoader: require(config.moduleLoader),\n-        testEnvironment: require(config.testEnvironment),\n-        testRunner: require(config.testRunner).bind(null),\n-      };\n+  collectChangedModules(relatedPaths, moduleMap, changed) {\n+    const visitedModules = new Set();\n+    while (changed.size) {\n+      changed = new Set(moduleMap.filter(module => (\n+        !visitedModules.has(module.path) &&\n+        module.dependencies.some(dep => dep && changed.has(dep))\n+      )).map(module => {\n+        const path = module.path;\n+        if (this._isTestFilePath(path)) {\n+          relatedPaths.add(path);\n+        }\n+        visitedModules.add(path);\n+        return module.name;\n+      }));\n     }\n-    return this._configDeps;\n+    return relatedPaths;\n   }\n \n-  promiseTestPathsRelatedTo(paths) {\n-    paths = Array.from(paths);\n-    return this._constructModuleLoader()\n-      .then(moduleLoader => {\n-        const relatedPaths = [];\n-        const discoveredModules = {};\n-\n-        // If a path to a test file is given, make sure we consider that test as\n-        // related to itself. Non-tests will be filtered at the end.\n-        paths.forEach(path => {\n-          discoveredModules[path] = true;\n-          if (this._isTestFilePath(path) && fs.existsSync(path)) {\n-            relatedPaths.push(path);\n-          }\n-        });\n-\n-        const modulesToSearch = [].concat(paths);\n-        while (modulesToSearch.length > 0) {\n-          const modulePath = modulesToSearch.shift();\n-          const depPaths = moduleLoader.getDependentsFromPath(modulePath);\n-\n-          depPaths.forEach(depPath => {\n-            if (!discoveredModules.hasOwnProperty(depPath)) {\n-              discoveredModules[depPath] = true;\n-              modulesToSearch.push(depPath);\n-              if (this._isTestFilePath(depPath) && fs.existsSync(depPath)) {\n-                relatedPaths.push(depPath);\n-              }\n+  promiseTestPathsRelatedTo(changedPaths) {\n+    const relatedPaths = new Set();\n+    return this._resolver.getAllModules().then(allModules => {\n+      const changed = new Set();\n+      for (const path of changedPaths) {\n+        if (this._resolver.getFS().fileExists(path)) {\n+          const module = this._resolver.getModuleForPath(path);\n+          if (module) {\n+            changed.add(module.path);\n+            if (this._isTestFilePath(module.path)) {\n+              relatedPaths.add(module.path);\n             }\n-          });\n+          }\n         }\n-        return relatedPaths;\n-      });\n+      }\n+      return Promise.all(Object.keys(allModules).map(path =>\n+        this._resolver.getShallowDependencies(path)\n+          .then(response => ({\n+            name: path,\n+            path,\n+            dependencies: response.dependencies.map(dep => dep.path),\n+          }))\n+      )).then(moduleMap => Array.from(this.collectChangedModules(\n+        relatedPaths,\n+        moduleMap,\n+        changed\n+      )));\n+    });\n   }\n \n-  promiseTestPathsMatching(pathPattern) {\n-    return this._getModuleLoaderResourceMap()\n-      .then(resourceMap => {\n-        const matchingPaths = [];\n-        const resourcePathMap = resourceMap.resourcePathMap;\n-        for (const i in resourcePathMap) {\n-          // Sometimes the loader finds a path with no resource. This typically\n-          // happens if a file is recently deleted.\n-          if (!resourcePathMap[i]) {\n-            continue;\n-          }\n-\n-          const pathStr = resourcePathMap[i].path;\n-          if (\n-            this._isTestFilePath(pathStr) &&\n-            pathPattern.test(pathStr)\n-          ) {\n-            matchingPaths.push(pathStr);\n+  promiseHasteTestPathsRelatedTo(changedPaths) {\n+    return Promise.all([\n+      this._getAllTestPaths(),\n+      this._resolver.getHasteMap(),\n+    ]).then(response => {\n+      const testPaths = response[0];\n+      const hasteMap = response[1];\n+      const relatedPaths = new Set();\n+      const changed = new Set();\n+      const moduleMap = testPaths.map(path => ({\n+        name: path,\n+        path,\n+        dependencies: null,\n+      }));\n+      const collectModules = list => {\n+        for (const name in list) {\n+          const path = list[name];\n+          if (changedPaths.has(path)) {\n+            changed.add(name);\n+            if (this._isTestFilePath(path)) {\n+              relatedPaths.add(path);\n+            }\n           }\n+          moduleMap.push({name, path, dependencies: null});\n         }\n-        return matchingPaths;\n-      });\n-  }\n+      };\n+      collectModules(hasteMap.modules);\n+      collectModules(hasteMap.mocks);\n \n-  /**\n-   * Run the given single test file path.\n-   * This just contains logic for running a single test given it's file path.\n-   *\n-   * @param {String} testFilePath\n-   * @return {Promise<Object>} Results of the test\n-   */\n-  runTest(testFilePath) {\n-    // Shallow copying lets us adjust the config object locally without\n-    // worrying about the external consequences of changing the config object\n-    // for needs that are local to this particular function call\n-    const config = assign({}, this._config);\n-    const configDeps = this._loadConfigDependencies();\n-\n-    const env = new configDeps.testEnvironment(config);\n-    const testRunner = configDeps.testRunner;\n-\n-    // Intercept console logs to colorize.\n-    env.global.console = new Console(\n-      this._config.useStderr ? process.stderr : process.stdout,\n-      process.stderr\n-    );\n+      const deferreds = moduleMap.map(() => {\n+        let resolve;\n+        const promise = new Promise(_resolve => resolve = _resolve);\n+        return {resolve, promise};\n+      });\n+      let i = 0;\n+      const nextResolution = () => {\n+        if (i >= moduleMap.length) {\n+          return;\n+        }\n \n-    // Pass the testFilePath into the runner, so it can be used to e.g.\n-    // configure test reporter output.\n-    env.testFilePath = testFilePath;\n-    return this._constructModuleLoader(env, config).then(moduleLoader => {\n-      // This is a kind of janky way to ensure that we only collect coverage\n-      // information on modules that are immediate dependencies of the\n-      // test file.\n-      //\n-      // Collecting coverage info on more than that is often not useful as\n-      // *usually*, when one is looking for coverage info, one is only looking\n-      // for coverage info on the files under test. Since a test file is just a\n-      // regular old module that can depend on whatever other modules it likes,\n-      // it's usually pretty hard to tell which of those dependencies is/are the\n-      // \"module(s)\" under test.\n-      //\n-      // I'm not super happy with having to inject stuff into the config object\n-      // mid-stream here, but it gets the job done.\n-      if (config.collectCoverage && !config.collectCoverageOnlyFrom) {\n-        config.collectCoverageOnlyFrom = {};\n-        moduleLoader.getDependenciesFromPath(testFilePath)\n-          // Skip over built-in (non-absolute paths) and node modules\n-          .filter(p => path.isAbsolute(p) && !(/node_modules/.test(p)))\n-          .forEach(p => config.collectCoverageOnlyFrom[p] = true);\n-      }\n+        const currentIndex = i;\n+        const module = moduleMap[currentIndex];\n+        const deferred = deferreds[currentIndex];\n+        i++;\n+        this._resolver.getModuleForPath(module.path).getDependencies()\n+          .then(dependencies => {\n+            nextResolution();\n+            moduleMap[currentIndex].dependencies = dependencies;\n+          })\n+          .then(() => deferred.resolve());\n+      };\n \n-      if (config.setupEnvScriptFile) {\n-        moduleLoader.requireModule(null, config.setupEnvScriptFile);\n+      for (let i = 0; i < 20; i++) {\n+        nextResolution();\n       }\n+      return Promise.all(deferreds.map(deferred => deferred.promise))\n+        .then(() => Array.from(this.collectChangedModules(\n+          relatedPaths,\n+          moduleMap,\n+          changed\n+        )));\n+    });\n+  }\n \n-      const testExecStats = {start: Date.now()};\n-      return testRunner(config, env, moduleLoader, testFilePath)\n-        .then(result => {\n-          testExecStats.end = Date.now();\n-\n-          result.perfStats = testExecStats;\n-          result.testFilePath = testFilePath;\n-          result.coverage =\n-            config.collectCoverage\n-            ? moduleLoader.getAllCoverageInfo()\n-            : {};\n-\n-          return result;\n-        });\n-    }).then(\n-      result => Promise.resolve().then(() => {\n-        env.dispose();\n-\n-        if (config.logHeapUsage) {\n-          this._addMemoryUsage(result);\n-        }\n-\n-        return result;\n-      }),\n-      err => Promise.resolve().then(() => {\n-        env.dispose();\n-        throw err;\n-      })\n-    );\n+  promiseTestPathsMatching(pathPattern) {\n+    return this._getAllTestPaths()\n+      .then(paths => paths.filter(path => pathPattern.test(path)));\n   }\n \n   _getTestPerformanceCachePath() {\n-    return path.join(\n-      this._config.cacheDirectory,\n-      'perf-cache-' + this._config.name\n-    );\n+    const config = this._config;\n+    return path.join(config.cacheDirectory, 'perf-cache-' + config.name);\n   }\n \n   _sortTests(testPaths) {\n@@ -330,54 +279,29 @@ class TestRunner {\n   }\n \n   _cacheTestResults(aggregatedResults) {\n-    const performanceCacheFile = this._getTestPerformanceCachePath();\n-    let testPerformanceCache = this._testPerformanceCache;\n-    if (!testPerformanceCache) {\n-      testPerformanceCache = this._testPerformanceCache = {};\n+    const cacheFile = this._getTestPerformanceCachePath();\n+    let cache = this._testPerformanceCache;\n+    if (!cache) {\n+      cache = this._testPerformanceCache = {};\n     }\n     aggregatedResults.testResults.forEach(test => {\n       const perf = test && test.perfStats;\n       if (perf && perf.end && perf.start) {\n-        testPerformanceCache[test.testFilePath] = perf.end - perf.start;\n+        cache[test.testFilePath] = perf.end - perf.start;\n       }\n     });\n-    return new Promise(resolve =>\n-      fs.writeFile(\n-        performanceCacheFile,\n-        JSON.stringify(testPerformanceCache),\n-        () => resolve(aggregatedResults)\n-      )\n-    );\n+    return promisify(fs.writeFile)(cacheFile, JSON.stringify(cache));\n   }\n \n-  /**\n-   * Run all given test paths.\n-   *\n-   * @param {Array<String>} testPaths Array of paths to test files\n-   * @param {Object} reporter Collection of callbacks called on test events\n-   * @return {Promise<Object>} Fulfilled with information about test run:\n-   *   success: true if all tests passed\n-   *   runTime: elapsed time in seconds to run all tests\n-   *   numTotalTestSuites: total number of test suites considered\n-   *   numPassedTestSuites: number of test suites run and passed\n-   *   numFailedTestSuites: number of test suites run and failed\n-   *   numRuntimeErrorTestSuites: number of test suites failed to run\n-   *   numTotalTests: total number of tests executed\n-   *   numPassedTests: number of tests run and passed\n-   *   numFailedTests: number of tests run and failed\n-   *   testResults: the jest result info for all tests run\n-   */\n   runTests(testPaths, reporter) {\n     const config = this._config;\n     if (!reporter) {\n       const TestReporter = require(config.testReporter);\n       if (config.useStderr) {\n-        /* eslint-disable fb-www/object-create-only-one-param */\n         reporter = new TestReporter(Object.create(\n           process,\n           {stdout: {value: process.stderr}}\n         ));\n-        /* eslint-enable fb-www/object-create-only-one-param */\n       } else {\n         reporter = new TestReporter();\n       }\n@@ -446,7 +370,14 @@ class TestRunner {\n         }\n         return aggregatedResults;\n       })\n-      .then(this._cacheTestResults.bind(this));\n+      .then(results => Promise.all([\n+        this._cacheTestResults(results),\n+        this.end(),\n+      ]).then(() => results));\n+  }\n+\n+  end() {\n+    return this._resolver.end();\n   }\n \n   _createTestRun(testPaths, onTestResult, onRunFailure) {\n@@ -458,57 +389,54 @@ class TestRunner {\n   }\n \n   _createInBandTestRun(testPaths, onTestResult, onRunFailure) {\n-    let testSequence = Promise.resolve();\n-    testPaths.forEach(testPath =>\n-      testSequence = testSequence\n-        .then(this.runTest.bind(this, testPath))\n-        .then(testResult => onTestResult(testPath, testResult))\n-        .catch(err => onRunFailure(testPath, err))\n+    return testPaths.reduce((promise, path) =>\n+      promise\n+        .then(() => this._resolver.getHasteMap())\n+        .then(moduleMap => new Test(path, this._config, moduleMap).run())\n+        .then(result => onTestResult(path, result))\n+        .catch(err => onRunFailure(path, err)),\n+      Promise.resolve()\n     );\n-    return testSequence;\n   }\n \n-  _createParallelTestRun(testPaths, onTestResult, onRunFailure) {\n-    const farm = workerFarm({\n-      maxConcurrentCallsPerWorker: 1,\n-\n-      // We allow for a couple of transient errors. Say something to do\n-      // with loading/serialization of the resourcemap (which I've seen\n-      // happen).\n-      maxRetries: 2,\n-      maxConcurrentWorkers: this._opts.maxWorkers,\n-    }, TEST_WORKER_PATH);\n-\n-    const runTest = promisify(farm);\n-\n-    return this._getModuleLoaderResourceMap()\n-      .then(() => Promise.all(testPaths.map(\n-        testFilePath => runTest({config: this._config, testFilePath})\n-          .then(testResult => onTestResult(testFilePath, testResult))\n-          .catch(err => {\n-            onRunFailure(testFilePath, err);\n-\n-            if (err.type === 'ProcessTerminatedError') {\n-              // Initialization error or some other uncaught error\n-              console.error(\n-                'A worker process has quit unexpectedly! ' +\n-                'Most likely this an initialization error.'\n-              );\n-              process.exit(1);\n-            }\n-          })\n-      ))).then(() => workerFarm.end(farm));\n+  _persistModuleMap(moduleMap) {\n+    const cacheFile = getCacheFilePath(\n+      this._config.cacheDirectory,\n+      getCacheKey('jest-module-map', this._config)\n+    );\n+    return promisify(fs.writeFile)(cacheFile, JSON.stringify(moduleMap));\n   }\n \n-  _addMemoryUsage(result) {\n-    if (global.gc) {\n-      global.gc();\n-    }\n-    const memoryUsage = process.memoryUsage().heapUsed;\n-    this._maxMemoryUsage = Math.max(this._maxMemoryUsage, memoryUsage);\n-    result.maxMemoryUsage = this._maxMemoryUsage;\n-    result.memoryUsage = memoryUsage;\n+  _createParallelTestRun(testPaths, onTestResult, onRunFailure) {\n+    const config = this._config;\n+    return this._resolver.getHasteMap()\n+      .then(moduleMap => this._persistModuleMap(moduleMap))\n+      .then(() => {\n+        const farm = workerFarm({\n+          autoStart: true,\n+          maxConcurrentCallsPerWorker: 1,\n+          maxRetries: 2, // Allow for a couple of transient errors.\n+          maxConcurrentWorkers: this._opts.maxWorkers,\n+        }, TEST_WORKER_PATH);\n+        const runTest = promisify(farm);\n+        return Promise.all(testPaths.map(\n+          path => runTest({path, config})\n+            .then(testResult => onTestResult(path, testResult))\n+            .catch(err => {\n+              onRunFailure(path, err);\n+              if (err.type === 'ProcessTerminatedError') {\n+                console.error(\n+                  'A worker process has quit unexpectedly! ' +\n+                  'Most likely this an initialization error.'\n+                );\n+                process.exit(1);\n+              }\n+            }))\n+        )\n+        .then(() => workerFarm.end(farm));\n+      });\n   }\n+\n }\n \n module.exports = TestRunner;"},{"sha":"eb54828ef567268458efc8df9c2bb7adda88c235","filename":"src/TestWorker.js","status":"modified","additions":33,"deletions":11,"changes":44,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FTestWorker.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2FTestWorker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2FTestWorker.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -13,25 +13,47 @@ process.on('uncaughtException', err => {\n   process.exit(1);\n });\n \n-const TestRunner = require('./TestRunner');\n+const Test = require('./Test');\n \n-let testRunner;\n+const fs = require('graceful-fs');\n+const getCacheFilePath = require('node-haste/lib/Cache/lib/getCacheFilePath');\n+const getCacheKey = require('./lib/getCacheKey');\n \n-module.exports = (data, callback) => {\n-  if (!testRunner) {\n-    testRunner = new TestRunner(data.config, {\n-      useCachedModuleLoaderResourceMap: true,\n-    });\n+const formatError = error => {\n+  if (typeof error === 'string') {\n+    return {\n+      stack: null,\n+      message: error,\n+      type: 'Error',\n+    };\n   }\n \n+  return {\n+    stack: error.stack,\n+    message: error.message,\n+    type: error.type,\n+  };\n+};\n+\n+let moduleMap;\n+\n+module.exports = (data, callback) => {\n   try {\n-    testRunner.runTest(data.testFilePath)\n+    if (!moduleMap) {\n+      const cacheFile = getCacheFilePath(\n+        data.config.cacheDirectory,\n+        getCacheKey('jest-module-map', data.config)\n+      );\n+      moduleMap = JSON.parse(fs.readFileSync(cacheFile));\n+    }\n+\n+    new Test(data.path, data.config, moduleMap)\n+      .run()\n       .then(\n         result => callback(null, result),\n-        // TODO: move to error object passing (why limit to strings?).\n-        err => callback(err.stack || err.message || err)\n+        err => callback(formatError(err))\n       );\n   } catch (err) {\n-    callback(err.stack || err.message || err);\n+    callback(formatError(err));\n   }\n };"},{"sha":"8c8a02c525bffedd57a4f3365dc61ba3fc122107","filename":"src/__tests__/TestRunner-fs-test.js","status":"modified","additions":20,"deletions":16,"changes":36,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2F__tests__%2FTestRunner-fs-test.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2F__tests__%2FTestRunner-fs-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2F__tests__%2FTestRunner-fs-test.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -11,83 +11,87 @@\n \n jest.autoMockOff();\n \n-var path = require('path');\n-var TestRunner = require('../TestRunner');\n-var utils = require('../lib/utils');\n+const path = require('path');\n+const utils = require('../lib/utils');\n+const TestRunner = require('../TestRunner');\n \n-var name = 'TestRunner-fs';\n+const name = 'TestRunner-fs';\n \n describe('TestRunner-fs', function() {\n \n   describe('testPathsMatching', function() {\n \n     pit('finds tests with default file extensions', function() {\n-      var rootDir = path.resolve(__dirname, 'test_root');\n-      var runner = new TestRunner(utils.normalizeConfig({\n+      const rootDir = path.resolve(__dirname, 'test_root');\n+      const runner = new TestRunner(utils.normalizeConfig({\n         cacheDirectory: global.CACHE_DIRECTORY,\n         name,\n         rootDir,\n         testDirectoryName: '__testtests__',\n       }));\n       return runner.promiseTestPathsMatching(/.*/).then(function(paths) {\n-        var relPaths = paths.map(function(absPath) {\n+        const relPaths = paths.map(function(absPath) {\n           return path.relative(rootDir, absPath);\n         });\n         expect(relPaths).toEqual([path.normalize('__testtests__/test.js')]);\n+        return runner._resolver.end();\n       });\n     });\n \n     pit('finds tests with similar but custom file extensions', function() {\n-      var rootDir = path.resolve(__dirname, 'test_root');\n-      var runner = new TestRunner(utils.normalizeConfig({\n+      const rootDir = path.resolve(__dirname, 'test_root');\n+      const runner = new TestRunner(utils.normalizeConfig({\n         cacheDirectory: global.CACHE_DIRECTORY,\n         name,\n         rootDir,\n         testDirectoryName: '__testtests__',\n         testFileExtensions: ['jsx'],\n       }));\n       return runner.promiseTestPathsMatching(/.*/).then(function(paths) {\n-        var relPaths = paths.map(function(absPath) {\n+        const relPaths = paths.map(function(absPath) {\n           return path.relative(rootDir, absPath);\n         });\n         expect(relPaths).toEqual([path.normalize('__testtests__/test.jsx')]);\n+        return runner._resolver.end();\n       });\n     });\n \n     pit('finds tests with totally custom foobar file extensions', function() {\n-      var rootDir = path.resolve(__dirname, 'test_root');\n-      var runner = new TestRunner(utils.normalizeConfig({\n+      const rootDir = path.resolve(__dirname, 'test_root');\n+      const runner = new TestRunner(utils.normalizeConfig({\n         cacheDirectory: global.CACHE_DIRECTORY,\n         name,\n         rootDir,\n         testDirectoryName: '__testtests__',\n         testFileExtensions: ['foobar'],\n       }));\n       return runner.promiseTestPathsMatching(/.*/).then(function(paths) {\n-        var relPaths = paths.map(function(absPath) {\n+        const relPaths = paths.map(function(absPath) {\n           return path.relative(rootDir, absPath);\n         });\n         expect(relPaths).toEqual([path.normalize('__testtests__/test.foobar')]);\n+        return runner._resolver.end();\n       });\n     });\n \n     pit('finds tests with many kinds of file extensions', function() {\n-      var rootDir = path.resolve(__dirname, 'test_root');\n-      var runner = new TestRunner(utils.normalizeConfig({\n+      const rootDir = path.resolve(__dirname, 'test_root');\n+      const runner = new TestRunner(utils.normalizeConfig({\n         cacheDirectory: global.CACHE_DIRECTORY,\n         name,\n         rootDir,\n         testDirectoryName: '__testtests__',\n         testFileExtensions: ['js', 'jsx'],\n       }));\n       return runner.promiseTestPathsMatching(/.*/).then(function(paths) {\n-        var relPaths = paths.map(function(absPath) {\n+        const relPaths = paths.map(function(absPath) {\n           return path.relative(rootDir, absPath);\n         });\n         expect(relPaths.sort()).toEqual([\n           path.normalize('__testtests__/test.js'),\n           path.normalize('__testtests__/test.jsx'),\n         ]);\n+        return runner._resolver.end();\n       });\n     });\n "},{"sha":"1218ada5e46ed63082641172439b64682a10d4a5","filename":"src/__tests__/TestRunner-test.js","status":"modified","additions":56,"deletions":140,"changes":196,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2F__tests__%2FTestRunner-test.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2F__tests__%2FTestRunner-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2F__tests__%2FTestRunner-test.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -9,22 +9,25 @@\n  */\n 'use strict';\n \n-jest.autoMockOff().mock('fs');\n+jest.autoMockOff();\n \n-var name = 'TestRunner';\n-describe('TestRunner', function() {\n-  var TestRunner;\n+const path = require('path');\n+const utils = require('../lib/utils');\n \n-  beforeEach(function() {\n+describe('TestRunner', () => {\n+  const name = 'TestRunner';\n+  let TestRunner;\n+  let runner;\n+\n+  beforeEach(() => {\n     TestRunner = require('../TestRunner');\n   });\n \n-  describe('_isTestFilePath', function() {\n-    var runner;\n-    var utils;\n+  describe('_isTestFilePath', () => {\n \n-    beforeEach(function() {\n-      utils = require('../lib/utils');\n+    beforeEach(() => {\n+      const utils = require('../lib/utils');\n+      jest.mock('../resolvers/HasteResolver');\n       runner = new TestRunner(utils.normalizeConfig({\n         cacheDirectory: global.CACHE_DIRECTORY,\n         name,\n@@ -33,150 +36,63 @@ describe('TestRunner', function() {\n       }));\n     });\n \n-    it('supports ../ paths and unix separators', function() {\n-      var path = '/path/to/__tests__/foo/bar/baz/../../../test.js';\n-      var isTestFile = runner._isTestFilePath(path);\n-\n-      return expect(isTestFile).toEqual(true);\n+    it('supports ../ paths and unix separators', () => {\n+      const path = '/path/to/__tests__/foo/bar/baz/../../../test.js';\n+      expect(runner._isTestFilePath(path)).toEqual(true);\n     });\n \n-    it('supports unix separators', function() {\n-      var path = '/path/to/__tests__/test.js';\n-      var isTestFile = runner._isTestFilePath(path);\n-\n-      return expect(isTestFile).toEqual(true);\n+    it('supports unix separators', () => {\n+      const path = '/path/to/__tests__/test.js';\n+      expect(runner._isTestFilePath(path)).toEqual(true);\n     });\n \n   });\n \n-  describe('promiseTestPathsRelatedTo', function() {\n-    var fakeDepsFromPath;\n-    var fs;\n-    var runner;\n-    var utils;\n-\n-    beforeEach(function() {\n-      fs = require('graceful-fs');\n-      utils = require('../lib/utils');\n-      runner = new TestRunner(utils.normalizeConfig({\n-        cacheDirectory: global.CACHE_DIRECTORY,\n-        name,\n-        rootDir: '.',\n-        testPathDirs: [],\n-      }));\n-\n-      fakeDepsFromPath = {};\n-      runner._constructModuleLoader = function() {\n-        return Promise.resolve({\n-          getDependentsFromPath: function(modulePath) {\n-            return fakeDepsFromPath[modulePath] || [];\n-          },\n-        });\n-      };\n-    });\n-\n-    pit('finds no tests when no tests depend on the path', function() {\n-      var path = '/path/to/module/not/covered/by/any/tests.js';\n-      fakeDepsFromPath[path] = [];\n-\n-      // Mock out existsSync to return true, since our test path isn't real\n-      fs.existsSync = function() { return true; };\n-\n-      return runner.promiseTestPathsRelatedTo([path])\n-        .then(function(relatedTests) {\n-          expect(relatedTests).toEqual([]);\n-        });\n+  describe('promiseTestPathsRelatedTo', () => {\n+    const rootDir = path.join(\n+      __dirname,\n+      '..',\n+      'HasteModuleLoader',\n+      '__tests__',\n+      'test_root'\n+    );\n+    const rootPath = path.join(rootDir, 'root.js');\n+    const config = utils.normalizeConfig({\n+      cacheDirectory: global.CACHE_DIRECTORY,\n+      name: 'TestRunner-promiseTestPathsRelatedTo-tests',\n+      rootDir,\n+      // In order to test the reverse-dependency-resolution we assume\n+      // every file is a test file in the test directory.\n+      testPathPattern: '',\n     });\n \n-    pit('finds tests that depend directly on the path', function() {\n-      var path = '/path/to/module/covered/by/one/test.js';\n-      var dependentTestPath = '/path/to/test/__tests__/asdf-test.js';\n-      fakeDepsFromPath[path] = [dependentTestPath];\n-\n-      // Mock out existsSync to return true, since our test path isn't real\n-      fs.existsSync = function() { return true; };\n-\n-      return runner.promiseTestPathsRelatedTo([path])\n-        .then(function(relatedTests) {\n-          expect(relatedTests).toEqual([dependentTestPath]);\n-        });\n+    beforeEach(() => {\n+      jest.dontMock('../resolvers/HasteResolver');\n+      runner = new TestRunner(config);\n     });\n \n-    pit('finds tests that depend indirectly on the path', function() {\n-      var path = '/path/to/module/covered/by/module/covered/by/test.js';\n-      var dependentModulePath = '/path/to/dependent/module.js';\n-      var dependentTestPath = '/path/to/test/__tests__/asdf-test.js';\n-      fakeDepsFromPath[path] = [dependentModulePath];\n-      fakeDepsFromPath[dependentModulePath] = [dependentTestPath];\n-\n-      // Mock out existsSync to return true, since our test path isn't real\n-      fs.existsSync = function() { return true; };\n+    pit('makes sure a file is related to itself', () => {\n+      const path = rootPath;\n \n-      return runner.promiseTestPathsRelatedTo([path])\n-        .then(function(relatedTests) {\n-          expect(relatedTests).toEqual([dependentTestPath]);\n-        });\n+      return runner.promiseTestPathsRelatedTo(new Set([path]))\n+        .then(relatedTests => {\n+          expect(relatedTests).toEqual([rootPath]);\n+        })\n+        .then(() => runner.end());\n     });\n \n-    pit('finds multiple tests that depend indirectly on the path', function() {\n-      var path = '/path/to/module/covered/by/modules/covered/by/test.js';\n-      var dependentModulePath1 = '/path/to/dependent/module1.js';\n-      var dependentModulePath2 = '/path/to/dependent/module2.js';\n-      var dependentTestPath1 = '/path/to/test1/__tests__/asdf1-test.js';\n-      var dependentTestPath2 = '/path/to/test2/__tests__/asdf2-test.js';\n-      fakeDepsFromPath[path] = [dependentModulePath1, dependentModulePath2];\n-      fakeDepsFromPath[dependentModulePath1] = [dependentTestPath1];\n-      fakeDepsFromPath[dependentModulePath2] = [dependentTestPath2];\n-\n-      // Mock out existsSync to return true, since our test path isn't real\n-      fs.existsSync = function() { return true; };\n-\n-      return runner.promiseTestPathsRelatedTo([path])\n-        .then(function(relatedTests) {\n-          expect(relatedTests).toEqual([\n-            dependentTestPath1,\n-            dependentTestPath2,\n+    pit('finds tests that depend directly on the path', () => {\n+      const filePath = path.join(rootDir, 'RegularModule.js');\n+      const parentDep = path.join(rootDir, 'ModuleWithSideEffects.js');\n+      return runner.promiseTestPathsRelatedTo(new Set([filePath]))\n+        .then(relatedTests => {\n+          expect(relatedTests.sort()).toEqual([\n+            parentDep,\n+            filePath,\n+            rootPath,\n           ]);\n-        });\n-    });\n-\n-    pit('flattens circular dependencies', function() {\n-      var path = '/path/to/module/covered/by/modules/covered/by/test.js';\n-      var directDependentModulePath = '/path/to/direct/dependent/module.js';\n-      var indirectDependentModulePath = '/path/to/indirect/dependent/module.js';\n-      var dependentTestPath = '/path/to/test/__tests__/asdf-test.js';\n-      fakeDepsFromPath[path] = [directDependentModulePath];\n-      fakeDepsFromPath[directDependentModulePath] =\n-        [indirectDependentModulePath];\n-      fakeDepsFromPath[indirectDependentModulePath] = [\n-        directDependentModulePath,\n-        dependentTestPath,\n-      ];\n-\n-      // Mock out existsSync to return true, since our test path isn't real\n-      fs.existsSync = function() { return true; };\n-\n-      return runner.promiseTestPathsRelatedTo([path])\n-        .then(function(relatedTests) {\n-          expect(relatedTests).toEqual([dependentTestPath]);\n-        });\n-    });\n-\n-    pit('filters test paths that don\\'t exist on the filesystem', function() {\n-      var path = '/path/to/module/covered/by/one/test.js';\n-      var existingTestPath = '/path/to/test/__tests__/exists-test.js';\n-      var nonExistantTestPath = '/path/to/test/__tests__/doesnt-exist-test.js';\n-      fakeDepsFromPath[path] = [existingTestPath, nonExistantTestPath];\n-\n-      // Mock out existsSync to return true, since our test path isn't real\n-      fs.existsSync = function(path) {\n-        return path !== nonExistantTestPath;\n-      };\n-\n-      return runner.promiseTestPathsRelatedTo([path])\n-        .then(function(relatedTests) {\n-          expect(relatedTests).toEqual([existingTestPath]);\n-        });\n+        })\n+        .then(() => runner.end());\n     });\n   });\n });"},{"sha":"ddbaedb0a0c954688dba8559a30120c99d0d404c","filename":"src/jest.js","status":"modified","additions":41,"deletions":34,"changes":75,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Fjest.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Fjest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2Fjest.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -7,8 +7,13 @@\n  */\n 'use strict';\n \n+require('fast-path').replace();\n+\n+const realFs = require('fs');\n+const fs = require('graceful-fs');\n+fs.gracefulify(realFs);\n+\n const childProcess = require('child_process');\n-const fs = require('fs');\n const path = require('path');\n const TestRunner = require('./TestRunner');\n const formatTestResults = require('./lib/formatTestResults');\n@@ -30,10 +35,10 @@ function getVersion() {\n   return jestVersion;\n }\n \n-function findChangedFiles(dirPath) {\n+function findChangedFiles(cwd) {\n   return new Promise((resolve, reject) => {\n     const args = ['diff', '--name-only', '--diff-filter=ACMR', '--relative'];\n-    const child = childProcess.spawn('git', args, {cwd: dirPath});\n+    const child = childProcess.spawn('git', args, {cwd});\n \n     let stdout = '';\n     let stderr = '';\n@@ -46,7 +51,7 @@ function findChangedFiles(dirPath) {\n           resolve([]);\n         } else {\n           resolve(stdout.split('\\n').map(\n-            changedPath => path.resolve(dirPath, changedPath)\n+            changedPath => path.resolve(cwd, changedPath)\n           ));\n         }\n       } else {\n@@ -56,14 +61,15 @@ function findChangedFiles(dirPath) {\n   });\n }\n \n-function verifyIsGitRepository(dirPath) {\n-  return new Promise(resolve =>\n-    childProcess.spawn('git', ['rev-parse', '--git-dir'], {cwd: dirPath})\n-      .on('close', code => {\n-        const isGitRepo = code === 0;\n-        resolve(isGitRepo);\n-      })\n-  );\n+function isGitRepository(cwd) {\n+  return new Promise(resolve => {\n+    let stdout = '';\n+    const child = childProcess.spawn('git', ['rev-parse', '--git-dir'], {cwd});\n+    child.stdout.on('data', data => stdout += data);\n+    child.on('close',\n+      code =>  resolve(code === 0 ? path.dirname(stdout.trim()) : null)\n+    );\n+  });\n }\n \n function testRunnerOptions(argv) {\n@@ -165,29 +171,20 @@ function readRawConfig(argv, packageRoot) {\n }\n \n function findOnlyChangedTestPaths(testRunner, config) {\n-  const testPathDirsAreGit = config.testPathDirs.map(verifyIsGitRepository);\n-  return Promise.all(testPathDirsAreGit)\n-    .then(results => {\n-      if (!results.every(result => !!result)) {\n-        /* eslint-disable no-throw-literal */\n-        throw (\n+  return Promise.all(config.testPathDirs.map(isGitRepository))\n+    .then(repos => {\n+      if (!repos.every(result => !!result)) {\n+        throw new Error(\n           'It appears that one of your testPathDirs does not exist ' +\n           'with in a git repository. Currently --onlyChanged only works ' +\n           'with git projects.\\n'\n         );\n-        /* eslint-enable no-throw-literal */\n       }\n-      return Promise.all(config.testPathDirs.map(findChangedFiles));\n+      return Promise.all(Array.from(repos).map(findChangedFiles));\n     })\n-    .then(changedPathSets => {\n-      // Collapse changed files from each of the testPathDirs into a single list\n-      // of changed file paths\n-      let changedPaths = [];\n-      changedPathSets.forEach(\n-        pathSet => changedPaths = changedPaths.concat(pathSet)\n-      );\n-      return testRunner.promiseTestPathsRelatedTo(changedPaths);\n-    });\n+    .then(changedPathSets => testRunner.promiseTestPathsRelatedTo(\n+      new Set(Array.prototype.concat.apply([], changedPathSets))\n+    ));\n }\n \n function buildTestPathPatternInfo(argv) {\n@@ -267,10 +264,10 @@ function runCLI(argv, packageRoot, onComplete) {\n           chalk.enabled = false;\n         }\n \n-        const testRunner = new TestRunner(config, testRunnerOptions(argv));\n         const testFramework = require(config.testRunner);\n         pipe.write(`Using Jest CLI v${getVersion()}, ${testFramework.name}\\n`);\n \n+        const testRunner = new TestRunner(config, testRunnerOptions(argv));\n         let testPaths;\n         if (argv.onlyChanged) {\n           testPaths = findOnlyChangedTestPaths(testRunner, config);\n@@ -301,10 +298,20 @@ function runCLI(argv, packageRoot, onComplete) {\n       })\n       .then(runResults => onComplete && onComplete(runResults.success))\n       .catch(error => {\n-        console.error('Failed with unexpected error.');\n-        process.nextTick(() => {\n-          throw error;\n-        });\n+        if (error.type == 'DependencyGraphError') {\n+          console.error([\n+            '\\nError: ' + error.message + '\\n\\n',\n+            'This is most likely a setup ',\n+            'or configuration issue. To resolve a module name collision, ',\n+            'change or blacklist one of the offending modules. See ',\n+            'http://facebook.github.io/jest/docs/api.html#config-modulepathignorepatterns-array-string',\n+          ].join(''));\n+        } else {\n+          console.error(\n+            '\\nUnexpected Error: ' + error.message + '\\n\\n' + error.stack\n+          );\n+        }\n+        process.exit(1);\n       });\n   }\n "},{"sha":"398a38ca04b6fdf9b1c023c37fcdd9404a6be6d2","filename":"src/lib/FakeTimers.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Flib%2FFakeTimers.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Flib%2FFakeTimers.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2Flib%2FFakeTimers.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -341,7 +341,7 @@ class FakeTimers {\n     const uuid = this._uuidCounter++;\n \n     this._ticks.push({\n-      uuid: uuid,\n+      uuid,\n       callback: function() {\n         return callback.apply(null, args);\n       },\n@@ -366,7 +366,7 @@ class FakeTimers {\n     const uuid = this._uuidCounter++;\n \n     this._immediates.push({\n-      uuid: uuid,\n+      uuid,\n       callback: function() {\n         return callback.apply(null, args);\n       },"},{"sha":"475b7bd5c8b6f2b03e1be0a0e0a967c6b5c84a7e","filename":"src/lib/getCacheKey.js","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Flib%2FgetCacheKey.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Flib%2FgetCacheKey.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2Flib%2FgetCacheKey.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2014, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+'use strict';\n+\n+const version = require('../../package').version;\n+\n+module.exports = function(name, config) {\n+  return [\n+    name,\n+    version,\n+    config.name,\n+    config.testPathDirs.join(';'),\n+    config.cacheDirectory,\n+    config.modulePathIgnorePatterns.toString(),\n+    config.moduleFileExtensions.toString(),\n+    config.testFileExtensions.toString(),\n+  ].join('$');\n+};"},{"sha":"9912cddb73b5f2ad436bf0563313f2d0f8150be9","filename":"src/lib/transform.js","status":"modified","additions":10,"deletions":17,"changes":27,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Flib%2Ftransform.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Flib%2Ftransform.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2Flib%2Ftransform.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -11,23 +11,11 @@ const crypto = require('crypto');\n const fs = require('graceful-fs');\n const path = require('path');\n const stableStringify = require('json-stable-stringify');\n+const mkdirp = require('mkdirp');\n \n const cache = new Map();\n const configToJsonMap = new Map();\n \n-const createDirectory = path => {\n-  if (!fs.existsSync(path)) {\n-    try {\n-      fs.mkdirSync(path);\n-    } catch (e) {\n-      if (e.code !== 'EEXIST') {\n-        throw e;\n-      }\n-    }\n-    fs.chmodSync(path, '777');\n-  }\n-};\n-\n const removeFile = path => {\n   try {\n     fs.unlinkSync(path);\n@@ -122,10 +110,15 @@ module.exports = (filePath, config) => {\n         cacheDir,\n         path.basename(filePath, path.extname(filePath)) + '_' + cacheKey\n       );\n-      \n-      createDirectory(config.cacheDirectory);\n-      createDirectory(baseCacheDir);\n-      createDirectory(cacheDir);\n+\n+      try {\n+        mkdirp.sync(cacheDir, '777');\n+      } catch (e) {\n+        if (e.code !== 'EEXIST') {\n+          throw e;\n+        }\n+      }\n+\n       const cachedData = readCacheFile(filePath, cachePath);\n       if (cachedData) {\n         fileData = cachedData;"},{"sha":"5cbc9271fee0f732aadc658ca202508aebd162a0","filename":"src/lib/utils.js","status":"modified","additions":24,"deletions":2,"changes":26,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Flib%2Futils.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Flib%2Futils.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2Flib%2Futils.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -26,10 +26,15 @@ const DEFAULT_CONFIG_VALUES = {\n   globals: {},\n   moduleFileExtensions: ['js', 'json', 'node'],\n   moduleLoader: require.resolve('../HasteModuleLoader/HasteModuleLoader'),\n+  moduleResolver: require.resolve('../resolvers/HasteResolver'),\n+  haste: {\n+    providesModuleNodeModules: [],\n+  },\n   preprocessorIgnorePatterns: [],\n   modulePathIgnorePatterns: [],\n   moduleNameMapper: [],\n   testDirectoryName: '__tests__',\n+  mocksPattern: '(?:[\\\\/]|^)__mocks__[\\\\/]',\n   testEnvironment: require.resolve('../environments/JSDOMEnvironment'),\n   testEnvData: {},\n   testFileExtensions: ['js'],\n@@ -163,6 +168,8 @@ function normalizeConfig(config) {\n       case 'collectCoverage':\n       case 'coverageCollector':\n       case 'globals':\n+      case 'haste':\n+      case 'mocksPattern':\n       case 'moduleLoader':\n       case 'name':\n       case 'persistModuleRegistryBetweenSpecs':\n@@ -282,6 +289,17 @@ function loadConfigFromPackageJson(filePath) {\n   });\n }\n \n+const KEEP_TRACE_LINES = 2;\n+function cleanStackTrace(stackTrace) {\n+  // Remove jasmine jonx from the stack trace\n+  let lines = 0;\n+  const keepFirstLines = () => (lines++ < KEEP_TRACE_LINES);\n+  return stackTrace.split('\\n').filter(line => (\n+    keepFirstLines() ||\n+    !/jest(-cli)?\\/(vendor|src|node_modules)\\//.test(line)\n+  )).join('\\n');\n+}\n+\n /**\n  * Given a test result, return a human readable string representing the\n  * failures.\n@@ -303,8 +321,11 @@ function formatFailureMessage(testResult, config) {\n   const msgIndent = msgBullet.replace(/./g, ' ');\n \n   if (testResult.testExecError) {\n-    const text = testResult.testExecError;\n-    return descBullet + localChalk.bold('Runtime Error') + '\\n' + text;\n+    const error = testResult.testExecError;\n+    return (\n+      descBullet + localChalk.bold('Runtime Error') + '\\n' +\n+      (error.stack ? cleanStackTrace(error.stack) : error.message)\n+    );\n   }\n \n   return testResult.testResults.filter(function(result) {\n@@ -372,4 +393,5 @@ exports.escapeStrForRegex = escapeStrForRegex;\n exports.loadConfigFromFile = loadConfigFromFile;\n exports.loadConfigFromPackageJson = loadConfigFromPackageJson;\n exports.normalizeConfig = normalizeConfig;\n+exports.cleanStackTrace = cleanStackTrace;\n exports.formatFailureMessage = formatFailureMessage;"},{"sha":"ba599f832f56e17d8aaa5cbebe2158dff75ca83f","filename":"src/reporters/DefaultTestReporter.js","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Freporters%2FDefaultTestReporter.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Freporters%2FDefaultTestReporter.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2Freporters%2FDefaultTestReporter.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -66,10 +66,7 @@ class DefaultTestReporter {\n \n     if (testResult.memoryUsage) {\n       const toMB = bytes => Math.floor(bytes / 1024 / 1024);\n-      testDetail.push(\n-        `${toMB(testResult.memoryUsage)} MB current`,\n-        `${toMB(testResult.maxMemoryUsage)} MB max`\n-      );\n+      testDetail.push(`${toMB(testResult.memoryUsage)} MB heap size`);\n     }\n \n     const resultHeader ="},{"sha":"b7371d3731105913e668c3f8a9cab4b7663db324","filename":"src/reporters/IstanbulTestReporter.js","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Freporters%2FIstanbulTestReporter.js","raw_url":"https://github.com/facebook/jest/raw/8b8ecb9f1a78e0c6b219c143a18438d468ae826b/src%2Freporters%2FIstanbulTestReporter.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/src%2Freporters%2FIstanbulTestReporter.js?ref=8b8ecb9f1a78e0c6b219c143a18438d468ae826b","patch":"@@ -30,8 +30,10 @@ class IstanbulTestReporter extends DefaultTestReporter {\n     super.onRunComplete(config, aggregatedResults);\n \n     if (config.collectCoverage) {\n-      reporter.addAll(config.coverageReporters);\n-      reporter.write(collector, true, () => {});\n+      try {\n+        reporter.addAll(config.coverageReporters);\n+        reporter.write(collector, true, () => {});\n+      } catch (e) {}\n     }\n   }\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/3797","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/3797/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/3797/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/3797/events","html_url":"https://github.com/facebook/jest/pull/3797","id":235274010,"node_id":"MDExOlB1bGxSZXF1ZXN0MTI1MTY2MDUz","number":3797,"title":"Escape double quotes in attribute values in HTMLElement plugin","user":{"login":"pedrottimark","id":11862657,"node_id":"MDQ6VXNlcjExODYyNjU3","avatar_url":"https://avatars.githubusercontent.com/u/11862657?v=4","gravatar_id":"","url":"https://api.github.com/users/pedrottimark","html_url":"https://github.com/pedrottimark","followers_url":"https://api.github.com/users/pedrottimark/followers","following_url":"https://api.github.com/users/pedrottimark/following{/other_user}","gists_url":"https://api.github.com/users/pedrottimark/gists{/gist_id}","starred_url":"https://api.github.com/users/pedrottimark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pedrottimark/subscriptions","organizations_url":"https://api.github.com/users/pedrottimark/orgs","repos_url":"https://api.github.com/users/pedrottimark/repos","events_url":"https://api.github.com/users/pedrottimark/events{/privacy}","received_events_url":"https://api.github.com/users/pedrottimark/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-06-12T15:36:09Z","updated_at":"2021-05-13T11:07:46Z","closed_at":"2017-06-27T09:14:20Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/3797","html_url":"https://github.com/facebook/jest/pull/3797","diff_url":"https://github.com/facebook/jest/pull/3797.diff","patch_url":"https://github.com/facebook/jest/pull/3797.patch","merged_at":"2017-06-27T09:14:20Z"},"body":"**Summary**\r\n\r\nAnother breaking change. A few more to come. Unlike `ReactElement` and `ReactTestComponent` plugins, which call `print` function to escape double quotes\r\n\r\n```html\r\n<div\r\n  title=\"\\\"escape\\\"\"\r\n/>\r\n```\r\n\r\na new test for `HTMLElement` plugin fails before I replace template literal with `print` function:\r\n\r\n```diff\r\n<div\r\n-  title=\"\\\"escape\\\"\"\r\n+  title=\"\"escape\"\"\r\n/>\r\n```\r\n\r\nProposed: To push correctness, consistency, and performance, let’s refactor common code from `HTMLElement`, `ReactElement`, and `ReactTestComponent` in 3 steps:\r\n\r\n1. `printProps`\r\n2. `printChildren`\r\n3. `printElement`\r\n\r\nWhat do you think of `pretty-format/src/plugins/lib/markup.js` as a file name?\r\n\r\n**Test plan**\r\n\r\nAdded a test","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/3797/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/3797/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"099423d2a658530682deb292b8909a63de0accd8","filename":"packages/pretty-format/src/__tests__/html_element.test.js","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/b70dd00e0fc88c8a1661076f606f62c16780696c/packages%2Fpretty-format%2Fsrc%2F__tests__%2Fhtml_element.test.js","raw_url":"https://github.com/facebook/jest/raw/b70dd00e0fc88c8a1661076f606f62c16780696c/packages%2Fpretty-format%2Fsrc%2F__tests__%2Fhtml_element.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2Fsrc%2F__tests__%2Fhtml_element.test.js?ref=b70dd00e0fc88c8a1661076f606f62c16780696c","patch":"@@ -37,6 +37,13 @@ describe('HTMLElement Plugin', () => {\n     expect(parent).toPrettyPrintTo('<div\\n  title=\"title text\"\\n/>');\n   });\n \n+  test('escapes double quote in attribute value', () => {\n+    const parent = document.createElement('div');\n+    parent.setAttribute('title', '\"escape\"');\n+\n+    expect(parent).toPrettyPrintTo('<div\\n  title=\"\\\\\"escape\\\\\"\"\\n/>');\n+  });\n+\n   it('supports an HTML element with a single attribute', () => {\n     const parent = document.createElement('div');\n     parent.setAttribute('class', 'classy');"},{"sha":"2f092fa58ded7b05752dcdb5dc81978527190fc8","filename":"packages/pretty-format/src/plugins/html_element.js","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/facebook/jest/blob/b70dd00e0fc88c8a1661076f606f62c16780696c/packages%2Fpretty-format%2Fsrc%2Fplugins%2Fhtml_element.js","raw_url":"https://github.com/facebook/jest/raw/b70dd00e0fc88c8a1661076f606f62c16780696c/packages%2Fpretty-format%2Fsrc%2Fplugins%2Fhtml_element.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2Fsrc%2Fplugins%2Fhtml_element.js?ref=b70dd00e0fc88c8a1661076f606f62c16780696c","patch":"@@ -61,15 +61,21 @@ function printChildren(flatChildren, print, indent, colors, opts) {\n     .join(opts.edgeSpacing);\n }\n \n-function printAttributes(attributes: Array<Attribute>, indent, colors, opts) {\n+function printAttributes(\n+  attributes: Array<Attribute>,\n+  print,\n+  indent,\n+  colors,\n+  opts,\n+) {\n   return attributes\n     .sort()\n     .map(attribute => {\n       return (\n         opts.spacing +\n         indent(colors.prop.open + attribute.name + colors.prop.close + '=') +\n         colors.value.open +\n-        `\"${attribute.value}\"` +\n+        print(attribute.value) +\n         colors.value.close\n       );\n     })\n@@ -106,7 +112,7 @@ const print = (\n   const hasAttributes = element.attributes && element.attributes.length;\n   if (hasAttributes) {\n     const attributes = Array.prototype.slice.call(element.attributes);\n-    result += printAttributes(attributes, indent, colors, opts);\n+    result += printAttributes(attributes, print, indent, colors, opts);\n   }\n \n   const flatChildren = Array.prototype.slice.call(element.childNodes);"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/9351","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/9351/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/9351/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/9351/events","html_url":"https://github.com/facebook/jest/pull/9351","id":542620140,"node_id":"MDExOlB1bGxSZXF1ZXN0MzU3MDIzOTAz","number":9351,"title":"feat(jest-haste-map): Enable crawling for symlink test files","user":{"login":"mrmeku","id":8085051,"node_id":"MDQ6VXNlcjgwODUwNTE=","avatar_url":"https://avatars.githubusercontent.com/u/8085051?v=4","gravatar_id":"","url":"https://api.github.com/users/mrmeku","html_url":"https://github.com/mrmeku","followers_url":"https://api.github.com/users/mrmeku/followers","following_url":"https://api.github.com/users/mrmeku/following{/other_user}","gists_url":"https://api.github.com/users/mrmeku/gists{/gist_id}","starred_url":"https://api.github.com/users/mrmeku/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrmeku/subscriptions","organizations_url":"https://api.github.com/users/mrmeku/orgs","repos_url":"https://api.github.com/users/mrmeku/repos","events_url":"https://api.github.com/users/mrmeku/events{/privacy}","received_events_url":"https://api.github.com/users/mrmeku/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/facebook/jest/milestones/12","html_url":"https://github.com/facebook/jest/milestone/12","labels_url":"https://api.github.com/repos/facebook/jest/milestones/12/labels","id":5375234,"node_id":"MDk6TWlsZXN0b25lNTM3NTIzNA==","number":12,"title":"Jest 27","description":null,"creator":{"login":"jeysal","id":16069751,"node_id":"MDQ6VXNlcjE2MDY5NzUx","avatar_url":"https://avatars.githubusercontent.com/u/16069751?v=4","gravatar_id":"","url":"https://api.github.com/users/jeysal","html_url":"https://github.com/jeysal","followers_url":"https://api.github.com/users/jeysal/followers","following_url":"https://api.github.com/users/jeysal/following{/other_user}","gists_url":"https://api.github.com/users/jeysal/gists{/gist_id}","starred_url":"https://api.github.com/users/jeysal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeysal/subscriptions","organizations_url":"https://api.github.com/users/jeysal/orgs","repos_url":"https://api.github.com/users/jeysal/repos","events_url":"https://api.github.com/users/jeysal/events{/privacy}","received_events_url":"https://api.github.com/users/jeysal/received_events","type":"User","site_admin":false},"open_issues":0,"closed_issues":61,"state":"closed","created_at":"2020-05-02T19:43:47Z","updated_at":"2021-05-25T11:03:50Z","due_on":null,"closed_at":"2021-05-25T11:03:50Z"},"comments":50,"created_at":"2019-12-26T17:51:04Z","updated_at":"2021-05-10T21:06:37Z","closed_at":"2021-04-02T12:42:31Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/9351","html_url":"https://github.com/facebook/jest/pull/9351","diff_url":"https://github.com/facebook/jest/pull/9351.diff","patch_url":"https://github.com/facebook/jest/pull/9351.patch","merged_at":"2021-04-02T12:42:31Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md in the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\nJest haste maps test file crawler (see packages/jest-haste-map/src/crawlers/node.ts) uses the unix find command by default to find files whose name matches the testMatch pattern defined in jest.config.js. This works great for most cases, but works poorly when executing jest under bazel.\r\n\r\nIn bazel's execution environment, all source/test files are symlinked into a sandboxed directory rather than copied over directly. Jest's crawler is currently set up to use find's type flag to filter only for files. This excludes symlinked files\r\n\r\nUnder bazel I would expect my symlinked test files to be able to be crawled. This merely involves tweaking the command line args to find to include both files and symlinks `--type f` ---> `(--type f -o --type=l)`\r\n\r\n## Test plan\r\n\r\nI have already tested my fix against multiple bazel environments to verify that the fix enables jest to work properly for that test runner. The only risk of this change is that my adding support for crawling symlinks hampers performance of file crawling. If that is the case this behavior might be better off to be enabled behind a flag. But I do not suspect that there will be a performance hit. If reviewers have a mechanism for running jest bench marks I'm happy to create a repo filled with both files and symlinks and benchmarking the change. \r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/9351/reactions","total_count":18,"+1":18,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/9351/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"2220d15ea6b17af323cdce43e1b78d0a82847782","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -18,6 +18,7 @@\n - `[jest-environment-node]` Add AbortController to globals ([#11182](https://github.com/facebook/jest/pull/11182))\n - `[@jest/fake-timers]` Update to `@sinonjs/fake-timers` to v7 ([#11198](https://github.com/facebook/jest/pull/11198))\n - `[jest-haste-map]` Handle injected scm clocks ([#10966](https://github.com/facebook/jest/pull/10966))\n+- `[jest-haste-map]` Add `enableSymlinks` configuration option to follow symlinks for test files ([#9351](https://github.com/facebook/jest/pull/9351))\n - `[jest-repl, jest-runner]` [**BREAKING**] Run transforms over environment ([#8751](https://github.com/facebook/jest/pull/8751))\n - `[jest-runner]` [**BREAKING**] set exit code to 1 if test logs after teardown ([#10728](https://github.com/facebook/jest/pull/10728))\n - `[jest-runner]` [**BREAKING**] Run transforms over `runnner` ([#8823](https://github.com/facebook/jest/pull/8823))"},{"sha":"bfafee8d67ffe25e4ab44223a4d2d4986c1186d0","filename":"docs/Configuration.md","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/docs%2FConfiguration.md","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/docs%2FConfiguration.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FConfiguration.md?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -491,15 +491,21 @@ This will be used to configure the behavior of `jest-haste-map`, Jest's internal\n \n ```ts\n type HasteConfig = {\n-  // Whether to hash files using SHA-1.\n+  /** Whether to hash files using SHA-1. */\n   computeSha1?: boolean;\n-  // The platform to use as the default, e.g. 'ios'.\n+  /** The platform to use as the default, e.g. 'ios'. */\n   defaultPlatform?: string | null;\n-  // Path to a custom implementation of Haste.\n+  /**\n+   * Whether to follow symlinks when crawling for files.\n+   *   This options cannot be used in projects which use watchman.\n+   *   Projects with `watchman` set to true will error if this option is set to true.\n+   */\n+  enableSymlinks?: boolean;\n+  /** Path to a custom implementation of Haste. */\n   hasteImplModulePath?: string;\n-  // All platforms to target, e.g ['ios', 'android'].\n+  /** All platforms to target, e.g ['ios', 'android']. */\n   platforms?: Array<string>;\n-  // Whether to throw on error on module collision.\n+  /** Whether to throw on error on module collision. */\n   throwOnModuleCollision?: boolean;\n };\n ```"},{"sha":"f09fe7f39001d7ce58a0ae524c2424822d8539f5","filename":"e2e/__tests__/crawlSymlinks.test.ts","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/e2e%2F__tests__%2FcrawlSymlinks.test.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/e2e%2F__tests__%2FcrawlSymlinks.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2FcrawlSymlinks.test.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+import {tmpdir} from 'os';\n+import * as path from 'path';\n+import {wrap} from 'jest-snapshot-serializer-raw';\n+import {cleanup, writeFiles, writeSymlinks} from '../Utils';\n+import runJest from '../runJest';\n+\n+const DIR = path.resolve(tmpdir(), 'crawl-symlinks-test');\n+\n+beforeEach(() => {\n+  cleanup(DIR);\n+\n+  writeFiles(DIR, {\n+    'package.json': JSON.stringify({\n+      jest: {\n+        testMatch: ['<rootDir>/test-files/test.js'],\n+      },\n+    }),\n+    'symlinked-files/test.js': `\n+      test('1+1', () => {\n+        expect(1).toBe(1);\n+      });\n+    `,\n+  });\n+\n+  writeSymlinks(DIR, {\n+    'symlinked-files/test.js': 'test-files/test.js',\n+  });\n+});\n+\n+afterEach(() => {\n+  cleanup(DIR);\n+});\n+\n+test('Node crawler picks up symlinked files when option is set as flag', () => {\n+  // Symlinks are only enabled on windows with developer mode.\n+  // https://blogs.windows.com/windowsdeveloper/2016/12/02/symlinks-windows-10/\n+  if (process.platform === 'win32') {\n+    return;\n+  }\n+\n+  const {stdout, stderr, exitCode} = runJest(DIR, [\n+    '--haste={\"enableSymlinks\": true}',\n+    '--no-watchman',\n+  ]);\n+\n+  expect(stdout).toEqual('');\n+  expect(stderr).toContain('Test Suites: 1 passed, 1 total');\n+  expect(exitCode).toEqual(0);\n+});\n+\n+test('Node crawler does not pick up symlinked files by default', () => {\n+  const {stdout, stderr, exitCode} = runJest(DIR, ['--no-watchman']);\n+  expect(stdout).toContain('No tests found, exiting with code 1');\n+  expect(stderr).toEqual('');\n+  expect(exitCode).toEqual(1);\n+});\n+\n+test('Should throw if watchman used with haste.enableSymlinks', () => {\n+  // it should throw both if watchman is explicitly provided and not\n+  const run1 = runJest(DIR, ['--haste={\"enableSymlinks\": true}']);\n+  const run2 = runJest(DIR, ['--haste={\"enableSymlinks\": true}', '--watchman']);\n+\n+  expect(run1.exitCode).toEqual(run2.exitCode);\n+  expect(run1.stderr).toEqual(run2.stderr);\n+  expect(run1.stdout).toEqual(run2.stdout);\n+\n+  const {exitCode, stderr, stdout} = run1;\n+\n+  expect(stdout).toEqual('');\n+  expect(wrap(stderr)).toMatchInlineSnapshot(`\n+    Validation Error:\n+\n+    haste.enableSymlinks is incompatible with watchman\n+\n+    Either set haste.enableSymlinks to false or do not use watchman\n+  `);\n+  expect(exitCode).toEqual(1);\n+});"},{"sha":"515526e0ff8c5756c9c01b34c6e9b6ee5493bfee","filename":"packages/jest-config/src/ValidConfig.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2FValidConfig.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2FValidConfig.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FValidConfig.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -55,6 +55,7 @@ const initialOptions: Config.InitialOptions = {\n   haste: {\n     computeSha1: true,\n     defaultPlatform: 'ios',\n+    enableSymlinks: false,\n     hasteImplModulePath: '<rootDir>/haste_impl.js',\n     platforms: ['ios', 'android'],\n     throwOnModuleCollision: false,"},{"sha":"1000d1e10c14fbb8b8357ae749fe16200c103210","filename":"packages/jest-config/src/__tests__/normalize.test.ts","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2F__tests__%2Fnormalize.test.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2F__tests__%2Fnormalize.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2F__tests__%2Fnormalize.test.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -1842,3 +1842,26 @@ describe('extensionsToTreatAsEsm', () => {\n     );\n   });\n });\n+\n+describe('haste.enableSymlinks', () => {\n+  it('should throw if watchman is not disabled', async () => {\n+    await expect(\n+      normalize({haste: {enableSymlinks: true}, rootDir: '/root/'}, {}),\n+    ).rejects.toThrow('haste.enableSymlinks is incompatible with watchman');\n+\n+    await expect(\n+      normalize(\n+        {haste: {enableSymlinks: true}, rootDir: '/root/', watchman: true},\n+        {},\n+      ),\n+    ).rejects.toThrow('haste.enableSymlinks is incompatible with watchman');\n+\n+    const {options} = await normalize(\n+      {haste: {enableSymlinks: true}, rootDir: '/root/', watchman: false},\n+      {},\n+    );\n+\n+    expect(options.haste.enableSymlinks).toBe(true);\n+    expect(options.watchman).toBe(false);\n+  });\n+});"},{"sha":"2e561d181aeecaa7b660df00384ce87707790174","filename":"packages/jest-config/src/normalize.ts","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2Fnormalize.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2Fnormalize.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2Fnormalize.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -648,6 +648,10 @@ export default async function normalize(\n \n   validateExtensionsToTreatAsEsm(options.extensionsToTreatAsEsm);\n \n+  if (options.watchman == null) {\n+    options.watchman = DEFAULT_CONFIG.watchman;\n+  }\n+\n   const optionKeys = Object.keys(options) as Array<keyof Config.InitialOptions>;\n \n   optionKeys.reduce((newOptions, key: keyof Config.InitialOptions) => {\n@@ -1023,6 +1027,14 @@ export default async function normalize(\n     return newOptions;\n   }, newOptions);\n \n+  if (options.watchman && options.haste?.enableSymlinks) {\n+    throw new ValidationError(\n+      'Validation Error',\n+      'haste.enableSymlinks is incompatible with watchman',\n+      'Either set haste.enableSymlinks to false or do not use watchman',\n+    );\n+  }\n+\n   newOptions.roots.forEach((root, i) => {\n     verifyDirectoryExists(root, `roots[${i}]`);\n   });"},{"sha":"d400e73cbe686a0b177a8f444c011e474ec3eb05","filename":"packages/jest-haste-map/src/__tests__/index.test.js","status":"modified","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -84,6 +84,19 @@ let mockChangedFiles;\n let mockFs;\n \n jest.mock('graceful-fs', () => ({\n+  existsSync: jest.fn(path => {\n+    // A file change can be triggered by writing into the\n+    // mockChangedFiles object.\n+    if (mockChangedFiles && path in mockChangedFiles) {\n+      return true;\n+    }\n+\n+    if (mockFs[path]) {\n+      return true;\n+    }\n+\n+    return false;\n+  }),\n   readFileSync: jest.fn((path, options) => {\n     // A file change can be triggered by writing into the\n     // mockChangedFiles object.\n@@ -494,6 +507,42 @@ describe('HasteMap', () => {\n     expect(useBuitinsInContext(hasteMap.read())).toEqual(data);\n   });\n \n+  it('throws if both symlinks and watchman is enabled', () => {\n+    expect(\n+      () => new HasteMap({...defaultConfig, enableSymlinks: true}),\n+    ).toThrow(\n+      'Set either `enableSymlinks` to false or `useWatchman` to false.',\n+    );\n+    expect(\n+      () =>\n+        new HasteMap({\n+          ...defaultConfig,\n+          enableSymlinks: true,\n+          useWatchman: true,\n+        }),\n+    ).toThrow(\n+      'Set either `enableSymlinks` to false or `useWatchman` to false.',\n+    );\n+\n+    expect(\n+      () =>\n+        new HasteMap({\n+          ...defaultConfig,\n+          enableSymlinks: false,\n+          useWatchman: true,\n+        }),\n+    ).not.toThrow();\n+\n+    expect(\n+      () =>\n+        new HasteMap({\n+          ...defaultConfig,\n+          enableSymlinks: true,\n+          useWatchman: false,\n+        }),\n+    ).not.toThrow();\n+  });\n+\n   describe('builds a haste map on a fresh cache with SHA-1s', () => {\n     it.each([false, true])('uses watchman: %s', async useWatchman => {\n       const node = require('../crawlers/node');"},{"sha":"075498c4702ad8ccc54d34fe8f91f80ed10953c6","filename":"packages/jest-haste-map/src/crawlers/node.ts","status":"modified","additions":16,"deletions":5,"changes":21,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -60,6 +60,7 @@ function find(\n   roots: Array<string>,\n   extensions: Array<string>,\n   ignore: IgnoreMatcher,\n+  enableSymlinks: boolean,\n   callback: Callback,\n ): void {\n   const result: Result = [];\n@@ -98,7 +99,9 @@ function find(\n \n         activeCalls++;\n \n-        fs.lstat(file, (err, stat) => {\n+        const stat = enableSymlinks ? fs.stat : fs.lstat;\n+\n+        stat(file, (err, stat) => {\n           activeCalls--;\n \n           // This logic is unnecessary for node > v10.10, but leaving it in\n@@ -137,10 +140,16 @@ function findNative(\n   roots: Array<string>,\n   extensions: Array<string>,\n   ignore: IgnoreMatcher,\n+  enableSymlinks: boolean,\n   callback: Callback,\n ): void {\n   const args = Array.from(roots);\n-  args.push('-type', 'f');\n+  if (enableSymlinks) {\n+    args.push('(', '-type', 'f', '-o', '-type', 'l', ')');\n+  } else {\n+    args.push('-type', 'f');\n+  }\n+\n   if (extensions.length) {\n     args.push('(');\n   }\n@@ -177,7 +186,8 @@ function findNative(\n     } else {\n       lines.forEach(path => {\n         fs.stat(path, (err, stat) => {\n-          if (!err && stat) {\n+          // Filter out symlinks that describe directories\n+          if (!err && stat && !stat.isDirectory()) {\n             result.push([path, stat.mtime.getTime(), stat.size]);\n           }\n           if (--count === 0) {\n@@ -201,6 +211,7 @@ export = async function nodeCrawl(\n     forceNodeFilesystemAPI,\n     ignore,\n     rootDir,\n+    enableSymlinks,\n     roots,\n   } = options;\n \n@@ -231,9 +242,9 @@ export = async function nodeCrawl(\n     };\n \n     if (useNativeFind) {\n-      findNative(roots, extensions, ignore, callback);\n+      findNative(roots, extensions, ignore, enableSymlinks, callback);\n     } else {\n-      find(roots, extensions, ignore, callback);\n+      find(roots, extensions, ignore, enableSymlinks, callback);\n     }\n   });\n };"},{"sha":"5969c12df4847b7a011ed6778e2642225ac5293e","filename":"packages/jest-haste-map/src/index.ts","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -56,6 +56,7 @@ type Options = {\n   computeSha1?: boolean;\n   console?: Console;\n   dependencyExtractor?: string | null;\n+  enableSymlinks?: boolean;\n   extensions: Array<string>;\n   forceNodeFilesystemAPI?: boolean;\n   hasteImplModulePath?: string;\n@@ -79,6 +80,7 @@ type InternalOptions = {\n   computeDependencies: boolean;\n   computeSha1: boolean;\n   dependencyExtractor: string | null;\n+  enableSymlinks: boolean;\n   extensions: Array<string>;\n   forceNodeFilesystemAPI: boolean;\n   hasteImplModulePath?: string;\n@@ -227,6 +229,7 @@ export default class HasteMap extends EventEmitter {\n           : options.computeDependencies,\n       computeSha1: options.computeSha1 || false,\n       dependencyExtractor: options.dependencyExtractor || null,\n+      enableSymlinks: options.enableSymlinks || false,\n       extensions: options.extensions,\n       forceNodeFilesystemAPI: !!options.forceNodeFilesystemAPI,\n       hasteImplModulePath: options.hasteImplModulePath,\n@@ -262,6 +265,14 @@ export default class HasteMap extends EventEmitter {\n       this._options.ignorePattern = new RegExp(VCS_DIRECTORIES);\n     }\n \n+    if (this._options.enableSymlinks && this._options.useWatchman) {\n+      throw new Error(\n+        'jest-haste-map: enableSymlinks config option was set, but ' +\n+          'is incompatible with watchman.\\n' +\n+          'Set either `enableSymlinks` to false or `useWatchman` to false.',\n+      );\n+    }\n+\n     const rootDirHash = createHash('md5').update(options.rootDir).digest('hex');\n     let hasteImplHash = '';\n     let dependencyExtractorHash = '';\n@@ -725,6 +736,7 @@ export default class HasteMap extends EventEmitter {\n     const crawlerOptions: CrawlerOptions = {\n       computeSha1: options.computeSha1,\n       data: hasteMap,\n+      enableSymlinks: options.enableSymlinks,\n       extensions: options.extensions,\n       forceNodeFilesystemAPI: options.forceNodeFilesystemAPI,\n       ignore,"},{"sha":"106f209d9c68f1e6ef81721b941272ecdaefb333","filename":"packages/jest-haste-map/src/types.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Ftypes.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Ftypes.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Ftypes.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -30,6 +30,7 @@ export type WorkerMetadata = {\n \n export type CrawlerOptions = {\n   computeSha1: boolean;\n+  enableSymlinks: boolean;\n   data: InternalHasteMap;\n   extensions: Array<string>;\n   forceNodeFilesystemAPI: boolean;"},{"sha":"96b7e27febc7ecf147688b63fb1e3a6eae5a87b1","filename":"packages/jest-runtime/src/index.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-runtime%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-runtime%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Findex.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -319,6 +319,7 @@ export default class Runtime {\n       computeSha1: config.haste.computeSha1,\n       console: options && options.console,\n       dependencyExtractor: config.dependencyExtractor,\n+      enableSymlinks: config.haste.enableSymlinks,\n       extensions: [Snapshot.EXTENSION].concat(config.moduleFileExtensions),\n       hasteImplModulePath: config.haste.hasteImplModulePath,\n       ignorePattern,"},{"sha":"f620a3a081ce24b9f3e39747ebd40573c1563459","filename":"packages/jest-types/src/Config.ts","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-types%2Fsrc%2FConfig.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-types%2Fsrc%2FConfig.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-types%2Fsrc%2FConfig.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -22,6 +22,12 @@ export type HasteConfig = {\n   computeSha1?: boolean;\n   /** The platform to use as the default, e.g. 'ios'. */\n   defaultPlatform?: string | null;\n+  /**\n+   * Whether to follow symlinks when crawling for files.\n+   *   This options cannot be used in projects which use watchman.\n+   *   Projects with `watchman` set to true will error if this option is set to true.\n+   */\n+  enableSymlinks?: boolean;\n   /** Path to a custom implementation of Haste. */\n   hasteImplModulePath?: string;\n   /** All platforms to target, e.g ['ios', 'android']. */"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/7385","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/7385/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/7385/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/7385/events","html_url":"https://github.com/facebook/jest/pull/7385","id":382148149,"node_id":"MDExOlB1bGxSZXF1ZXN0MjMxOTIxMzcw","number":7385,"title":"Improve dependency extractor","user":{"login":"rubennorte","id":117921,"node_id":"MDQ6VXNlcjExNzkyMQ==","avatar_url":"https://avatars.githubusercontent.com/u/117921?v=4","gravatar_id":"","url":"https://api.github.com/users/rubennorte","html_url":"https://github.com/rubennorte","followers_url":"https://api.github.com/users/rubennorte/followers","following_url":"https://api.github.com/users/rubennorte/following{/other_user}","gists_url":"https://api.github.com/users/rubennorte/gists{/gist_id}","starred_url":"https://api.github.com/users/rubennorte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rubennorte/subscriptions","organizations_url":"https://api.github.com/users/rubennorte/orgs","repos_url":"https://api.github.com/users/rubennorte/repos","events_url":"https://api.github.com/users/rubennorte/events{/privacy}","received_events_url":"https://api.github.com/users/rubennorte/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":7,"created_at":"2018-11-19T10:26:53Z","updated_at":"2021-05-12T06:06:49Z","closed_at":"2018-11-19T12:28:31Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/7385","html_url":"https://github.com/facebook/jest/pull/7385","diff_url":"https://github.com/facebook/jest/pull/7385.diff","patch_url":"https://github.com/facebook/jest/pull/7385.patch","merged_at":"2018-11-19T12:28:31Z"},"body":"## Summary\r\n\r\nThis refactors the default dependency extractor to make regular expressions less error-prone (building them with a custom DSL) and fixes some bugs:\r\n\r\n1.  `require(\"foo\",)` (notice the trailing comma), which is completely valid, wasn't detected.\r\n2.  `import typeof {foo} from 'foo'` was detected as a dependency, when it should've been ignored like `import type {foo} from 'foo';`.\r\n\r\nIt also uses negative lookbehind when it's supported.\r\n\r\nPerformance-wise, it's faster than the previous version as it removes unnecessary capture groups (tested internally at Facebook).\r\n\r\n## Test plan\r\n\r\nUpdated unit tests.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/7385/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/7385/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"b4b9f192770a744a46ce835997aee592beb66e15","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/512b0e2b457a461171ae4da97eba49d83bda1b88/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/512b0e2b457a461171ae4da97eba49d83bda1b88/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=512b0e2b457a461171ae4da97eba49d83bda1b88","patch":"@@ -73,6 +73,7 @@\n - `[expect]` Fix toMatchObject matcher when used with `Object.create(null)` ([#7334](https://github.com/facebook/jest/pull/7334))\n - `[jest-haste-map]` [**BREAKING**] Recover files correctly after haste name collisions are fixed ([#7329](https://github.com/facebook/jest/pull/7329))\n - `[jest-haste-map]` Remove legacy condition for duplicate module detection ([#7333](https://github.com/facebook/jest/pull/7333))\n+- `[jest-haste-map]` Fix `require` detection with trailing commas and ignore `import typeof` modules ([#7385](https://github.com/facebook/jest/pull/7385))\n \n ### Chore & Maintenance\n \n@@ -110,6 +111,7 @@\n - `[jest-worker]` Standardize filenames ([#7316](https://github.com/facebook/jest/pull/7316))\n - `[pretty-format]` Standardize filenames ([#7316](https://github.com/facebook/jest/pull/7316))\n - `[*]` Add check for Facebook copyright headers on CI ([#7370](https://github.com/facebook/jest/pull/7370))\n+- `[jest-haste-map]` Refactor `dependencyExtractor` and tests ([#7385](https://github.com/facebook/jest/pull/7385))\n \n ### Performance\n "},{"sha":"085b0f6f4c21847f2bf3d3fefeb59b7f51d65841","filename":"packages/jest-haste-map/src/lib/__tests__/dependencyExtractor.js","status":"removed","additions":0,"deletions":127,"changes":127,"blob_url":"https://github.com/facebook/jest/blob/7b62b080ba304128a058281d7c3a3165f3fd283d/packages%2Fjest-haste-map%2Fsrc%2Flib%2F__tests__%2FdependencyExtractor.js","raw_url":"https://github.com/facebook/jest/raw/7b62b080ba304128a058281d7c3a3165f3fd283d/packages%2Fjest-haste-map%2Fsrc%2Flib%2F__tests__%2FdependencyExtractor.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Flib%2F__tests__%2FdependencyExtractor.js?ref=7b62b080ba304128a058281d7c3a3165f3fd283d","patch":"@@ -1,127 +0,0 @@\n-/**\n- * Copyright (c) 2015-present, Facebook, Inc.\n- * All rights reserved.\n- *\n- * This source code is licensed under the MIT license found in the\n- * LICENSE file in the root directory of this source tree.\n- *\n- * @flow\n- */\n-'use strict';\n-\n-import {extract as extractRequires} from '../dependencyExtractor';\n-\n-it('extracts both requires and imports from code', () => {\n-  const code = `\n-      import module1 from 'module1';\n-      const module2 = require('module2');\n-      import('module3').then(module3 => {})';\n-    `;\n-\n-  expect(extractRequires(code)).toEqual(\n-    new Set(['module1', 'module2', 'module3']),\n-  );\n-});\n-\n-it('extracts requires in order', () => {\n-  const code = `\n-      const module1 = require('module1');\n-      const module2 = require('module2');\n-      const module3 = require('module3');\n-    `;\n-\n-  expect(extractRequires(code)).toEqual(\n-    new Set(['module1', 'module2', 'module3']),\n-  );\n-});\n-\n-it('strips out comments from code', () => {\n-  const code = `// comment const module2 = require('module2');`;\n-\n-  expect(extractRequires(code)).toEqual(new Set([]));\n-});\n-\n-it('ignores requires in comments', () => {\n-  const code = [\n-    '// const module1 = require(\"module1\");',\n-    '/**',\n-    ' * const module2 = require(\"module2\");',\n-    ' */',\n-  ].join('\\n');\n-\n-  expect(extractRequires(code)).toEqual(new Set([]));\n-});\n-\n-it('ignores requires in comments with Windows line endings', () => {\n-  const code = [\n-    '// const module1 = require(\"module1\");',\n-    '/**',\n-    ' * const module2 = require(\"module2\");',\n-    ' */',\n-  ].join('\\r\\n');\n-\n-  expect(extractRequires(code)).toEqual(new Set([]));\n-});\n-\n-it('ignores requires in comments with unicode line endings', () => {\n-  const code = [\n-    '// const module1 = require(\"module1\");\\u2028',\n-    '// const module1 = require(\"module2\");\\u2029',\n-    '/*\\u2028',\n-    'const module2 = require(\"module3\");\\u2029',\n-    ' */',\n-  ].join('');\n-\n-  expect(extractRequires(code)).toEqual(new Set([]));\n-});\n-\n-it('does not contain duplicates', () => {\n-  const code = `\n-      const module1 = require('module1');\n-      const module1Dup = require('module1');\n-    `;\n-\n-  expect(extractRequires(code)).toEqual(new Set(['module1']));\n-});\n-\n-it('ignores type imports', () => {\n-  const code = [\n-    \"import type foo from 'bar';\",\n-    'import type {',\n-    '  bar,',\n-    '  baz,',\n-    \"} from 'wham'\",\n-  ].join('\\r\\n');\n-\n-  expect(extractRequires(code)).toEqual(new Set([]));\n-});\n-\n-it('ignores type exports', () => {\n-  const code = [\n-    'export type Foo = number;',\n-    'export default {}',\n-    \"export * from 'module1'\",\n-  ].join('\\r\\n');\n-\n-  expect(extractRequires(code)).toEqual(new Set(['module1']));\n-});\n-\n-it('understands require.requireActual', () => {\n-  const code = `require.requireActual('pizza');`;\n-  expect(extractRequires(code)).toEqual(new Set(['pizza']));\n-});\n-\n-it('understands jest.requireActual', () => {\n-  const code = `jest.requireActual('whiskey');`;\n-  expect(extractRequires(code)).toEqual(new Set(['whiskey']));\n-});\n-\n-it('understands require.requireMock', () => {\n-  const code = `require.requireMock('cheeseburger');`;\n-  expect(extractRequires(code)).toEqual(new Set(['cheeseburger']));\n-});\n-\n-it('understands jest.requireMock', () => {\n-  const code = `jest.requireMock('scotch');`;\n-  expect(extractRequires(code)).toEqual(new Set(['scotch']));\n-});"},{"sha":"7d10e43b2ea7821314ea82b04775d3c6ebba5a1c","filename":"packages/jest-haste-map/src/lib/__tests__/dependencyExtractor.test.js","status":"added","additions":267,"deletions":0,"changes":267,"blob_url":"https://github.com/facebook/jest/blob/512b0e2b457a461171ae4da97eba49d83bda1b88/packages%2Fjest-haste-map%2Fsrc%2Flib%2F__tests__%2FdependencyExtractor.test.js","raw_url":"https://github.com/facebook/jest/raw/512b0e2b457a461171ae4da97eba49d83bda1b88/packages%2Fjest-haste-map%2Fsrc%2Flib%2F__tests__%2FdependencyExtractor.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Flib%2F__tests__%2FdependencyExtractor.test.js?ref=512b0e2b457a461171ae4da97eba49d83bda1b88","patch":"@@ -0,0 +1,267 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+import {extract} from '../dependencyExtractor';\n+import isRegExpSupported from '../isRegExpSupported';\n+\n+const COMMENT_NO_NEG_LB = isRegExpSupported('(?<!\\\\.\\\\s*)') ? '' : '//';\n+\n+describe('dependencyExtractor', () => {\n+  it('should not extract dependencies inside comments', () => {\n+    const code = `\n+      // import a from 'ignore-line-comment';\n+      // require('ignore-line-comment');\n+      /*\n+       * import a from 'ignore-block-comment';\n+       * require('ignore-block-comment');\n+       */\n+    `;\n+    expect(extract(code)).toEqual(new Set());\n+  });\n+\n+  it('should not extract dependencies inside comments (windows line endings)', () => {\n+    const code = [\n+      '// const module1 = require(\"module1\");',\n+      '/**',\n+      ' * const module2 = require(\"module2\");',\n+      ' */',\n+    ].join('\\r\\n');\n+\n+    expect(extract(code)).toEqual(new Set([]));\n+  });\n+\n+  it('should not extract dependencies inside comments (unicode line endings)', () => {\n+    const code = [\n+      '// const module1 = require(\"module1\");\\u2028',\n+      '// const module1 = require(\"module2\");\\u2029',\n+      '/*\\u2028',\n+      'const module2 = require(\"module3\");\\u2029',\n+      ' */',\n+    ].join('');\n+\n+    expect(extract(code)).toEqual(new Set([]));\n+  });\n+\n+  it('should extract dependencies from `import` statements', () => {\n+    const code = `\n+      // Good\n+      import * as depNS from 'dep1';\n+      import {\n+        a as aliased_a,\n+        b,\n+      } from 'dep2';\n+      import depDefault from 'dep3';\n+      import * as depNS, {\n+        a as aliased_a,\n+        b,\n+      }, depDefault from 'dep4';\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} foo . import ('inv1');\n+      ${COMMENT_NO_NEG_LB} foo . export ('inv2');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3', 'dep4']));\n+  });\n+\n+  it('should not extract dependencies from `import type/typeof` statements', () => {\n+    const code = `\n+      // Bad\n+      import typeof {foo} from 'inv1';\n+      import type {foo} from 'inv2';\n+    `;\n+    expect(extract(code)).toEqual(new Set([]));\n+  });\n+\n+  it('should extract dependencies from `export` statements', () => {\n+    const code = `\n+      // Good\n+      export * as depNS from 'dep1';\n+      export {\n+        a as aliased_a,\n+        b,\n+      } from 'dep2';\n+      export depDefault from 'dep3';\n+      export * as depNS, {\n+        a as aliased_a,\n+        b,\n+      }, depDefault from 'dep4';\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} foo . export ('inv1');\n+      ${COMMENT_NO_NEG_LB} foo . export ('inv2');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3', 'dep4']));\n+  });\n+\n+  it('should extract dependencies from `export-from` statements', () => {\n+    const code = `\n+      // Good\n+      export * as depNS from 'dep1';\n+      export {\n+        a as aliased_a,\n+        b,\n+      } from 'dep2';\n+      export depDefault from 'dep3';\n+      export * as depNS, {\n+        a as aliased_a,\n+        b,\n+      }, depDefault from 'dep4';\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} foo . export ('inv1');\n+      ${COMMENT_NO_NEG_LB} foo . export ('inv2');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3', 'dep4']));\n+  });\n+\n+  it('should not extract dependencies from `export type/typeof` statements', () => {\n+    const code = `\n+      // Bad\n+      export typeof {foo} from 'inv1';\n+      export type {foo} from 'inv2';\n+    `;\n+    expect(extract(code)).toEqual(new Set([]));\n+  });\n+\n+  it('should extract dependencies from dynamic `import` calls', () => {\n+    const code = `\n+      // Good\n+      import('dep1').then();\n+      const dep2 = await import(\n+        \"dep2\",\n+      );\n+      if (await import(\\`dep3\\`)) {}\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} await foo . import('inv1')\n+      await ximport('inv2');\n+      importx('inv3');\n+      import('inv4', 'inv5');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3']));\n+  });\n+\n+  it('should extract dependencies from `require` calls', () => {\n+    const code = `\n+      // Good\n+      require('dep1');\n+      const dep2 = require(\n+        \"dep2\",\n+      );\n+      if (require(\\`dep3\\`).cond) {}\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} foo . require('inv1')\n+      xrequire('inv2');\n+      requirex('inv3');\n+      require('inv4', 'inv5');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3']));\n+  });\n+\n+  it('should extract dependencies from `require.requireActual` calls', () => {\n+    const code = `\n+      // Good\n+      require.requireActual('dep1');\n+      const dep2 = require.requireActual(\n+        \"dep2\",\n+      );\n+      if (require.requireActual(\\`dep3\\`).cond) {}\n+      require\n+        .requireActual('dep4');\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} foo . require.requireActual('inv1')\n+      xrequire.requireActual('inv2');\n+      require.requireActualx('inv3');\n+      require.requireActual('inv4', 'inv5');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3', 'dep4']));\n+  });\n+\n+  it('should extract dependencies from `require.requireMock` calls', () => {\n+    const code = `\n+      // Good\n+      require.requireMock('dep1');\n+      const dep2 = require.requireMock(\n+        \"dep2\",\n+      );\n+      if (require.requireMock(\\`dep3\\`).cond) {}\n+      require\n+        .requireMock('dep4');\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} foo . require.requireMock('inv1')\n+      xrequire.requireMock('inv2');\n+      require.requireMockx('inv3');\n+      require.requireMock('inv4', 'inv5');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3', 'dep4']));\n+  });\n+\n+  it('should extract dependencies from `jest.requireActual` calls', () => {\n+    const code = `\n+      // Good\n+      jest.requireActual('dep1');\n+      const dep2 = jest.requireActual(\n+        \"dep2\",\n+      );\n+      if (jest.requireActual(\\`dep3\\`).cond) {}\n+      require\n+        .requireActual('dep4');\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} foo . jest.requireActual('inv1')\n+      xjest.requireActual('inv2');\n+      jest.requireActualx('inv3');\n+      jest.requireActual('inv4', 'inv5');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3', 'dep4']));\n+  });\n+\n+  it('should extract dependencies from `jest.requireMock` calls', () => {\n+    const code = `\n+      // Good\n+      jest.requireMock('dep1');\n+      const dep2 = jest.requireMock(\n+        \"dep2\",\n+      );\n+      if (jest.requireMock(\\`dep3\\`).cond) {}\n+      require\n+        .requireMock('dep4');\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} foo . jest.requireMock('inv1')\n+      xjest.requireMock('inv2');\n+      jest.requireMockx('inv3');\n+      jest.requireMock('inv4', 'inv5');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3', 'dep4']));\n+  });\n+\n+  it('should extract dependencies from `jest.genMockFromModule` calls', () => {\n+    const code = `\n+      // Good\n+      jest.genMockFromModule('dep1');\n+      const dep2 = jest.genMockFromModule(\n+        \"dep2\",\n+      );\n+      if (jest.genMockFromModule(\\`dep3\\`).cond) {}\n+      require\n+        .requireMock('dep4');\n+\n+      // Bad\n+      ${COMMENT_NO_NEG_LB} foo . jest.genMockFromModule('inv1')\n+      xjest.genMockFromModule('inv2');\n+      jest.genMockFromModulex('inv3');\n+      jest.genMockFromModule('inv4', 'inv5');\n+    `;\n+    expect(extract(code)).toEqual(new Set(['dep1', 'dep2', 'dep3', 'dep4']));\n+  });\n+});"},{"sha":"5408244073c9f6b7f413727da368f5092a944577","filename":"packages/jest-haste-map/src/lib/__tests__/isRegExpSupported.test.js","status":"added","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/facebook/jest/blob/512b0e2b457a461171ae4da97eba49d83bda1b88/packages%2Fjest-haste-map%2Fsrc%2Flib%2F__tests__%2FisRegExpSupported.test.js","raw_url":"https://github.com/facebook/jest/raw/512b0e2b457a461171ae4da97eba49d83bda1b88/packages%2Fjest-haste-map%2Fsrc%2Flib%2F__tests__%2FisRegExpSupported.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Flib%2F__tests__%2FisRegExpSupported.test.js?ref=512b0e2b457a461171ae4da97eba49d83bda1b88","patch":"@@ -0,0 +1,20 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+import isRegExpSupported from '../isRegExpSupported';\n+\n+describe('isRegExpSupported', () => {\n+  it('should return true when passing valid regular expression', () => {\n+    expect(isRegExpSupported('(?:foo|bar)')).toBe(true);\n+  });\n+\n+  it('should return false when passing an invalid regular expression', () => {\n+    expect(isRegExpSupported('(?_foo|bar)')).toBe(false);\n+  });\n+});"},{"sha":"038e6084c2ce7ad1aee6f0d3521e12d5421e7d32","filename":"packages/jest-haste-map/src/lib/dependencyExtractor.js","status":"modified","additions":73,"deletions":17,"changes":90,"blob_url":"https://github.com/facebook/jest/blob/512b0e2b457a461171ae4da97eba49d83bda1b88/packages%2Fjest-haste-map%2Fsrc%2Flib%2FdependencyExtractor.js","raw_url":"https://github.com/facebook/jest/raw/512b0e2b457a461171ae4da97eba49d83bda1b88/packages%2Fjest-haste-map%2Fsrc%2Flib%2FdependencyExtractor.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Flib%2FdependencyExtractor.js?ref=512b0e2b457a461171ae4da97eba49d83bda1b88","patch":"@@ -7,32 +7,88 @@\n  * @flow\n  */\n \n-const blockCommentRe = /\\/\\*[^]*?\\*\\//g;\n-const lineCommentRe = /\\/\\/.*/g;\n+import isRegExpSupported from './isRegExpSupported';\n \n-const replacePatterns = {\n-  DYNAMIC_IMPORT_RE: /(?:^|[^.]\\s*)(\\bimport\\s*?\\(\\s*?)([`'\"])([^`'\"]+)(\\2\\s*?\\))/g,\n-  EXPORT_RE: /(\\bexport\\s+(?!type )(?:[^'\"]+\\s+from\\s+)??)(['\"])([^'\"]+)(\\2)/g,\n-  IMPORT_RE: /(\\bimport\\s+(?!type )(?:[^'\"]+\\s+from\\s+)??)(['\"])([^'\"]+)(\\2)/g,\n-  REQUIRE_EXTENSIONS_PATTERN: /(?:^|[^.]\\s*)(\\b(?:require\\s*?\\.\\s*?(?:requireActual|requireMock)|jest\\s*?\\.\\s*?(?:requireActual|requireMock|genMockFromModule))\\s*?\\(\\s*?)([`'\"])([^`'\"]+)(\\2\\s*?\\))/g,\n-  REQUIRE_RE: /(?:^|[^.]\\s*)(\\brequire\\s*?\\(\\s*?)([`'\"])([^`'\"]+)(\\2\\s*?\\))/g,\n-};\n+// Negative look behind is only supported in Node 9+\n+const NOT_A_DOT = isRegExpSupported('(?<!\\\\.\\\\s*)')\n+  ? '(?<!\\\\.\\\\s*)'\n+  : '(?:^|[^.]\\\\s*)';\n+const CAPTURE_STRING_LITERAL = pos => `([\\`'\"])([^'\"\\`]*?)(?:\\\\${pos})`;\n+const WORD_SEPARATOR = '\\\\b';\n+const LEFT_PARENTHESIS = '\\\\(';\n+const RIGHT_PARENTHESIS = '\\\\)';\n+const WHITESPACE = '\\\\s*';\n+const OPTIONAL_COMMA = '(:?,\\\\s*)?';\n+\n+function createRegExp(parts, flags) {\n+  return new RegExp(parts.join(''), flags);\n+}\n+\n+function alternatives(...parts) {\n+  return `(?:${parts.join('|')})`;\n+}\n+\n+function functionCallStart(...names) {\n+  return [\n+    NOT_A_DOT,\n+    WORD_SEPARATOR,\n+    alternatives(...names),\n+    WHITESPACE,\n+    LEFT_PARENTHESIS,\n+    WHITESPACE,\n+  ];\n+}\n+\n+const BLOCK_COMMENT_RE = /\\/\\*[^]*?\\*\\//g;\n+const LINE_COMMENT_RE = /\\/\\/.*/g;\n+\n+const REQUIRE_OR_DYNAMIC_IMPORT_RE = createRegExp(\n+  [\n+    ...functionCallStart('require', 'import'),\n+    CAPTURE_STRING_LITERAL(1),\n+    WHITESPACE,\n+    OPTIONAL_COMMA,\n+    RIGHT_PARENTHESIS,\n+  ],\n+  'g',\n+);\n+\n+const IMPORT_OR_EXPORT_RE = createRegExp(\n+  [\n+    '\\\\b(?:import|export)\\\\s+(?!type(?:of)?\\\\s+)[^\\'\"]+\\\\s+from\\\\s+',\n+    CAPTURE_STRING_LITERAL(1),\n+  ],\n+  'g',\n+);\n+\n+const JEST_EXTENSIONS_RE = createRegExp(\n+  [\n+    ...functionCallStart(\n+      'require\\\\s*\\\\.\\\\s*(?:requireActual|requireMock)',\n+      'jest\\\\s*\\\\.\\\\s*(?:requireActual|requireMock|genMockFromModule)',\n+    ),\n+    CAPTURE_STRING_LITERAL(1),\n+    WHITESPACE,\n+    OPTIONAL_COMMA,\n+    RIGHT_PARENTHESIS,\n+  ],\n+  'g',\n+);\n \n export function extract(code: string): Set<string> {\n   const dependencies = new Set();\n-  const addDependency = (match, pre, quot, dep, post) => {\n+\n+  const addDependency = (match: string, q: string, dep: string) => {\n     dependencies.add(dep);\n     return match;\n   };\n \n   code\n-    .replace(blockCommentRe, '')\n-    .replace(lineCommentRe, '')\n-    .replace(replacePatterns.EXPORT_RE, addDependency)\n-    .replace(replacePatterns.IMPORT_RE, addDependency)\n-    .replace(replacePatterns.REQUIRE_EXTENSIONS_PATTERN, addDependency)\n-    .replace(replacePatterns.REQUIRE_RE, addDependency)\n-    .replace(replacePatterns.DYNAMIC_IMPORT_RE, addDependency);\n+    .replace(BLOCK_COMMENT_RE, '')\n+    .replace(LINE_COMMENT_RE, '')\n+    .replace(IMPORT_OR_EXPORT_RE, addDependency)\n+    .replace(REQUIRE_OR_DYNAMIC_IMPORT_RE, addDependency)\n+    .replace(JEST_EXTENSIONS_RE, addDependency);\n \n   return dependencies;\n }"},{"sha":"d20cb1a6e21e576019828393889a0a42776b68a4","filename":"packages/jest-haste-map/src/lib/isRegExpSupported.js","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/facebook/jest/blob/512b0e2b457a461171ae4da97eba49d83bda1b88/packages%2Fjest-haste-map%2Fsrc%2Flib%2FisRegExpSupported.js","raw_url":"https://github.com/facebook/jest/raw/512b0e2b457a461171ae4da97eba49d83bda1b88/packages%2Fjest-haste-map%2Fsrc%2Flib%2FisRegExpSupported.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Flib%2FisRegExpSupported.js?ref=512b0e2b457a461171ae4da97eba49d83bda1b88","patch":"@@ -0,0 +1,18 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+export default function isRegExpSupported(value: string): boolean {\n+  try {\n+    // eslint-disable-next-line no-new\n+    new RegExp(value);\n+    return true;\n+  } catch (e) {\n+    return false;\n+  }\n+}"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8416","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8416/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8416/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8416/events","html_url":"https://github.com/facebook/jest/pull/8416","id":440203004,"node_id":"MDExOlB1bGxSZXF1ZXN0Mjc1ODM0OTQx","number":8416,"title":"[jest-get-type] Simplify checking for primitive","user":{"login":"Connormiha","id":4091305,"node_id":"MDQ6VXNlcjQwOTEzMDU=","avatar_url":"https://avatars.githubusercontent.com/u/4091305?v=4","gravatar_id":"","url":"https://api.github.com/users/Connormiha","html_url":"https://github.com/Connormiha","followers_url":"https://api.github.com/users/Connormiha/followers","following_url":"https://api.github.com/users/Connormiha/following{/other_user}","gists_url":"https://api.github.com/users/Connormiha/gists{/gist_id}","starred_url":"https://api.github.com/users/Connormiha/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Connormiha/subscriptions","organizations_url":"https://api.github.com/users/Connormiha/orgs","repos_url":"https://api.github.com/users/Connormiha/repos","events_url":"https://api.github.com/users/Connormiha/events{/privacy}","received_events_url":"https://api.github.com/users/Connormiha/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-05-03T20:11:02Z","updated_at":"2021-05-11T19:09:16Z","closed_at":"2019-05-04T18:31:03Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8416","html_url":"https://github.com/facebook/jest/pull/8416","diff_url":"https://github.com/facebook/jest/pull/8416.diff","patch_url":"https://github.com/facebook/jest/pull/8416.patch","merged_at":"2019-05-04T18:31:03Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md in the root of the project if you have not done so. -->\r\n\r\n## Summary\r\nI just simplified checking for primitive type and improve performance.\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n## Test plan\r\nThere were already tests, but I added some more\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8416/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8416/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"f15799a36f47655e54bddc8d4155e1c2d15db43c","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/1ec9cbc590d0ed44b9f39695db03dc9f34fbebec/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/1ec9cbc590d0ed44b9f39695db03dc9f34fbebec/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=1ec9cbc590d0ed44b9f39695db03dc9f34fbebec","patch":"@@ -41,6 +41,7 @@\n - `[jest-runtime]` Fix module registry memory leak ([#8282](https://github.com/facebook/jest/pull/8282))\n - `[jest-resolve]` optimize resolve module path ([#8388](https://github.com/facebook/jest/pull/8388))\n - `[jest-resolve]` cache current directory ([#8412](https://github.com/facebook/jest/pull/8412))\n+- `[jest-get-type]` Simplify checking for primitive ([#8416](https://github.com/facebook/jest/pull/8416))\n \n ## 24.7.1\n "},{"sha":"1428cbc3e4350f4c51f8d886bb1437b79052eba6","filename":"packages/jest-get-type/src/__tests__/isPrimitive.test.ts","status":"modified","additions":25,"deletions":12,"changes":37,"blob_url":"https://github.com/facebook/jest/blob/1ec9cbc590d0ed44b9f39695db03dc9f34fbebec/packages%2Fjest-get-type%2Fsrc%2F__tests__%2FisPrimitive.test.ts","raw_url":"https://github.com/facebook/jest/raw/1ec9cbc590d0ed44b9f39695db03dc9f34fbebec/packages%2Fjest-get-type%2Fsrc%2F__tests__%2FisPrimitive.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-get-type%2Fsrc%2F__tests__%2FisPrimitive.test.ts?ref=1ec9cbc590d0ed44b9f39695db03dc9f34fbebec","patch":"@@ -9,17 +9,30 @@\n import {isPrimitive} from '..';\n \n describe('.isPrimitive()', () => {\n-  test.each([null, undefined, 100, 'hello world', true, Symbol.for('a')])(\n-    'returns true when given primitive value of: %s',\n-    primitive => {\n-      expect(isPrimitive(primitive)).toBe(true);\n-    },\n-  );\n+  test.each([\n+    null,\n+    undefined,\n+    100,\n+    'hello world',\n+    true,\n+    Symbol.for('a'),\n+    0,\n+    NaN,\n+    Infinity,\n+  ])('returns true when given primitive value of: %s', primitive => {\n+    expect(isPrimitive(primitive)).toBe(true);\n+  });\n \n-  test.each([{}, [], () => {}, /abc/, new Map(), new Set(), new Date()])(\n-    'returns false when given non primitive value of: %s',\n-    value => {\n-      expect(isPrimitive(value)).toBe(false);\n-    },\n-  );\n+  test.each([\n+    {},\n+    [],\n+    () => {},\n+    /abc/,\n+    new Map(),\n+    new Set(),\n+    new Date(),\n+    Object.create(null),\n+  ])('returns false when given non primitive value of: %j', value => {\n+    expect(isPrimitive(value)).toBe(false);\n+  });\n });"},{"sha":"fde928fcc337c874eb0e22d0bc4d48954f722c34","filename":"packages/jest-get-type/src/index.ts","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/facebook/jest/blob/1ec9cbc590d0ed44b9f39695db03dc9f34fbebec/packages%2Fjest-get-type%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/1ec9cbc590d0ed44b9f39695db03dc9f34fbebec/packages%2Fjest-get-type%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-get-type%2Fsrc%2Findex.ts?ref=1ec9cbc590d0ed44b9f39695db03dc9f34fbebec","patch":"@@ -20,15 +20,6 @@ type ValueType =\n   | 'symbol'\n   | 'undefined';\n \n-const PRIMITIVES = new Set<ValueType>([\n-  'string',\n-  'number',\n-  'boolean',\n-  'null',\n-  'undefined',\n-  'symbol',\n-]);\n-\n // get the type of a value with handling the edge cases like `typeof []`\n // and `typeof null`\n function getType(value: unknown): ValueType {\n@@ -66,6 +57,6 @@ function getType(value: unknown): ValueType {\n   throw new Error(`value of unknown type: ${value}`);\n }\n \n-getType.isPrimitive = (value: unknown) => PRIMITIVES.has(getType(value));\n+getType.isPrimitive = (value: unknown) => Object(value) !== value;\n \n export = getType;"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/3969","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/3969/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/3969/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/3969/events","html_url":"https://github.com/facebook/jest/pull/3969","id":240828354,"node_id":"MDExOlB1bGxSZXF1ZXN0MTI5MDkyNTA0","number":3969,"title":"multiroot jest-change-files","user":{"login":"aaronabramov","id":940133,"node_id":"MDQ6VXNlcjk0MDEzMw==","avatar_url":"https://avatars.githubusercontent.com/u/940133?v=4","gravatar_id":"","url":"https://api.github.com/users/aaronabramov","html_url":"https://github.com/aaronabramov","followers_url":"https://api.github.com/users/aaronabramov/followers","following_url":"https://api.github.com/users/aaronabramov/following{/other_user}","gists_url":"https://api.github.com/users/aaronabramov/gists{/gist_id}","starred_url":"https://api.github.com/users/aaronabramov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aaronabramov/subscriptions","organizations_url":"https://api.github.com/users/aaronabramov/orgs","repos_url":"https://api.github.com/users/aaronabramov/repos","events_url":"https://api.github.com/users/aaronabramov/events{/privacy}","received_events_url":"https://api.github.com/users/aaronabramov/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-07-06T02:37:40Z","updated_at":"2021-05-13T11:06:59Z","closed_at":"2017-07-06T22:43:44Z","author_association":"MEMBER","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/3969","html_url":"https://github.com/facebook/jest/pull/3969","diff_url":"https://github.com/facebook/jest/pull/3969.diff","patch_url":"https://github.com/facebook/jest/pull/3969.patch","merged_at":"2017-07-06T22:43:44Z"},"body":"first step towards optimizing performance of this module.\r\n\r\nthe problem we hit at fb is that we have too many roots specified for every project, and we had to get changed files for each root.\r\nNow all roots are first resolved to a SCM root and deduped, so we'll be querying SCM only once per context.\r\n\r\nincludes a shitload of tests and types.\r\n\r\ntodo (followup PRs):\r\n- [ ] Share results between context (`www`, `mobile` are in the same repo and will give different results, but with the current implementation it'll do one request for every context)\r\n- [ ] Start fetching the result as soon as possible, before any of the hastemap stuff is generated (might be happening already, haven't looked into it yet)","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/3969/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/3969/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"73ac913d2c6c3c8962969dcce8316b4a24da1e0f","filename":"integration_tests/__tests__/jest_changed_files.test.js","status":"added","additions":237,"deletions":0,"changes":237,"blob_url":"https://github.com/facebook/jest/blob/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/integration_tests%2F__tests__%2Fjest_changed_files.test.js","raw_url":"https://github.com/facebook/jest/raw/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/integration_tests%2F__tests__%2Fjest_changed_files.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/integration_tests%2F__tests__%2Fjest_changed_files.test.js?ref=0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f","patch":"@@ -0,0 +1,237 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ */\n+\n+'use strict';\n+\n+import {cleanup, run, writeFiles} from '../utils';\n+import os from 'os';\n+import path from 'path';\n+import {\n+  findRepos,\n+  getChangedFilesForRoots,\n+} from '../../packages/jest-changed-files/src';\n+\n+const skipOnWindows = require('skipOnWindows');\n+skipOnWindows.suite();\n+\n+const DIR = path.resolve(os.tmpdir(), 'jest_changed_files_test_dir');\n+\n+const GIT = 'git -c user.name=jest_test -c user.email=jest_test@test.com';\n+const HG = 'hg --config ui.username=jest_test';\n+\n+beforeEach(() => cleanup(DIR));\n+afterEach(() => cleanup(DIR));\n+\n+test('gets hg SCM roots and dedups them', async () => {\n+  writeFiles(DIR, {\n+    'first_repo/file1.txt': 'file1',\n+    'first_repo/nested_dir/file2.txt': 'file2',\n+    'first_repo/nested_dir/second_nested_dir/file3.txt': 'file3',\n+    'second_repo/file1.txt': 'file1',\n+    'second_repo/nested_dir/file2.txt': 'file2',\n+    'second_repo/nested_dir/second_nested_dir/file3.txt': 'file3',\n+  });\n+\n+  run(`${HG} init`, path.resolve(DIR, 'first_repo'));\n+  run(`${HG} init`, path.resolve(DIR, 'second_repo'));\n+\n+  const roots = [\n+    '',\n+    'first_repo/nested_dir',\n+    'first_repo/nested_dir/second_nested_dir',\n+    'second_repo/nested_dir',\n+    'second_repo/nested_dir/second_nested_dir',\n+  ].map(filename => path.resolve(DIR, filename));\n+\n+  const repos = await findRepos(roots);\n+  expect(repos.git.size).toBe(0);\n+\n+  const hgRepos = Array.from(repos.hg);\n+\n+  // it's not possible to match the exact path because it will resolve\n+  // differently on different platforms.\n+  // NOTE: This test can break if you have a .hg repo initialized inside your\n+  // os tmp directory.\n+  expect(hgRepos).toHaveLength(2);\n+  expect(hgRepos[0]).toMatch(/\\/jest_changed_files_test_dir\\/first_repo$/);\n+  expect(hgRepos[1]).toMatch(/\\/jest_changed_files_test_dir\\/second_repo$/);\n+});\n+\n+test('gets git SCM roots and dedups them', async () => {\n+  writeFiles(DIR, {\n+    'first_repo/file1.txt': 'file1',\n+    'first_repo/nested_dir/file2.txt': 'file2',\n+    'first_repo/nested_dir/second_nested_dir/file3.txt': 'file3',\n+    'second_repo/file1.txt': 'file1',\n+    'second_repo/nested_dir/file2.txt': 'file2',\n+    'second_repo/nested_dir/second_nested_dir/file3.txt': 'file3',\n+  });\n+\n+  run(`${GIT} init`, path.resolve(DIR, 'first_repo'));\n+  run(`${GIT} init`, path.resolve(DIR, 'second_repo'));\n+\n+  const roots = [\n+    '',\n+    'first_repo/nested_dir',\n+    'first_repo/nested_dir/second_nested_dir',\n+    'second_repo/nested_dir',\n+    'second_repo/nested_dir/second_nested_dir',\n+  ].map(filename => path.resolve(DIR, filename));\n+\n+  const repos = await findRepos(roots);\n+  expect(repos.hg.size).toBe(0);\n+  const gitRepos = Array.from(repos.git);\n+\n+  // it's not possible to match the exact path because it will resolve\n+  // differently on different platforms.\n+  // NOTE: This test can break if you have a .git repo initialized inside your\n+  // os tmp directory.\n+  expect(gitRepos).toHaveLength(2);\n+  expect(gitRepos[0]).toMatch(/\\/jest_changed_files_test_dir\\/first_repo$/);\n+  expect(gitRepos[1]).toMatch(/\\/jest_changed_files_test_dir\\/second_repo$/);\n+});\n+\n+test('gets mixed git and hg SCM roots and dedups them', async () => {\n+  writeFiles(DIR, {\n+    'first_repo/file1.txt': 'file1',\n+    'first_repo/nested_dir/file2.txt': 'file2',\n+    'first_repo/nested_dir/second_nested_dir/file3.txt': 'file3',\n+    'second_repo/file1.txt': 'file1',\n+    'second_repo/nested_dir/file2.txt': 'file2',\n+    'second_repo/nested_dir/second_nested_dir/file3.txt': 'file3',\n+  });\n+\n+  run(`${GIT} init`, path.resolve(DIR, 'first_repo'));\n+  run(`${HG} init`, path.resolve(DIR, 'second_repo'));\n+\n+  const roots = [\n+    '',\n+    'first_repo/nested_dir',\n+    'first_repo/nested_dir/second_nested_dir',\n+    'second_repo/nested_dir',\n+    'second_repo/nested_dir/second_nested_dir',\n+  ].map(filename => path.resolve(DIR, filename));\n+\n+  const repos = await findRepos(roots);\n+  const hgRepos = Array.from(repos.hg);\n+  const gitRepos = Array.from(repos.git);\n+\n+  // NOTE: This test can break if you have a .git  or .hg repo initialized\n+  // inside your os tmp directory.\n+  expect(gitRepos).toHaveLength(1);\n+  expect(hgRepos).toHaveLength(1);\n+  expect(gitRepos[0]).toMatch(/\\/jest_changed_files_test_dir\\/first_repo$/);\n+  expect(hgRepos[0]).toMatch(/\\/jest_changed_files_test_dir\\/second_repo$/);\n+});\n+\n+test('gets changed files for git', async () => {\n+  writeFiles(DIR, {\n+    'file1.txt': 'file1',\n+    'nested_dir/file2.txt': 'file2',\n+    'nested_dir/second_nested_dir/file3.txt': 'file3',\n+  });\n+\n+  run(`${GIT} init`, DIR);\n+\n+  const roots = [\n+    '',\n+    'nested_dir',\n+    'nested_dir/second_nested_dir',\n+  ].map(filename => path.resolve(DIR, filename));\n+\n+  let {changedFiles: files} = await getChangedFilesForRoots(roots, {});\n+  expect(\n+    Array.from(files).map(filePath => path.basename(filePath)).sort(),\n+  ).toEqual(['file1.txt', 'file2.txt', 'file3.txt']);\n+\n+  run(`${GIT} add .`, DIR);\n+  run(`${GIT} commit -m \"test\"`, DIR);\n+\n+  ({changedFiles: files} = await getChangedFilesForRoots(roots, {}));\n+  expect(Array.from(files)).toEqual([]);\n+\n+  ({changedFiles: files} = await getChangedFilesForRoots(roots, {\n+    lastCommit: true,\n+  }));\n+  expect(\n+    Array.from(files).map(filePath => path.basename(filePath)).sort(),\n+  ).toEqual(['file1.txt', 'file2.txt', 'file3.txt']);\n+\n+  writeFiles(DIR, {\n+    'file1.txt': 'modified file1',\n+  });\n+\n+  ({changedFiles: files} = await getChangedFilesForRoots(roots));\n+  expect(\n+    Array.from(files).map(filePath => path.basename(filePath)).sort(),\n+  ).toEqual(['file1.txt']);\n+});\n+\n+test('gets changed files for hg', async () => {\n+  if (process.env.CI) {\n+    // Circle and Travis have very old version of hg (v2, and current\n+    // version is v4.2) and its API changed since then and not compatible\n+    // any more. Changing the SCM version on CIs is not trivial, so we'll just\n+    // skip this test and run it only locally.\n+    return;\n+  }\n+  writeFiles(DIR, {\n+    'file1.txt': 'file1',\n+    'nested_dir/file2.txt': 'file2',\n+    'nested_dir/second_nested_dir/file3.txt': 'file3',\n+  });\n+\n+  run(`${HG} init`, DIR);\n+\n+  const roots = [\n+    '',\n+    'nested_dir',\n+    'nested_dir/second_nested_dir',\n+  ].map(filename => path.resolve(DIR, filename));\n+\n+  let {changedFiles: files} = await getChangedFilesForRoots(roots, {});\n+  expect(\n+    Array.from(files).map(filePath => path.basename(filePath)).sort(),\n+  ).toEqual(['file1.txt', 'file2.txt', 'file3.txt']);\n+\n+  run(`${HG} add .`, DIR);\n+  run(`${HG} commit -m \"test\"`, DIR);\n+\n+  ({changedFiles: files} = await getChangedFilesForRoots(roots, {}));\n+  expect(Array.from(files)).toEqual([]);\n+\n+  ({changedFiles: files} = await getChangedFilesForRoots(roots, {\n+    lastCommit: true,\n+  }));\n+  expect(\n+    Array.from(files).map(filePath => path.basename(filePath)).sort(),\n+  ).toEqual(['file1.txt', 'file2.txt', 'file3.txt']);\n+\n+  writeFiles(DIR, {\n+    'file1.txt': 'modified file1',\n+  });\n+\n+  ({changedFiles: files} = await getChangedFilesForRoots(roots));\n+  expect(\n+    Array.from(files).map(filePath => path.basename(filePath)).sort(),\n+  ).toEqual(['file1.txt']);\n+\n+  run(`${HG} commit -m \"test2\"`, DIR);\n+\n+  writeFiles(DIR, {\n+    'file4.txt': 'file4',\n+  });\n+\n+  ({changedFiles: files} = await getChangedFilesForRoots(roots, {\n+    withAncestor: true,\n+  }));\n+  // Returns files from current uncommited state + the last commit\n+  expect(\n+    Array.from(files).map(filePath => path.basename(filePath)).sort(),\n+  ).toEqual(['file1.txt', 'file4.txt']);\n+});"},{"sha":"4c1e638353f6af64744b549dec5620d6cd81e095","filename":"integration_tests/utils.js","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/integration_tests%2Futils.js","raw_url":"https://github.com/facebook/jest/raw/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/integration_tests%2Futils.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/integration_tests%2Futils.js?ref=0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f","patch":"@@ -29,6 +29,9 @@ const run = (cmd, cwd) => {\n     throw new Error(message);\n   }\n \n+  result.stdout = result.stdout && result.stdout.toString();\n+  result.stderr = result.stderr && result.stderr.toString();\n+\n   return result;\n };\n "},{"sha":"e1d621580752eca46d8dc7b8a0c572a47888d998","filename":"packages/jest-changed-files/package.json","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fpackage.json?ref=0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f","patch":"@@ -6,5 +6,8 @@\n     \"url\": \"https://github.com/facebook/jest.git\"\n   },\n   \"license\": \"BSD-3-Clause\",\n-  \"main\": \"build/index.js\"\n+  \"main\": \"build/index.js\",\n+  \"dependencies\": {\n+    \"throat\": \"^4.0.0\"\n+  }\n }"},{"sha":"e71c2123c8e8d0d70ac67a1bfc6cfb4c5d7ceadd","filename":"packages/jest-changed-files/src/__tests__/git.test.js","status":"removed","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/facebook/jest/blob/a7acc5ae519613647ff2c253dd21933d6f94b47f/packages%2Fjest-changed-files%2Fsrc%2F__tests__%2Fgit.test.js","raw_url":"https://github.com/facebook/jest/raw/a7acc5ae519613647ff2c253dd21933d6f94b47f/packages%2Fjest-changed-files%2Fsrc%2F__tests__%2Fgit.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fsrc%2F__tests__%2Fgit.test.js?ref=a7acc5ae519613647ff2c253dd21933d6f94b47f","patch":"@@ -1,75 +0,0 @@\n-/**\n- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n- *\n- * This source code is licensed under the BSD-style license found in the\n- * LICENSE file in the root directory of this source tree. An additional grant\n- * of patent rights can be found in the PATENTS file in the same directory.\n- */\n-'use strict';\n-\n-const os = require('os');\n-const fs = require('fs');\n-const path = require('path');\n-const childProcess = require('child_process');\n-const rimraf = require('rimraf');\n-const mkdirp = require('mkdirp');\n-\n-const tmpdir = path.resolve(os.tmpdir(), 'jest-changed-files-git');\n-const tmpfile = path.resolve(tmpdir, Date.now() + '.js');\n-const tmpdirNested = path.resolve(tmpdir, 'src');\n-const tmpfileNested = path.resolve(tmpdirNested, Date.now() + '.js');\n-const options = {\n-  lastCommit: false,\n-};\n-\n-describe('git', () => {\n-  let git;\n-\n-  beforeEach(() => {\n-    git = require('../git');\n-    mkdirp.sync(tmpdirNested);\n-  });\n-\n-  afterEach(() => rimraf.sync(tmpdir));\n-\n-  describe('isGitRepository', () => {\n-    it('returns null for non git repo folder', () => {\n-      return git.isGitRepository(tmpdir).then(res => {\n-        expect(res).toBeNull();\n-      });\n-    });\n-\n-    it('returns dirname for git repo folder', () => {\n-      childProcess.spawnSync('git', ['init', tmpdir]);\n-\n-      return git.isGitRepository(tmpdir).then(res => {\n-        if (process.platform === 'win32') {\n-          // Git port on Win32 returns paths with \"/\" rather than \"\\\"\n-          res = res.replace(/\\//g, '\\\\');\n-        }\n-        expect(res).toContain(tmpdir);\n-      });\n-    });\n-  });\n-\n-  describe('findChangedFiles', () => {\n-    beforeEach(() => {\n-      childProcess.spawnSync('git', ['init', tmpdir]);\n-    });\n-\n-    it('returns an empty array for git repo folder without modified files', () => {\n-      return git.findChangedFiles(tmpdir, options).then(res => {\n-        expect(res).toEqual([]);\n-      });\n-    });\n-\n-    it('returns an array of modified files for git repo folder', () => {\n-      fs.writeFileSync(tmpfile);\n-      fs.writeFileSync(tmpfileNested);\n-\n-      return git.findChangedFiles(tmpdir, options).then(res => {\n-        expect(res).toEqual([tmpfile, tmpfileNested]);\n-      });\n-    });\n-  });\n-});"},{"sha":"84f208441491f8ad2def5e803d1ddaf88bd6be77","filename":"packages/jest-changed-files/src/__tests__/hg.test.js","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/facebook/jest/blob/a7acc5ae519613647ff2c253dd21933d6f94b47f/packages%2Fjest-changed-files%2Fsrc%2F__tests__%2Fhg.test.js","raw_url":"https://github.com/facebook/jest/raw/a7acc5ae519613647ff2c253dd21933d6f94b47f/packages%2Fjest-changed-files%2Fsrc%2F__tests__%2Fhg.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fsrc%2F__tests__%2Fhg.test.js?ref=a7acc5ae519613647ff2c253dd21933d6f94b47f","patch":"@@ -1,72 +0,0 @@\n-/**\n- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n- *\n- * This source code is licensed under the BSD-style license found in the\n- * LICENSE file in the root directory of this source tree. An additional grant\n- * of patent rights can be found in the PATENTS file in the same directory.\n- */\n-'use strict';\n-\n-const os = require('os');\n-const fs = require('fs');\n-const path = require('path');\n-const childProcess = require('child_process');\n-const rimraf = require('rimraf');\n-const mkdirp = require('mkdirp');\n-\n-const tmpdir = path.resolve(os.tmpdir(), 'jest-changed-files-hg');\n-const tmpfile = path.resolve(tmpdir, Date.now() + '.js');\n-const tmpdirNested = path.resolve(tmpdir, 'src');\n-const tmpfileNested = path.resolve(tmpdirNested, Date.now() + '.js');\n-const options = {\n-  lastCommit: false,\n-};\n-\n-describe('hg', () => {\n-  let hg;\n-\n-  beforeEach(() => {\n-    jest.resetModules();\n-\n-    hg = require('../hg');\n-    mkdirp.sync(tmpdirNested);\n-  });\n-\n-  afterEach(() => rimraf.sync(tmpdir));\n-\n-  describe('isHGRepository', () => {\n-    it('returns null for non hg repo folder', () =>\n-      hg.isHGRepository(tmpdir).then(res => {\n-        expect(res).toBeNull();\n-      }));\n-\n-    it('returns dirname for hg repo folder', () => {\n-      childProcess.spawnSync('hg', ['init', tmpdir]);\n-\n-      return hg.isHGRepository(tmpdir).then(res => {\n-        expect(res).toContain(tmpdir);\n-      });\n-    });\n-  });\n-\n-  describe('findChangedFiles', () => {\n-    beforeEach(() => {\n-      childProcess.spawnSync('hg', ['init', tmpdir]);\n-    });\n-\n-    it('returns an empty array for hg repo folder without modified files', () =>\n-      hg.findChangedFiles(tmpdir, options).then(res => {\n-        expect(res).toEqual([]);\n-      }));\n-\n-    it('returns an array of modified files for hg repo folder', () => {\n-      fs.writeFileSync(tmpfile);\n-      fs.writeFileSync(tmpfileNested);\n-      childProcess.spawnSync('hg', ['add'], {cwd: tmpdir});\n-\n-      return hg.findChangedFiles(tmpdir, options).then(res => {\n-        expect(res).toEqual([tmpfile, tmpfileNested]);\n-      });\n-    });\n-  });\n-});"},{"sha":"97f3335b7643b495703b649e2e8621b5b14d1784","filename":"packages/jest-changed-files/src/git.js","status":"modified","additions":48,"deletions":53,"changes":101,"blob_url":"https://github.com/facebook/jest/blob/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fsrc%2Fgit.js","raw_url":"https://github.com/facebook/jest/raw/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fsrc%2Fgit.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fsrc%2Fgit.js?ref=0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f","patch":"@@ -9,65 +9,60 @@\n  */\n \n import type {Path} from 'types/Config';\n+import type {Options, SCMAdapter} from '../types';\n \n import path from 'path';\n import childProcess from 'child_process';\n \n-type Options = {|\n-  lastCommit?: boolean,\n-  withAncestor?: boolean,\n-|};\n-\n-function findChangedFiles(\n-  cwd: string,\n-  options?: Options,\n-): Promise<Array<Path>> {\n-  return new Promise((resolve, reject) => {\n-    const args =\n-      options && options.lastCommit\n-        ? ['show', '--name-only', '--pretty=%b', 'HEAD']\n-        : ['ls-files', '--other', '--modified', '--exclude-standard'];\n-    const child = childProcess.spawn('git', args, {cwd});\n-    let stdout = '';\n-    let stderr = '';\n-    child.stdout.on('data', data => (stdout += data));\n-    child.stderr.on('data', data => (stderr += data));\n-    child.on('error', e => reject(e));\n-    child.on('close', code => {\n-      if (code === 0) {\n-        stdout = stdout.trim();\n-        if (stdout === '') {\n-          resolve([]);\n+const adapter: SCMAdapter = {\n+  findChangedFiles: async (\n+    cwd: string,\n+    options?: Options,\n+  ): Promise<Array<Path>> => {\n+    return new Promise((resolve, reject) => {\n+      const args =\n+        options && options.lastCommit\n+          ? ['show', '--name-only', '--pretty=%b', 'HEAD']\n+          : ['ls-files', '--other', '--modified', '--exclude-standard'];\n+      const child = childProcess.spawn('git', args, {cwd});\n+      let stdout = '';\n+      let stderr = '';\n+      child.stdout.on('data', data => (stdout += data));\n+      child.stderr.on('data', data => (stderr += data));\n+      child.on('error', e => reject(e));\n+      child.on('close', code => {\n+        if (code === 0) {\n+          stdout = stdout.trim();\n+          if (stdout === '') {\n+            resolve([]);\n+          } else {\n+            resolve(\n+              stdout\n+                .split('\\n')\n+                .map(changedPath => path.resolve(cwd, changedPath)),\n+            );\n+          }\n         } else {\n-          resolve(\n-            stdout\n-              .split('\\n')\n-              .map(changedPath => path.resolve(cwd, changedPath)),\n-          );\n+          reject(code + ': ' + stderr);\n         }\n-      } else {\n-        reject(code + ': ' + stderr);\n-      }\n+      });\n     });\n-  });\n-}\n-\n-function isGitRepository(cwd: string): Promise<?string> {\n-  return new Promise(resolve => {\n-    try {\n-      let stdout = '';\n-      const options = ['rev-parse', '--show-toplevel'];\n-      const child = childProcess.spawn('git', options, {cwd});\n-      child.stdout.on('data', data => (stdout += data));\n-      child.on('error', () => resolve(null));\n-      child.on('close', code => resolve(code === 0 ? stdout.trim() : null));\n-    } catch (e) {\n-      resolve(null);\n-    }\n-  });\n-}\n+  },\n \n-module.exports = {\n-  findChangedFiles,\n-  isGitRepository,\n+  getRoot: async (cwd: string): Promise<?string> => {\n+    return new Promise(resolve => {\n+      try {\n+        let stdout = '';\n+        const options = ['rev-parse', '--show-toplevel'];\n+        const child = childProcess.spawn('git', options, {cwd});\n+        child.stdout.on('data', data => (stdout += data));\n+        child.on('error', () => resolve(null));\n+        child.on('close', code => resolve(code === 0 ? stdout.trim() : null));\n+      } catch (e) {\n+        resolve(null);\n+      }\n+    });\n+  },\n };\n+\n+module.exports = adapter;"},{"sha":"a6d0eed96e73c63fef2108c6d37277ac58509d3c","filename":"packages/jest-changed-files/src/hg.js","status":"modified","additions":49,"deletions":51,"changes":100,"blob_url":"https://github.com/facebook/jest/blob/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fsrc%2Fhg.js","raw_url":"https://github.com/facebook/jest/raw/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fsrc%2Fhg.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fsrc%2Fhg.js?ref=0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f","patch":"@@ -9,6 +9,7 @@\n  */\n \n import type {Path} from 'types/Config';\n+import type {Options, SCMAdapter} from '../types';\n \n import path from 'path';\n import childProcess from 'child_process';\n@@ -17,59 +18,56 @@ const env = Object.assign({}, process.env, {\n   HGPLAIN: 1,\n });\n \n-type Options = {|\n-  lastCommit?: boolean,\n-  withAncestor?: boolean,\n-|};\n-\n-function findChangedFiles(cwd: string, options: Options): Promise<Array<Path>> {\n-  return new Promise((resolve, reject) => {\n-    let args = ['status', '-amn'];\n-    if (options && options.withAncestor) {\n-      args.push('--rev', 'ancestor(.^)');\n-    } else if (options && options.lastCommit === true) {\n-      args = ['tip', '--template', '{files%\"{file}\\n\"}'];\n-    }\n-    const child = childProcess.spawn('hg', args, {cwd, env});\n-    let stdout = '';\n-    let stderr = '';\n-    child.stdout.on('data', data => (stdout += data));\n-    child.stderr.on('data', data => (stderr += data));\n-    child.on('error', e => reject(e));\n-    child.on('close', code => {\n-      if (code === 0) {\n-        stdout = stdout.trim();\n-        if (stdout === '') {\n-          resolve([]);\n-        } else {\n-          resolve(\n-            stdout\n-              .split('\\n')\n-              .map(changedPath => path.resolve(cwd, changedPath)),\n-          );\n-        }\n-      } else {\n-        reject(code + ': ' + stderr);\n+const adapter: SCMAdapter = {\n+  findChangedFiles: async (\n+    cwd: string,\n+    options: Options,\n+  ): Promise<Array<Path>> => {\n+    return new Promise((resolve, reject) => {\n+      let args = ['status', '-amnu'];\n+      if (options && options.withAncestor) {\n+        args.push('--rev', 'ancestor(.^)');\n+      } else if (options && options.lastCommit === true) {\n+        args = ['tip', '--template', '{files%\"{file}\\n\"}'];\n       }\n-    });\n-  });\n-}\n-\n-function isHGRepository(cwd: string): Promise<?string> {\n-  return new Promise(resolve => {\n-    try {\n+      const child = childProcess.spawn('hg', args, {cwd, env});\n       let stdout = '';\n-      const child = childProcess.spawn('hg', ['root'], {cwd, env});\n+      let stderr = '';\n       child.stdout.on('data', data => (stdout += data));\n-      child.on('error', () => resolve(null));\n-      child.on('close', code => resolve(code === 0 ? stdout.trim() : null));\n-    } catch (e) {\n-      resolve(null);\n-    }\n-  });\n-}\n+      child.stderr.on('data', data => (stderr += data));\n+      child.on('error', e => reject(e));\n+      child.on('close', code => {\n+        if (code === 0) {\n+          stdout = stdout.trim();\n+          if (stdout === '') {\n+            resolve([]);\n+          } else {\n+            resolve(\n+              stdout\n+                .split('\\n')\n+                .map(changedPath => path.resolve(cwd, changedPath)),\n+            );\n+          }\n+        } else {\n+          reject(code + ': ' + stderr);\n+        }\n+      });\n+    });\n+  },\n \n-module.exports = {\n-  findChangedFiles,\n-  isHGRepository,\n+  getRoot: async (cwd: Path): Promise<?Path> => {\n+    return new Promise(resolve => {\n+      try {\n+        let stdout = '';\n+        const child = childProcess.spawn('hg', ['root'], {cwd, env});\n+        child.stdout.on('data', data => (stdout += data));\n+        child.on('error', () => resolve(null));\n+        child.on('close', code => resolve(code === 0 ? stdout.trim() : null));\n+      } catch (e) {\n+        resolve(null);\n+      }\n+    });\n+  },\n };\n+\n+module.exports = adapter;"},{"sha":"a808f25c62a33ea2227184e56586e6f06817d4f3","filename":"packages/jest-changed-files/src/index.js","status":"modified","additions":53,"deletions":2,"changes":55,"blob_url":"https://github.com/facebook/jest/blob/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fsrc%2Findex.js?ref=0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f","patch":"@@ -8,10 +8,61 @@\n  * @flow\n  */\n \n+import type {Path} from 'types/Config';\n+import type {Options, Repos} from '../types';\n+\n import git from './git';\n import hg from './hg';\n+import throat from 'throat';\n+\n+// This is an arbitrary number. The main goal is to prevent projects with\n+// many roots (50+) from spawning too many processes at once.\n+const mutex = throat(5);\n+\n+const findGitRoot = dir => mutex(() => git.getRoot(dir));\n+const findHgRoot = dir => mutex(() => hg.getRoot(dir));\n+\n+const getChangedFilesForRoots = async (\n+  roots: Array<Path>,\n+  options: Options,\n+): Promise<{changedFiles: Set<Path>, repos: Repos}> => {\n+  const repos = await findRepos(roots);\n+  const gitPromises = Array.from(repos.git).map(repo =>\n+    git.findChangedFiles(repo, options),\n+  );\n+\n+  const hgPromises = Array.from(repos.hg).map(repo =>\n+    hg.findChangedFiles(repo, options),\n+  );\n+\n+  const changedFiles = (await Promise.all(\n+    gitPromises.concat(hgPromises),\n+  )).reduce((allFiles, changedFilesInTheRepo) => {\n+    for (const file of changedFilesInTheRepo) {\n+      allFiles.add(file);\n+    }\n+\n+    return allFiles;\n+  }, new Set());\n+\n+  return {changedFiles, repos};\n+};\n+\n+const findRepos = async (roots: Array<Path>): Promise<Repos> => {\n+  const gitRepos = await Promise.all(\n+    roots.reduce((promises, root) => promises.concat(findGitRoot(root)), []),\n+  );\n+  const hgRepos = await Promise.all(\n+    roots.reduce((promises, root) => promises.concat(findHgRoot(root)), []),\n+  );\n+\n+  return {\n+    git: new Set(gitRepos.filter(Boolean)),\n+    hg: new Set(hgRepos.filter(Boolean)),\n+  };\n+};\n \n module.exports = {\n-  git,\n-  hg,\n+  findRepos,\n+  getChangedFilesForRoots,\n };"},{"sha":"c0dbb58d0e8d991a07dfbfcb077fed206514c6b4","filename":"packages/jest-changed-files/types.js","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/facebook/jest/blob/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Ftypes.js","raw_url":"https://github.com/facebook/jest/raw/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Ftypes.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Ftypes.js?ref=0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f","patch":"@@ -0,0 +1,23 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+\n+import type {Path} from 'types/Config';\n+\n+export type Options = {|\n+  lastCommit?: boolean,\n+  withAncestor?: boolean,\n+|};\n+\n+export type Repos = {git: Set<Path>, hg: Set<Path>};\n+\n+export type SCMAdapter = {\n+  findChangedFiles: (cwd: Path, options: Options) => Promise<Array<Path>>,\n+  getRoot: (cwd: Path) => Promise<?Path>,\n+};"},{"sha":"0cc1b1f9fb17d5f9a2fce66924088dcef1691279","filename":"packages/jest-changed-files/yarn.lock","status":"added","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fyarn.lock","raw_url":"https://github.com/facebook/jest/raw/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-changed-files%2Fyarn.lock","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-changed-files%2Fyarn.lock?ref=0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f","patch":"@@ -0,0 +1,7 @@\n+# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n+# yarn lockfile v1\n+\n+\n+throat@^4.0.0:\n+  version \"4.0.0\"\n+  resolved \"https://registry.yarnpkg.com/throat/-/throat-4.0.0.tgz#e8d397aeb3f335c3bae404a83dc264b813a41e1b\""},{"sha":"281303fbd0bbee40d1215105ace91779c4d4aba8","filename":"packages/jest-cli/src/search_source.js","status":"modified","additions":13,"deletions":32,"changes":45,"blob_url":"https://github.com/facebook/jest/blob/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-cli%2Fsrc%2Fsearch_source.js","raw_url":"https://github.com/facebook/jest/raw/0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f/packages%2Fjest-cli%2Fsrc%2Fsearch_source.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fsearch_source.js?ref=0ef151e11d52d9ae0d3e4c73d7f73104fc7ac25f","patch":"@@ -16,7 +16,7 @@ import type {Test} from 'types/TestRunner';\n import path from 'path';\n import micromatch from 'micromatch';\n import DependencyResolver from 'jest-resolve-dependencies';\n-import changedFiles from 'jest-changed-files';\n+import {getChangedFilesForRoots} from 'jest-changed-files';\n import {escapePathForRegex, replacePathSepForRegex} from 'jest-regex-util';\n \n type SearchResult = {|\n@@ -44,11 +44,6 @@ export type TestSelectionConfig = {|\n   watch?: boolean,\n |};\n \n-const git = changedFiles.git;\n-const hg = changedFiles.hg;\n-\n-const determineSCM = path =>\n-  Promise.all([git.isGitRepository(path), hg.isHGRepository(path)]);\n const pathToRegex = p => replacePathSepForRegex(p);\n \n const globsToMatcher = (globs: ?Array<Glob>) => {\n@@ -188,32 +183,18 @@ class SearchSource {\n     return {tests: []};\n   }\n \n-  findChangedTests(options: Options): Promise<SearchResult> {\n-    return Promise.all(\n-      this._context.config.roots.map(determineSCM),\n-    ).then(repos => {\n-      if (!repos.every(([gitRepo, hgRepo]) => gitRepo || hgRepo)) {\n-        return {\n-          noSCM: true,\n-          tests: [],\n-        };\n-      }\n-      return Promise.all(\n-        repos.map(([gitRepo, hgRepo]) => {\n-          if (gitRepo) {\n-            return git.findChangedFiles(gitRepo, options);\n-          }\n-          if (hgRepo) {\n-            return hg.findChangedFiles(hgRepo, options);\n-          }\n-          return [];\n-        }),\n-      ).then(changedPathSets =>\n-        this.findRelatedTests(\n-          new Set(Array.prototype.concat.apply([], changedPathSets)),\n-        ),\n-      );\n-    });\n+  async findChangedTests(options: Options): Promise<SearchResult> {\n+    const {repos, changedFiles} = await getChangedFilesForRoots(\n+      this._context.config.roots,\n+      options,\n+    );\n+\n+    // no SCM (git/hg/...) is found in any of the roots.\n+    const noSCM = Object.keys(repos).every(scm => repos[scm].size === 0);\n+\n+    return noSCM\n+      ? {noSCM: true, tests: []}\n+      : this.findRelatedTests(changedFiles);\n   }\n \n   getTestPaths("}]},{"url":"https://api.github.com/repos/facebook/jest/issues/5793","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/5793/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/5793/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/5793/events","html_url":"https://github.com/facebook/jest/pull/5793","id":305191958,"node_id":"MDExOlB1bGxSZXF1ZXN0MTc0OTgwMjcx","number":5793,"title":"Improve jest-worker (up to 4x)","user":{"login":"mjesun","id":829269,"node_id":"MDQ6VXNlcjgyOTI2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/829269?v=4","gravatar_id":"","url":"https://api.github.com/users/mjesun","html_url":"https://github.com/mjesun","followers_url":"https://api.github.com/users/mjesun/followers","following_url":"https://api.github.com/users/mjesun/following{/other_user}","gists_url":"https://api.github.com/users/mjesun/gists{/gist_id}","starred_url":"https://api.github.com/users/mjesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjesun/subscriptions","organizations_url":"https://api.github.com/users/mjesun/orgs","repos_url":"https://api.github.com/users/mjesun/repos","events_url":"https://api.github.com/users/mjesun/events{/privacy}","received_events_url":"https://api.github.com/users/mjesun/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-14T14:50:56Z","updated_at":"2021-05-12T18:15:28Z","closed_at":"2018-03-14T15:16:17Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/5793","html_url":"https://github.com/facebook/jest/pull/5793","diff_url":"https://github.com/facebook/jest/pull/5793.diff","patch_url":"https://github.com/facebook/jest/pull/5793.patch","merged_at":"2018-03-14T15:16:17Z"},"body":"This PR modifies the way internal worker queues are managed, passing from an array to a linked-list, improving a 10% the current benchmark, and 400% over a new benchmark.\r\n\r\n## How come this wasn't noticed before?\r\n\r\nWhen `jest-worker` was initially benchmarked, it was done by using not so many jobs (~10k), but very heavy in time. While this is the usual approach (few jobs, lots of time per job), sometimes you have the opposite (i.e. lots of jobs, but each of them very fast). _This is actually what `jest-haste-map` does._\r\n\r\nSince the internal queue was an array, re-indexing the queue is a `O(n)` operation, which becomes especially relevant on the second scenario. Switching to a linked list means that all operations for advancing the queue become `O(1)`, no matter its length. This results in massive speed improvements on really long queues.\r\n\r\n## Some benchmarks\r\n\r\nUsing the extended performance test, the `empty` function, called 100,000 times results in:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 11102, processingTime: 11058 }\r\nworker-farm: { globalTime: 9713, processingTime: 9685 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 10790, processingTime: 10762 }\r\nworker-farm: { globalTime: 10453, processingTime: 10432 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 11111, processingTime: 11079 }\r\nworker-farm: { globalTime: 10133, processingTime: 10112 }\r\n---------------------------------------------------------------------------\r\n```\r\n\r\nNow, **with the change**, it results in:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 2634, processingTime: 2594 }\r\nworker-farm: { globalTime: 10165, processingTime: 10141 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 2780, processingTime: 2756 }\r\nworker-farm: { globalTime: 10132, processingTime: 10110 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 2608, processingTime: 2581 }\r\nworker-farm: { globalTime: 10295, processingTime: 10272 }\r\n---------------------------------------------------------------------------\r\n```\r\n## What about the existing metrics?\r\n\r\nThe previous metric (which we initially used for benchmarking, `loadTest` called 10,000 times), has also improved, but only slightly, since that one was already optimized:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 726, processingTime: 690 }\r\nworker-farm: { globalTime: 769, processingTime: 748 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 719, processingTime: 693 }\r\nworker-farm: { globalTime: 784, processingTime: 765 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 703, processingTime: 673 }\r\nworker-farm: { globalTime: 748, processingTime: 731 }\r\n---------------------------------------------------------------------------\r\n```\r\n\r\n## Tests\r\n\r\nI ensured all tests pass, but I also added some slight modifications into the `__performance__tests__` so that you can pass an arbitrary worker method as well as an arbitrary number of iterations. This allowed me to test the other scenario.\r\n\r\n_On a personal note: this is actually WHY algorithms and data structures knowledge IS important for a frontend developer!_ 🙂","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/5793/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/5793/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"5db9938889eb58c7dd74be36d4f598922c4897a6","filename":"packages/jest-worker/src/__performance_tests__/test.js","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -2,10 +2,17 @@\n \n // eslint-disable-next-line import/no-extraneous-dependencies\n const workerFarm = require('worker-farm');\n-import JestWorker from '../../build';\n+const assert = require('assert');\n+const JestWorker = require('../../build').default;\n+\n+// Typical tests: node --expose-gc test.js empty 100000\n+//                node --expose-gc test.js loadTest 10000\n+assert(process.argv[2], 'Pass a child method name');\n+assert(process.argv[3], 'Pass the number of iteratitons');\n \n const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n-const calls = 10000;\n+const method = process.argv[2];\n+const calls = +process.argv[3];\n const threads = 6;\n \n function testWorkerFarm() {\n@@ -35,7 +42,7 @@ function testWorkerFarm() {\n         maxConcurrentWorkers: threads,\n       },\n       require.resolve('./workers/worker_farm'),\n-      ['loadTest'],\n+      [method],\n     );\n \n     // Let all workers come up.\n@@ -45,7 +52,7 @@ function testWorkerFarm() {\n \n     for (let i = 0; i < calls; i++) {\n       const promisified = new Promise((resolve, reject) => {\n-        api.loadTest((err, result) => {\n+        api[method]((err, result) => {\n           if (err) {\n             reject(err);\n           } else {\n@@ -80,7 +87,7 @@ function testJestWorker() {\n     }\n \n     const farm = new JestWorker(require.resolve('./workers/jest_worker'), {\n-      exposedMethods: ['loadTest'],\n+      exposedMethods: [method],\n       forkOptions: {execArgv: []},\n       workers: threads,\n     });\n@@ -94,7 +101,7 @@ function testJestWorker() {\n     const startProcess = Date.now();\n \n     for (let i = 0; i < calls; i++) {\n-      const promisified = farm.loadTest();\n+      const promisified = farm[method]();\n \n       promisified.then(countToFinish);\n     }"},{"sha":"5468ec07aa65a528e557b5509b91bef431a44b52","filename":"packages/jest-worker/src/__performance_tests__/workers/jest_worker.js","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -5,3 +5,7 @@ const pi = require('./pi');\n module.exports.loadTest = function() {\n   return pi();\n };\n+\n+module.exports.empty = function() {\n+  // Do nothing.\n+};"},{"sha":"360042c808b034a24fecc8740b50ed33ceafb938","filename":"packages/jest-worker/src/__performance_tests__/workers/worker_farm.js","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -5,3 +5,8 @@ const pi = require('./pi');\n module.exports.loadTest = function(callback) {\n   callback(null, pi());\n };\n+\n+module.exports.empty = function(callback) {\n+  // Do nothing.\n+  callback();\n+};"},{"sha":"cd61fa2d3dc2a8ce6025a6f48577ef2b810e1c29","filename":"packages/jest-worker/src/types.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2Ftypes.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2Ftypes.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Ftypes.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -99,4 +99,5 @@ export type QueueCallback = (?Error, ?any) => void;\n export type QueueChildMessage = {|\n   request: ChildMessage,\n   callback: QueueCallback,\n+  next: ?QueueChildMessage,\n |};"},{"sha":"80562376828b318f90fc4dac4749aeb85d3a57be","filename":"packages/jest-worker/src/worker.js","status":"modified","additions":29,"deletions":16,"changes":45,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2Fworker.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2Fworker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworker.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -48,13 +48,14 @@ import type {\n export default class {\n   _busy: boolean;\n   _child: ChildProcess;\n+  _last: ?QueueChildMessage;\n   _options: WorkerOptions;\n-  _queue: Array<QueueChildMessage>;\n+  _queue: ?QueueChildMessage;\n   _retries: number;\n \n   constructor(options: WorkerOptions) {\n     this._options = options;\n-    this._queue = [];\n+    this._queue = null;\n \n     this._initialize();\n   }\n@@ -68,7 +69,15 @@ export default class {\n   }\n \n   send(request: ChildMessage, callback: QueueCallback) {\n-    this._queue.push({callback, request});\n+    const item = {callback, next: null, request};\n+\n+    if (this._last) {\n+      this._last.next = item;\n+    } else {\n+      this._queue = item;\n+    }\n+\n+    this._last = item;\n     this._process();\n   }\n \n@@ -82,7 +91,7 @@ export default class {\n           env: Object.assign({}, process.env, {\n             JEST_WORKER_ID: this._options.workerId,\n           }),\n-          // suppress --debug / --inspect flags while preserving others (like --harmony)\n+          // Suppress --debug / --inspect flags while preserving others (like --harmony).\n           execArgv: process.execArgv.filter(v => !/^--(debug|inspect)/.test(v)),\n           silent: true,\n         },\n@@ -121,35 +130,39 @@ export default class {\n       return;\n     }\n \n-    const queue = this._queue;\n-    let skip = 0;\n+    let item = this._queue;\n \n     // Calls in the queue might have already been processed by another worker,\n     // so we have to skip them.\n-    while (queue.length > skip && queue[skip].request[1]) {\n-      skip++;\n+    while (item && item.request[1]) {\n+      item = item.next;\n     }\n \n-    // Remove all pieces at once.\n-    queue.splice(0, skip);\n-\n-    if (queue.length) {\n-      const call = queue[0];\n+    this._queue = item;\n \n+    if (item) {\n       // Flag the call as processed, so that other workers know that they don't\n       // have to process it as well.\n-      call.request[1] = true;\n+      item.request[1] = true;\n \n       this._retries = 0;\n       this._busy = true;\n \n       // $FlowFixMe: wrong \"ChildProcess.send\" signature.\n-      this._child.send(call.request);\n+      this._child.send(item.request);\n+    } else {\n+      this._last = item;\n     }\n   }\n \n   _receive(response: any /* Should be ParentMessage */) {\n-    const callback = this._queue[0].callback;\n+    const item = this._queue;\n+\n+    if (!item) {\n+      throw new TypeError('Unexpected response with an empty queue');\n+    }\n+\n+    const callback = item.callback;\n \n     this._busy = false;\n     this._process();"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/4955","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/4955/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/4955/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/4955/events","html_url":"https://github.com/facebook/jest/pull/4955","id":276715862,"node_id":"MDExOlB1bGxSZXF1ZXN0MTU0NjE4ODE4","number":4955,"title":"Improve process object creation","user":{"login":"mjesun","id":829269,"node_id":"MDQ6VXNlcjgyOTI2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/829269?v=4","gravatar_id":"","url":"https://api.github.com/users/mjesun","html_url":"https://github.com/mjesun","followers_url":"https://api.github.com/users/mjesun/followers","following_url":"https://api.github.com/users/mjesun/following{/other_user}","gists_url":"https://api.github.com/users/mjesun/gists{/gist_id}","starred_url":"https://api.github.com/users/mjesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjesun/subscriptions","organizations_url":"https://api.github.com/users/mjesun/orgs","repos_url":"https://api.github.com/users/mjesun/repos","events_url":"https://api.github.com/users/mjesun/events{/privacy}","received_events_url":"https://api.github.com/users/mjesun/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2017-11-25T01:10:43Z","updated_at":"2021-05-13T01:32:35Z","closed_at":"2017-11-25T08:47:44Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/4955","html_url":"https://github.com/facebook/jest/pull/4955","diff_url":"https://github.com/facebook/jest/pull/4955.diff","patch_url":"https://github.com/facebook/jest/pull/4955.patch","merged_at":"2017-11-25T08:47:44Z"},"body":"This PR improves the way the `process` object is created in two ways:\r\n\r\n1. It aims to rewrite the way deep cyclic cloning is done:\r\n    1. It uses a specialized method for `Array`s.\r\n    2. It copies properties by using `getOwnPropertyDescriptors` and `defineProperties`.\r\n    3. It gives a blacklist argument for the root level object.\r\n​\r\n2. Using the blacklist, it avoids copying `mainModule`, which contains a reference to the main module, plus all of the other modules loaded so far in memory.\r\n\r\nThe total improvement on a raw Node instance is approximately of 40%; but the improvement grows as the amount of previously loaded modules also grows. In my case, I've been able to observe up to 20x performance by artificially loading a bunch of modules before calling `createProcessObject`.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/4955/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/4955/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"66cce1fd4af1e57451bff3a444ae64581d08aeb7","filename":"packages/jest-haste-map/src/crawlers/__tests__/node.test.js","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/fad2df86aeb3d411f45da09d1f3021efad819632/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","raw_url":"https://github.com/facebook/jest/raw/fad2df86aeb3d411f45da09d1f3021efad819632/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js?ref=fad2df86aeb3d411f45da09d1f3021efad819632","patch":"@@ -77,6 +77,9 @@ describe('node crawler', () => {\n   beforeEach(() => {\n     jest.resetModules();\n \n+    // Remove the \"process.platform\" property descriptor so it can be writable.\n+    delete process.platform;\n+\n     mockResponse = [\n       '/fruits/pear.js',\n       '/fruits/strawberry.js',"},{"sha":"c59dfabcf03bb22bf78da9d6da35df88ecf2ca09","filename":"packages/jest-util/src/__tests__/deep_cyclic_copy.test.js","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/facebook/jest/blob/fad2df86aeb3d411f45da09d1f3021efad819632/packages%2Fjest-util%2Fsrc%2F__tests__%2Fdeep_cyclic_copy.test.js","raw_url":"https://github.com/facebook/jest/raw/fad2df86aeb3d411f45da09d1f3021efad819632/packages%2Fjest-util%2Fsrc%2F__tests__%2Fdeep_cyclic_copy.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fsrc%2F__tests__%2Fdeep_cyclic_copy.test.js?ref=fad2df86aeb3d411f45da09d1f3021efad819632","patch":"@@ -61,3 +61,18 @@ it('handles cyclic dependencies', () => {\n   expect(copy.bar).toEqual(copy);\n   expect(copy.subcycle.baz).toEqual(copy);\n });\n+\n+it('uses the blacklist to avoid copying properties on the first level', () => {\n+  const obj = {\n+    blacklisted: 41,\n+    subObj: {\n+      blacklisted: 42,\n+    },\n+  };\n+\n+  expect(deepCyclicCopy(obj, new Set(['blacklisted']))).toEqual({\n+    subObj: {\n+      blacklisted: 42,\n+    },\n+  });\n+});"},{"sha":"973c535a5ecbb6117307afcbd4a2246f6c5e5fb9","filename":"packages/jest-util/src/create_process_object.js","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/fad2df86aeb3d411f45da09d1f3021efad819632/packages%2Fjest-util%2Fsrc%2Fcreate_process_object.js","raw_url":"https://github.com/facebook/jest/raw/fad2df86aeb3d411f45da09d1f3021efad819632/packages%2Fjest-util%2Fsrc%2Fcreate_process_object.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fsrc%2Fcreate_process_object.js?ref=fad2df86aeb3d411f45da09d1f3021efad819632","patch":"@@ -9,11 +9,12 @@\n \n import deepCyclicCopy from './deep_cyclic_copy';\n \n+const BLACKLIST = new Set(['mainModule']);\n+\n export default function() {\n   const process = require('process');\n-  const newProcess = deepCyclicCopy(process);\n+  const newProcess = deepCyclicCopy(process, BLACKLIST);\n \n-  // $FlowFixMe: Add the symbol for toString objects.\n   newProcess[Symbol.toStringTag] = 'process';\n \n   // Sequentially execute all constructors over the object."},{"sha":"76affb7473a409d003d2fc77b46c846ab5524d14","filename":"packages/jest-util/src/deep_cyclic_copy.js","status":"modified","additions":62,"deletions":35,"changes":97,"blob_url":"https://github.com/facebook/jest/blob/fad2df86aeb3d411f45da09d1f3021efad819632/packages%2Fjest-util%2Fsrc%2Fdeep_cyclic_copy.js","raw_url":"https://github.com/facebook/jest/raw/fad2df86aeb3d411f45da09d1f3021efad819632/packages%2Fjest-util%2Fsrc%2Fdeep_cyclic_copy.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fsrc%2Fdeep_cyclic_copy.js?ref=fad2df86aeb3d411f45da09d1f3021efad819632","patch":"@@ -7,54 +7,81 @@\n  * @flow\n  */\n \n-export default function deepCyclicCopy(\n-  object: any,\n-  cycles: WeakMap<any, any> = new WeakMap(),\n-) {\n-  if (typeof object !== 'object' || object === null) {\n-    return object;\n-  }\n+const EMPTY = new Set();\n \n-  let newObject;\n+// Node 6 does not have gOPDs, so we define a simple polyfill for it.\n+if (!Object.getOwnPropertyDescriptors) {\n+  // $FlowFixMe: polyfill\n+  Object.getOwnPropertyDescriptors = obj => {\n+    const list = {};\n \n-  if (Array.isArray(object)) {\n-    newObject = [];\n+    Object.getOwnPropertyNames(obj)\n+      .concat(Object.getOwnPropertySymbols(obj))\n+      // $FlowFixMe: assignment with a Symbol is OK.\n+      .forEach(key => (list[key] = Object.getOwnPropertyDescriptor(obj, key)));\n+\n+    return list;\n+  };\n+}\n+\n+export default function deepCyclicCopy(\n+  value: any,\n+  blacklist: Set<string> = EMPTY,\n+  cycles: WeakMap<any, any> = new WeakMap(),\n+): any {\n+  if (typeof value !== 'object' || value === null) {\n+    return value;\n+  } else if (cycles.has(value)) {\n+    return cycles.get(value);\n+  } else if (Array.isArray(value)) {\n+    return deepCyclicCopyArray(value, blacklist, cycles);\n   } else {\n-    newObject = Object.create(Object.getPrototypeOf(object));\n+    return deepCyclicCopyObject(value, blacklist, cycles);\n   }\n+}\n+\n+function deepCyclicCopyObject(\n+  object: Object,\n+  blacklist: Set<string>,\n+  cycles: WeakMap<any, any>,\n+): Object {\n+  const newObject = Object.create(Object.getPrototypeOf(object));\n+  // $FlowFixMe: Object.getOwnPropertyDescriptors is polyfilled above.\n+  const descriptors = Object.getOwnPropertyDescriptors(object);\n \n   cycles.set(object, newObject);\n \n-  // Copying helper function. Checks into the weak map passed to manage cycles.\n-  const copy = (key: string | Symbol) => {\n-    const descriptor = Object.getOwnPropertyDescriptor(object, key);\n-    const value = descriptor.value;\n+  Object.keys(descriptors).forEach(key => {\n+    if (blacklist.has(key)) {\n+      delete descriptors[key];\n+      return;\n+    }\n \n-    if (descriptor.hasOwnProperty('value')) {\n-      if (cycles.has(value)) {\n-        descriptor.value = cycles.get(value);\n-      } else {\n-        descriptor.value = deepCyclicCopy(value, cycles);\n-      }\n+    const descriptor = descriptors[key];\n \n-      // Allow tests to override whatever they need.\n-      descriptor.writable = true;\n+    if (typeof descriptor.value !== 'undefined') {\n+      descriptor.value = deepCyclicCopy(descriptor.value, EMPTY, cycles);\n     }\n \n-    // Allow tests to override whatever they need.\n     descriptor.configurable = true;\n+  });\n \n-    try {\n-      Object.defineProperty(newObject, key, descriptor);\n-    } catch (err) {\n-      // Do nothing; this usually fails because a non-configurable property is\n-      // tried to be overridden with a configurable one (e.g. \"length\").\n-    }\n-  };\n+  return Object.defineProperties(newObject, descriptors);\n+}\n+\n+function deepCyclicCopyArray(\n+  array: Array<any>,\n+  blacklist: Set<string>,\n+  cycles: WeakMap<any, any>,\n+): Array<any> {\n+  const newArray = [];\n+  const length = array.length;\n \n-  // Copy string and symbol keys!\n-  Object.getOwnPropertyNames(object).forEach(copy);\n-  Object.getOwnPropertySymbols(object).forEach(copy);\n+  cycles.set(array, newArray);\n+\n+  for (let i = 0; i < length; i++) {\n+    newArray[i] = deepCyclicCopy(array[i], EMPTY, cycles);\n+  }\n \n-  return newObject;\n+  return newArray;\n }"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/7345","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/7345/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/7345/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/7345/events","html_url":"https://github.com/facebook/jest/pull/7345","id":378960738,"node_id":"MDExOlB1bGxSZXF1ZXN0MjI5NTQyMDc2","number":7345,"title":"Add computeSha1 option","user":{"login":"rubennorte","id":117921,"node_id":"MDQ6VXNlcjExNzkyMQ==","avatar_url":"https://avatars.githubusercontent.com/u/117921?v=4","gravatar_id":"","url":"https://api.github.com/users/rubennorte","html_url":"https://github.com/rubennorte","followers_url":"https://api.github.com/users/rubennorte/followers","following_url":"https://api.github.com/users/rubennorte/following{/other_user}","gists_url":"https://api.github.com/users/rubennorte/gists{/gist_id}","starred_url":"https://api.github.com/users/rubennorte/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rubennorte/subscriptions","organizations_url":"https://api.github.com/users/rubennorte/orgs","repos_url":"https://api.github.com/users/rubennorte/repos","events_url":"https://api.github.com/users/rubennorte/events{/privacy}","received_events_url":"https://api.github.com/users/rubennorte/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-11-08T23:27:50Z","updated_at":"2021-05-12T05:14:22Z","closed_at":"2018-11-09T01:15:58Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/7345","html_url":"https://github.com/facebook/jest/pull/7345","diff_url":"https://github.com/facebook/jest/pull/7345.diff","patch_url":"https://github.com/facebook/jest/pull/7345.patch","merged_at":"2018-11-09T01:15:58Z"},"body":"## Summary\r\n\r\nThe HasteMap class has an option to compute the sha-1 of files and use it to determine if a file has changed if the modification times differ. This is used by external packages (e.g. Metro) but the option wasn't exposed in Jest. It's exposed as an option instead of enabling it by default because it has a performance impact that only pays off for some use cases (like remote caching, where mtimes differ).\r\n\r\n## Test plan\r\n\r\nThis is difficult to test e2e (as it'll mostly be used with watchman and remote caching where mtime is lost) and we don't test that options are forwarded in the different packages in unit tests, so I trust Flow typing and manual testing here.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/7345/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/7345/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"4e5e2d08c8fbb2a26f53f6da2710926f8079d57e","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/0dbf46e413a65746474d5dc659a53d3f14d279d1/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/0dbf46e413a65746474d5dc659a53d3f14d279d1/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=0dbf46e413a65746474d5dc659a53d3f14d279d1","patch":"@@ -29,6 +29,7 @@\n - `[jest-util]` Add `jest.getTimerCount()` to get the count of scheduled fake timers ([#7285](https://github.com/facebook/jest/pull/7285))\n - `[jest-config]` Add `dependencyExtractor` option to use a custom module to extract dependencies from files ([#7313](https://github.com/facebook/jest/pull/7313))\n - `[jest-haste-map]` [**BREAKING**] Expose relative paths when getting the file iterator ([#7321](https://github.com/facebook/jest/pull/7321))\n+- `[jest-config]` Add `haste.computeSha1` option to compute the sha-1 of the files in the haste map ([#7345](https://github.com/facebook/jest/pull/7345))\n \n ### Fixes\n "},{"sha":"24f419707d6d45a164f25d9ecd548d6d7e714554","filename":"e2e/__tests__/__snapshots__/show_config.test.js.snap","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/0dbf46e413a65746474d5dc659a53d3f14d279d1/e2e%2F__tests__%2F__snapshots__%2Fshow_config.test.js.snap","raw_url":"https://github.com/facebook/jest/raw/0dbf46e413a65746474d5dc659a53d3f14d279d1/e2e%2F__tests__%2F__snapshots__%2Fshow_config.test.js.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2F__snapshots__%2Fshow_config.test.js.snap?ref=0dbf46e413a65746474d5dc659a53d3f14d279d1","patch":"@@ -21,6 +21,7 @@ exports[`--showConfig outputs config info and exits 1`] = `\n       \\\\\"forceCoverageMatch\\\\\": [],\n       \\\\\"globals\\\\\": {},\n       \\\\\"haste\\\\\": {\n+        \\\\\"computeSha1\\\\\": false,\n         \\\\\"providesModuleNodeModules\\\\\": []\n       },\n       \\\\\"moduleDirectories\\\\\": ["},{"sha":"85b29b28f577074725ef5badfd50c93a162ff44c","filename":"packages/jest-config/src/Defaults.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/0dbf46e413a65746474d5dc659a53d3f14d279d1/packages%2Fjest-config%2Fsrc%2FDefaults.js","raw_url":"https://github.com/facebook/jest/raw/0dbf46e413a65746474d5dc659a53d3f14d279d1/packages%2Fjest-config%2Fsrc%2FDefaults.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FDefaults.js?ref=0dbf46e413a65746474d5dc659a53d3f14d279d1","patch":"@@ -41,6 +41,7 @@ export default ({\n   globalTeardown: null,\n   globals: {},\n   haste: {\n+    computeSha1: false,\n     providesModuleNodeModules: [],\n   },\n   moduleDirectories: ['node_modules'],"},{"sha":"c3da446f08a5fc4ff07125e7fe589d5840b326bd","filename":"packages/jest-config/src/ValidConfig.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/0dbf46e413a65746474d5dc659a53d3f14d279d1/packages%2Fjest-config%2Fsrc%2FValidConfig.js","raw_url":"https://github.com/facebook/jest/raw/0dbf46e413a65746474d5dc659a53d3f14d279d1/packages%2Fjest-config%2Fsrc%2FValidConfig.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FValidConfig.js?ref=0dbf46e413a65746474d5dc659a53d3f14d279d1","patch":"@@ -51,6 +51,7 @@ export default ({\n   globalTeardown: 'teardown.js',\n   globals: {__DEV__: true},\n   haste: {\n+    computeSha1: true,\n     defaultPlatform: 'ios',\n     hasteImplModulePath: '<rootDir>/haste_impl.js',\n     platforms: ['ios', 'android'],"},{"sha":"f91e481a29257fafc18df9994ecf2c387dc1200f","filename":"packages/jest-runtime/src/index.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/0dbf46e413a65746474d5dc659a53d3f14d279d1/packages%2Fjest-runtime%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/0dbf46e413a65746474d5dc659a53d3f14d279d1/packages%2Fjest-runtime%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Findex.js?ref=0dbf46e413a65746474d5dc659a53d3f14d279d1","patch":"@@ -236,6 +236,7 @@ class Runtime {\n \n     return new HasteMap({\n       cacheDirectory: config.cacheDirectory,\n+      computeSha1: config.haste.computeSha1,\n       console: options && options.console,\n       dependencyExtractor: config.dependencyExtractor,\n       extensions: [Snapshot.EXTENSION].concat(config.moduleFileExtensions),"},{"sha":"39eac782b764c3f9dc0cf768503e08cd547c6b3f","filename":"types/Config.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/0dbf46e413a65746474d5dc659a53d3f14d279d1/types%2FConfig.js","raw_url":"https://github.com/facebook/jest/raw/0dbf46e413a65746474d5dc659a53d3f14d279d1/types%2FConfig.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/types%2FConfig.js?ref=0dbf46e413a65746474d5dc659a53d3f14d279d1","patch":"@@ -11,6 +11,7 @@ export type Path = string;\n export type Glob = string;\n \n export type HasteConfig = {|\n+  computeSha1?: boolean,\n   defaultPlatform?: ?string,\n   hasteImplModulePath?: string,\n   platforms?: Array<string>,"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/10901","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/10901/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/10901/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/10901/events","html_url":"https://github.com/facebook/jest/pull/10901","id":755184163,"node_id":"MDExOlB1bGxSZXF1ZXN0NTMwOTQ1MDI5","number":10901,"title":"feat(jest-runtime): share cacheFS between runtime and transformer","user":{"login":"ahnpnl","id":27772165,"node_id":"MDQ6VXNlcjI3NzcyMTY1","avatar_url":"https://avatars.githubusercontent.com/u/27772165?v=4","gravatar_id":"","url":"https://api.github.com/users/ahnpnl","html_url":"https://github.com/ahnpnl","followers_url":"https://api.github.com/users/ahnpnl/followers","following_url":"https://api.github.com/users/ahnpnl/following{/other_user}","gists_url":"https://api.github.com/users/ahnpnl/gists{/gist_id}","starred_url":"https://api.github.com/users/ahnpnl/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ahnpnl/subscriptions","organizations_url":"https://api.github.com/users/ahnpnl/orgs","repos_url":"https://api.github.com/users/ahnpnl/repos","events_url":"https://api.github.com/users/ahnpnl/events{/privacy}","received_events_url":"https://api.github.com/users/ahnpnl/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2020-12-02T11:19:20Z","updated_at":"2021-05-10T23:07:08Z","closed_at":"2020-12-05T12:04:33Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/10901","html_url":"https://github.com/facebook/jest/pull/10901","diff_url":"https://github.com/facebook/jest/pull/10901.diff","patch_url":"https://github.com/facebook/jest/pull/10901.patch","merged_at":"2020-12-05T12:04:32Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md at the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\nPass `cacheFS` from `jest-runtime` to `ScriptTransformer`. When `getCacheKey` or `process` is invoked, this `cacheFS` is passed in through transform options\r\n\r\nIf a transformer does module resolution and reads files, it should populate `cacheFS` so that Jest avoids reading the same files again, improving performance. `cacheFS` stores entries of <file path, file contents>\r\n\r\nClose #10898 \r\n\r\n## Test plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->\r\nAdded unit test for `jest-transform`","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/10901/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/10901/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"8bef7d2836f6869d2f8e4d83d4e6a62c397b4a64","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/c389808021ab41eb40213dcd064c240563ac4d0b/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/c389808021ab41eb40213dcd064c240563ac4d0b/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=c389808021ab41eb40213dcd064c240563ac4d0b","patch":"@@ -10,6 +10,7 @@\n - `[jest-snapshot]` [**BREAKING**] Make prettier optional for inline snapshots - fall back to string replacement ([#7792](https://github.com/facebook/jest/pull/7792))\n - `[jest-runner]` [**BREAKING**] Run transforms over `runnner` ([#8823](https://github.com/facebook/jest/pull/8823))\n - `[jest-runner]` [**BREAKING**] Run transforms over `testRunnner` ([#8823](https://github.com/facebook/jest/pull/8823))\n+- `[jest-runtime, jest-transform]` share `cacheFS` between runtime and transformer ([#10901](https://github.com/facebook/jest/pull/10901))\n \n ### Fixes\n "},{"sha":"108c08454bfba16079ed66057cddbe57dee695a3","filename":"docs/CodeTransformation.md","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/c389808021ab41eb40213dcd064c240563ac4d0b/docs%2FCodeTransformation.md","raw_url":"https://github.com/facebook/jest/raw/c389808021ab41eb40213dcd064c240563ac4d0b/docs%2FCodeTransformation.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FCodeTransformation.md?ref=c389808021ab41eb40213dcd064c240563ac4d0b","patch":"@@ -46,6 +46,12 @@ interface Transformer<OptionType = unknown> {\n }\n \n interface TransformOptions {\n+  /**\n+   * If a transformer does module resolution and reads files, it should populate `cacheFS` so that\n+   * Jest avoids reading the same files again, improving performance. `cacheFS` stores entries of\n+   * <file path, file contents>\n+   */\n+  cacheFS: Map<string, string>;\n   config: Config.ProjectConfig;\n   /** A stringified version of the configuration - useful in cache busting */\n   configString: string;"},{"sha":"44f9acd99f69e1ad72e3170567615c89f3b211b4","filename":"packages/jest-repl/src/cli/repl.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-repl%2Fsrc%2Fcli%2Frepl.ts","raw_url":"https://github.com/facebook/jest/raw/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-repl%2Fsrc%2Fcli%2Frepl.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-repl%2Fsrc%2Fcli%2Frepl.ts?ref=c389808021ab41eb40213dcd064c240563ac4d0b","patch":"@@ -29,6 +29,7 @@ const evalCommand: repl.REPLEval = (\n         cmd,\n         jestGlobalConfig.replname || 'jest.js',\n         {\n+          cacheFS: new Map<string, string>(),\n           config: jestProjectConfig,\n           configString: JSON.stringify(jestProjectConfig),\n           instrument: false,"},{"sha":"a07e5c234c1480fd16eb5fc5d72c994aa93a076d","filename":"packages/jest-runtime/src/index.ts","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-runtime%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-runtime%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Findex.ts?ref=c389808021ab41eb40213dcd064c240563ac4d0b","patch":"@@ -154,7 +154,7 @@ const supportsTopLevelAwait =\n   })();\n \n export default class Runtime {\n-  private _cacheFS: StringMap;\n+  private readonly _cacheFS: StringMap;\n   private _config: Config.ProjectConfig;\n   private _coverageOptions: ShouldInstrumentOptions;\n   private _currentlyExecutingModulePath: string;\n@@ -230,7 +230,7 @@ export default class Runtime {\n     this._esmoduleRegistry = new Map();\n     this._testPath = testPath;\n     this._resolver = resolver;\n-    this._scriptTransformer = new ScriptTransformer(config);\n+    this._scriptTransformer = new ScriptTransformer(config, this._cacheFS);\n     this._shouldAutoMock = config.automock;\n     this._sourceMapRegistry = new Map();\n     this._fileTransforms = new Map();"},{"sha":"f519cc67d66c555447813c538feb430f87972281","filename":"packages/jest-transform/src/ScriptTransformer.ts","status":"modified","additions":16,"deletions":5,"changes":21,"blob_url":"https://github.com/facebook/jest/blob/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-transform%2Fsrc%2FScriptTransformer.ts","raw_url":"https://github.com/facebook/jest/raw/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-transform%2Fsrc%2FScriptTransformer.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-transform%2Fsrc%2FScriptTransformer.ts?ref=c389808021ab41eb40213dcd064c240563ac4d0b","patch":"@@ -29,6 +29,7 @@ import shouldInstrument from './shouldInstrument';\n import type {\n   Options,\n   ReducedTransformOptions,\n+  StringMap,\n   TransformResult,\n   TransformedSource,\n   Transformer,\n@@ -64,12 +65,17 @@ async function waitForPromiseWithCleanup(\n \n export default class ScriptTransformer {\n   private _cache: ProjectCache;\n-  private _config: Config.ProjectConfig;\n+  private readonly _cacheFS: StringMap;\n+  private readonly _config: Config.ProjectConfig;\n   private _transformCache: Map<Config.Path, Transformer>;\n   private _transformConfigCache: Map<Config.Path, unknown>;\n \n-  constructor(config: Config.ProjectConfig) {\n+  constructor(\n+    config: Config.ProjectConfig,\n+    cacheFS: StringMap = new Map<string, string>(),\n+  ) {\n     this._config = config;\n+    this._cacheFS = cacheFS;\n     this._transformCache = new Map();\n     this._transformConfigCache = new Map();\n \n@@ -103,6 +109,7 @@ export default class ScriptTransformer {\n         .update(\n           transformer.getCacheKey(fileData, filename, {\n             ...options,\n+            cacheFS: this._cacheFS,\n             config: this._config,\n             configString,\n           }),\n@@ -288,6 +295,7 @@ export default class ScriptTransformer {\n     if (transform && shouldCallTransform) {\n       const processed = transform.process(content, filename, {\n         ...options,\n+        cacheFS: this._cacheFS,\n         config: this._config,\n         configString: this._cache.configString,\n       });\n@@ -375,9 +383,12 @@ export default class ScriptTransformer {\n     fileSource?: string,\n   ): TransformResult {\n     const {isCoreModule, isInternalModule} = options;\n-    const content = stripShebang(\n-      fileSource || fs.readFileSync(filename, 'utf8'),\n-    );\n+    let fileContent = fileSource ?? this._cacheFS.get(filename);\n+    if (!fileContent) {\n+      fileContent = fs.readFileSync(filename, 'utf8');\n+      this._cacheFS.set(filename, fileContent);\n+    }\n+    const content = stripShebang(fileContent);\n \n     let code = content;\n     let sourceMapPath: string | null = null;"},{"sha":"4f4ad1509f15a645343db142c0c6ea042f7f4dfb","filename":"packages/jest-transform/src/__tests__/__snapshots__/script_transformer.test.ts.snap","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-transform%2Fsrc%2F__tests__%2F__snapshots__%2Fscript_transformer.test.ts.snap","raw_url":"https://github.com/facebook/jest/raw/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-transform%2Fsrc%2F__tests__%2F__snapshots__%2Fscript_transformer.test.ts.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-transform%2Fsrc%2F__tests__%2F__snapshots__%2Fscript_transformer.test.ts.snap?ref=c389808021ab41eb40213dcd064c240563ac4d0b","patch":"@@ -7,6 +7,9 @@ exports[`ScriptTransformer passes expected transform options to getCacheKey 1`]\n       \"module.exports = \\\\\"banana\\\\\";\",\n       \"/fruits/banana.js\",\n       Object {\n+        \"cacheFS\": Map {\n+          \"/fruits/banana.js\" => \"module.exports = \\\\\"banana\\\\\";\",\n+        },\n         \"collectCoverage\": true,\n         \"collectCoverageFrom\": Array [],\n         \"collectCoverageOnlyFrom\": undefined,\n@@ -253,7 +256,7 @@ exports[`ScriptTransformer uses multiple preprocessors 1`] = `\n const TRANSFORMED = {\n   filename: '/fruits/banana.js',\n   script: 'module.exports = \"banana\";',\n-  config: '{\"collectCoverage\":false,\"collectCoverageFrom\":[],\"coverageProvider\":\"babel\",\"supportsDynamicImport\":false,\"supportsExportNamespaceFrom\":false,\"supportsStaticESM\":false,\"supportsTopLevelAwait\":false,\"instrument\":false,\"config\":{\"automock\":false,\"cache\":true,\"cacheDirectory\":\"/cache/\",\"clearMocks\":false,\"coveragePathIgnorePatterns\":[],\"cwd\":\"/test_root_dir/\",\"detectLeaks\":false,\"detectOpenHandles\":false,\"errorOnDeprecated\":false,\"extensionsToTreatAsEsm\":[],\"extraGlobals\":[],\"forceCoverageMatch\":[],\"globals\":{},\"haste\":{},\"injectGlobals\":true,\"moduleDirectories\":[],\"moduleFileExtensions\":[\"js\"],\"moduleLoader\":\"/test_module_loader_path\",\"moduleNameMapper\":[],\"modulePathIgnorePatterns\":[],\"modulePaths\":[],\"name\":\"test\",\"prettierPath\":\"prettier\",\"resetMocks\":false,\"resetModules\":false,\"restoreMocks\":false,\"rootDir\":\"/\",\"roots\":[],\"runner\":\"jest-runner\",\"setupFiles\":[],\"setupFilesAfterEnv\":[],\"skipFilter\":false,\"skipNodeResolution\":false,\"slowTestThreshold\":5,\"snapshotSerializers\":[],\"testEnvironment\":\"node\",\"testEnvironmentOptions\":{},\"testLocationInResults\":false,\"testMatch\":[],\"testPathIgnorePatterns\":[],\"testRegex\":[\"\\\\\\\\.test\\\\\\\\.js$\"],\"testRunner\":\"jest-circus/runner\",\"testURL\":\"http://localhost\",\"timers\":\"real\",\"transform\":[[\"\\\\\\\\.js$\",\"test_preprocessor\",{}],[\"\\\\\\\\.css$\",\"css-preprocessor\",{}]],\"transformIgnorePatterns\":[\"/node_modules/\"],\"watchPathIgnorePatterns\":[]},\"configString\":\"{\\\\\"automock\\\\\":false,\\\\\"cache\\\\\":true,\\\\\"cacheDirectory\\\\\":\\\\\"/cache/\\\\\",\\\\\"clearMocks\\\\\":false,\\\\\"coveragePathIgnorePatterns\\\\\":[],\\\\\"cwd\\\\\":\\\\\"/test_root_dir/\\\\\",\\\\\"detectLeaks\\\\\":false,\\\\\"detectOpenHandles\\\\\":false,\\\\\"errorOnDeprecated\\\\\":false,\\\\\"extensionsToTreatAsEsm\\\\\":[],\\\\\"extraGlobals\\\\\":[],\\\\\"forceCoverageMatch\\\\\":[],\\\\\"globals\\\\\":{},\\\\\"haste\\\\\":{},\\\\\"injectGlobals\\\\\":true,\\\\\"moduleDirectories\\\\\":[],\\\\\"moduleFileExtensions\\\\\":[\\\\\"js\\\\\"],\\\\\"moduleLoader\\\\\":\\\\\"/test_module_loader_path\\\\\",\\\\\"moduleNameMapper\\\\\":[],\\\\\"modulePathIgnorePatterns\\\\\":[],\\\\\"modulePaths\\\\\":[],\\\\\"name\\\\\":\\\\\"test\\\\\",\\\\\"prettierPath\\\\\":\\\\\"prettier\\\\\",\\\\\"resetMocks\\\\\":false,\\\\\"resetModules\\\\\":false,\\\\\"restoreMocks\\\\\":false,\\\\\"rootDir\\\\\":\\\\\"/\\\\\",\\\\\"roots\\\\\":[],\\\\\"runner\\\\\":\\\\\"jest-runner\\\\\",\\\\\"setupFiles\\\\\":[],\\\\\"setupFilesAfterEnv\\\\\":[],\\\\\"skipFilter\\\\\":false,\\\\\"skipNodeResolution\\\\\":false,\\\\\"slowTestThreshold\\\\\":5,\\\\\"snapshotSerializers\\\\\":[],\\\\\"testEnvironment\\\\\":\\\\\"node\\\\\",\\\\\"testEnvironmentOptions\\\\\":{},\\\\\"testLocationInResults\\\\\":false,\\\\\"testMatch\\\\\":[],\\\\\"testPathIgnorePatterns\\\\\":[],\\\\\"testRegex\\\\\":[\\\\\"\\\\\\\\\\\\\\\\.test\\\\\\\\\\\\\\\\.js$\\\\\"],\\\\\"testRunner\\\\\":\\\\\"jest-circus/runner\\\\\",\\\\\"testURL\\\\\":\\\\\"http://localhost\\\\\",\\\\\"timers\\\\\":\\\\\"real\\\\\",\\\\\"transform\\\\\":[[\\\\\"\\\\\\\\\\\\\\\\.js$\\\\\",\\\\\"test_preprocessor\\\\\",{}],[\\\\\"\\\\\\\\\\\\\\\\.css$\\\\\",\\\\\"css-preprocessor\\\\\",{}]],\\\\\"transformIgnorePatterns\\\\\":[\\\\\"/node_modules/\\\\\"],\\\\\"watchPathIgnorePatterns\\\\\":[]}\"}',\n+  config: '{\"collectCoverage\":false,\"collectCoverageFrom\":[],\"coverageProvider\":\"babel\",\"supportsDynamicImport\":false,\"supportsExportNamespaceFrom\":false,\"supportsStaticESM\":false,\"supportsTopLevelAwait\":false,\"instrument\":false,\"cacheFS\":{},\"config\":{\"automock\":false,\"cache\":true,\"cacheDirectory\":\"/cache/\",\"clearMocks\":false,\"coveragePathIgnorePatterns\":[],\"cwd\":\"/test_root_dir/\",\"detectLeaks\":false,\"detectOpenHandles\":false,\"errorOnDeprecated\":false,\"extensionsToTreatAsEsm\":[],\"extraGlobals\":[],\"forceCoverageMatch\":[],\"globals\":{},\"haste\":{},\"injectGlobals\":true,\"moduleDirectories\":[],\"moduleFileExtensions\":[\"js\"],\"moduleLoader\":\"/test_module_loader_path\",\"moduleNameMapper\":[],\"modulePathIgnorePatterns\":[],\"modulePaths\":[],\"name\":\"test\",\"prettierPath\":\"prettier\",\"resetMocks\":false,\"resetModules\":false,\"restoreMocks\":false,\"rootDir\":\"/\",\"roots\":[],\"runner\":\"jest-runner\",\"setupFiles\":[],\"setupFilesAfterEnv\":[],\"skipFilter\":false,\"skipNodeResolution\":false,\"slowTestThreshold\":5,\"snapshotSerializers\":[],\"testEnvironment\":\"node\",\"testEnvironmentOptions\":{},\"testLocationInResults\":false,\"testMatch\":[],\"testPathIgnorePatterns\":[],\"testRegex\":[\"\\\\\\\\.test\\\\\\\\.js$\"],\"testRunner\":\"jest-circus/runner\",\"testURL\":\"http://localhost\",\"timers\":\"real\",\"transform\":[[\"\\\\\\\\.js$\",\"test_preprocessor\",{}],[\"\\\\\\\\.css$\",\"css-preprocessor\",{}]],\"transformIgnorePatterns\":[\"/node_modules/\"],\"watchPathIgnorePatterns\":[]},\"configString\":\"{\\\\\"automock\\\\\":false,\\\\\"cache\\\\\":true,\\\\\"cacheDirectory\\\\\":\\\\\"/cache/\\\\\",\\\\\"clearMocks\\\\\":false,\\\\\"coveragePathIgnorePatterns\\\\\":[],\\\\\"cwd\\\\\":\\\\\"/test_root_dir/\\\\\",\\\\\"detectLeaks\\\\\":false,\\\\\"detectOpenHandles\\\\\":false,\\\\\"errorOnDeprecated\\\\\":false,\\\\\"extensionsToTreatAsEsm\\\\\":[],\\\\\"extraGlobals\\\\\":[],\\\\\"forceCoverageMatch\\\\\":[],\\\\\"globals\\\\\":{},\\\\\"haste\\\\\":{},\\\\\"injectGlobals\\\\\":true,\\\\\"moduleDirectories\\\\\":[],\\\\\"moduleFileExtensions\\\\\":[\\\\\"js\\\\\"],\\\\\"moduleLoader\\\\\":\\\\\"/test_module_loader_path\\\\\",\\\\\"moduleNameMapper\\\\\":[],\\\\\"modulePathIgnorePatterns\\\\\":[],\\\\\"modulePaths\\\\\":[],\\\\\"name\\\\\":\\\\\"test\\\\\",\\\\\"prettierPath\\\\\":\\\\\"prettier\\\\\",\\\\\"resetMocks\\\\\":false,\\\\\"resetModules\\\\\":false,\\\\\"restoreMocks\\\\\":false,\\\\\"rootDir\\\\\":\\\\\"/\\\\\",\\\\\"roots\\\\\":[],\\\\\"runner\\\\\":\\\\\"jest-runner\\\\\",\\\\\"setupFiles\\\\\":[],\\\\\"setupFilesAfterEnv\\\\\":[],\\\\\"skipFilter\\\\\":false,\\\\\"skipNodeResolution\\\\\":false,\\\\\"slowTestThreshold\\\\\":5,\\\\\"snapshotSerializers\\\\\":[],\\\\\"testEnvironment\\\\\":\\\\\"node\\\\\",\\\\\"testEnvironmentOptions\\\\\":{},\\\\\"testLocationInResults\\\\\":false,\\\\\"testMatch\\\\\":[],\\\\\"testPathIgnorePatterns\\\\\":[],\\\\\"testRegex\\\\\":[\\\\\"\\\\\\\\\\\\\\\\.test\\\\\\\\\\\\\\\\.js$\\\\\"],\\\\\"testRunner\\\\\":\\\\\"jest-circus/runner\\\\\",\\\\\"testURL\\\\\":\\\\\"http://localhost\\\\\",\\\\\"timers\\\\\":\\\\\"real\\\\\",\\\\\"transform\\\\\":[[\\\\\"\\\\\\\\\\\\\\\\.js$\\\\\",\\\\\"test_preprocessor\\\\\",{}],[\\\\\"\\\\\\\\\\\\\\\\.css$\\\\\",\\\\\"css-preprocessor\\\\\",{}]],\\\\\"transformIgnorePatterns\\\\\":[\\\\\"/node_modules/\\\\\"],\\\\\"watchPathIgnorePatterns\\\\\":[]}\"}',\n };\n `;\n \n@@ -270,7 +273,7 @@ exports[`ScriptTransformer uses the supplied preprocessor 1`] = `\n const TRANSFORMED = {\n   filename: '/fruits/banana.js',\n   script: 'module.exports = \"banana\";',\n-  config: '{\"collectCoverage\":false,\"collectCoverageFrom\":[],\"coverageProvider\":\"babel\",\"supportsDynamicImport\":false,\"supportsExportNamespaceFrom\":false,\"supportsStaticESM\":false,\"supportsTopLevelAwait\":false,\"instrument\":false,\"config\":{\"automock\":false,\"cache\":true,\"cacheDirectory\":\"/cache/\",\"clearMocks\":false,\"coveragePathIgnorePatterns\":[],\"cwd\":\"/test_root_dir/\",\"detectLeaks\":false,\"detectOpenHandles\":false,\"errorOnDeprecated\":false,\"extensionsToTreatAsEsm\":[],\"extraGlobals\":[],\"forceCoverageMatch\":[],\"globals\":{},\"haste\":{},\"injectGlobals\":true,\"moduleDirectories\":[],\"moduleFileExtensions\":[\"js\"],\"moduleLoader\":\"/test_module_loader_path\",\"moduleNameMapper\":[],\"modulePathIgnorePatterns\":[],\"modulePaths\":[],\"name\":\"test\",\"prettierPath\":\"prettier\",\"resetMocks\":false,\"resetModules\":false,\"restoreMocks\":false,\"rootDir\":\"/\",\"roots\":[],\"runner\":\"jest-runner\",\"setupFiles\":[],\"setupFilesAfterEnv\":[],\"skipFilter\":false,\"skipNodeResolution\":false,\"slowTestThreshold\":5,\"snapshotSerializers\":[],\"testEnvironment\":\"node\",\"testEnvironmentOptions\":{},\"testLocationInResults\":false,\"testMatch\":[],\"testPathIgnorePatterns\":[],\"testRegex\":[\"\\\\\\\\.test\\\\\\\\.js$\"],\"testRunner\":\"jest-circus/runner\",\"testURL\":\"http://localhost\",\"timers\":\"real\",\"transform\":[[\"\\\\\\\\.js$\",\"test_preprocessor\",{}]],\"transformIgnorePatterns\":[\"/node_modules/\"],\"watchPathIgnorePatterns\":[]},\"configString\":\"{\\\\\"automock\\\\\":false,\\\\\"cache\\\\\":true,\\\\\"cacheDirectory\\\\\":\\\\\"/cache/\\\\\",\\\\\"clearMocks\\\\\":false,\\\\\"coveragePathIgnorePatterns\\\\\":[],\\\\\"cwd\\\\\":\\\\\"/test_root_dir/\\\\\",\\\\\"detectLeaks\\\\\":false,\\\\\"detectOpenHandles\\\\\":false,\\\\\"errorOnDeprecated\\\\\":false,\\\\\"extensionsToTreatAsEsm\\\\\":[],\\\\\"extraGlobals\\\\\":[],\\\\\"forceCoverageMatch\\\\\":[],\\\\\"globals\\\\\":{},\\\\\"haste\\\\\":{},\\\\\"injectGlobals\\\\\":true,\\\\\"moduleDirectories\\\\\":[],\\\\\"moduleFileExtensions\\\\\":[\\\\\"js\\\\\"],\\\\\"moduleLoader\\\\\":\\\\\"/test_module_loader_path\\\\\",\\\\\"moduleNameMapper\\\\\":[],\\\\\"modulePathIgnorePatterns\\\\\":[],\\\\\"modulePaths\\\\\":[],\\\\\"name\\\\\":\\\\\"test\\\\\",\\\\\"prettierPath\\\\\":\\\\\"prettier\\\\\",\\\\\"resetMocks\\\\\":false,\\\\\"resetModules\\\\\":false,\\\\\"restoreMocks\\\\\":false,\\\\\"rootDir\\\\\":\\\\\"/\\\\\",\\\\\"roots\\\\\":[],\\\\\"runner\\\\\":\\\\\"jest-runner\\\\\",\\\\\"setupFiles\\\\\":[],\\\\\"setupFilesAfterEnv\\\\\":[],\\\\\"skipFilter\\\\\":false,\\\\\"skipNodeResolution\\\\\":false,\\\\\"slowTestThreshold\\\\\":5,\\\\\"snapshotSerializers\\\\\":[],\\\\\"testEnvironment\\\\\":\\\\\"node\\\\\",\\\\\"testEnvironmentOptions\\\\\":{},\\\\\"testLocationInResults\\\\\":false,\\\\\"testMatch\\\\\":[],\\\\\"testPathIgnorePatterns\\\\\":[],\\\\\"testRegex\\\\\":[\\\\\"\\\\\\\\\\\\\\\\.test\\\\\\\\\\\\\\\\.js$\\\\\"],\\\\\"testRunner\\\\\":\\\\\"jest-circus/runner\\\\\",\\\\\"testURL\\\\\":\\\\\"http://localhost\\\\\",\\\\\"timers\\\\\":\\\\\"real\\\\\",\\\\\"transform\\\\\":[[\\\\\"\\\\\\\\\\\\\\\\.js$\\\\\",\\\\\"test_preprocessor\\\\\",{}]],\\\\\"transformIgnorePatterns\\\\\":[\\\\\"/node_modules/\\\\\"],\\\\\"watchPathIgnorePatterns\\\\\":[]}\"}',\n+  config: '{\"collectCoverage\":false,\"collectCoverageFrom\":[],\"coverageProvider\":\"babel\",\"supportsDynamicImport\":false,\"supportsExportNamespaceFrom\":false,\"supportsStaticESM\":false,\"supportsTopLevelAwait\":false,\"instrument\":false,\"cacheFS\":{},\"config\":{\"automock\":false,\"cache\":true,\"cacheDirectory\":\"/cache/\",\"clearMocks\":false,\"coveragePathIgnorePatterns\":[],\"cwd\":\"/test_root_dir/\",\"detectLeaks\":false,\"detectOpenHandles\":false,\"errorOnDeprecated\":false,\"extensionsToTreatAsEsm\":[],\"extraGlobals\":[],\"forceCoverageMatch\":[],\"globals\":{},\"haste\":{},\"injectGlobals\":true,\"moduleDirectories\":[],\"moduleFileExtensions\":[\"js\"],\"moduleLoader\":\"/test_module_loader_path\",\"moduleNameMapper\":[],\"modulePathIgnorePatterns\":[],\"modulePaths\":[],\"name\":\"test\",\"prettierPath\":\"prettier\",\"resetMocks\":false,\"resetModules\":false,\"restoreMocks\":false,\"rootDir\":\"/\",\"roots\":[],\"runner\":\"jest-runner\",\"setupFiles\":[],\"setupFilesAfterEnv\":[],\"skipFilter\":false,\"skipNodeResolution\":false,\"slowTestThreshold\":5,\"snapshotSerializers\":[],\"testEnvironment\":\"node\",\"testEnvironmentOptions\":{},\"testLocationInResults\":false,\"testMatch\":[],\"testPathIgnorePatterns\":[],\"testRegex\":[\"\\\\\\\\.test\\\\\\\\.js$\"],\"testRunner\":\"jest-circus/runner\",\"testURL\":\"http://localhost\",\"timers\":\"real\",\"transform\":[[\"\\\\\\\\.js$\",\"test_preprocessor\",{}]],\"transformIgnorePatterns\":[\"/node_modules/\"],\"watchPathIgnorePatterns\":[]},\"configString\":\"{\\\\\"automock\\\\\":false,\\\\\"cache\\\\\":true,\\\\\"cacheDirectory\\\\\":\\\\\"/cache/\\\\\",\\\\\"clearMocks\\\\\":false,\\\\\"coveragePathIgnorePatterns\\\\\":[],\\\\\"cwd\\\\\":\\\\\"/test_root_dir/\\\\\",\\\\\"detectLeaks\\\\\":false,\\\\\"detectOpenHandles\\\\\":false,\\\\\"errorOnDeprecated\\\\\":false,\\\\\"extensionsToTreatAsEsm\\\\\":[],\\\\\"extraGlobals\\\\\":[],\\\\\"forceCoverageMatch\\\\\":[],\\\\\"globals\\\\\":{},\\\\\"haste\\\\\":{},\\\\\"injectGlobals\\\\\":true,\\\\\"moduleDirectories\\\\\":[],\\\\\"moduleFileExtensions\\\\\":[\\\\\"js\\\\\"],\\\\\"moduleLoader\\\\\":\\\\\"/test_module_loader_path\\\\\",\\\\\"moduleNameMapper\\\\\":[],\\\\\"modulePathIgnorePatterns\\\\\":[],\\\\\"modulePaths\\\\\":[],\\\\\"name\\\\\":\\\\\"test\\\\\",\\\\\"prettierPath\\\\\":\\\\\"prettier\\\\\",\\\\\"resetMocks\\\\\":false,\\\\\"resetModules\\\\\":false,\\\\\"restoreMocks\\\\\":false,\\\\\"rootDir\\\\\":\\\\\"/\\\\\",\\\\\"roots\\\\\":[],\\\\\"runner\\\\\":\\\\\"jest-runner\\\\\",\\\\\"setupFiles\\\\\":[],\\\\\"setupFilesAfterEnv\\\\\":[],\\\\\"skipFilter\\\\\":false,\\\\\"skipNodeResolution\\\\\":false,\\\\\"slowTestThreshold\\\\\":5,\\\\\"snapshotSerializers\\\\\":[],\\\\\"testEnvironment\\\\\":\\\\\"node\\\\\",\\\\\"testEnvironmentOptions\\\\\":{},\\\\\"testLocationInResults\\\\\":false,\\\\\"testMatch\\\\\":[],\\\\\"testPathIgnorePatterns\\\\\":[],\\\\\"testRegex\\\\\":[\\\\\"\\\\\\\\\\\\\\\\.test\\\\\\\\\\\\\\\\.js$\\\\\"],\\\\\"testRunner\\\\\":\\\\\"jest-circus/runner\\\\\",\\\\\"testURL\\\\\":\\\\\"http://localhost\\\\\",\\\\\"timers\\\\\":\\\\\"real\\\\\",\\\\\"transform\\\\\":[[\\\\\"\\\\\\\\\\\\\\\\.js$\\\\\",\\\\\"test_preprocessor\\\\\",{}]],\\\\\"transformIgnorePatterns\\\\\":[\\\\\"/node_modules/\\\\\"],\\\\\"watchPathIgnorePatterns\\\\\":[]}\"}',\n };\n `;\n "},{"sha":"7be705772ae0f0504da8b90a956d0c8194331a4c","filename":"packages/jest-transform/src/__tests__/script_transformer.test.ts","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/facebook/jest/blob/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-transform%2Fsrc%2F__tests__%2Fscript_transformer.test.ts","raw_url":"https://github.com/facebook/jest/raw/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-transform%2Fsrc%2F__tests__%2Fscript_transformer.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-transform%2Fsrc%2F__tests__%2Fscript_transformer.test.ts?ref=c389808021ab41eb40213dcd064c240563ac4d0b","patch":"@@ -77,6 +77,15 @@ jest.mock(\n   {virtual: true},\n );\n \n+jest.mock(\n+  'cache_fs_preprocessor',\n+  () => ({\n+    getCacheKey: jest.fn(() => 'ab'),\n+    process: jest.fn(() => 'processedCode'),\n+  }),\n+  {virtual: true},\n+);\n+\n jest.mock(\n   'preprocessor-with-sourcemaps',\n   () => ({\n@@ -671,8 +680,8 @@ describe('ScriptTransformer', () => {\n     config = Object.assign(config, {\n       transform: [['\\\\.js$', 'configureable-preprocessor', transformerConfig]],\n     });\n-\n     const scriptTransformer = new ScriptTransformer(config);\n+\n     scriptTransformer.transform('/fruits/banana.js', {});\n     expect(\n       require('configureable-preprocessor').createTransformer,\n@@ -751,6 +760,31 @@ describe('ScriptTransformer', () => {\n     expect(writeFileAtomic.sync).not.toBeCalled();\n   });\n \n+  it('should reuse the value from in-memory cache which is set by custom transformer', () => {\n+    const cacheFS = new Map<string, string>();\n+    const testPreprocessor = require('cache_fs_preprocessor');\n+    const scriptTransformer = new ScriptTransformer(\n+      {\n+        ...config,\n+        transform: [['\\\\.js$', 'cache_fs_preprocessor', {}]],\n+      },\n+      cacheFS,\n+    );\n+    const fileName1 = '/fruits/banana.js';\n+    const fileName2 = '/fruits/kiwi.js';\n+\n+    scriptTransformer.transform(fileName1, getCoverageOptions());\n+\n+    cacheFS.set(fileName2, 'foo');\n+\n+    scriptTransformer.transform(fileName2, getCoverageOptions());\n+\n+    expect(testPreprocessor.getCacheKey.mock.calls[0][2].cacheFS).toBeDefined()\n+    expect(testPreprocessor.process.mock.calls[0][2].cacheFS).toBeDefined()\n+    expect(fs.readFileSync).toHaveBeenCalledTimes(1);\n+    expect(fs.readFileSync).toBeCalledWith(fileName1, 'utf8');\n+  });\n+\n   it('does not reuse the in-memory cache between different projects', () => {\n     const scriptTransformer = new ScriptTransformer({\n       ...config,"},{"sha":"1900beb5624599071275e6c22d375532ec90a9ef","filename":"packages/jest-transform/src/types.ts","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-transform%2Fsrc%2Ftypes.ts","raw_url":"https://github.com/facebook/jest/raw/c389808021ab41eb40213dcd064c240563ac4d0b/packages%2Fjest-transform%2Fsrc%2Ftypes.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-transform%2Fsrc%2Ftypes.ts?ref=c389808021ab41eb40213dcd064c240563ac4d0b","patch":"@@ -50,7 +50,11 @@ export interface ReducedTransformOptions extends CallerTransformOptions {\n   instrument: boolean;\n }\n \n+export type StringMap = Map<string, string>;\n+\n export interface TransformOptions extends ReducedTransformOptions {\n+  /** a cached file system which is used in jest-runtime - useful to improve performance */\n+  cacheFS: StringMap;\n   config: Config.ProjectConfig;\n   /** A stringified version of the configuration - useful in cache busting */\n   configString: string;"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/7951","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/7951/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/7951/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/7951/events","html_url":"https://github.com/facebook/jest/pull/7951","id":413169020,"node_id":"MDExOlB1bGxSZXF1ZXN0MjU1MjE4MTE1","number":7951,"title":"fix jest-haste-map-types","user":{"login":"jeysal","id":16069751,"node_id":"MDQ6VXNlcjE2MDY5NzUx","avatar_url":"https://avatars.githubusercontent.com/u/16069751?v=4","gravatar_id":"","url":"https://api.github.com/users/jeysal","html_url":"https://github.com/jeysal","followers_url":"https://api.github.com/users/jeysal/followers","following_url":"https://api.github.com/users/jeysal/following{/other_user}","gists_url":"https://api.github.com/users/jeysal/gists{/gist_id}","starred_url":"https://api.github.com/users/jeysal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeysal/subscriptions","organizations_url":"https://api.github.com/users/jeysal/orgs","repos_url":"https://api.github.com/users/jeysal/repos","events_url":"https://api.github.com/users/jeysal/events{/privacy}","received_events_url":"https://api.github.com/users/jeysal/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-02-21T23:16:06Z","updated_at":"2021-05-12T00:07:16Z","closed_at":"2019-02-22T00:17:37Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/7951","html_url":"https://github.com/facebook/jest/pull/7951","diff_url":"https://github.com/facebook/jest/pull/7951.diff","patch_url":"https://github.com/facebook/jest/pull/7951.patch","merged_at":"2019-02-22T00:17:37Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md in the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\n`jest-haste-map` wants to do both `export = HasteMap` and multiple `export type SomeType`. Until we migrate it over to use a proper ESM default export, the way to do this in TypeScript is namespaces - see [this StackOverflow answer](https://stackoverflow.com/a/51238234). This fixes our `jest-haste-map/build/index.d.ts`:\r\n\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/tmp/old/index.d.ts b/tmp/new/index.d.ts\r\nindex ff4589f52..d2fe5bd75 100644\r\n--- a/tmp/old/index.d.ts\r\n+++ b/tmp/new/index.d.ts\r\n@@ -4,9 +4,180 @@\r\n  * This source code is licensed under the MIT license found in the\r\n  * LICENSE file in the root directory of this source tree.\r\n  */\r\n+/// <reference types=\"node\" />\r\n+import EventEmitter from 'events';\r\n+import { Config } from '@jest/types';\r\n+import H from './constants';\r\n import HasteFS from './HasteFS';\r\n import HasteModuleMap, { SerializableModuleMap as HasteSerializableModuleMap } from './ModuleMap';\r\n-export declare type ModuleMap = HasteModuleMap;\r\n-export declare type SerializableModuleMap = HasteSerializableModuleMap;\r\n-export declare type FS = HasteFS;\r\n+import { HasteMap as HasteMapObject, HasteRegExp, InternalHasteMap, Mapper } from './types';\r\n+declare type HType = typeof H;\r\n+declare type Options = {\r\n+    cacheDirectory?: string;\r\n+    computeDependencies?: boolean;\r\n+    computeSha1?: boolean;\r\n+    console?: Console;\r\n+    dependencyExtractor?: string;\r\n+    extensions: Array<string>;\r\n+    forceNodeFilesystemAPI?: boolean;\r\n+    hasteImplModulePath?: string;\r\n+    ignorePattern?: HasteRegExp;\r\n+    mapper?: Mapper;\r\n+    maxWorkers: number;\r\n+    mocksPattern?: string;\r\n+    name: string;\r\n+    platforms: Array<string>;\r\n+    providesModuleNodeModules?: Array<string>;\r\n+    resetCache?: boolean;\r\n+    retainAllFiles: boolean;\r\n+    rootDir: string;\r\n+    roots: Array<string>;\r\n+    throwOnModuleCollision?: boolean;\r\n+    useWatchman?: boolean;\r\n+    watch?: boolean;\r\n+};\r\n+declare namespace HasteMap {\r\n+    type ModuleMap = HasteModuleMap;\r\n+    type SerializableModuleMap = HasteSerializableModuleMap;\r\n+    type FS = HasteFS;\r\n+}\r\n+/**\r\n+ * HasteMap is a JavaScript implementation of Facebook's haste module system.\r\n+ *\r\n+ * This implementation is inspired by https://github.com/facebook/node-haste\r\n+ * and was built with for high-performance in large code repositories with\r\n+ * hundreds of thousands of files. This implementation is scalable and provides\r\n+ * predictable performance.\r\n+ *\r\n+ * Because the haste map creation and synchronization is critical to startup\r\n+ * performance and most tasks are blocked by I/O this class makes heavy use of\r\n+ * synchronous operations. It uses worker processes for parallelizing file\r\n+ * access and metadata extraction.\r\n+ *\r\n+ * The data structures created by `jest-haste-map` can be used directly from the\r\n+ * cache without further processing. The metadata objects in the `files` and\r\n+ * `map` objects contain cross-references: a metadata object from one can look\r\n+ * up the corresponding metadata object in the other map. Note that in most\r\n+ * projects, the number of files will be greater than the number of haste\r\n+ * modules one module can refer to many files based on platform extensions.\r\n+ *\r\n+ * type HasteMap = {\r\n+ *   clocks: WatchmanClocks,\r\n+ *   files: {[filepath: string]: FileMetaData},\r\n+ *   map: {[id: string]: ModuleMapItem},\r\n+ *   mocks: {[id: string]: string},\r\n+ * }\r\n+ *\r\n+ * // Watchman clocks are used for query synchronization and file system deltas.\r\n+ * type WatchmanClocks = {[filepath: string]: string};\r\n+ *\r\n+ * type FileMetaData = {\r\n+ *   id: ?string, // used to look up module metadata objects in `map`.\r\n+ *   mtime: number, // check for outdated files.\r\n+ *   size: number, // size of the file in bytes.\r\n+ *   visited: boolean, // whether the file has been parsed or not.\r\n+ *   dependencies: Array<string>, // all relative dependencies of this file.\r\n+ *   sha1: ?string, // SHA-1 of the file, if requested via options.\r\n+ * };\r\n+ *\r\n+ * // Modules can be targeted to a specific platform based on the file name.\r\n+ * // Example: platform.ios.js and Platform.android.js will both map to the same\r\n+ * // `Platform` module. The platform should be specified during resolution.\r\n+ * type ModuleMapItem = {[platform: string]: ModuleMetaData};\r\n+ *\r\n+ * //\r\n+ * type ModuleMetaData = {\r\n+ *   path: string, // the path to look up the file object in `files`.\r\n+ *   type: string, // the module type (either `package` or `module`).\r\n+ * };\r\n+ *\r\n+ * Note that the data structures described above are conceptual only. The actual\r\n+ * implementation uses arrays and constant keys for metadata storage. Instead of\r\n+ * `{id: 'flatMap', mtime: 3421, size: 42, visited: true, dependencies: []}` the real\r\n+ * representation is similar to `['flatMap', 3421, 42, 1, []]` to save storage space\r\n+ * and reduce parse and write time of a big JSON blob.\r\n+ *\r\n+ * The HasteMap is created as follows:\r\n+ *  1. read data from the cache or create an empty structure.\r\n+ *\r\n+ *  2. crawl the file system.\r\n+ *     * empty cache: crawl the entire file system.\r\n+ *     * cache available:\r\n+ *       * if watchman is available: get file system delta changes.\r\n+ *       * if watchman is unavailable: crawl the entire file system.\r\n+ *     * build metadata objects for every file. This builds the `files` part of\r\n+ *       the `HasteMap`.\r\n+ *\r\n+ *  3. parse and extract metadata from changed files.\r\n+ *     * this is done in parallel over worker processes to improve performance.\r\n+ *     * the worst case is to parse all files.\r\n+ *     * the best case is no file system access and retrieving all data from\r\n+ *       the cache.\r\n+ *     * the average case is a small number of changed files.\r\n+ *\r\n+ *  4. serialize the new `HasteMap` in a cache file.\r\n+ *     Worker processes can directly access the cache through `HasteMap.read()`.\r\n+ *\r\n+ */\r\n+declare class HasteMap extends EventEmitter {\r\n+    private _buildPromise;\r\n+    private _cachePath;\r\n+    private _changeInterval?;\r\n+    private _console;\r\n+    private _options;\r\n+    private _watchers;\r\n+    private _whitelist;\r\n+    private _worker;\r\n+    constructor(options: Options);\r\n+    static getCacheFilePath(tmpdir: Config.Path, name: string, ...extra: Array<string>): string;\r\n+    getCacheFilePath(): string;\r\n+    build(): Promise<HasteMapObject>;\r\n+    /**\r\n+     * 1. read data from the cache or create an empty structure.\r\n+     */\r\n+    read(): InternalHasteMap;\r\n+    readModuleMap(): HasteModuleMap;\r\n+    /**\r\n+     * 2. crawl the file system.\r\n+     */\r\n+    private _buildFileMap;\r\n+    /**\r\n+     * 3. parse and extract metadata from changed files.\r\n+     */\r\n+    private _processFile;\r\n+    private _buildHasteMap;\r\n+    private _cleanup;\r\n+    /**\r\n+     * 4. serialize the new `HasteMap` in a cache file.\r\n+     */\r\n+    private _persist;\r\n+    /**\r\n+     * Creates workers or parses files and extracts metadata in-process.\r\n+     */\r\n+    private _getWorker;\r\n+    private _crawl;\r\n+    /**\r\n+     * Watch mode\r\n+     */\r\n+    private _watch;\r\n+    /**\r\n+     * This function should be called when the file under `filePath` is removed\r\n+     * or changed. When that happens, we want to figure out if that file was\r\n+     * part of a group of files that had the same ID. If it was, we want to\r\n+     * remove it from the group. Furthermore, if there is only one file\r\n+     * remaining in the group, then we want to restore that single file as the\r\n+     * correct resolution for its ID, and cleanup the duplicates index.\r\n+     */\r\n+    private _recoverDuplicates;\r\n+    end(): Promise<void>;\r\n+    /**\r\n+     * Helpers\r\n+     */\r\n+    private _ignore;\r\n+    private _isNodeModulesDir;\r\n+    private _createEmptyMap;\r\n+    static H: HType;\r\n+    static ModuleMap: typeof HasteModuleMap;\r\n+}\r\n+export = HasteMap;\r\n //# sourceMappingURL=index.d.ts.map\r\n\\ No newline at end of file\r\n```\r\n</details>\r\n\r\n---\r\n\r\n`@babel/plugin-transform-typescript` does not support namespaces (because it's not possible to really support them), but we only want to put a few types in them, so I wrote a [Babel plugin](https://github.com/jeysal/babel-plugin-typescript-strip-namespaces) that strips them away in those simple cases. This way, `yarn build` works and `jest-haste-map/build/index.js` is unchanged.\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n## Test plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->\r\nManual inspection of `jest-haste-map/build/index.{js,d.ts}`","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/7951/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/7951/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"69706c1b3943795a106bf7c67108d183b7e0aeb8","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/6636a67adb5c0697609838d87945e58478747d1a/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/6636a67adb5c0697609838d87945e58478747d1a/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=6636a67adb5c0697609838d87945e58478747d1a","patch":"@@ -21,7 +21,7 @@\n \n ### Chore & Maintenance\n \n-- `[*]`: Setup building, linting and testing of TypeScript ([#7808](https://github.com/facebook/jest/pull/7808), [#7855](https://github.com/facebook/jest/pull/7855))\n+- `[*]`: Setup building, linting and testing of TypeScript ([#7808](https://github.com/facebook/jest/pull/7808), [#7855](https://github.com/facebook/jest/pull/7855), [#7951](https://github.com/facebook/jest/pull/7951))\n - `[pretty-format]`: Migrate to TypeScript ([#7809](https://github.com/facebook/jest/pull/7809))\n - `[diff-sequences]`: Migrate to Typescript ([#7820](https://github.com/facebook/jest/pull/7820))\n - `[jest-get-type]`: Migrate to TypeScript ([#7818](https://github.com/facebook/jest/pull/7818))\n@@ -38,7 +38,7 @@\n - `[jest-watcher]`: Migrate to TypeScript ([#7843](https://github.com/facebook/jest/pull/7843))\n - `[jest-mock]`: Migrate to TypeScript ([#7847](https://github.com/facebook/jest/pull/7847), [#7850](https://github.com/facebook/jest/pull/7850))\n - `[jest-worker]`: Migrate to TypeScript ([#7853](https://github.com/facebook/jest/pull/7853))\n-- `[jest-haste-map]`: Migrate to TypeScript ([#7854](https://github.com/facebook/jest/pull/7854))\n+- `[jest-haste-map]`: Migrate to TypeScript ([#7854](https://github.com/facebook/jest/pull/7854), [#7951](https://github.com/facebook/jest/pull/7951))\n - `[docs]`: Fix image paths in SnapshotTesting.md for current and version 24 ([#7872](https://github.com/facebook/jest/pull/7872))\n - `[babel-jest]`: Migrate to TypeScript ([#7862](https://github.com/facebook/jest/pull/7862))\n - `[jest-resolve]`: Migrate to TypeScript ([#7871](https://github.com/facebook/jest/pull/7871))"},{"sha":"5b6610d3801e46f99fca0037360ad7836e27d375","filename":"babel.config.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/6636a67adb5c0697609838d87945e58478747d1a/babel.config.js","raw_url":"https://github.com/facebook/jest/raw/6636a67adb5c0697609838d87945e58478747d1a/babel.config.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/babel.config.js?ref=6636a67adb5c0697609838d87945e58478747d1a","patch":"@@ -9,6 +9,7 @@ module.exports = {\n     },\n     {\n       plugins: [\n+        'babel-plugin-typescript-strip-namespaces',\n         require.resolve(\n           './scripts/babel-plugin-jest-replace-ts-export-assignment.js'\n         ),"},{"sha":"12bab1f44dbfe785c300986eaafb34fec4c29098","filename":"package.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/6636a67adb5c0697609838d87945e58478747d1a/package.json","raw_url":"https://github.com/facebook/jest/raw/6636a67adb5c0697609838d87945e58478747d1a/package.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/package.json?ref=6636a67adb5c0697609838d87945e58478747d1a","patch":"@@ -19,6 +19,7 @@\n     \"ansi-styles\": \"^3.2.0\",\n     \"babel-eslint\": \"^9.0.0\",\n     \"babel-loader\": \"^8.0.5\",\n+    \"babel-plugin-typescript-strip-namespaces\": \"^1.1.0\",\n     \"camelcase\": \"^5.0.0\",\n     \"chalk\": \"^2.0.1\",\n     \"codecov\": \"^3.0.0\","},{"sha":"f809a46df037b45403082f1ceb1b4be2e5611c8a","filename":"packages/jest-haste-map/src/index.ts","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/facebook/jest/blob/6636a67adb5c0697609838d87945e58478747d1a/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/6636a67adb5c0697609838d87945e58478747d1a/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.ts?ref=6636a67adb5c0697609838d87945e58478747d1a","patch":"@@ -98,9 +98,12 @@ type Watcher = {\n \n type WorkerInterface = {worker: typeof worker; getSha1: typeof getSha1};\n \n-export type ModuleMap = HasteModuleMap;\n-export type SerializableModuleMap = HasteSerializableModuleMap;\n-export type FS = HasteFS;\n+// TODO: Ditch namespace when this module exports ESM\n+namespace HasteMap {\n+  export type ModuleMap = HasteModuleMap;\n+  export type SerializableModuleMap = HasteSerializableModuleMap;\n+  export type FS = HasteFS;\n+}\n \n const CHANGE_INTERVAL = 30;\n const MAX_WAIT_TIME = 240000;\n@@ -368,7 +371,7 @@ class HasteMap extends EventEmitter {\n     return hasteMap;\n   }\n \n-  readModuleMap(): ModuleMap {\n+  readModuleMap(): HasteModuleMap {\n     const data = this.read();\n     return new HasteModuleMap({\n       duplicates: data.duplicates,\n@@ -1079,4 +1082,4 @@ function copyMap<K, V>(input: Map<K, V>): Map<K, V> {\n HasteMap.H = H;\n HasteMap.ModuleMap = HasteModuleMap;\n \n-module.exports = HasteMap;\n+export = HasteMap;"},{"sha":"f6bdea51c0ba8259a6ae56982840b1f16eca60b2","filename":"packages/jest-resolve-dependencies/src/__tests__/dependency_resolver.test.ts","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/6636a67adb5c0697609838d87945e58478747d1a/packages%2Fjest-resolve-dependencies%2Fsrc%2F__tests__%2Fdependency_resolver.test.ts","raw_url":"https://github.com/facebook/jest/raw/6636a67adb5c0697609838d87945e58478747d1a/packages%2Fjest-resolve-dependencies%2Fsrc%2F__tests__%2Fdependency_resolver.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve-dependencies%2Fsrc%2F__tests__%2Fdependency_resolver.test.ts?ref=6636a67adb5c0697609838d87945e58478747d1a","patch":"@@ -33,10 +33,10 @@ beforeEach(() => {\n     roots: ['./packages/jest-resolve-dependencies'],\n   });\n   return Runtime.createContext(config, {maxWorkers, watchman: false}).then(\n-    (hasteMap: any) => {\n+    (runtimeContext: any) => {\n       dependencyResolver = new DependencyResolver(\n-        hasteMap.resolver,\n-        hasteMap.hasteFS,\n+        runtimeContext.resolver,\n+        runtimeContext.hasteFS,\n         buildSnapshotResolver(config),\n       );\n     },"},{"sha":"021ba08aeeac103974dcf95fe9205a6f33cf1405","filename":"packages/jest-resolve/src/__tests__/resolve.test.ts","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/6636a67adb5c0697609838d87945e58478747d1a/packages%2Fjest-resolve%2Fsrc%2F__tests__%2Fresolve.test.ts","raw_url":"https://github.com/facebook/jest/raw/6636a67adb5c0697609838d87945e58478747d1a/packages%2Fjest-resolve%2Fsrc%2F__tests__%2Fresolve.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve%2Fsrc%2F__tests__%2Fresolve.test.ts?ref=6636a67adb5c0697609838d87945e58478747d1a","patch":"@@ -8,17 +8,14 @@\n \n import fs from 'fs';\n import path from 'path';\n-import HasteMap from 'jest-haste-map';\n+import {ModuleMap} from 'jest-haste-map';\n import Resolver from '../';\n // @ts-ignore: js file\n import userResolver from '../__mocks__/userResolver';\n import nodeModulesPaths from '../nodeModulesPaths';\n import defaultResolver from '../defaultResolver';\n import {ResolverConfig} from '../types';\n \n-// @ts-ignore: types are wrong. not sure how...\n-const {ModuleMap} = HasteMap;\n-\n jest.mock('../__mocks__/userResolver');\n \n beforeEach(() => {"},{"sha":"3d92b9f94ceee42fac7cf513ebf50cd4278584fe","filename":"packages/jest-transform/src/ScriptTransformer.ts","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/6636a67adb5c0697609838d87945e58478747d1a/packages%2Fjest-transform%2Fsrc%2FScriptTransformer.ts","raw_url":"https://github.com/facebook/jest/raw/6636a67adb5c0697609838d87945e58478747d1a/packages%2Fjest-transform%2Fsrc%2FScriptTransformer.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-transform%2Fsrc%2FScriptTransformer.ts?ref=6636a67adb5c0697609838d87945e58478747d1a","patch":"@@ -110,7 +110,6 @@ export default class ScriptTransformer {\n     content: string,\n     instrument: boolean,\n   ): Config.Path {\n-    // @ts-ignore: not properly exported (needs ESM)\n     const baseCacheDir = HasteMap.getCacheFilePath(\n       this._config.cacheDirectory,\n       'jest-transform-cache-' + this._config.name,"},{"sha":"a16c547fc344bbd5a2cdf0770fbfd4c271992b3d","filename":"yarn.lock","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/6636a67adb5c0697609838d87945e58478747d1a/yarn.lock","raw_url":"https://github.com/facebook/jest/raw/6636a67adb5c0697609838d87945e58478747d1a/yarn.lock","contents_url":"https://api.github.com/repos/facebook/jest/contents/yarn.lock?ref=6636a67adb5c0697609838d87945e58478747d1a","patch":"@@ -2610,6 +2610,11 @@ babel-plugin-syntax-trailing-function-commas@^7.0.0-beta.0:\n   resolved \"https://registry.yarnpkg.com/babel-plugin-syntax-trailing-function-commas/-/babel-plugin-syntax-trailing-function-commas-7.0.0-beta.0.tgz#aa213c1435e2bffeb6fca842287ef534ad05d5cf\"\n   integrity sha512-Xj9XuRuz3nTSbaTXWv3itLOcxyF4oPD8douBBmj7U9BBC6nEBYfyOJYQMf/8PJAFotC62UY5dFfIGEPr7WswzQ==\n \n+babel-plugin-typescript-strip-namespaces@^1.1.0:\n+  version \"1.1.0\"\n+  resolved \"https://registry.yarnpkg.com/babel-plugin-typescript-strip-namespaces/-/babel-plugin-typescript-strip-namespaces-1.1.0.tgz#7f8b022505bc742905801f9c41dd93f08f34ffc4\"\n+  integrity sha512-69kdF5HJoSIdgTVtHDor6XGJzVcxF5Hh92Rnh+rcitBZpj0pVU3Go0CrNJdPog6uoTcB90Ifk9O55FPZg0XN4w==\n+\n babel-polyfill@6.23.0:\n   version \"6.23.0\"\n   resolved \"https://registry.yarnpkg.com/babel-polyfill/-/babel-polyfill-6.23.0.tgz#8364ca62df8eafb830499f699177466c3b03499d\""}]},{"url":"https://api.github.com/repos/facebook/jest/issues/1427","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/1427/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/1427/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/1427/events","html_url":"https://github.com/facebook/jest/pull/1427","id":171103867,"node_id":"MDExOlB1bGxSZXF1ZXN0ODEyNjc0OTc=","number":1427,"title":"Refactor jest-haste-map (1/n)","user":{"login":"cpojer","id":13352,"node_id":"MDQ6VXNlcjEzMzUy","avatar_url":"https://avatars.githubusercontent.com/u/13352?v=4","gravatar_id":"","url":"https://api.github.com/users/cpojer","html_url":"https://github.com/cpojer","followers_url":"https://api.github.com/users/cpojer/followers","following_url":"https://api.github.com/users/cpojer/following{/other_user}","gists_url":"https://api.github.com/users/cpojer/gists{/gist_id}","starred_url":"https://api.github.com/users/cpojer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpojer/subscriptions","organizations_url":"https://api.github.com/users/cpojer/orgs","repos_url":"https://api.github.com/users/cpojer/repos","events_url":"https://api.github.com/users/cpojer/events{/privacy}","received_events_url":"https://api.github.com/users/cpojer/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2016-08-15T03:50:19Z","updated_at":"2021-05-14T12:08:25Z","closed_at":"2016-08-15T18:53:46Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/1427","html_url":"https://github.com/facebook/jest/pull/1427","diff_url":"https://github.com/facebook/jest/pull/1427.diff","patch_url":"https://github.com/facebook/jest/pull/1427.patch","merged_at":"2016-08-15T18:53:46Z"},"body":"This is the first diff in a series to make `jest-haste-map` more performant. This diff doesn't impact performance but rather improves APIs so I can do further work:\n- Instead of a POJO, a `HasteMap` object now consists of `HasteFS` and `ModuleMap` instances. These classes are intended to be immutable (for now) and have accessors for all data that you might want to read from it. In a follow-up, this will enable us to split up the data for both into separate cache files. Jest workers only need the module map and most of the time only either the file or the module maps are written. By splitting them in half and only writing or reading one, we can cut write time by 50 % and then read time in the worker by another 50 %. On www that's about 300-500ms per invocation of Jest (yes, really!)\n- Cleaned up CoverageReporter's glob matching and moved it into HasteFS.\n- Cleaned up snapshot cleanup to not require the entire HasteMap.\n- Cleaned up all the crap we are passing around.\n- Fixed a bug in stack trace cleanup. During debugging the first line was consistently jasmine, which we should always filter, so that the stack trace with user code and be shown (cc @dmitriiabramov).\n\nPlease expect some of the uglier parts of this diff to be cleaned up soon.\n\ncc @davidaurelio @matryoshcow\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/1427/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/1427/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"9714ca1070c6b52348c8e435c8095ce4510e2fde","filename":"packages/jest-cli/package.json","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fpackage.json?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -21,7 +21,6 @@\n     \"jest-snapshot\": \"^14.0.0\",\n     \"jest-util\": \"^14.0.0\",\n     \"json-stable-stringify\": \"^1.0.0\",\n-    \"multimatch\": \"^2.1.0\",\n     \"node-notifier\": \"^4.6.0\",\n     \"sane\": \"^1.2.0\",\n     \"which\": \"^1.1.1\","},{"sha":"7ca8edfda81c48cf98c5323f0e871b969a60ab05","filename":"packages/jest-cli/src/SearchSource.js","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fsrc%2FSearchSource.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fsrc%2FSearchSource.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2FSearchSource.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -134,7 +134,7 @@ class SearchSource {\n     testPathPattern: StrOrRegExpPattern,\n   ): SearchResult {\n     return this._filterTestPathsWithStats(\n-      Object.keys(this._hasteContext.moduleMap.files),\n+      this._hasteContext.hasteFS.getAllFiles(),\n       testPathPattern,\n     );\n   }\n@@ -150,7 +150,7 @@ class SearchSource {\n   ): SearchResult {\n     if (testPathPattern && !(testPathPattern instanceof RegExp)) {\n       const maybeFile = path.resolve(process.cwd(), testPathPattern);\n-      if (fileExists(maybeFile, this._hasteContext.moduleMap.files)) {\n+      if (fileExists(maybeFile, this._hasteContext.hasteFS)) {\n         return this._filterTestPathsWithStats([maybeFile]);\n       }\n     }\n@@ -161,7 +161,7 @@ class SearchSource {\n   findRelatedTests(allPaths: Set<Path>): SearchResult {\n     const dependencyResolver = new DependencyResolver(\n       this._hasteContext.resolver,\n-      this._hasteContext.moduleMap,\n+      this._hasteContext.hasteFS,\n     );\n     return {\n       paths: dependencyResolver.resolveInverse("},{"sha":"3220fc63cafec17631505faca8711bb2709c6cb5","filename":"packages/jest-cli/src/TestRunner.js","status":"modified","additions":18,"deletions":21,"changes":39,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fsrc%2FTestRunner.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fsrc%2FTestRunner.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2FTestRunner.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -15,7 +15,7 @@ import type {\n   TestResult,\n } from 'types/TestResult';\n import type {Config, Path} from 'types/Config';\n-import type {HasteContext} from 'types/HasteMap';\n+import type {HasteContext, HasteFS} from 'types/HasteMap';\n import type BaseReporter from './reporters/BaseReporter';\n \n const Test = require('./Test');\n@@ -57,13 +57,13 @@ class TestRunner {\n   _testPerformanceCache: Object;\n \n   constructor(\n-    hasteMap: HasteContext,\n+    hasteContext: HasteContext,\n     config: Config,\n     options: Options,\n   ) {\n     this._config = config;\n-    this._dispatcher = new ReporterDispatcher({hasteContext: hasteMap});\n-    this._hasteContext = hasteMap;\n+    this._dispatcher = new ReporterDispatcher(hasteContext.hasteFS);\n+    this._hasteContext = hasteContext;\n     this._options = options;\n     this._setupReporters();\n \n@@ -180,18 +180,17 @@ class TestRunner {\n     };\n \n     const updateSnapshotSummary = () => {\n-      return snapshot.cleanup(this._hasteContext, config.updateSnapshot)\n-        .then(status => {\n-          aggregatedResults.snapshot.filesRemoved += status.filesRemoved;\n-          aggregatedResults.snapshot.didUpdate = config.updateSnapshot;\n-          aggregatedResults.snapshot.failure = !!(\n-            !aggregatedResults.snapshot.didUpdate && (\n-              aggregatedResults.snapshot.unchecked ||\n-              aggregatedResults.snapshot.unmatched ||\n-              aggregatedResults.snapshot.filesRemoved\n-            )\n-          );\n-        });\n+      const status =\n+        snapshot.cleanup(this._hasteContext.hasteFS, config.updateSnapshot);\n+      aggregatedResults.snapshot.filesRemoved += status.filesRemoved;\n+      aggregatedResults.snapshot.didUpdate = config.updateSnapshot;\n+      aggregatedResults.snapshot.failure = !!(\n+        !aggregatedResults.snapshot.didUpdate && (\n+          aggregatedResults.snapshot.unchecked ||\n+          aggregatedResults.snapshot.unmatched ||\n+          aggregatedResults.snapshot.filesRemoved\n+        )\n+      );\n     };\n \n     // Run in band if we only have one test or one worker available.\n@@ -404,13 +403,11 @@ class ReporterDispatcher {\n   _disabled: boolean;\n   _reporters: Array<BaseReporter>;\n   _runnerContext: {\n-    hasteContext: HasteContext,\n+    hasteFS: HasteFS,\n   };\n \n-  constructor(options: {hasteContext: HasteContext}) {\n-    this._runnerContext = {\n-      hasteContext: options.hasteContext,\n-    };\n+  constructor(hasteFS: HasteFS) {\n+    this._runnerContext = {hasteFS};\n     this._reporters = [];\n   }\n "},{"sha":"1ac2521708a96ff1175e2f2745c2bc469257965f","filename":"packages/jest-cli/src/TestWorker.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fsrc%2FTestWorker.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fsrc%2FTestWorker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2FTestWorker.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -55,7 +55,7 @@ module.exports = (data: WorkerData, callback: WorkerCallback) => {\n     if (!resolvers[name]) {\n       resolvers[name] = Runtime.createResolver(\n         data.config,\n-        Runtime.createHasteMap(data.config).read(),\n+        Runtime.createHasteMap(data.config).readModuleMap(),\n       );\n     }\n "},{"sha":"e93fab876ddd3edb0717c328dbf4310928c7682d","filename":"packages/jest-cli/src/reporters/CoverageReporter.js","status":"modified","additions":2,"deletions":22,"changes":24,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fsrc%2Freporters%2FCoverageReporter.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-cli%2Fsrc%2Freporters%2FCoverageReporter.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Freporters%2FCoverageReporter.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -10,8 +10,7 @@\n 'use strict';\n \n import type {AggregatedResult, TestResult} from 'types/TestResult';\n-import type {Config, Glob, Path} from 'types/Config';\n-import type {HasteMap} from 'types/HasteMap';\n+import type {Config} from 'types/Config';\n import type {RunnerContext} from 'types/Reporters';\n \n type CoverageMap = {\n@@ -28,8 +27,6 @@ const chalk = require('chalk');\n const fs = require('fs');\n const generateEmptyCoverage = require('../generateEmptyCoverage');\n const istanbulCoverage = require('istanbul-lib-coverage');\n-const path = require('path');\n-const multimatch = require('multimatch');\n \n const FAIL_COLOR = chalk.bold.red;\n \n@@ -77,8 +74,7 @@ class CoverageReporter extends BaseReporter {\n \n   _addUntestedFiles(config: Config, runnerContext: RunnerContext) {\n     if (config.collectCoverageFrom && config.collectCoverageFrom.length) {\n-      const files = matchFilesWithGlobs(\n-        runnerContext.hasteContext.moduleMap,\n+      const files = runnerContext.hasteFS.matchFilesWithGlob(\n         config.collectCoverageFrom,\n         config.rootDir,\n       );\n@@ -154,20 +150,4 @@ class CoverageReporter extends BaseReporter {\n   }\n }\n \n-// This is a temporary hack until we rewrite HasteMap to be synchronous\n-const matchFilesWithGlobs = (\n-  moduleMap: HasteMap,\n-  globs: Array<Glob>,\n-  rootDir: Path\n-): Set<Path> => {\n-  const files = new Set();\n-  for (const file in moduleMap.files) {\n-    if (multimatch([path.relative(rootDir, file)], globs).length) {\n-      files.add(file);\n-    }\n-  }\n-  return files;\n-};\n-\n-\n module.exports = CoverageReporter;"},{"sha":"ee7ef10f285848cf98081f856ae85959e9ad1944","filename":"packages/jest-file-exists/src/__tests__/index-test.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-file-exists%2Fsrc%2F__tests__%2Findex-test.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-file-exists%2Fsrc%2F__tests__%2Findex-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-file-exists%2Fsrc%2F__tests__%2Findex-test.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -18,15 +18,15 @@ test('file exists', () => {\n \n test('file exists if module map is provided', () => {\n   expect(fileExists('/random-string.js', {\n-    '/random-string.js': true,\n+    exists: filePath => filePath === '/random-string.js',\n   })).toBe(true);\n });\n \n test('file does not exist', () => {\n   expect(fileExists(\n     path.join(path.basename(__filename), 'does-probably-not-exist.js'),\n     {\n-      '/random-string.js': true,\n+      exists: filePath => filePath === '/random-string.js',\n     },\n   )).toBe(false);\n });"},{"sha":"7e64abf557dd395b2652a566159265893416c9fa","filename":"packages/jest-file-exists/src/index.js","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-file-exists%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-file-exists%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-file-exists%2Fsrc%2Findex.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -11,15 +11,15 @@\n 'use strict';\n \n import type {Path} from 'types/Config';\n-import type {FileMetaData} from 'types/HasteMap';\n+import type {HasteFS} from 'types/HasteMap';\n \n const fs = require('fs');\n \n module.exports = (\n   filePath: Path,\n-  files: ?{[filepath: string]: FileMetaData},\n+  hasteFS: ?HasteFS,\n ): boolean => {\n-  if (files && files[filePath]) {\n+  if (hasteFS && hasteFS.exists(filePath)) {\n     return true;\n   }\n "},{"sha":"9957fd2cf19919b733030131482470ef5ea56b19","filename":"packages/jest-haste-map/package.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fpackage.json?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -16,6 +16,7 @@\n     \"test\": \"../../packages/jest-cli/bin/jest.js\"\n   },\n   \"devDependencies\": {\n+    \"multimatch\": \"^2.1.0\",\n     \"pretty-format\": \"^3.5.0\"\n   }\n }"},{"sha":"44346e06922460493de8d674a8907567740eb418","filename":"packages/jest-haste-map/src/HasteFS.js","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2FHasteFS.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2FHasteFS.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2FHasteFS.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+'use strict';\n+\n+import type {Glob, Path} from 'types/Config';\n+import type {\n+  FileData,\n+  HType,\n+} from 'types/HasteMap';\n+\n+const H: HType = require('./constants');\n+\n+const multimatch = require('multimatch');\n+const path = require('path');\n+\n+class HasteFS {\n+\n+  _files: FileData;\n+\n+  constructor(files: FileData) {\n+    this._files = files;\n+  }\n+\n+  getDependencies(file: Path): ?Array<string> {\n+    return this._files[file] && this._files[file][H.DEPENDENCIES];\n+  }\n+\n+  exists(file: Path): boolean {\n+    return !!this._files[file];\n+  }\n+\n+  getAllFiles() {\n+    return Object.keys(this._files);\n+  }\n+\n+  matchFiles(pattern: RegExp | string): Array<Path> {\n+    if (!(pattern instanceof RegExp)) {\n+      pattern = new RegExp(pattern);\n+    }\n+    const files = [];\n+    for (const file in this._files) {\n+      if (pattern.test(file)) {\n+        files.push(file);\n+      }\n+    }\n+    return files;\n+  }\n+\n+  matchFilesWithGlob(\n+    globs: Array<Glob>,\n+    root: ?Path,\n+  ): Set<Path> {\n+    const files = new Set();\n+    for (const file in this._files) {\n+      const filePath = root ? path.relative(root, file) : file;\n+      if (multimatch([filePath], globs).length) {\n+        files.add(file);\n+      }\n+    }\n+    return files;\n+  }\n+\n+}\n+\n+module.exports = HasteFS;"},{"sha":"b06c30ae5b87f18a2710c63d082d413cae3a1add","filename":"packages/jest-haste-map/src/ModuleMap.js","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+'use strict';\n+\n+import type {Path} from 'types/Config';\n+import type {\n+  HType,\n+  HTypeValue,\n+  MockData,\n+  ModuleMapData,\n+} from 'types/HasteMap';\n+\n+const H: HType = require('./constants');\n+\n+class ModuleMap {\n+\n+  _map: ModuleMapData;\n+  _mocks: MockData;\n+\n+  constructor(map: ModuleMapData, mocks: MockData) {\n+    this._map = map;\n+    this._mocks = mocks;\n+  }\n+\n+  getModule(\n+    name: string,\n+    platform: ?string,\n+    supportsNativePlatform: ?boolean,\n+    type: ?HTypeValue,\n+  ): ?Path {\n+    if (!type) {\n+      type = H.MODULE;\n+    }\n+\n+    const map = this._map[name];\n+    if (map) {\n+      let module = platform && map[platform];\n+      if (!module && map[H.NATIVE_PLATFORM] && supportsNativePlatform) {\n+        module = map[H.NATIVE_PLATFORM];\n+      } else if (!module) {\n+        module = map[H.GENERIC_PLATFORM];\n+      }\n+      if (module && module[H.TYPE] === type) {\n+        return module[H.PATH];\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+  getPackage(\n+    name: string,\n+    platform: ?string,\n+    supportsNativePlatform: ?boolean,\n+  ): ?Path {\n+    return this.getModule(name, platform, null, H.PACKAGE);\n+  }\n+\n+  getMockModule(name: string): ?Path {\n+    return this._mocks[name];\n+  }\n+\n+}\n+\n+module.exports = ModuleMap;"},{"sha":"ba72742cfe74db7e4be2323fecccd0ec714f74d8","filename":"packages/jest-haste-map/src/__tests__/index-test.js","status":"modified","additions":148,"deletions":149,"changes":297,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex-test.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex-test.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -9,16 +9,6 @@\n  */\n 'use strict';\n \n-jest.enableAutomock();\n-\n-jest.unmock('../constants')\n-  .unmock('../lib/docblock')\n-  .unmock('../lib/extractRequires')\n-  .unmock('../lib/getPlatformExtension')\n-  .unmock('../worker')\n-  .unmock('../fastpath')\n-  .unmock('../');\n-\n jest.mock('child_process', () => ({\n   // If this does not throw, we'll use the (mocked) watchman crawler\n   execSync() {},\n@@ -34,6 +24,7 @@ jest.mock('worker-farm', () => {\n   return mock;\n });\n \n+jest.mock('../crawlers/node');\n jest.mock('../crawlers/watchman', () =>\n   jest.fn((roots, extensions, ignore, data) => {\n     data.clocks = mockClocks;\n@@ -181,21 +172,17 @@ describe('HasteMap', () => {\n   });\n \n   it('matches files against a pattern', () => {\n-    const hasteMap = new HasteMap(defaultConfig);\n-\n-    return hasteMap.matchFiles(/fruits/).then(files => {\n-      expect(files).toEqual([\n+    return new HasteMap(defaultConfig).build().then(({hasteFS}) => {\n+      expect(hasteFS.matchFiles(/fruits/)).toEqual([\n         '/fruits/pear.js',\n         '/fruits/banana.js',\n         '/fruits/strawberry.js',\n         '/fruits/__mocks__/Pear.js',\n       ]);\n \n-      return hasteMap.matchFiles(/__mocks__/).then(files => {\n-        expect(files).toEqual([\n-          '/fruits/__mocks__/Pear.js',\n-        ]);\n-      });\n+      expect(hasteFS.matchFiles(/__mocks__/)).toEqual([\n+        '/fruits/__mocks__/Pear.js',\n+      ]);\n     });\n   });\n \n@@ -237,7 +224,7 @@ describe('HasteMap', () => {\n       providesModuleNodeModules: ['react', 'fbjs'],\n     }));\n \n-    return hasteMap.build().then(data => {\n+    return hasteMap.build().then(({__hasteMapForTest: data}) => {\n       expect(data.clocks).toEqual(mockClocks);\n \n       expect(data.files).toEqual({\n@@ -292,19 +279,20 @@ describe('HasteMap', () => {\n       'const Banana = require(\"Banana\");',\n     ].join('\\n');\n \n-    return new HasteMap(defaultConfig).build().then(data => {\n-      expect(data.map.Strawberry[H.GENERIC_PLATFORM][0])\n-        .toEqual('/fruits/strawberry.js');\n-\n-      expect(console.warn).toBeCalledWith([\n-        'jest-haste-map: @providesModule naming collision:',\n-        '  Duplicate module name: Strawberry',\n-        '  Paths: /fruits/raspberry.js collides with /fruits/strawberry.js',\n-        '',\n-        'This warning is caused by a @providesModule declaration with the ' +\n-        'same name across two different files.',\n-      ].join('\\n'));\n-    });\n+    return new HasteMap(defaultConfig).build()\n+      .then(({__hasteMapForTest: data}) => {\n+        expect(data.map.Strawberry[H.GENERIC_PLATFORM][0])\n+          .toEqual('/fruits/strawberry.js');\n+\n+        expect(console.warn).toBeCalledWith([\n+          'jest-haste-map: @providesModule naming collision:',\n+          '  Duplicate module name: Strawberry',\n+          '  Paths: /fruits/raspberry.js collides with /fruits/strawberry.js',\n+          '',\n+          'This warning is caused by a @providesModule declaration with the ' +\n+          'same name across two different files.',\n+        ].join('\\n'));\n+      });\n   });\n \n   it('splits up modules by platform', () => {\n@@ -330,119 +318,127 @@ describe('HasteMap', () => {\n       'const Blackberry = require(\"Blackberry\");',\n     ].join('\\n');\n \n-    return new HasteMap(defaultConfig).build().then(data => {\n-      expect(data.files).toEqual({\n-        '/fruits/strawberry.js': ['Strawberry', 32, 1, ['Banana']],\n-        '/fruits/strawberry.ios.js': ['Strawberry', 32, 1, ['Raspberry']],\n-        '/fruits/strawberry.android.js': ['Strawberry', 32, 1, ['Blackberry']],\n-      });\n-\n-      expect(data.map).toEqual({\n-        'Strawberry': {\n-          [H.GENERIC_PLATFORM]: ['/fruits/strawberry.js', H.MODULE],\n-          'ios': ['/fruits/strawberry.ios.js', H.MODULE],\n-          'android': ['/fruits/strawberry.android.js', H.MODULE],\n-        },\n+    return new HasteMap(defaultConfig).build()\n+      .then(({__hasteMapForTest: data}) => {\n+        expect(data.files).toEqual({\n+          '/fruits/strawberry.js': ['Strawberry', 32, 1, ['Banana']],\n+          '/fruits/strawberry.ios.js': ['Strawberry', 32, 1, ['Raspberry']],\n+          '/fruits/strawberry.android.js':\n+            ['Strawberry', 32, 1, ['Blackberry']],\n+        });\n+\n+        expect(data.map).toEqual({\n+          'Strawberry': {\n+            [H.GENERIC_PLATFORM]: ['/fruits/strawberry.js', H.MODULE],\n+            'ios': ['/fruits/strawberry.ios.js', H.MODULE],\n+            'android': ['/fruits/strawberry.android.js', H.MODULE],\n+          },\n+        });\n       });\n-    });\n   });\n \n   it('does not access the file system on a warm cache with no changes', () => {\n-    return new HasteMap(defaultConfig).build().then(initialData => {\n-      // The first run should access the file system once for the (empty) cache\n-      // file and five times for the files in the system.\n-      expect(fs.readFileSync.mock.calls.length).toBe(6);\n-\n-      fs.readFileSync.mockClear();\n-\n-      // Explicitly mock that no files have changed.\n-      mockChangedFiles = Object.create(null);\n-\n-      // Watchman would give us different clocks.\n-      mockClocks = object({\n-        '/fruits': 'c:fake-clock:3',\n-        '/vegetables': 'c:fake-clock:4',\n-      });\n-\n-      return new HasteMap(defaultConfig).build().then(data => {\n-        expect(fs.readFileSync.mock.calls.length).toBe(1);\n-        expect(fs.readFileSync).toBeCalledWith(cacheFilePath, 'utf8');\n-\n-        expect(data.clocks).toEqual(mockClocks);\n-        expect(data.files).toEqual(initialData.files);\n-        expect(data.map).toEqual(initialData.map);\n+    return new HasteMap(defaultConfig).build()\n+      .then(({__hasteMapForTest: initialData}) => {\n+        // The first run should access the file system once for the (empty)\n+        // cache file and five times for the files in the system.\n+        expect(fs.readFileSync.mock.calls.length).toBe(6);\n+\n+        fs.readFileSync.mockClear();\n+\n+        // Explicitly mock that no files have changed.\n+        mockChangedFiles = Object.create(null);\n+\n+        // Watchman would give us different clocks.\n+        mockClocks = object({\n+          '/fruits': 'c:fake-clock:3',\n+          '/vegetables': 'c:fake-clock:4',\n+        });\n+\n+        return new HasteMap(defaultConfig).build()\n+          .then(({__hasteMapForTest: data}) => {\n+            expect(fs.readFileSync.mock.calls.length).toBe(1);\n+            expect(fs.readFileSync).toBeCalledWith(cacheFilePath, 'utf8');\n+\n+            expect(data.clocks).toEqual(mockClocks);\n+            expect(data.files).toEqual(initialData.files);\n+            expect(data.map).toEqual(initialData.map);\n+          });\n       });\n-    });\n   });\n \n   it('only does minimal file system access when files change', () => {\n-    return new HasteMap(defaultConfig).build().then(initialData => {\n-      fs.readFileSync.mockClear();\n-\n-      // Let's assume one JS file has changed.\n-      mockChangedFiles = object({\n-        '/fruits/banana.js': [\n-          '/**',\n-          ' * @providesModule Kiwi', // Identity crisis.\n-          ' */',\n-          'const Raspberry = require(\"Raspberry\");',\n-        ].join('\\n'),\n-      });\n+    return new HasteMap(defaultConfig).build()\n+      .then(({__hasteMapForTest: initialData}) => {\n+        fs.readFileSync.mockClear();\n \n-      // Watchman would give us different clocks for `/fruits`.\n-      mockClocks = object({\n-        '/fruits': 'c:fake-clock:3',\n-        '/vegetables': 'c:fake-clock:2',\n-      });\n+        // Let's assume one JS file has changed.\n+        mockChangedFiles = object({\n+          '/fruits/banana.js': [\n+            '/**',\n+            ' * @providesModule Kiwi', // Identity crisis.\n+            ' */',\n+            'const Raspberry = require(\"Raspberry\");',\n+          ].join('\\n'),\n+        });\n+\n+        // Watchman would give us different clocks for `/fruits`.\n+        mockClocks = object({\n+          '/fruits': 'c:fake-clock:3',\n+          '/vegetables': 'c:fake-clock:2',\n+        });\n \n-      return new HasteMap(defaultConfig).build().then(data => {\n-        expect(fs.readFileSync.mock.calls.length).toBe(2);\n+        return new HasteMap(defaultConfig).build()\n+          .then(({__hasteMapForTest: data}) => {\n+            expect(fs.readFileSync.mock.calls.length).toBe(2);\n \n-        expect(fs.readFileSync).toBeCalledWith(cacheFilePath, 'utf8');\n-        expect(fs.readFileSync).toBeCalledWith('/fruits/banana.js', 'utf8');\n+            expect(fs.readFileSync).toBeCalledWith(cacheFilePath, 'utf8');\n+            expect(fs.readFileSync).toBeCalledWith('/fruits/banana.js', 'utf8');\n \n-        expect(data.clocks).toEqual(mockClocks);\n+            expect(data.clocks).toEqual(mockClocks);\n \n-        const files = object(initialData.files);\n-        files['/fruits/banana.js'] = ['Kiwi', 32, 1, ['Raspberry']];\n+            const files = object(initialData.files);\n+            files['/fruits/banana.js'] = ['Kiwi', 32, 1, ['Raspberry']];\n \n-        expect(data.files).toEqual(files);\n+            expect(data.files).toEqual(files);\n \n-        const map = object(initialData.map);\n+            const map = object(initialData.map);\n \n-        map.Kiwi = map.Banana;\n-        delete map.Banana;\n-        expect(data.map).toEqual(map);\n+            map.Kiwi = map.Banana;\n+            delete map.Banana;\n+            expect(data.map).toEqual(map);\n+          });\n       });\n-    });\n   });\n \n   it('correctly handles file deletions', () => {\n-    return new HasteMap(defaultConfig).build().then(initialData => {\n-      fs.readFileSync.mockClear();\n-\n-      // Let's assume one JS file was removed.\n-      delete mockFs['/fruits/banana.js'];\n-      mockChangedFiles = object({\n-        '/fruits/banana.js': null,\n-      });\n-\n-      // Watchman would give us different clocks for `/fruits`.\n-      mockClocks = object({\n-        '/fruits': 'c:fake-clock:3',\n-        '/vegetables': 'c:fake-clock:2',\n-      });\n-\n-      return new HasteMap(defaultConfig).build().then(data => {\n-        const files = object(initialData.files);\n-        delete files['/fruits/banana.js'];\n-        expect(data.files).toEqual(files);\n-\n-        const map = object(initialData.map);\n-        delete map.Banana;\n-        expect(data.map).toEqual(map);\n+    return new HasteMap(defaultConfig).build()\n+      .then(({__hasteMapForTest: initialData}) => {\n+        fs.readFileSync.mockClear();\n+\n+        // Let's assume one JS file was removed.\n+        delete mockFs['/fruits/banana.js'];\n+        mockChangedFiles = object({\n+          '/fruits/banana.js': null,\n+        });\n+\n+        // Watchman would give us different clocks for `/fruits`.\n+        mockClocks = object({\n+          '/fruits': 'c:fake-clock:3',\n+          '/vegetables': 'c:fake-clock:2',\n+        });\n+\n+        return new HasteMap(defaultConfig).build()\n+          .then(({__hasteMapForTest: data}) => {\n+            const files = object(initialData.files);\n+            delete files['/fruits/banana.js'];\n+            expect(data.files).toEqual(files);\n+\n+            const map = object(initialData.map);\n+            delete map.Banana;\n+            expect(data.map).toEqual(map);\n+          });\n       });\n-    });\n   });\n \n   it('ignores files that do not exist', () => {\n@@ -455,19 +451,20 @@ describe('HasteMap', () => {\n         return data;\n       });\n     });\n-    return new HasteMap(defaultConfig).build().then(data => {\n-      expect(Object.keys(data.files).length).toBe(5);\n+    return new HasteMap(defaultConfig).build()\n+      .then(({__hasteMapForTest: data}) => {\n+        expect(Object.keys(data.files).length).toBe(5);\n \n-      // Ensure this file is not part of the file list.\n-      expect(data.files['/fruits/invalid/file.js']).toBe(undefined);\n-    });\n+        // Ensure this file is not part of the file list.\n+        expect(data.files['/fruits/invalid/file.js']).toBe(undefined);\n+      });\n   });\n \n   it('distributes work across workers', () => {\n     const workerFarm = require('worker-farm');\n     return new HasteMap(Object.assign({}, defaultConfig, {\n       maxWorkers: 4,\n-    })).build().then(data => {\n+    })).build().then(({__hasteMapForTest: data}) => {\n       expect(workerFarm.mock.calls.length).toBe(1);\n \n       expect(workerFarmMock.mock.calls.length).toBe(5);\n@@ -498,19 +495,20 @@ describe('HasteMap', () => {\n       return Promise.resolve(data);\n     });\n \n-    return new HasteMap(defaultConfig).build().then(data => {\n-      expect(watchman).toBeCalled();\n-      expect(node).toBeCalled();\n-\n-      expect(data.files).toEqual({\n-        '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry']],\n+    return new HasteMap(defaultConfig).build()\n+      .then(({__hasteMapForTest: data}) => {\n+        expect(watchman).toBeCalled();\n+        expect(node).toBeCalled();\n+\n+        expect(data.files).toEqual({\n+          '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry']],\n+        });\n+\n+        expect(console.warn).toBeCalledWith(\n+          'jest-haste-map: Watchman crawl failed. Retrying once with node ' +\n+          'crawler.\\n  Error: watchman error',\n+        );\n       });\n-\n-      expect(console.warn).toBeCalledWith(\n-        'jest-haste-map: Watchman crawl failed. Retrying once with node ' +\n-        'crawler.\\n  Error: watchman error',\n-      );\n-    });\n   });\n \n   it('tries to crawl using node as a fallback when promise fails once', () => {\n@@ -527,14 +525,15 @@ describe('HasteMap', () => {\n       return Promise.resolve(data);\n     });\n \n-    return new HasteMap(defaultConfig).build().then(data => {\n-      expect(watchman).toBeCalled();\n-      expect(node).toBeCalled();\n+    return new HasteMap(defaultConfig).build().then(\n+      ({__hasteMapForTest: data}) => {\n+        expect(watchman).toBeCalled();\n+        expect(node).toBeCalled();\n \n-      expect(data.files).toEqual({\n-        '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry']],\n+        expect(data.files).toEqual({\n+          '/fruits/banana.js': ['Banana', 32, 1, ['Strawberry']],\n+        });\n       });\n-    });\n   });\n \n   it('stops crawling when both crawlers fail', () => {"},{"sha":"786645bd3d45ccc4ebed8404ab7143a6f23a8c0e","filename":"packages/jest-haste-map/src/constants.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2Fconstants.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2Fconstants.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fconstants.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -33,4 +33,5 @@ module.exports = {\n \n   /* platforms */\n   GENERIC_PLATFORM: 'g',\n+  NATIVE_PLATFORM: 'native',\n };"},{"sha":"737f29ed70d9a7a795d7430d553ec69ef328912f","filename":"packages/jest-haste-map/src/crawlers/node.js","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -9,7 +9,7 @@\n  */\n 'use strict';\n \n-import type {HasteMap} from 'types/HasteMap';\n+import type {InternalHasteMap} from 'types/HasteMap';\n import type {IgnoreMatcher} from '../types';\n \n const H = require('../constants');\n@@ -123,8 +123,8 @@ module.exports = function nodeCrawl(\n   roots: Array<string>,\n   extensions: Array<string>,\n   ignore: IgnoreMatcher,\n-  data: HasteMap,\n-): Promise<HasteMap> {\n+  data: InternalHasteMap,\n+): Promise<InternalHasteMap> {\n   return new Promise(resolve => {\n     const callback = list => {\n       const files = Object.create(null);"},{"sha":"7bb0ccf5afb98e21b388006597483410d0fb4977","filename":"packages/jest-haste-map/src/crawlers/watchman.js","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -9,7 +9,7 @@\n  */\n 'use strict';\n \n-import type {HasteMap} from 'types/HasteMap';\n+import type {InternalHasteMap} from 'types/HasteMap';\n import type {IgnoreMatcher} from '../types';\n \n const H = require('../constants');\n@@ -34,8 +34,8 @@ module.exports = function watchmanCrawl(\n   roots: Array<string>,\n   extensions: Array<string>,\n   ignore: IgnoreMatcher,\n-  data: HasteMap,\n-): Promise<HasteMap> {\n+  data: InternalHasteMap,\n+): Promise<InternalHasteMap> {\n   return new Promise((resolve, reject) => {\n     const client = new watchman.Client();\n     client.on('error', error => reject(error));"},{"sha":"4b7bd16410a23b9fc175bb9153347151bd7eb3b2","filename":"packages/jest-haste-map/src/index.js","status":"modified","additions":28,"deletions":30,"changes":58,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-haste-map%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -10,12 +10,18 @@\n 'use strict';\n \n import type {Path} from 'types/Config';\n-import type {HasteMap as HasteMapObject, ModuleMetaData} from 'types/HasteMap';\n+import type {\n+  HasteMap as HasteMapObject,\n+  InternalHasteMap,\n+  ModuleMetaData,\n+} from 'types/HasteMap';\n import type {WorkerMessage, WorkerMetadata, WorkerCallback} from './types';\n import typeof FastpathType from './fastpath';\n import typeof HType from './constants';\n \n const H = require('./constants');\n+const HasteFS = require('./HasteFS');\n+const ModuleMap = require('./ModuleMap');\n \n const crypto = require('crypto');\n const execSync = require('child_process').execSync;\n@@ -203,44 +209,36 @@ class HasteMap {\n \n   build(): Promise<HasteMapObject> {\n     if (!this._buildPromise) {\n+      const isTest = process.env.NODE_ENV === 'test';\n       this._buildPromise = this._buildFileMap()\n         .then(fileMap => this._buildHasteMap(fileMap))\n-        .then(hasteMap => this._persist(hasteMap));\n+        .then(internalHasteMap => this._persist(internalHasteMap))\n+        .then(internalHasteMap => ({\n+          hasteFS: new HasteFS(internalHasteMap.files),\n+          moduleMap:\n+            new ModuleMap(internalHasteMap.map, internalHasteMap.mocks),\n+          __hasteMapForTest: isTest && internalHasteMap,\n+        }));\n     }\n     return this._buildPromise;\n   }\n \n-  /**\n-   * Matches all files against a pattern.\n-   */\n-  matchFiles(pattern: RegExp|string): Promise<Array<string>> {\n-    if (!(pattern instanceof RegExp)) {\n-      pattern = new RegExp(pattern);\n-    }\n-    // flow\n-    const filePattern = pattern;\n-    return this.build().then(hasteMap => {\n-      const files = [];\n-      for (const file in hasteMap.files) {\n-        if (filePattern.test(file)) {\n-          files.push(file);\n-        }\n-      }\n-      return files;\n-    });\n-  }\n-\n   /**\n    * 1. read data from the cache or create an empty structure.\n    */\n-  read(): HasteMapObject {\n+  read(): InternalHasteMap {\n     return this._parse(fs.readFileSync(this._cachePath, 'utf8'));\n   }\n \n+  readModuleMap(): ModuleMap {\n+    const data = this.read();\n+    return new ModuleMap(data.map, data.mocks);\n+  }\n+\n   /**\n    * 2. crawl the file system.\n    */\n-  _buildFileMap(): Promise<HasteMapObject> {\n+  _buildFileMap(): Promise<InternalHasteMap> {\n     const read = this._options.resetCache ? this._createEmptyMap : this.read;\n \n     return Promise.resolve()\n@@ -252,7 +250,7 @@ class HasteMap {\n   /**\n    * 3. parse and extract metadata from changed files.\n    */\n-  _buildHasteMap(hasteMap: HasteMapObject): Promise<HasteMapObject> {\n+  _buildHasteMap(hasteMap: InternalHasteMap): Promise<InternalHasteMap> {\n     const map = Object.create(null);\n     const mocks = Object.create(null);\n     const mocksPattern = this._options.mocksPattern;\n@@ -336,7 +334,7 @@ class HasteMap {\n   /**\n    * 4. serialize the new `HasteMap` in a cache file.\n    */\n-  _persist(hasteMap: HasteMapObject): HasteMapObject {\n+  _persist(hasteMap: InternalHasteMap): InternalHasteMap {\n     fs.writeFileSync(this._cachePath, JSON.stringify(hasteMap), 'utf8');\n     return hasteMap;\n   }\n@@ -373,15 +371,15 @@ class HasteMap {\n     return this._workerPromise;\n   }\n \n-  _parse(hasteMapPath: string): HasteMapObject {\n-    const hasteMap = (JSON.parse(hasteMapPath): HasteMapObject);\n+  _parse(hasteMapPath: string): InternalHasteMap {\n+    const hasteMap = (JSON.parse(hasteMapPath): InternalHasteMap);\n     for (const key in hasteMap) {\n       Object.setPrototypeOf(hasteMap[key], null);\n     }\n     return hasteMap;\n   }\n \n-  _crawl(hasteMap: HasteMapObject): Promise<HasteMapObject> {\n+  _crawl(hasteMap: InternalHasteMap): Promise<InternalHasteMap> {\n     const options = this._options;\n     const ignore = this._ignore.bind(this);\n     const crawl =\n@@ -434,7 +432,7 @@ class HasteMap {\n     return true;\n   }\n \n-  _createEmptyMap(): HasteMapObject {\n+  _createEmptyMap(): InternalHasteMap {\n     return {\n       clocks: Object.create(null),\n       files: Object.create(null),"},{"sha":"71da47eaaf6aebd3f3ec1c3211a522ee5b9916b0","filename":"packages/jest-resolve-dependencies/src/index.js","status":"modified","additions":13,"deletions":15,"changes":28,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-resolve-dependencies%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-resolve-dependencies%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve-dependencies%2Fsrc%2Findex.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -10,7 +10,7 @@\n \n 'use strict';\n \n-import type {HasteMap} from 'types/HasteMap';\n+import type {HasteFS} from 'types/HasteMap';\n import type {Path} from 'types/Config';\n import type Resolver from '../../jest-resolve/src';\n \n@@ -34,23 +34,24 @@ function compact(array: Array<?Path>): Array<Path> {\n  * to retrieve a list of all transitive inverse dependencies.\n  */\n class DependencyResolver {\n-  _moduleMap: HasteMap;\n+  _hasteFS: HasteFS;\n   _resolver: Resolver;\n \n-  constructor(resolver: Resolver, moduleMap: HasteMap) {\n+  constructor(resolver: Resolver, hasteFS: HasteFS) {\n     this._resolver = resolver;\n-    this._moduleMap = moduleMap;\n+    this._hasteFS = hasteFS;\n   }\n \n   resolve(\n     file: Path,\n     options?: ResolveModuleConfig,\n   ): Array<Path> {\n-    if (!this._moduleMap.files[file]) {\n+    const dependencies = this._hasteFS.getDependencies(file);\n+    if (!dependencies) {\n       return [];\n     }\n     return compact(\n-      this._moduleMap.files[file][3].map(dependency => {\n+      dependencies.map(dependency => {\n         if (this._resolver.isCoreModule(dependency)) {\n           return null;\n         }\n@@ -92,8 +93,8 @@ class DependencyResolver {\n     const relatedPaths = new Set();\n     const changed = new Set();\n     for (const path of paths) {\n-      if (fileExists(path, this._moduleMap.files)) {\n-        const module = this._moduleMap.files[path];\n+      if (fileExists(path, this._hasteFS)) {\n+        const module = this._hasteFS.exists(path);\n         if (module) {\n           changed.add(path);\n           if (filter(path)) {\n@@ -103,13 +104,10 @@ class DependencyResolver {\n       }\n     }\n \n-    const modules = [];\n-    for (const file in this._moduleMap.files) {\n-      modules.push({\n-        file,\n-        dependencies: this.resolve(file, options),\n-      });\n-    }\n+    const modules = this._hasteFS.getAllFiles().map(file => ({\n+      file,\n+      dependencies: this.resolve(file, options),\n+    }));\n     return Array.from(collectModules(relatedPaths, modules, changed));\n   }\n "},{"sha":"667f78dd133c2970852993d5202ba3905f4ab1e8","filename":"packages/jest-resolve/src/index.js","status":"modified","additions":24,"deletions":36,"changes":60,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-resolve%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-resolve%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve%2Fsrc%2Findex.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -10,14 +10,8 @@\n \n 'use strict';\n \n-import type {\n-  HasteMap,\n-  HType,\n-  HTypeValue,\n-} from 'types/HasteMap';\n import type {Path} from 'types/Config';\n-\n-const H: HType = require('jest-haste-map').H;\n+import type ModuleMap from '../../jest-haste-map/src/ModuleMap';\n \n const nodeModulesPaths = require('resolve/lib/node-modules-paths');\n const path = require('path');\n@@ -32,7 +26,7 @@ type ResolverConfig = {\n   moduleDirectories: Array<string>,\n   moduleNameMapper: ?{[key: string]: RegExp},\n   modulePaths: Array<Path>,\n-  platforms?: Array<string>,\n+  platforms: Array<string>,\n };\n \n type FindNodeModuleConfig = {\n@@ -52,25 +46,22 @@ const nodePaths =\n \n class Resolver {\n   _options: ResolverConfig;\n-  _supportsNativePlatform: boolean;\n-  _moduleMap: HasteMap;\n+  _moduleMap: ModuleMap;\n   _moduleNameCache: {[name: string]: Path};\n   _modulePathCache: {[path: Path]: Array<Path>};\n \n-  constructor(moduleMap: HasteMap, options: ResolverConfig) {\n+  constructor(moduleMap: ModuleMap, options: ResolverConfig) {\n     this._options = {\n+      browser: options.browser,\n       defaultPlatform: options.defaultPlatform,\n       extensions: options.extensions,\n       hasCoreModules:\n         options.hasCoreModules === undefined ? true : options.hasCoreModules,\n       moduleDirectories: options.moduleDirectories || ['node_modules'],\n       moduleNameMapper: options.moduleNameMapper,\n       modulePaths: options.modulePaths,\n-      browser: options.browser,\n+      platforms: options.platforms,\n     };\n-\n-    this._supportsNativePlatform =\n-      (options.platforms || []).indexOf(NATIVE_PLATFORM) !== -1;\n     this._moduleMap = moduleMap;\n     this._moduleNameCache = Object.create(null);\n     this._modulePathCache = Object.create(null);\n@@ -159,33 +150,26 @@ class Resolver {\n     return this._options.hasCoreModules && resolve.isCore(moduleName);\n   }\n \n-  getModule(name: string, type?: HTypeValue): ?Path {\n-    if (!type) {\n-      type = H.MODULE;\n-    }\n-    const map = this._moduleMap.map[name];\n-    if (map) {\n-      const platform = this._options.defaultPlatform;\n-      let module = platform && map[platform];\n-      if (!module && map[NATIVE_PLATFORM] && this._supportsNativePlatform) {\n-        module = map[NATIVE_PLATFORM];\n-      } else if (!module) {\n-        module = map[H.GENERIC_PLATFORM];\n-      }\n-      if (module && module[H.TYPE] === type) {\n-        return module[H.PATH];\n-      }\n-    }\n-    return null;\n+  getModule(name: string): ?Path {\n+    return this._moduleMap.getModule(\n+      name,\n+      this._options.defaultPlatform,\n+      this._supportsNativePlatform(),\n+    );\n   }\n \n   getPackage(name: string): ?Path {\n-    return this.getModule(name, H.PACKAGE);\n+    return this._moduleMap.getPackage(\n+      name,\n+      this._options.defaultPlatform,\n+      this._supportsNativePlatform(),\n+    );\n   }\n \n   getMockModule(from: Path, name: string): ?Path {\n-    if (this._moduleMap.mocks[name]) {\n-      return this._moduleMap.mocks[name];\n+    const mock = this._moduleMap.getMockModule(name);\n+    if (mock) {\n+      return mock;\n     } else {\n       const moduleName = this._resolveStubModuleName(from, name);\n       if (moduleName) {\n@@ -236,6 +220,10 @@ class Resolver {\n     return null;\n   }\n \n+  _supportsNativePlatform() {\n+    return (this._options.platforms || []).indexOf(NATIVE_PLATFORM) !== -1;\n+  }\n+\n }\n \n module.exports = Resolver;"},{"sha":"e7dabd8f0d5d4d995e32536ed52b5cb72dc9b3e8","filename":"packages/jest-runtime/src/__mocks__/createRuntime.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-runtime%2Fsrc%2F__mocks__%2FcreateRuntime.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-runtime%2Fsrc%2F__mocks__%2FcreateRuntime.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2F__mocks__%2FcreateRuntime.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -22,11 +22,11 @@ module.exports = function createRuntime(filename, config) {\n   const environment = new NodeEnvironment(config);\n   return Runtime.createHasteMap(config, {resetCache: false, maxWorkers: 1})\n     .build()\n-    .then(moduleMap => {\n+    .then(hasteMap => {\n       const runtime = new Runtime(\n         config,\n         environment,\n-        Runtime.createResolver(config, moduleMap),\n+        Runtime.createResolver(config, hasteMap.moduleMap),\n       );\n \n       runtime.__mockRootPath = path.join(config.rootDir, 'root.js');"},{"sha":"25948e5ff813472baa3296ea0ffc9d34f129e021","filename":"packages/jest-runtime/src/index.js","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-runtime%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-runtime%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Findex.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -14,6 +14,7 @@ import type {Config, Path} from 'types/Config';\n import type {Environment} from 'types/Environment';\n import type {HasteContext} from 'types/HasteMap';\n import type {Script} from 'vm';\n+import type ModuleMap from '../../jest-haste-map/src/ModuleMap';\n import type Resolver from '../../jest-resolve/src';\n \n const HasteMap = require('jest-haste-map');\n@@ -151,10 +152,9 @@ class Runtime {\n       resetCache: !config.cache,\n     });\n     return instance.build().then(\n-      moduleMap => ({\n-        instance,\n-        moduleMap,\n-        resolver: Runtime.createResolver(config, moduleMap),\n+      hasteMap => ({\n+        hasteFS: hasteMap.hasteFS,\n+        resolver: Runtime.createResolver(config, hasteMap.moduleMap),\n       }),\n       error => {\n         throw error;\n@@ -187,7 +187,7 @@ class Runtime {\n \n   static createResolver(\n     config: Config,\n-    moduleMap: HasteMap,\n+    moduleMap: ModuleMap,\n   ): Resolver {\n     return new ResolverClass(moduleMap, {\n       browser: config.browser,"},{"sha":"e4cd8e79cd4107f1b811b5898da6b10eae0bccff","filename":"packages/jest-snapshot/src/index.js","status":"modified","additions":21,"deletions":22,"changes":43,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-snapshot%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-snapshot%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-snapshot%2Fsrc%2Findex.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -9,7 +9,7 @@\n  */\n 'use strict';\n \n-import type {HasteContext} from 'types/HasteMap';\n+import type {HasteFS} from 'types/HasteMap';\n import type {Jasmine} from 'types/Jasmine';\n import type {Path} from 'types/Config';\n import type {SnapshotState} from './SnapshotState';\n@@ -54,29 +54,28 @@ const patchJasmine = (jasmine, state) => {\n module.exports = {\n   EXTENSION,\n   SnapshotFile: SnapshotFile.SnapshotFile,\n-  cleanup(hasteContext: HasteContext, update: boolean) {\n+  cleanup(hasteFS: HasteFS, update: boolean) {\n     const pattern = '\\\\.' + EXTENSION + '$';\n-    return hasteContext.instance.matchFiles(pattern).then(files => {\n-      const filesRemoved = files\n-        .filter(snapshotFile => !fileExists(\n-          path.resolve(\n-            path.dirname(snapshotFile),\n-            '..',\n-            path.basename(snapshotFile, '.' + EXTENSION),\n-          ),\n-          hasteContext.moduleMap.files,\n-        ))\n-        .map(snapshotFile => {\n-          if (update) {\n-            fs.unlinkSync(snapshotFile);\n-          }\n-        })\n-        .length;\n+    const files = hasteFS.matchFiles(pattern);\n+    const filesRemoved = files\n+      .filter(snapshotFile => !fileExists(\n+        path.resolve(\n+          path.dirname(snapshotFile),\n+          '..',\n+          path.basename(snapshotFile, '.' + EXTENSION),\n+        ),\n+        hasteFS,\n+      ))\n+      .map(snapshotFile => {\n+        if (update) {\n+          fs.unlinkSync(snapshotFile);\n+        }\n+      })\n+      .length;\n \n-      return {\n-        filesRemoved,\n-      };\n-    });\n+    return {\n+      filesRemoved,\n+    };\n   },\n   matcher,\n   getSnapshotState: (jasmine: Jasmine, filePath: Path): SnapshotState => {"},{"sha":"7192b3f9a214844abc4b0e4a58dac009faf7ea8a","filename":"packages/jest-util/src/formatFailureMessage.js","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-util%2Fsrc%2FformatFailureMessage.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/packages%2Fjest-util%2Fsrc%2FformatFailureMessage.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fsrc%2FformatFailureMessage.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -77,26 +77,18 @@ const removeInternalStackEntries = (lines, config) => {\n \n   return lines.filter(line => {\n     const isPath = STACK_PATH_REGEXP.test(line);\n-\n     if (!isPath) {\n       return true;\n     }\n-\n-    pathCounter += 1;\n-\n-    if (pathCounter === 1) {\n-      return true; // always keep the first line even if it's from jest\n+    if (JASMINE_IGNORE.test(line)) {\n+      return false;\n     }\n \n-    if (\n-      STACK_TRACE_IGNORE.test(line) ||\n-      JASMINE_IGNORE.test(line) ||\n-      config.noStackTrace\n-    ) {\n-      return false;\n+    if (++pathCounter === 1) {\n+      return true; // always keep the first line even if it's from Jest\n     }\n \n-    return true;\n+    return !(STACK_TRACE_IGNORE.test(line) || config.noStackTrace);\n   });\n };\n \n@@ -136,7 +128,7 @@ const formatStackTrace = (stack, config, testPath) => {\n const formatResultsErrors = (\n   testResults: TestResult,\n   config: Config,\n-  testPath?: ?Path,\n+  testPath: ?Path,\n ): ?string => {\n   const failedResults = testResults.testResults.reduce(\n     (errors, result) => {"},{"sha":"285c2f9e63f0f975a7de61a6076b97f1feb6f2b1","filename":"types/HasteMap.js","status":"modified","additions":20,"deletions":13,"changes":33,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/types%2FHasteMap.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/types%2FHasteMap.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/types%2FHasteMap.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -9,30 +9,36 @@\n  */\n 'use strict';\n \n+import type {Path} from 'types/Config';\n import type _HasteMapInstance from '../packages/jest-haste-map/src';\n+import type _HasteFS from '../packages/jest-haste-map/src/HasteFS';\n import type HasteResolver from '../packages/jest-resolve/src';\n+import type _ModuleMap from '../packages/jest-haste-map/src/ModuleMap';\n \n+export type HasteFS = _HasteFS;\n export type HasteMapInstance = _HasteMapInstance;\n+export type ModuleMap = _ModuleMap;\n \n export type HasteContext = {\n-  instance: HasteMapInstance,\n-  moduleMap: HasteMap,\n+  hasteFS: HasteFS,\n   resolver: HasteResolver,\n };\n \n-export type HasteMap = FileMap & ModuleMap;\n+export type FileData = {[filepath: Path]: FileMetaData};\n+export type MockData = {[id: string]: Path};\n+export type ModuleMapData = {[id: string]: ModuleMapItem};\n+export type WatchmanClocks = {[filepath: Path]: string};\n \n-export type FileMap = {\n+export type InternalHasteMap = {\n   clocks: WatchmanClocks,\n-  files: {[filepath: string]: FileMetaData},\n+  files: FileData,\n+  map: ModuleMapData,\n+  mocks: MockData,\n+};\n+export type HasteMap = {\n+  hasteFS: HasteFS,\n+  moduleMap: ModuleMap,\n };\n-\n-export type ModuleMap = {\n-  map: {[id: string]: ModuleMapItem},\n-  mocks: {[id: string]: string},\n-}\n-\n-type WatchmanClocks = {[filepath: string]: string};\n \n export type FileMetaData = [\n   /* id */ string,\n@@ -43,7 +49,7 @@ export type FileMetaData = [\n \n type ModuleMapItem = {[platform: string]: ModuleMetaData};\n export type ModuleMetaData = [\n-  /* path */ string,\n+  Path,\n   /* type */ number,\n ];\n \n@@ -57,6 +63,7 @@ export type HType = {\n   MODULE: 0,\n   PACKAGE: 1,\n   GENERIC_PLATFORM: 'g',\n+  NATIVE_PLATFORM: 'native',\n };\n \n export type HTypeValue = 0 | 1 | 2 | 3 | 'g';"},{"sha":"76b6dfed907bf6efe2cbdea9d4ddd363b89cb98d","filename":"types/Reporters.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/types%2FReporters.js","raw_url":"https://github.com/facebook/jest/raw/89bebe92d352b79899a65fbf91fa40d6c11bdbb5/types%2FReporters.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/types%2FReporters.js?ref=89bebe92d352b79899a65fbf91fa40d6c11bdbb5","patch":"@@ -8,8 +8,8 @@\n  * @flow\n  */\n 'use strict';\n-import type {HasteContext} from 'types/HasteMap';\n+import type HasteFS from '../packages/jest-haste-map/src/HasteFS';\n \n export type RunnerContext = {\n-  hasteContext: HasteContext,\n+  hasteFS: HasteFS,\n };"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/3027","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/3027/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/3027/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/3027/events","html_url":"https://github.com/facebook/jest/pull/3027","id":210907663,"node_id":"MDExOlB1bGxSZXF1ZXN0MTA4NDE2NDk0","number":3027,"title":"Throw errors with descriptive message about theme option of pretty-fo…","user":{"login":"pedrottimark","id":11862657,"node_id":"MDQ6VXNlcjExODYyNjU3","avatar_url":"https://avatars.githubusercontent.com/u/11862657?v=4","gravatar_id":"","url":"https://api.github.com/users/pedrottimark","html_url":"https://github.com/pedrottimark","followers_url":"https://api.github.com/users/pedrottimark/followers","following_url":"https://api.github.com/users/pedrottimark/following{/other_user}","gists_url":"https://api.github.com/users/pedrottimark/gists{/gist_id}","starred_url":"https://api.github.com/users/pedrottimark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pedrottimark/subscriptions","organizations_url":"https://api.github.com/users/pedrottimark/orgs","repos_url":"https://api.github.com/users/pedrottimark/repos","events_url":"https://api.github.com/users/pedrottimark/events{/privacy}","received_events_url":"https://api.github.com/users/pedrottimark/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-02-28T21:31:56Z","updated_at":"2021-05-13T20:07:15Z","closed_at":"2017-03-02T13:47:30Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/3027","html_url":"https://github.com/facebook/jest/pull/3027","diff_url":"https://github.com/facebook/jest/pull/3027.diff","patch_url":"https://github.com/facebook/jest/pull/3027.patch","merged_at":"2017-03-02T13:47:30Z"},"body":"**Summary**\r\n\r\nOne more thing: make the code support the Flow type. This `theme` has 3 variations.\r\n\r\n* If the `theme` option isn’t an **object**:\r\n\r\n  ```js\r\n  pretty(element, {\r\n    highlight: true,\r\n    plugins: [ReactElement],\r\n    theme: null,\r\n  }); // TypeError: Cannot convert undefined or null to object at Function.keys\r\n\r\n  pretty(element, {\r\n    highlight: true,\r\n    plugins: [ReactElement],\r\n    theme: 'beautiful',\r\n  }); // TypeError: Cannot read property 'open' of undefined\r\n  ```\r\n\r\n* If the `theme` option doesn’t specify **all properties**:\r\n\r\n  ```js\r\n  pretty(element, {\r\n    highlight: true,\r\n    plugins: [ReactElement],\r\n    theme: {\r\n      value: 'red',\r\n    },\r\n  }); // TypeError: Cannot read property 'open' of undefined\r\n  ```\r\n\r\n* If the `theme` option specifies a value that’s **undefined in ansi-styles**:\r\n\r\n  ```js\r\n  pretty(element, {\r\n    highlight: true,\r\n    plugins: [ReactElement],\r\n    theme: {\r\n      content: 'unknown',\r\n      prop: 'yellow',\r\n      tag: 'cyan',\r\n      value: 'green',\r\n    },\r\n  }); // TypeError: Cannot read property 'open' of undefined\r\n  ```\r\n\r\nSolutions:\r\n\r\n* descriptive message if the `theme` option is `null` or isn’t of type `\"object\"`\r\n* instead of replace defaults, **override** them with properties from `theme` option\r\n* descriptive message if a value is undefined in `ansi-styles`\r\n\r\nAs we batch up several minor breaking changes, revise existing messages:\r\n\r\n* Imitate wording from `jest-validate`\r\n* Replace prettyFormat with **pretty-format** to maximize chance to find the dependency\r\n\r\nGave an argument `mixed` type for practice, but 2 `$FlowFixMe` really :(\r\n\r\n**Test plan**\r\n\r\n5 new tests including 2 new snapshots\r\n\r\nJest never uses `theme` option, so this change doesn’t affect its performance.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/3027/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/3027/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"c932066b843e1144ead5220e3d0b2b16986644c6","filename":"packages/pretty-format/src/__tests__/__snapshots__/pretty-format-test.js.snap","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/facebook/jest/blob/4a64607b880d92902433565ca64b7d1487261c0f/packages%2Fpretty-format%2Fsrc%2F__tests__%2F__snapshots__%2Fpretty-format-test.js.snap","raw_url":"https://github.com/facebook/jest/raw/4a64607b880d92902433565ca64b7d1487261c0f/packages%2Fpretty-format%2Fsrc%2F__tests__%2F__snapshots__%2Fpretty-format-test.js.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2Fsrc%2F__tests__%2F__snapshots__%2Fpretty-format-test.js.snap?ref=4a64607b880d92902433565ca64b7d1487261c0f","patch":"@@ -13,6 +13,14 @@ exports[`prettyFormat() ReactTestComponent and ReactElement plugins ReactElement\n />\u001b[39m\"\n `;\n \n+exports[`prettyFormat() ReactTestComponent and ReactElement plugins ReactElement plugin highlights syntax with color from theme option 1`] = `\n+\"\u001b[36m<Mouse\u001b[39m\n+  \u001b[33mstyle\u001b[39m=\u001b[31m\\\\\"color:red\\\\\"\u001b[39m\u001b[36m\n+>\u001b[39m\n+  \u001b[0mHello, Mouse!\u001b[0m\n+\u001b[36m</Mouse>\u001b[39m\"\n+`;\n+\n exports[`prettyFormat() ReactTestComponent and ReactElement plugins ReactTestComponent plugin highlights syntax 1`] = `\n \"\u001b[36m<Mouse\u001b[39m\n   \u001b[33mprop\u001b[39m=\u001b[32m{\n@@ -25,3 +33,11 @@ exports[`prettyFormat() ReactTestComponent and ReactElement plugins ReactTestCom\n   }\u001b[39m\u001b[36m\n />\u001b[39m\"\n `;\n+\n+exports[`prettyFormat() ReactTestComponent and ReactElement plugins ReactTestComponent plugin highlights syntax with color from theme option 1`] = `\n+\"\u001b[36m<Mouse\u001b[39m\n+  \u001b[33mstyle\u001b[39m=\u001b[31m\\\\\"color:red\\\\\"\u001b[39m\u001b[36m\n+>\u001b[39m\n+  \u001b[0mHello, Mouse!\u001b[0m\n+\u001b[36m</Mouse>\u001b[39m\"\n+`;"},{"sha":"9874df34895581803c4b8b1c6432e1a54369348b","filename":"packages/pretty-format/src/__tests__/pretty-format-test.js","status":"modified","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/facebook/jest/blob/4a64607b880d92902433565ca64b7d1487261c0f/packages%2Fpretty-format%2Fsrc%2F__tests__%2Fpretty-format-test.js","raw_url":"https://github.com/facebook/jest/raw/4a64607b880d92902433565ca64b7d1487261c0f/packages%2Fpretty-format%2Fsrc%2F__tests__%2Fpretty-format-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2Fsrc%2F__tests__%2Fpretty-format-test.js?ref=4a64607b880d92902433565ca64b7d1487261c0f","patch":"@@ -661,5 +661,69 @@ describe('prettyFormat()', () => {\n         })\n       ).toMatchSnapshot();\n     });\n+\n+    it('throws if theme option is null', () => {\n+      const jsx = React.createElement('Mouse', {style: 'color:red'}, 'Hello, Mouse!');\n+      expect(() => {\n+        prettyFormat(jsx, {\n+          highlight: true,\n+          plugins: [ReactElement],\n+          theme: null,\n+        });\n+      }).toThrow('pretty-format: Option \"theme\" must not be null.');\n+    });\n+\n+    it('throws if theme option is not of type \"object\"', () => {\n+      expect(() => {\n+        const jsx = React.createElement('Mouse', {style: 'color:red'}, 'Hello, Mouse!');\n+        prettyFormat(jsx, {\n+          highlight: true,\n+          plugins: [ReactElement],\n+          theme: 'beautiful',\n+        });\n+      }).toThrow('pretty-format: Option \"theme\" must be of type \"object\" but instead received \"string\".');\n+    });\n+\n+    it('throws if theme option has value that is undefined in ansi-styles', () => {\n+      expect(() => {\n+        const jsx = React.createElement('Mouse', {style: 'color:red'}, 'Hello, Mouse!');\n+        prettyFormat(jsx, {\n+          highlight: true,\n+          plugins: [ReactElement],\n+          theme: {\n+            content: 'unknown',\n+            prop: 'yellow',\n+            tag: 'cyan',\n+            value: 'green',\n+          },\n+        });\n+      }).toThrow('pretty-format: Option \"theme\" has a key \"content\" whose value \"unknown\" is undefined in ansi-styles.');\n+    });\n+\n+    it('ReactElement plugin highlights syntax with color from theme option', () => {\n+      const jsx = React.createElement('Mouse', {style: 'color:red'}, 'Hello, Mouse!');\n+      expect(\n+        prettyFormat(jsx, {\n+          highlight: true,\n+          plugins: [ReactElement],\n+          theme: {\n+            value: 'red',\n+          },\n+        })\n+      ).toMatchSnapshot();\n+    });\n+\n+    it('ReactTestComponent plugin highlights syntax with color from theme option', () => {\n+      const jsx = React.createElement('Mouse', {style: 'color:red'}, 'Hello, Mouse!');\n+      expect(\n+        prettyFormat(renderer.create(jsx).toJSON(), {\n+          highlight: true,\n+          plugins: [ReactTestComponent, ReactElement],\n+          theme: {\n+            value: 'red',\n+          },\n+        })\n+      ).toMatchSnapshot();\n+    });\n   });\n });"},{"sha":"4810907413934f031dfd1238470ed63ce047ed8f","filename":"packages/pretty-format/src/index.js","status":"modified","additions":37,"deletions":9,"changes":46,"blob_url":"https://github.com/facebook/jest/blob/4a64607b880d92902433565ca64b7d1487261c0f/packages%2Fpretty-format%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/4a64607b880d92902433565ca64b7d1487261c0f/packages%2Fpretty-format%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2Fsrc%2Findex.js?ref=4a64607b880d92902433565ca64b7d1487261c0f","patch":"@@ -353,10 +353,10 @@ type InitialOptions = {|\n   plugins?: Plugins,\n   printFunctionName?: boolean,\n   theme?: {\n-    content: string,\n-    prop: string,\n-    tag: string,\n-    value: string,\n+    content?: string,\n+    prop?: string,\n+    tag?: string,\n+    value?: string,\n   },\n |};\n \n@@ -397,20 +397,25 @@ const DEFAULTS: Options = {\n function validateOptions(opts: InitialOptions) {\n   Object.keys(opts).forEach(key => {\n     if (!DEFAULTS.hasOwnProperty(key)) {\n-      throw new Error('prettyFormat: Invalid option: ' + key);\n+      throw new Error(`pretty-format: Unknown option \"${key}\".`);\n     }\n   });\n \n   if (opts.min && opts.indent !== undefined && opts.indent !== 0) {\n-    throw new Error('prettyFormat: Cannot run with min option and indent');\n+    throw new Error('pretty-format: Options \"min\" and \"indent\" cannot be used together.');\n   }\n }\n \n function normalizeOptions(opts: InitialOptions): Options {\n   const result = {};\n \n   Object.keys(DEFAULTS).forEach(key =>\n-    result[key] = opts.hasOwnProperty(key) ? opts[key] : DEFAULTS[key]\n+    result[key] = opts.hasOwnProperty(key)\n+      ? (key === 'theme'\n+          ? normalizeTheme(opts.theme)\n+          : opts[key]\n+        )\n+      : DEFAULTS[key]\n   );\n \n   if (result.min) {\n@@ -423,6 +428,26 @@ function normalizeOptions(opts: InitialOptions): Options {\n   return (result: Options);\n }\n \n+function normalizeTheme(themeOption: ?Object) {\n+  if (themeOption === null) {\n+    throw new Error(`pretty-format: Option \"theme\" must not be null.`);\n+  }\n+  if (typeof themeOption !== 'object') {\n+    throw new Error(`pretty-format: Option \"theme\" must be of type \"object\" but instead received \"${typeof themeOption}\".`);\n+  }\n+\n+  // Silently ignore any keys in `theme` that are not in defaults.\n+  const themeDefaults = DEFAULTS.theme;\n+  return Object.keys(themeDefaults).reduce((theme, key) => {\n+    // Avoid Flow error Method cannot be called on possibly null or undefined value\n+    theme[key] = Object.prototype.hasOwnProperty.call(themeOption, key)\n+      // $FlowFixMe Computed property/element cannot be accessed on mixed\n+      ? themeOption[key]\n+      : themeDefaults[key];\n+    return theme;\n+  }, {});\n+}\n+\n function createIndent(indent: number): string {\n   return new Array(indent + 1).join(' ');\n }\n@@ -436,10 +461,13 @@ function prettyFormat(val: any, initialOptions?: InitialOptions): string {\n     opts = normalizeOptions(initialOptions);\n   }\n \n-  const colors = {};\n+  const colors: Colors = {};\n   Object.keys(opts.theme).forEach(key => {\n     if (opts.highlight) {\n-      colors[key] = style[opts.theme[key]];\n+      const color = colors[key] = style[opts.theme[key]];\n+      if (!color || typeof color.close !== 'string' || typeof color.open !== 'string') {\n+        throw new Error(`pretty-format: Option \"theme\" has a key \"${key}\" whose value \"${opts.theme[key]}\" is undefined in ansi-styles.`);\n+      }\n     } else {\n       colors[key] = {close: '', open: ''};\n     }"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/3187","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/3187/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/3187/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/3187/events","html_url":"https://github.com/facebook/jest/pull/3187","id":216118616,"node_id":"MDExOlB1bGxSZXF1ZXN0MTEyMDQ3Mjkx","number":3187,"title":"[jest-jasmine2] Rewrite `QueueRunner`.","user":{"login":"wtgtybhertgeghgtwtg","id":18507762,"node_id":"MDQ6VXNlcjE4NTA3NzYy","avatar_url":"https://avatars.githubusercontent.com/u/18507762?v=4","gravatar_id":"","url":"https://api.github.com/users/wtgtybhertgeghgtwtg","html_url":"https://github.com/wtgtybhertgeghgtwtg","followers_url":"https://api.github.com/users/wtgtybhertgeghgtwtg/followers","following_url":"https://api.github.com/users/wtgtybhertgeghgtwtg/following{/other_user}","gists_url":"https://api.github.com/users/wtgtybhertgeghgtwtg/gists{/gist_id}","starred_url":"https://api.github.com/users/wtgtybhertgeghgtwtg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/wtgtybhertgeghgtwtg/subscriptions","organizations_url":"https://api.github.com/users/wtgtybhertgeghgtwtg/orgs","repos_url":"https://api.github.com/users/wtgtybhertgeghgtwtg/repos","events_url":"https://api.github.com/users/wtgtybhertgeghgtwtg/events{/privacy}","received_events_url":"https://api.github.com/users/wtgtybhertgeghgtwtg/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-03-22T16:04:42Z","updated_at":"2021-05-13T19:13:29Z","closed_at":"2017-03-23T22:37:00Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/3187","html_url":"https://github.com/facebook/jest/pull/3187","diff_url":"https://github.com/facebook/jest/pull/3187.diff","patch_url":"https://github.com/facebook/jest/pull/3187.patch","merged_at":"2017-03-23T22:37:00Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n**Summary**\r\nRewrites `QueueRunner` (now `queueRunner`) and pulls it out of `jasmine`.\r\nOne of the problems with the current implementation of `QueueRunner` is that it creates \r\n[very deep recursive stacks](https://cloud.githubusercontent.com/assets/18507762/24206916/e5d9e0ae-0edc-11e7-8df0-d2a436eca54b.png) very quickly.  It tries to mitigate that by [spinning off into a timeout every 20 iterations or so](https://github.com/facebook/jest/blob/1a61f3fb52a83c560214c4f8d49a48454d663818/packages/jest-jasmine2/src/jasmine/Env.js#L138-L149), but that's an ugly and suboptimal solution.  With this rewrite, `queueRunner` maps `queueableFns` to promises and resolves them sequentially, so the stack never gets very deep.  Performance is not noticeably affected.\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n**Test plan**\r\nTests have been written for `queueRunner.`  A test in `jest-util` has been changed, as it required the stack to be a certain way.\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/3187/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/3187/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"a4220b2f6ea202bcdfcef16405250d96e06cc792","filename":"packages/jest-jasmine2/package.json","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-jasmine2%2Fpackage.json?ref=75bfe33b1c8a16203b56139865107d9f03da7cd7","patch":"@@ -12,6 +12,8 @@\n     \"jest-matcher-utils\": \"^19.0.0\",\n     \"jest-matchers\": \"^19.0.0\",\n     \"jest-message-util\": \"^19.0.0\",\n-    \"jest-snapshot\": \"^19.0.2\"\n+    \"jest-snapshot\": \"^19.0.2\",\n+    \"once\": \"^1.4.0\",\n+    \"p-map\": \"^1.1.1\"\n   }\n }"},{"sha":"336643d6d33954550e9224a9dc393a725db95fe5","filename":"packages/jest-jasmine2/src/__tests__/p-timeout-test.js","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/facebook/jest/blob/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2F__tests__%2Fp-timeout-test.js","raw_url":"https://github.com/facebook/jest/raw/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2F__tests__%2Fp-timeout-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-jasmine2%2Fsrc%2F__tests__%2Fp-timeout-test.js?ref=75bfe33b1c8a16203b56139865107d9f03da7cd7","patch":"@@ -0,0 +1,48 @@\n+/**\n+ * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @emails oncall+jsinfra\n+ */\n+'use strict';\n+\n+jest.useFakeTimers();\n+\n+const pTimeout = require('../p-timeout');\n+\n+describe('pTimeout', () => {\n+  it('calls `clearTimeout` and resolves when `promise` resolves.', async () => {\n+    const onTimeout = jest.fn();\n+    const promise = Promise.resolve();\n+    await pTimeout(promise, 1000, clearTimeout, setTimeout, onTimeout);\n+    expect(setTimeout).toHaveBeenCalled();\n+    expect(clearTimeout).toHaveBeenCalled();\n+    expect(onTimeout).not.toHaveBeenCalled();\n+  });\n+\n+  it('calls `clearTimeout` and rejects when `promise` rejects.', async () => {\n+    const onTimeout = jest.fn();\n+    const promise = Promise.reject();\n+    try {\n+      await pTimeout(promise, 1000, clearTimeout, setTimeout, onTimeout);\n+    } catch (e) { }\n+    expect(setTimeout).toHaveBeenCalled();\n+    expect(clearTimeout).toHaveBeenCalled();\n+    expect(onTimeout).not.toHaveBeenCalled();\n+  });\n+\n+  it('calls `onTimeout` on timeout.', async () => {\n+    const onTimeout = jest.fn();\n+    // A Promise that never resolves or rejects.\n+    const promise = new Promise(() => {});\n+    const timeoutPromise =\n+      pTimeout(promise, 1000, clearTimeout, setTimeout, onTimeout);\n+    jest.runAllTimers();\n+    await timeoutPromise;\n+    expect(setTimeout).toHaveBeenCalled();\n+    expect(onTimeout).toHaveBeenCalled();\n+  });\n+});"},{"sha":"dccbf8e5dc07ed4a6ee253b2a5c6387171374a67","filename":"packages/jest-jasmine2/src/__tests__/queueRunner-test.js","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/facebook/jest/blob/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2F__tests__%2FqueueRunner-test.js","raw_url":"https://github.com/facebook/jest/raw/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2F__tests__%2FqueueRunner-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-jasmine2%2Fsrc%2F__tests__%2FqueueRunner-test.js?ref=75bfe33b1c8a16203b56139865107d9f03da7cd7","patch":"@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @emails oncall+jsinfra\n+ */\n+'use strict';\n+\n+const queueRunner = require('../queueRunner');\n+\n+describe('queueRunner', () => {\n+  it('runs every function in the queue.', async () => {\n+    const fnOne = jest.fn(next => next());\n+    const fnTwo = jest.fn(next => next());\n+    const onComplete = jest.fn();\n+    const options = {\n+      clearTimeout,\n+      fail: () => {},\n+      onComplete,\n+      onException: () => {},\n+      queueableFns: [{\n+        fn: fnOne,\n+      }, {\n+        fn: fnTwo,\n+      }],\n+      setTimeout,\n+    };\n+    await queueRunner(options);\n+    expect(fnOne).toHaveBeenCalled();\n+    expect(fnTwo).toHaveBeenCalled();\n+    expect(onComplete).toHaveBeenCalled();\n+  });\n+\n+  it('exposes `fail` to `next`.', async () => {\n+    const fail = jest.fn();\n+    const fnOne = jest.fn(next => next.fail());\n+    const fnTwo = jest.fn(next => next());\n+    const onComplete = jest.fn();\n+    const options = {\n+      clearTimeout,\n+      fail,\n+      onComplete,\n+      onException: () => {},\n+      queueableFns: [{\n+        fn: fnOne,\n+      }, {\n+        fn: fnTwo,\n+      }],\n+      setTimeout,\n+    };\n+    await queueRunner(options);\n+    expect(fnOne).toHaveBeenCalled();\n+    expect(fail).toHaveBeenCalled();\n+    // Even if `fail` is called, the queue keeps running.\n+    expect(fnTwo).toHaveBeenCalled();\n+    expect(onComplete).toHaveBeenCalled();\n+  });\n+\n+  it('passes errors to `onException`.', async () => {\n+    const error = new Error('The error a test throws.');\n+    const fnOne = jest.fn(() => {\n+      throw error;\n+    });\n+    const fnTwo = jest.fn(next => next());\n+    const onComplete = jest.fn();\n+    const onException = jest.fn();\n+    const options = {\n+      clearTimeout,\n+      fail: () => {},\n+      onComplete,\n+      onException,\n+      queueableFns: [{\n+        fn: fnOne,\n+      }, {\n+        fn: fnTwo,\n+      }],\n+      setTimeout,\n+    };\n+    await queueRunner(options);\n+    expect(fnOne).toHaveBeenCalled();\n+    expect(onException).toHaveBeenCalledWith(error);\n+    // Even if one of them errors, the queue keeps running.\n+    expect(fnTwo).toHaveBeenCalled();\n+    expect(onComplete).toHaveBeenCalled();\n+  });\n+\n+  it('passes an error to `onException` on timeout.', async () => {\n+    const fnOne = jest.fn(next => {});\n+    const fnTwo = jest.fn(next => next());\n+    const onComplete = jest.fn();\n+    const onException = jest.fn();\n+    const options = {\n+      clearTimeout,\n+      fail: () => {},\n+      onComplete,\n+      onException,\n+      queueableFns: [{\n+        fn: fnOne,\n+        // It times out in zero seconds.\n+        timeout: () => 0,\n+      }, {\n+        fn: fnTwo,\n+      }],\n+      setTimeout,\n+    };\n+    await queueRunner(options);\n+    expect(fnOne).toHaveBeenCalled();\n+    expect(onException).toHaveBeenCalled();\n+    // i.e. the `message` of the error passed to `onException`.\n+    expect(onException.mock.calls[0][0].message).toEqual(\n+      'Timeout - Async callback was not invoked within timeout specified ' +\n+      'by jasmine.DEFAULT_TIMEOUT_INTERVAL.',\n+    );\n+    expect(fnTwo).toHaveBeenCalled();\n+    expect(onComplete).toHaveBeenCalled();\n+  });\n+});"},{"sha":"60a08bd2a1ecc618a9440792116b1480f82537c9","filename":"packages/jest-jasmine2/src/jasmine/Env.js","status":"modified","additions":5,"deletions":20,"changes":25,"blob_url":"https://github.com/facebook/jest/blob/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2Fjasmine%2FEnv.js","raw_url":"https://github.com/facebook/jest/raw/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2Fjasmine%2FEnv.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-jasmine2%2Fsrc%2Fjasmine%2FEnv.js?ref=75bfe33b1c8a16203b56139865107d9f03da7cd7","patch":"@@ -32,6 +32,8 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n /* eslint-disable sort-keys */\n 'use strict';\n \n+const queueRunner = require('../queueRunner');\n+\n module.exports = function(j$) {\n   function Env(options) {\n     options = options || {};\n@@ -135,19 +137,6 @@ module.exports = function(j$) {\n       return catchExceptions;\n     };\n \n-    const maximumSpecCallbackDepth = 20;\n-    let currentSpecCallbackDepth = 0;\n-\n-    function clearStack(fn) {\n-      currentSpecCallbackDepth++;\n-      if (currentSpecCallbackDepth >= maximumSpecCallbackDepth) {\n-        currentSpecCallbackDepth = 0;\n-        realSetTimeout(fn, 0);\n-      } else {\n-        fn();\n-      }\n-    }\n-\n     const catchException = function(e) {\n       return j$.Spec.isPendingSpecException(e) || catchExceptions;\n     };\n@@ -177,14 +166,10 @@ module.exports = function(j$) {\n \n     const queueRunnerFactory = function(options) {\n       options.catchException = catchException;\n-      options.clearStack = options.clearStack || clearStack;\n-      options.timeout = {\n-        setTimeout: realSetTimeout,\n-        clearTimeout: realClearTimeout,\n-      };\n+      options.clearTimeout = realClearTimeout;\n       options.fail = self.fail;\n-\n-      new j$.QueueRunner(options).execute();\n+      options.setTimeout = realSetTimeout;\n+      queueRunner(options);\n     };\n \n     const topSuite = new j$.Suite({"},{"sha":"77f10815be953a728a45c3b979b976b79782744f","filename":"packages/jest-jasmine2/src/jasmine/QueueRunner.js","status":"removed","additions":0,"deletions":158,"changes":158,"blob_url":"https://github.com/facebook/jest/blob/1a61f3fb52a83c560214c4f8d49a48454d663818/packages%2Fjest-jasmine2%2Fsrc%2Fjasmine%2FQueueRunner.js","raw_url":"https://github.com/facebook/jest/raw/1a61f3fb52a83c560214c4f8d49a48454d663818/packages%2Fjest-jasmine2%2Fsrc%2Fjasmine%2FQueueRunner.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-jasmine2%2Fsrc%2Fjasmine%2FQueueRunner.js?ref=1a61f3fb52a83c560214c4f8d49a48454d663818","patch":"@@ -1,158 +0,0 @@\n-/**\n- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n- *\n- * This source code is licensed under the BSD-style license found in the\n- * LICENSE file in the root directory of this source tree. An additional grant\n- * of patent rights can be found in the PATENTS file in the same directory.\n- *\n- */\n-// This file is a heavily modified fork of Jasmine. Original license:\n-/*\n-Copyright (c) 2008-2016 Pivotal Labs\n-\n-Permission is hereby granted, free of charge, to any person obtaining\n-a copy of this software and associated documentation files (the\n-\"Software\"), to deal in the Software without restriction, including\n-without limitation the rights to use, copy, modify, merge, publish,\n-distribute, sublicense, and/or sell copies of the Software, and to\n-permit persons to whom the Software is furnished to do so, subject to\n-the following conditions:\n-\n-The above copyright notice and this permission notice shall be\n-included in all copies or substantial portions of the Software.\n-\n-THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n-EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n-MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n-NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n-LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n-OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n-WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n-*/\n-/* eslint-disable sort-keys */\n-'use strict';\n-\n-function once(fn) {\n-  let called = false;\n-  return function() {\n-    if (!called) {\n-      called = true;\n-      fn();\n-    }\n-    return null;\n-  };\n-}\n-\n-function QueueRunner(attrs) {\n-  this.queueableFns = attrs.queueableFns || [];\n-  this.onComplete = attrs.onComplete || function() {};\n-  this.clearStack = attrs.clearStack ||\n-    function(fn) {\n-      fn();\n-    };\n-  this.onException = attrs.onException || function() {};\n-  this.catchException = attrs.catchException ||\n-    function() {\n-      return true;\n-    };\n-  this.userContext = attrs.userContext || {};\n-  this.timeout = attrs.timeout || {\n-    setTimeout,\n-    clearTimeout,\n-  };\n-  this.fail = attrs.fail || function() {};\n-}\n-\n-QueueRunner.prototype.execute = function() {\n-  this.run(this.queueableFns, 0);\n-};\n-\n-QueueRunner.prototype.run = function(queueableFns, recursiveIndex) {\n-  const length = queueableFns.length;\n-  const self = this;\n-  let iterativeIndex;\n-\n-  for (\n-    iterativeIndex = recursiveIndex;\n-    iterativeIndex < length;\n-    iterativeIndex++\n-  ) {\n-    const queueableFn = queueableFns[iterativeIndex];\n-    if (queueableFn.fn.length > 0) {\n-      attemptAsync(queueableFn);\n-      return;\n-    } else {\n-      attemptSync(queueableFn);\n-    }\n-  }\n-\n-  const runnerDone = iterativeIndex >= length;\n-\n-  if (runnerDone) {\n-    this.clearStack(this.onComplete);\n-  }\n-\n-  function attemptSync(queueableFn) {\n-    try {\n-      queueableFn.fn.call(self.userContext);\n-    } catch (e) {\n-      handleException(e, queueableFn);\n-    }\n-  }\n-\n-  function attemptAsync(queueableFn) {\n-    const clearTimeout = function() {\n-      Function.prototype.apply.apply(self.timeout.clearTimeout, [\n-        global,\n-        [timeoutId],\n-      ]);\n-    };\n-    const next = once(() => {\n-      clearTimeout(timeoutId);\n-      self.run(queueableFns, iterativeIndex + 1);\n-    });\n-    let timeoutId;\n-\n-    next.fail = function() {\n-      self.fail.apply(null, arguments);\n-      next();\n-    };\n-\n-    if (queueableFn.timeout) {\n-      timeoutId = Function.prototype.apply.apply(self.timeout.setTimeout, [\n-        global,\n-        [\n-          function() {\n-            const error = new Error(\n-              'Timeout - Async callback was not invoked within ' +\n-                'timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.',\n-            );\n-            onException(error);\n-            next();\n-          },\n-          queueableFn.timeout(),\n-        ],\n-      ]);\n-    }\n-\n-    try {\n-      queueableFn.fn.call(self.userContext, next);\n-    } catch (e) {\n-      handleException(e, queueableFn);\n-      next();\n-    }\n-  }\n-\n-  function onException(e) {\n-    self.onException(e);\n-  }\n-\n-  function handleException(e, queueableFn) {\n-    onException(e);\n-    if (!self.catchException(e)) {\n-      throw e;\n-    }\n-  }\n-};\n-\n-module.exports = QueueRunner;"},{"sha":"a59aa1b7a03fb99e9a5cc14b096f5fa95ab11b5c","filename":"packages/jest-jasmine2/src/jasmine/jasmine-light.js","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2Fjasmine%2Fjasmine-light.js","raw_url":"https://github.com/facebook/jest/raw/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2Fjasmine%2Fjasmine-light.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-jasmine2%2Fsrc%2Fjasmine%2Fjasmine-light.js?ref=75bfe33b1c8a16203b56139865107d9f03da7cd7","patch":"@@ -35,7 +35,6 @@ WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n const createSpy = require('./createSpy');\n const Env = require('./Env');\n const JsApiReporter = require('./JsApiReporter');\n-const QueueRunner = require('./QueueRunner');\n const ReportDispatcher = require('./ReportDispatcher');\n const Spec = require('./Spec');\n const SpyRegistry = require('./SpyRegistry');\n@@ -56,7 +55,6 @@ exports.create = function() {\n   j$.createSpy = createSpy;\n   j$.Env = Env(j$);\n   j$.JsApiReporter = JsApiReporter;\n-  j$.QueueRunner = QueueRunner;\n   j$.ReportDispatcher = ReportDispatcher;\n   j$.Spec = Spec;\n   j$.SpyRegistry = SpyRegistry;"},{"sha":"d3bf51f5549ff306b467d6ecae3f362bce3b4678","filename":"packages/jest-jasmine2/src/p-timeout.js","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/facebook/jest/blob/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2Fp-timeout.js","raw_url":"https://github.com/facebook/jest/raw/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2Fp-timeout.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-jasmine2%2Fsrc%2Fp-timeout.js?ref=75bfe33b1c8a16203b56139865107d9f03da7cd7","patch":"@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+'use strict';\n+\n+// A specialized version of `p-timeout` that does not touch globals.\n+// It does not throw on timeout.\n+function pTimeout(\n+  promise: Promise<any>,\n+  ms: number,\n+  clearTimeout: (timeoutID: number) => void,\n+  setTimeout: (func: () => void, delay: number) => number,\n+  onTimeout: () => any,\n+) {\n+  return new Promise((resolve, reject) => {\n+    const timer = setTimeout(() => resolve(onTimeout()), ms);\n+    promise.then(\n+      val => {\n+        clearTimeout(timer);\n+        resolve(val);\n+      },\n+      err => {\n+        clearTimeout(timer);\n+        reject(err);\n+      });\n+  });\n+}\n+\n+module.exports = pTimeout;"},{"sha":"39a9c4fe9d1cfd79c05bae512bac062289816ef7","filename":"packages/jest-jasmine2/src/queueRunner.js","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/facebook/jest/blob/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2FqueueRunner.js","raw_url":"https://github.com/facebook/jest/raw/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-jasmine2%2Fsrc%2FqueueRunner.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-jasmine2%2Fsrc%2FqueueRunner.js?ref=75bfe33b1c8a16203b56139865107d9f03da7cd7","patch":"@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+'use strict';\n+\n+const once = require('once');\n+const pMap = require('p-map');\n+const pTimeout = require('./p-timeout');\n+\n+type Options = {\n+  clearTimeout: (timeoutID: number) => void,\n+  fail: () => void,\n+  onComplete: () => void,\n+  onException: () => void,\n+  queueableFns: Array<QueueableFn>,\n+  setTimeout: (func: () => void, delay: number) => number,\n+  userContext: any,\n+};\n+\n+type QueueableFn = {\n+  fn: (next: () => void) => void,\n+  timeout?: () => number,\n+};\n+\n+function queueRunner(options: Options) {\n+  const mapper = ({fn, timeout}) => {\n+    const promise = new Promise(resolve => {\n+      const next = once(resolve);\n+      next.fail = (...args) => {\n+        options.fail(...args);\n+        resolve();\n+      };\n+      try {\n+        fn.call(options.userContext, next);\n+      } catch (e) {\n+        options.onException(e);\n+        resolve();\n+      }\n+    });\n+    if (!timeout) {\n+      return promise;\n+    }\n+    return pTimeout(\n+      promise,\n+      timeout(),\n+      options.clearTimeout,\n+      options.setTimeout,\n+      () => {\n+        const error = new Error(\n+          'Timeout - Async callback was not invoked within timeout specified ' +\n+          'by jasmine.DEFAULT_TIMEOUT_INTERVAL.',\n+        );\n+        options.onException(error);\n+      },\n+    );\n+  };\n+\n+  return pMap(options.queueableFns, mapper, {concurrency: 1})\n+    .then(options.onComplete);\n+}\n+\n+module.exports = queueRunner;"},{"sha":"afeed18f5cdaaed89cd4b7864810a88c267a0a66","filename":"packages/jest-util/src/__tests__/FakeTimers-test.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-util%2Fsrc%2F__tests__%2FFakeTimers-test.js","raw_url":"https://github.com/facebook/jest/raw/75bfe33b1c8a16203b56139865107d9f03da7cd7/packages%2Fjest-util%2Fsrc%2F__tests__%2FFakeTimers-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fsrc%2F__tests__%2FFakeTimers-test.js?ref=75bfe33b1c8a16203b56139865107d9f03da7cd7","patch":"@@ -327,7 +327,7 @@ describe('FakeTimers', () => {\n       const timers = new FakeTimers(global, moduleMocker, {rootDir: __dirname});\n       timers.runAllTimers();\n       expect(\n-        console.warn.mock.calls[0][0].split('\\n').slice(0, -3).join('\\n'),\n+        console.warn.mock.calls[0][0].split('\\nStack Trace')[0],\n       ).toMatchSnapshot();\n       console.warn = consoleWarn;\n     });"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/3962","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/3962/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/3962/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/3962/events","html_url":"https://github.com/facebook/jest/pull/3962","id":240259181,"node_id":"MDExOlB1bGxSZXF1ZXN0MTI4NjkwMTc5","number":3962,"title":"Avoid unnecessary function declarations and call in pretty-format","user":{"login":"pedrottimark","id":11862657,"node_id":"MDQ6VXNlcjExODYyNjU3","avatar_url":"https://avatars.githubusercontent.com/u/11862657?v=4","gravatar_id":"","url":"https://api.github.com/users/pedrottimark","html_url":"https://github.com/pedrottimark","followers_url":"https://api.github.com/users/pedrottimark/followers","following_url":"https://api.github.com/users/pedrottimark/following{/other_user}","gists_url":"https://api.github.com/users/pedrottimark/gists{/gist_id}","starred_url":"https://api.github.com/users/pedrottimark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pedrottimark/subscriptions","organizations_url":"https://api.github.com/users/pedrottimark/orgs","repos_url":"https://api.github.com/users/pedrottimark/repos","events_url":"https://api.github.com/users/pedrottimark/events{/privacy}","received_events_url":"https://api.github.com/users/pedrottimark/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-07-03T20:28:34Z","updated_at":"2021-05-13T11:07:09Z","closed_at":"2017-07-04T21:07:28Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/3962","html_url":"https://github.com/facebook/jest/pull/3962","diff_url":"https://github.com/facebook/jest/pull/3962.diff","patch_url":"https://github.com/facebook/jest/pull/3962.patch","merged_at":"2017-07-04T21:07:28Z"},"body":"**Summary**\r\n\r\nProblem:\r\n\r\n* `printPlugin` “hoists” the `boundPrint` and `boundIndent` declarations and therefore initializes the functions **whether or not** a plugin matches the value.\r\n* `prettyFormat` calls `createIndent` if any plugins exist **instead of** if some plugin **matches** the value. Because plugins always exist in Jest, the conditional logic to avoid creating indentation for basic values doesn’t save any time.\r\n\r\nSolution:\r\n\r\n* Factor out a `findPlugin` function.\r\n* Factor out `if` statement to call `printPlugin` only if a plugin matches the value.\r\n* Call `createIndent` for arg in `printPlugin` and `printComplexValue` function calls.\r\n\r\nYour review is especially wanted about the decision to throw an error if a plugin returns a non-string value. Am happy to revert that change if it’s a step in a wrong direction. Current logic quietly falls through to print the value as either basic or complex.\r\n\r\nInterpretation of the following performance measurements:\r\n\r\n* Big improvement for massive object with no plugins outside Jest.\r\n* Almost as big improvement with default plugins (not called) inside Jest.\r\n* Only slight change for small elements with default plugins (called) inside Jest.\r\n\r\n| scenario | plugins | proposed | baseline | ratio |\r\n| :--- | ---: | ---: | ---: | ---: |\r\n| geo.json | 0 | 30693309 | 72540558 | 0.423 |\r\n| geo.json | 10 | 70169013 | 127109022 | 0.552 |\r\n| React elements | 10 | 1283359 | 1287893 | 0.996 |\r\n\r\nP.S. The calls to `printPlugin` are nice example of not ignoring indentation in a diff, heh :)\r\n\r\n**Test plan**\r\n\r\nJest","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/3962/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/3962/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"ac1998972bec02823dcdf0ba049e152f5197e65c","filename":"packages/pretty-format/src/__tests__/pretty_format.test.js","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/facebook/jest/blob/77bae77fe2142869b258611b75a4227322c8817e/packages%2Fpretty-format%2Fsrc%2F__tests__%2Fpretty_format.test.js","raw_url":"https://github.com/facebook/jest/raw/77bae77fe2142869b258611b75a4227322c8817e/packages%2Fpretty-format%2Fsrc%2F__tests__%2Fpretty_format.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2Fsrc%2F__tests__%2Fpretty_format.test.js?ref=77bae77fe2142869b258611b75a4227322c8817e","patch":"@@ -329,6 +329,25 @@ describe('prettyFormat()', () => {\n     expect(prettyFormat(val, options)).toEqual('');\n   });\n \n+  it('throws if plugin does not return a string', () => {\n+    const val = 123;\n+    const options = {\n+      plugins: [\n+        {\n+          print(val) {\n+            return val;\n+          },\n+          test() {\n+            return true;\n+          },\n+        },\n+      ],\n+    };\n+    expect(() => {\n+      prettyFormat(val, options);\n+    }).toThrow();\n+  });\n+\n   it('supports plugins with deeply nested arrays (#24)', () => {\n     const val = [[1, 2], [3, 4]];\n     expect("},{"sha":"545533f4eec9f07bc1515e432994656b4327a5f6","filename":"packages/pretty-format/src/index.js","status":"modified","additions":61,"deletions":63,"changes":124,"blob_url":"https://github.com/facebook/jest/blob/77bae77fe2142869b258611b75a4227322c8817e/packages%2Fpretty-format%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/77bae77fe2142869b258611b75a4227322c8817e/packages%2Fpretty-format%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2Fsrc%2Findex.js?ref=77bae77fe2142869b258611b75a4227322c8817e","patch":"@@ -12,6 +12,7 @@ import type {\n   Colors,\n   Refs,\n   StringOrNull,\n+  Plugin,\n   Plugins,\n   Options,\n } from 'types/PrettyFormat';\n@@ -671,6 +672,7 @@ function printComplexValue(\n }\n \n function printPlugin(\n+  plugin: Plugin,\n   val,\n   indent: string,\n   prevIndent: string,\n@@ -685,20 +687,7 @@ function printPlugin(\n   printFunctionName: boolean,\n   escapeRegex: boolean,\n   colors: Colors,\n-): StringOrNull {\n-  let plugin;\n-\n-  for (let p = 0; p < plugins.length; p++) {\n-    if (plugins[p].test(val)) {\n-      plugin = plugins[p];\n-      break;\n-    }\n-  }\n-\n-  if (!plugin) {\n-    return null;\n-  }\n-\n+): string {\n   function boundPrint(val) {\n     return print(\n       val,\n@@ -728,7 +717,24 @@ function printPlugin(\n     min,\n     spacing,\n   };\n-  return plugin.print(val, boundPrint, boundIndent, opts, colors);\n+\n+  const printed = plugin.print(val, boundPrint, boundIndent, opts, colors);\n+  if (typeof printed !== 'string') {\n+    throw new Error(\n+      `pretty-format: Plugin must return type \"string\" but instead returned \"${typeof printed}\".`,\n+    );\n+  }\n+  return printed;\n+}\n+\n+function findPlugin(plugins: Plugins, val: any) {\n+  for (let p = 0; p < plugins.length; p++) {\n+    if (plugins[p].test(val)) {\n+      return plugins[p];\n+    }\n+  }\n+\n+  return null;\n }\n \n function print(\n@@ -747,24 +753,25 @@ function print(\n   escapeRegex: boolean,\n   colors: Colors,\n ): string {\n-  const pluginsResult = printPlugin(\n-    val,\n-    indent,\n-    prevIndent,\n-    spacing,\n-    edgeSpacing,\n-    refs,\n-    maxDepth,\n-    currentDepth,\n-    plugins,\n-    min,\n-    callToJSON,\n-    printFunctionName,\n-    escapeRegex,\n-    colors,\n-  );\n-  if (typeof pluginsResult === 'string') {\n-    return pluginsResult;\n+  const plugin = findPlugin(plugins, val);\n+  if (plugin !== null) {\n+    return printPlugin(\n+      plugin,\n+      val,\n+      indent,\n+      prevIndent,\n+      spacing,\n+      edgeSpacing,\n+      refs,\n+      maxDepth,\n+      currentDepth,\n+      plugins,\n+      min,\n+      callToJSON,\n+      printFunctionName,\n+      escapeRegex,\n+      colors,\n+    );\n   }\n \n   const basicResult = printBasicValue(val, printFunctionName, escapeRegex);\n@@ -897,34 +904,31 @@ function prettyFormat(val: any, initialOptions?: InitialOptions): string {\n     }\n   });\n \n-  let indent;\n-  let refs;\n   const prevIndent = '';\n   const currentDepth = 0;\n   const spacing = opts.min ? ' ' : '\\n';\n   const edgeSpacing = opts.min ? '' : '\\n';\n \n   if (opts && opts.plugins.length) {\n-    indent = createIndent(opts.indent);\n-    refs = [];\n-    const pluginsResult = printPlugin(\n-      val,\n-      indent,\n-      prevIndent,\n-      spacing,\n-      edgeSpacing,\n-      refs,\n-      opts.maxDepth,\n-      currentDepth,\n-      opts.plugins,\n-      opts.min,\n-      opts.callToJSON,\n-      opts.printFunctionName,\n-      opts.escapeRegex,\n-      colors,\n-    );\n-    if (typeof pluginsResult === 'string') {\n-      return pluginsResult;\n+    const plugin = findPlugin(opts.plugins, val);\n+    if (plugin !== null) {\n+      return printPlugin(\n+        plugin,\n+        val,\n+        createIndent(opts.indent),\n+        prevIndent,\n+        spacing,\n+        edgeSpacing,\n+        [],\n+        opts.maxDepth,\n+        currentDepth,\n+        opts.plugins,\n+        opts.min,\n+        opts.callToJSON,\n+        opts.printFunctionName,\n+        opts.escapeRegex,\n+        colors,\n+      );\n     }\n   }\n \n@@ -937,19 +941,13 @@ function prettyFormat(val: any, initialOptions?: InitialOptions): string {\n     return basicResult;\n   }\n \n-  if (!indent) {\n-    indent = createIndent(opts.indent);\n-  }\n-  if (!refs) {\n-    refs = [];\n-  }\n   return printComplexValue(\n     val,\n-    indent,\n+    createIndent(opts.indent),\n     prevIndent,\n     spacing,\n     edgeSpacing,\n-    refs,\n+    [],\n     opts.maxDepth,\n     currentDepth,\n     opts.plugins,"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/4088","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/4088/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/4088/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/4088/events","html_url":"https://github.com/facebook/jest/pull/4088","id":244317358,"node_id":"MDExOlB1bGxSZXF1ZXN0MTMxNTIxNzA0","number":4088,"title":"jest-runtime: atomic cache write, and check validity of data","user":{"login":"jeanlauliac","id":1733570,"node_id":"MDQ6VXNlcjE3MzM1NzA=","avatar_url":"https://avatars.githubusercontent.com/u/1733570?v=4","gravatar_id":"","url":"https://api.github.com/users/jeanlauliac","html_url":"https://github.com/jeanlauliac","followers_url":"https://api.github.com/users/jeanlauliac/followers","following_url":"https://api.github.com/users/jeanlauliac/following{/other_user}","gists_url":"https://api.github.com/users/jeanlauliac/gists{/gist_id}","starred_url":"https://api.github.com/users/jeanlauliac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeanlauliac/subscriptions","organizations_url":"https://api.github.com/users/jeanlauliac/orgs","repos_url":"https://api.github.com/users/jeanlauliac/repos","events_url":"https://api.github.com/users/jeanlauliac/events{/privacy}","received_events_url":"https://api.github.com/users/jeanlauliac/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":20,"created_at":"2017-07-20T10:34:34Z","updated_at":"2021-05-13T03:14:22Z","closed_at":"2017-07-25T21:33:25Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/4088","html_url":"https://github.com/facebook/jest/pull/4088","diff_url":"https://github.com/facebook/jest/pull/4088.diff","patch_url":"https://github.com/facebook/jest/pull/4088.patch","merged_at":"2017-07-25T21:33:25Z"},"body":"This change tries to address what may be a cause for #1874, where I posted some details on the approach. By doing atomic writes we ensure there's no cache file ending up being a mix of two transformed code files, and we limit the concurrency issues of having a file read and written at the same time. A prior PR #3561 tries to address the problem using a lock, but locks bring additional complexity that this change tries to avoid (ex. deadlocks).\r\n\r\nThis change also adds a checksum, because there can be other processes still writing non-atomically to cache files. Additional, not all filesystems may support atomic renames (what `atomic-write-file` relies on).\r\n\r\nThis change incurs a slight performance cost that is the additional I/O call to rename the files. However I believe it is less costly than a lock solution. I don't think this should have much effect even on processing several thousands of files.\r\n\r\n**Test plan**\r\n\r\nIt is quite challenging to test for concurrency issues, so this change relies on the knowledge that `writeFileSync` is not atomic and that corruption could have the observed effects. I rely on the existing automated testing to ensure that the caching behaviour and `jest-runtime` in general is working as expected.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/4088/reactions","total_count":3,"+1":1,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/4088/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"ef281b1c2e0a52e1af0465b684348a649d1ac2cb","filename":"packages/jest-runtime/package.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/edde90dfeb661eb1754d669ca2d747bb00f5cba0/packages%2Fjest-runtime%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/edde90dfeb661eb1754d669ca2d747bb00f5cba0/packages%2Fjest-runtime%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fpackage.json?ref=edde90dfeb661eb1754d669ca2d747bb00f5cba0","patch":"@@ -22,6 +22,7 @@\n     \"json-stable-stringify\": \"^1.0.1\",\n     \"micromatch\": \"^2.3.11\",\n     \"strip-bom\": \"3.0.0\",\n+    \"write-file-atomic\": \"^2.1.0\",\n     \"yargs\": \"^7.0.2\"\n   },\n   \"devDependencies\": {"},{"sha":"7201e233e443ce9f6a1f6da42995370ccb743113","filename":"packages/jest-runtime/src/__tests__/script_transformer.test.js","status":"modified","additions":24,"deletions":15,"changes":39,"blob_url":"https://github.com/facebook/jest/blob/edde90dfeb661eb1754d669ca2d747bb00f5cba0/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Fscript_transformer.test.js","raw_url":"https://github.com/facebook/jest/raw/edde90dfeb661eb1754d669ca2d747bb00f5cba0/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Fscript_transformer.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Fscript_transformer.test.js?ref=edde90dfeb661eb1754d669ca2d747bb00f5cba0","patch":"@@ -9,9 +9,11 @@\n  */\n 'use strict';\n \n+const crypto = require('crypto');\n const slash = require('slash');\n \n jest\n+  .mock('fs')\n   .mock('graceful-fs')\n   .mock('jest-haste-map', () => ({\n     getCacheFilePath: (cacheDir, baseDir, version) => cacheDir + baseDir,\n@@ -100,6 +102,14 @@ let fs;\n let mockFs;\n let object;\n let vm;\n+let writeFileAtomic;\n+\n+jest.mock('write-file-atomic', () => ({\n+  sync: jest.fn().mockImplementation((filePath, data) => {\n+    const normalizedPath = require('slash')(filePath);\n+    mockFs[normalizedPath] = data;\n+  }),\n+}));\n \n describe('ScriptTransformer', () => {\n   const reset = () => {\n@@ -145,6 +155,8 @@ describe('ScriptTransformer', () => {\n \n     fs.existsSync = jest.fn(path => !!mockFs[path]);\n \n+    writeFileAtomic = require('write-file-atomic');\n+\n     config = {\n       cache: true,\n       cacheDirectory: '/cache/',\n@@ -290,11 +302,10 @@ describe('ScriptTransformer', () => {\n       mapCoverage: true,\n     });\n     expect(result.sourceMapPath).toEqual(expect.any(String));\n-    expect(fs.writeFileSync).toBeCalledWith(\n-      result.sourceMapPath,\n-      JSON.stringify(map),\n-      'utf8',\n-    );\n+    const mapStr = JSON.stringify(map);\n+    expect(writeFileAtomic.sync).toBeCalledWith(result.sourceMapPath, mapStr, {\n+      encoding: 'utf8',\n+    });\n   });\n \n   it('writes source map if preprocessor inlines it', () => {\n@@ -320,11 +331,9 @@ describe('ScriptTransformer', () => {\n       mapCoverage: true,\n     });\n     expect(result.sourceMapPath).toEqual(expect.any(String));\n-    expect(fs.writeFileSync).toBeCalledWith(\n-      result.sourceMapPath,\n-      sourceMap,\n-      'utf8',\n-    );\n+    expect(\n+      writeFileAtomic.sync,\n+    ).toBeCalledWith(result.sourceMapPath, sourceMap, {encoding: 'utf8'});\n   });\n \n   it('does not write source map if mapCoverage option is false', () => {\n@@ -348,7 +357,7 @@ describe('ScriptTransformer', () => {\n       mapCoverage: false,\n     });\n     expect(result.sourceMapPath).toBeFalsy();\n-    expect(fs.writeFileSync).toHaveBeenCalledTimes(1);\n+    expect(writeFileAtomic.sync).toHaveBeenCalledTimes(1);\n   });\n \n   it('reads values from the cache', () => {\n@@ -359,8 +368,8 @@ describe('ScriptTransformer', () => {\n     scriptTransformer.transform('/fruits/banana.js', {});\n \n     const cachePath = getCachePath(mockFs, config);\n-    expect(fs.writeFileSync).toBeCalled();\n-    expect(fs.writeFileSync.mock.calls[0][0]).toBe(cachePath);\n+    expect(writeFileAtomic.sync).toBeCalled();\n+    expect(writeFileAtomic.sync.mock.calls[0][0]).toBe(cachePath);\n \n     // Cache the state in `mockFsCopy`\n     const mockFsCopy = mockFs;\n@@ -375,7 +384,7 @@ describe('ScriptTransformer', () => {\n     expect(fs.readFileSync.mock.calls.length).toBe(2);\n     expect(fs.readFileSync).toBeCalledWith('/fruits/banana.js', 'utf8');\n     expect(fs.readFileSync).toBeCalledWith(cachePath, 'utf8');\n-    expect(fs.writeFileSync).not.toBeCalled();\n+    expect(writeFileAtomic.sync).not.toBeCalled();\n \n     // Don't read from the cache when `config.cache` is false.\n     jest.resetModuleRegistry();\n@@ -388,6 +397,6 @@ describe('ScriptTransformer', () => {\n     expect(fs.readFileSync.mock.calls.length).toBe(1);\n     expect(fs.readFileSync).toBeCalledWith('/fruits/banana.js', 'utf8');\n     expect(fs.readFileSync).not.toBeCalledWith(cachePath, 'utf8');\n-    expect(fs.writeFileSync).toBeCalled();\n+    expect(writeFileAtomic.sync).toBeCalled();\n   });\n });"},{"sha":"da9b152ab6db6e9b60fcb27634461c8f514b9fe1","filename":"packages/jest-runtime/src/script_transformer.js","status":"modified","additions":64,"deletions":10,"changes":74,"blob_url":"https://github.com/facebook/jest/blob/edde90dfeb661eb1754d669ca2d747bb00f5cba0/packages%2Fjest-runtime%2Fsrc%2Fscript_transformer.js","raw_url":"https://github.com/facebook/jest/raw/edde90dfeb661eb1754d669ca2d747bb00f5cba0/packages%2Fjest-runtime%2Fsrc%2Fscript_transformer.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Fscript_transformer.js?ref=edde90dfeb661eb1754d669ca2d747bb00f5cba0","patch":"@@ -28,6 +28,7 @@ import stableStringify from 'json-stable-stringify';\n import slash from 'slash';\n import {version as VERSION} from '../package.json';\n import shouldInstrument from './should_instrument';\n+import writeFileAtomic from 'write-file-atomic';\n \n export type Options = {|\n   collectCoverage: boolean,\n@@ -42,6 +43,9 @@ const configToJsonMap = new Map();\n // Cache regular expressions to test whether the file needs to be preprocessed\n const ignoreCache: WeakMap<ProjectConfig, ?RegExp> = new WeakMap();\n \n+// To reset the cache for specific changesets (rather than package version).\n+const CACHE_VERSION = '1';\n+\n class ScriptTransformer {\n   static EVAL_RESULT_VARIABLE: string;\n   _config: ProjectConfig;\n@@ -67,16 +71,23 @@ class ScriptTransformer {\n     const transformer = this._getTransformer(filename);\n \n     if (transformer && typeof transformer.getCacheKey === 'function') {\n-      return transformer.getCacheKey(fileData, filename, configString, {\n-        instrument,\n-      });\n+      return crypto\n+        .createHash('md5')\n+        .update(\n+          transformer.getCacheKey(fileData, filename, configString, {\n+            instrument,\n+          }),\n+        )\n+        .update(CACHE_VERSION)\n+        .digest('hex');\n     } else {\n       return crypto\n         .createHash('md5')\n         .update(fileData)\n         .update(configString)\n         .update(instrument ? 'instrument' : '')\n         .update(mapCoverage ? 'mapCoverage' : '')\n+        .update(CACHE_VERSION)\n         .digest('hex');\n     }\n   }\n@@ -184,11 +195,13 @@ class ScriptTransformer {\n     );\n     let sourceMapPath = cacheFilePath + '.map';\n     // Ignore cache if `config.cache` is set (--no-cache)\n-    let code = this._config.cache\n-      ? readCacheFile(filename, cacheFilePath)\n-      : null;\n+    let code = this._config.cache ? readCodeCacheFile(cacheFilePath) : null;\n \n     if (code) {\n+      // This is broken: we return the code, and a path for the source map\n+      // directly from the cache. But, nothing ensures the source map actually\n+      // matches that source code. They could have gotten out-of-sync in case\n+      // two separate processes write concurrently to the same cache files.\n       return {\n         code,\n         sourceMapPath,\n@@ -248,7 +261,7 @@ class ScriptTransformer {\n       sourceMapPath = null;\n     }\n \n-    writeCacheFile(cacheFilePath, code);\n+    writeCodeCacheFile(cacheFilePath, code);\n \n     return {\n       code,\n@@ -343,9 +356,46 @@ const stripShebang = content => {\n   }\n };\n \n+/**\n+ * This is like `writeCacheFile` but with an additional sanity checksum. We\n+ * cannot use the same technique for source maps because we expose source map\n+ * cache file paths directly to callsites, with the expectation they can read\n+ * it right away. This is not a great system, because source map cache file\n+ * could get corrupted, out-of-sync, etc.\n+ */\n+function writeCodeCacheFile(cachePath: Path, code: string) {\n+  const checksum = crypto.createHash('md5').update(code).digest('hex');\n+  writeCacheFile(cachePath, checksum + '\\n' + code);\n+}\n+\n+/**\n+ * Read counterpart of `writeCodeCacheFile`. We verify that the content of the\n+ * file matches the checksum, in case some kind of corruption happened. This\n+ * could happen if an older version of `jest-runtime` writes non-atomically to\n+ * the same cache, for example.\n+ */\n+function readCodeCacheFile(cachePath: Path): ?string {\n+  const content = readCacheFile(cachePath);\n+  if (content == null) {\n+    return null;\n+  }\n+  const code = content.substr(33);\n+  const checksum = crypto.createHash('md5').update(code).digest('hex');\n+  if (checksum === content.substr(0, 32)) {\n+    return code;\n+  }\n+  return null;\n+}\n+\n+/**\n+ * Writing to the cache atomically relies on 'rename' being atomic on most\n+ * file systems. Doing atomic write reduces the risk of corruption by avoiding\n+ * two processes to write to the same file at the same time. It also reduces\n+ * the risk of reading a file that's being overwritten at the same time.\n+ */\n const writeCacheFile = (cachePath: Path, fileData: string) => {\n   try {\n-    fs.writeFileSync(cachePath, fileData, 'utf8');\n+    writeFileAtomic.sync(cachePath, fileData, {encoding: 'utf8'});\n   } catch (e) {\n     e.message =\n       'jest: failed to cache transform results in: ' +\n@@ -357,7 +407,7 @@ const writeCacheFile = (cachePath: Path, fileData: string) => {\n   }\n };\n \n-const readCacheFile = (filename: Path, cachePath: Path): ?string => {\n+const readCacheFile = (cachePath: Path): ?string => {\n   if (!fs.existsSync(cachePath)) {\n     return null;\n   }\n@@ -366,7 +416,11 @@ const readCacheFile = (filename: Path, cachePath: Path): ?string => {\n   try {\n     fileData = fs.readFileSync(cachePath, 'utf8');\n   } catch (e) {\n-    e.message = 'jest: failed to read cache file: ' + cachePath;\n+    e.message =\n+      'jest: failed to read cache file: ' +\n+      cachePath +\n+      '\\nFailure message: ' +\n+      e.message;\n     removeFile(cachePath);\n     throw e;\n   }"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/1289","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/1289/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/1289/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/1289/events","html_url":"https://github.com/facebook/jest/pull/1289","id":165296936,"node_id":"MDExOlB1bGxSZXF1ZXN0NzcyNzE1ODU=","number":1289,"title":"Haste map optimizations","user":{"login":"cpojer","id":13352,"node_id":"MDQ6VXNlcjEzMzUy","avatar_url":"https://avatars.githubusercontent.com/u/13352?v=4","gravatar_id":"","url":"https://api.github.com/users/cpojer","html_url":"https://github.com/cpojer","followers_url":"https://api.github.com/users/cpojer/followers","following_url":"https://api.github.com/users/cpojer/following{/other_user}","gists_url":"https://api.github.com/users/cpojer/gists{/gist_id}","starred_url":"https://api.github.com/users/cpojer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpojer/subscriptions","organizations_url":"https://api.github.com/users/cpojer/orgs","repos_url":"https://api.github.com/users/cpojer/repos","events_url":"https://api.github.com/users/cpojer/events{/privacy}","received_events_url":"https://api.github.com/users/cpojer/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2016-07-13T11:18:17Z","updated_at":"2021-05-14T14:13:23Z","closed_at":"2016-07-15T01:29:14Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/1289","html_url":"https://github.com/facebook/jest/pull/1289","diff_url":"https://github.com/facebook/jest/pull/1289.diff","patch_url":"https://github.com/facebook/jest/pull/1289.patch","merged_at":"2016-07-15T01:29:14Z"},"body":"I'm beginning to work on some rewrites of jest-haste-map and I'm streamlining the projects around it a little bit. The `HasteResolverContext` was misnamed and wrongly wrapped in Promises, so I unwrapped it and fixed everything up.\n\nThe overall goal is to improve performance of jest-haste-map and to split up work into smaller chunks. I will send subsequent pull requests with a new implementation of the HasteContext type and new types for the FileMap and ModuleMap objects. I'm planning to experiment with a trie to store the file map to reduce data storage. It should not significantly increase access times for file metadata, so this should be fine. Second, I am working on persisting the file map and module map separately, as test workers only require the module map. Third, I can persist the two different maps at different times and delay some of this work until later and after tests have finished running. Finally, I have a few more optimizations, like for example reducing the path lengths in the module map.\n\nI refactored `jest-resolve` into `jest-resolve-dependencies`. The parent thread will need an instance of both (see SearchSource) but child workers will only need an instance of `jest-resolve`. This should cut the time it takes to read the haste map in a worker by half, which should improve starting up a worker from 300ms to 150ms on a really really large codebase.\n\nI created `jest-file-exists`. For the longest time I had the goal of improving the best case time to a lookup in the file map, which is always up-to-date. This should work great as we expand on things like snapshot cleanups, where we are testing whether the associated file exists – most of the time it does and we can short-circuit it.\n\ncc @dmitriiabramov \n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/1289/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/1289/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"3f7a61312ac51f0e3ec732aa43255b90314a8e61","filename":"package.json","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/package.json","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/package.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/package.json?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -11,7 +11,7 @@\n     \"eslint\": \"^3.0.1\",\n     \"eslint-plugin-babel\": \"^3.3.0\",\n     \"fbjs-scripts\": \"^0.7.1\",\n-    \"flow-bin\": \"^0.28.0\",\n+    \"flow-bin\": \"^0.29.0\",\n     \"glob\": \"^7.0.4\",\n     \"graceful-fs\": \"^4.1.4\",\n     \"lerna\": \"2.0.0-beta.24\","},{"sha":"26f7c6af2b37b8d96459102faa583b13d70ee4b9","filename":"packages/jest-cli/package.json","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fpackage.json?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -10,9 +10,11 @@\n     \"jest-changed-files\": \"^13.2.2\",\n     \"jest-config\": \"^13.2.3\",\n     \"jest-environment-jsdom\": \"^13.2.2\",\n+    \"jest-file-exists\": \"^13.2.2\",\n     \"jest-haste-map\": \"^13.2.2\",\n     \"jest-jasmine2\": \"^13.2.3\",\n     \"jest-mock\": \"^13.2.2\",\n+    \"jest-resolve-dependencies\": \"^13.2.2\",\n     \"jest-resolve\": \"^13.2.2\",\n     \"jest-runtime\": \"^13.2.3\",\n     \"jest-snapshot\": \"^13.2.3\","},{"sha":"0f7b34578ccf5ac3b8b32105d0626145e00a2d39","filename":"packages/jest-cli/src/SearchSource.js","status":"modified","additions":33,"deletions":31,"changes":64,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fsrc%2FSearchSource.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fsrc%2FSearchSource.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2FSearchSource.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -10,14 +10,15 @@\n \n 'use strict';\n \n-import type {HasteResolverContext} from 'types/Runtime';\n+import type {HasteContext} from 'types/HasteMap';\n import type {Path} from 'types/Config';\n import type {ResolveModuleConfig} from '../../jest-resolve/src';\n \n-const Resolver = require('jest-resolve');\n+const DependencyResolver = require('jest-resolve-dependencies');\n \n const chalk = require('chalk');\n const changedFiles = require('jest-changed-files');\n+const fileExists = require('jest-file-exists');\n const path = require('path');\n const utils = require('jest-util');\n \n@@ -58,7 +59,7 @@ const pluralize = (\n ) => `${count} ${word}${count === 1 ? '' : ending}`;\n \n class SearchSource {\n-  _hasteMap: Promise<HasteResolverContext>;\n+  _hasteContext: HasteContext;\n   _config: SearchSourceConfig;\n   _options: ResolveModuleConfig;\n   _testPathDirPattern: RegExp;\n@@ -71,11 +72,11 @@ class SearchSource {\n   };\n \n   constructor(\n-    hasteMap: Promise<HasteResolverContext>,\n+    hasteMap: HasteContext,\n     config: SearchSourceConfig,\n     options?: ResolveModuleConfig,\n   ) {\n-    this._hasteMap = hasteMap;\n+    this._hasteContext = hasteMap;\n     this._config = config;\n     this._options = options || {};\n \n@@ -129,13 +130,11 @@ class SearchSource {\n \n   _getAllTestPaths(\n     testPathPattern: StrOrRegExpPattern,\n-  ): Promise<SearchResult> {\n-    return this._hasteMap.then(data => (\n-      this._filterTestPathsWithStats(\n-        Object.keys(data.moduleMap.files),\n-        testPathPattern,\n-      )\n-    ));\n+  ): SearchResult {\n+    return this._filterTestPathsWithStats(\n+      Object.keys(this._hasteContext.moduleMap.files),\n+      testPathPattern,\n+    );\n   }\n \n   isTestFilePath(path: Path): boolean {\n@@ -146,33 +145,34 @@ class SearchSource {\n \n   findMatchingTests(\n     testPathPattern: StrOrRegExpPattern,\n-  ): Promise<SearchResult> {\n+  ): SearchResult {\n     if (testPathPattern && !(testPathPattern instanceof RegExp)) {\n       const maybeFile = path.resolve(process.cwd(), testPathPattern);\n-      if (Resolver.fileExists(maybeFile)) {\n-        return Promise.resolve(\n-          this._filterTestPathsWithStats([maybeFile]),\n-        );\n+      if (fileExists(maybeFile, this._hasteContext.moduleMap.files)) {\n+        return this._filterTestPathsWithStats([maybeFile]);\n       }\n     }\n \n     return this._getAllTestPaths(testPathPattern);\n   }\n \n-  findRelatedTests(allPaths: Set<Path>): Promise<SearchResult> {\n-    return this._hasteMap\n-      .then(data => ({\n-        paths: data.resolver.resolveInverseDependencies(\n-          allPaths,\n-          this.isTestFilePath.bind(this),\n-          {\n-            skipNodeResolution: this._options.skipNodeResolution,\n-          },\n-        ),\n-      }));\n+  findRelatedTests(allPaths: Set<Path>): SearchResult {\n+    const dependencyResolver = new DependencyResolver(\n+      this._hasteContext.resolver,\n+      this._hasteContext.moduleMap,\n+    );\n+    return {\n+      paths: dependencyResolver.resolveInverse(\n+        allPaths,\n+        this.isTestFilePath.bind(this),\n+        {\n+          skipNodeResolution: this._options.skipNodeResolution,\n+        },\n+      ),\n+    };\n   }\n \n-  findOnlyChangedTestPaths(): Promise<SearchResult> {\n+  findChangedTests(): Promise<SearchResult> {\n     return Promise.all(this._config.testPathDirs.map(determineSCM))\n       .then(repos => {\n         if (!repos.every(result => result[0] || result[1])) {\n@@ -234,9 +234,11 @@ class SearchSource {\n \n   getTestPaths(patternInfo: PatternInfo): Promise<SearchResult> {\n     if (patternInfo.onlyChanged) {\n-      return this.findOnlyChangedTestPaths();\n+      return this.findChangedTests();\n     } else if (patternInfo.testPathPattern != null) {\n-      return this.findMatchingTests(patternInfo.testPathPattern);\n+      return Promise.resolve(\n+        this.findMatchingTests(patternInfo.testPathPattern),\n+      );\n     } else {\n       return Promise.resolve({paths: []});\n     }"},{"sha":"54ef1da4d034bda7ac7a6b9abfdfdf7ec5cf9486","filename":"packages/jest-cli/src/TestRunner.js","status":"modified","additions":30,"deletions":36,"changes":66,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fsrc%2FTestRunner.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fsrc%2FTestRunner.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2FTestRunner.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -15,9 +15,11 @@ import type {\n   TestResult,\n } from 'types/TestResult';\n import type {Config, Path} from 'types/Config';\n-import type {HasteResolverContext} from 'types/Runtime';\n+import type {HasteContext} from 'types/HasteMap';\n import type BaseReporter from './reporters/BaseReporter';\n \n+const Test = require('./Test');\n+\n const fs = require('graceful-fs');\n const getCacheFilePath = require('jest-haste-map').getCacheFilePath;\n const CoverageReporter = require('./reporters/CoverageReporter');\n@@ -27,7 +29,6 @@ const SummaryReporter = require('./reporters/SummaryReporter');\n const VerboseReporter = require('./reporters/VerboseReporter');\n const promisify = require('./lib/promisify');\n const snapshot = require('jest-snapshot');\n-const Test = require('./Test');\n const workerFarm = require('worker-farm');\n \n type Options = {\n@@ -47,18 +48,18 @@ type OnTestResult = (\n const TEST_WORKER_PATH = require.resolve('./TestWorker');\n \n class TestRunner {\n-  _hasteMap: Promise<HasteResolverContext>;\n+  _hasteContext: HasteContext;\n   _config: Config;\n   _options: Options;\n   _dispatcher: ReporterDispatcher;\n   _testPerformanceCache: Object | null;\n \n   constructor(\n-    hasteMap: Promise<HasteResolverContext>,\n+    hasteMap: HasteContext,\n     config: Config,\n     options: Options,\n   ) {\n-    this._hasteMap = hasteMap;\n+    this._hasteContext = hasteMap;\n     this._config = config;\n     this._options = options;\n     this._dispatcher = this._setupReporters();\n@@ -153,11 +154,7 @@ class TestRunner {\n         aggregatedResults.success =\n           aggregatedResults.numFailedTests === 0 &&\n           aggregatedResults.numRuntimeErrorTestSuites === 0;\n-        return this._hasteMap\n-          .then(hasteMap => snapshot.cleanup(\n-            hasteMap.instance,\n-            config.updateSnapshot,\n-          ))\n+        return snapshot.cleanup(this._hasteContext, config.updateSnapshot)\n           .then(status => {\n             aggregatedResults.snapshotFilesRemoved = status.filesRemoved;\n             aggregatedResults.didUpdate = config.updateSnapshot;\n@@ -188,7 +185,7 @@ class TestRunner {\n   ) {\n     return testPaths.reduce((promise, path) =>\n       promise\n-        .then(() => this._hasteMap)\n+        .then(() => this._hasteContext)\n         .then(data => new Test(path, this._config, data.resolver).run())\n         .then(result => onTestResult(path, result))\n         .catch(err => onRunFailure(path, err)),\n@@ -202,31 +199,28 @@ class TestRunner {\n     onRunFailure: OnRunFailure,\n   ) {\n     const config = this._config;\n-    return this._hasteMap\n-      .then(() => {\n-        const farm = workerFarm({\n-          autoStart: true,\n-          maxConcurrentCallsPerWorker: 1,\n-          maxRetries: 2, // Allow for a couple of transient errors.\n-          maxConcurrentWorkers: this._options.maxWorkers,\n-        }, TEST_WORKER_PATH);\n-        const runTest = promisify(farm);\n-        return Promise.all(testPaths.map(\n-          path => runTest({path, config})\n-            .then(testResult => onTestResult(path, testResult))\n-            .catch(err => {\n-              onRunFailure(path, err);\n-              if (err.type === 'ProcessTerminatedError') {\n-                console.error(\n-                  'A worker process has quit unexpectedly! ' +\n-                  'Most likely this an initialization error.',\n-                );\n-                process.exit(1);\n-              }\n-            })),\n-        )\n-        .then(() => workerFarm.end(farm));\n-      });\n+    const farm = workerFarm({\n+      autoStart: true,\n+      maxConcurrentCallsPerWorker: 1,\n+      maxRetries: 2, // Allow for a couple of transient errors.\n+      maxConcurrentWorkers: this._options.maxWorkers,\n+    }, TEST_WORKER_PATH);\n+    const runTest = promisify(farm);\n+    return Promise.all(testPaths.map(\n+      path => runTest({path, config})\n+        .then(testResult => onTestResult(path, testResult))\n+        .catch(err => {\n+          onRunFailure(path, err);\n+          if (err.type === 'ProcessTerminatedError') {\n+            console.error(\n+              'A worker process has quit unexpectedly! ' +\n+              'Most likely this an initialization error.',\n+            );\n+            process.exit(1);\n+          }\n+        })),\n+    )\n+    .then(() => workerFarm.end(farm));\n   }\n \n   _setupReporters(): ReporterDispatcher {"},{"sha":"454adb54ffe953447d11155095ec55f53f33e40a","filename":"packages/jest-cli/src/__tests__/SearchSource-test.js","status":"modified","additions":37,"deletions":47,"changes":84,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fsrc%2F__tests__%2FSearchSource-test.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fsrc%2F__tests__%2FSearchSource-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2F__tests__%2FSearchSource-test.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -11,18 +11,20 @@\n \n jest.disableAutomock();\n \n+jasmine.DEFAULT_TIMEOUT_INTERVAL = 15000;\n+\n const path = require('path');\n \n const rootDir = path.resolve(__dirname, 'test_root');\n const testRegex = path.sep + '__testtests__' + path.sep;\n const maxWorkers = 1;\n \n+let findMatchingTests;\n let normalizeConfig;\n \n describe('SearchSource', () => {\n   const name = 'SearchSource';\n   let Runtime;\n-  let hasteMap;\n   let SearchSource;\n   let searchSource;\n \n@@ -35,14 +37,16 @@ describe('SearchSource', () => {\n   describe('isTestFilePath', () => {\n     let config;\n \n-    beforeEach(() => {\n+    beforeEach(done => {\n       config = normalizeConfig({\n         name,\n         rootDir: '.',\n         testPathDirs: [],\n       });\n-      hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      searchSource = new SearchSource(hasteMap, config);\n+      Runtime.buildHasteMap(config, {maxWorkers}).then(hasteMap => {\n+        searchSource = new SearchSource(hasteMap, config);\n+        done();\n+      });\n     });\n \n     it('supports ../ paths and unix separators', () => {\n@@ -68,16 +72,21 @@ describe('SearchSource', () => {\n   });\n \n   describe('testPathsMatching', () => {\n+    beforeEach(() => {\n+      findMatchingTests = config =>\n+        Runtime.buildHasteMap(config, {maxWorkers}).then(hasteMap =>\n+          new SearchSource(hasteMap, config).findMatchingTests(),\n+        );\n+    });\n+\n     it('finds tests matching a pattern', () => {\n       const config = normalizeConfig({\n         name,\n         rootDir,\n         moduleFileExtensions: ['js', 'jsx', 'txt'],\n         testRegex: 'not-really-a-test',\n       });\n-      const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      const searchSource = new SearchSource(hasteMap, config);\n-      return searchSource.findMatchingTests().then(data => {\n+      return findMatchingTests(config).then(data => {\n         const relPaths = data.paths.map(absPath => (\n           path.relative(rootDir, absPath)\n         ));\n@@ -94,9 +103,7 @@ describe('SearchSource', () => {\n         moduleFileExtensions: ['js', 'jsx'],\n         testRegex: 'test\\.jsx?',\n       });\n-      const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      const searchSource = new SearchSource(hasteMap, config);\n-      return searchSource.findMatchingTests().then(data => {\n+      return findMatchingTests(config).then(data => {\n         const relPaths = data.paths.map(absPath => (\n           path.relative(rootDir, absPath)\n         ));\n@@ -113,9 +120,7 @@ describe('SearchSource', () => {\n         rootDir,\n         testRegex,\n       });\n-      const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      const searchSource = new SearchSource(hasteMap, config);\n-      return searchSource.findMatchingTests().then(data => {\n+      return findMatchingTests(config).then(data => {\n         const relPaths = data.paths.map(absPath => (\n           path.relative(rootDir, absPath)\n         ));\n@@ -132,9 +137,7 @@ describe('SearchSource', () => {\n         testRegex,\n         moduleFileExtensions: ['jsx'],\n       });\n-      const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      const searchSource = new SearchSource(hasteMap, config);\n-      return searchSource.findMatchingTests().then(data => {\n+      return findMatchingTests(config).then(data => {\n         const relPaths = data.paths.map(absPath => (\n           path.relative(rootDir, absPath)\n         ));\n@@ -151,9 +154,7 @@ describe('SearchSource', () => {\n         testRegex,\n         moduleFileExtensions: ['foobar'],\n       });\n-      const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      const searchSource = new SearchSource(hasteMap, config);\n-      return searchSource.findMatchingTests().then(data => {\n+      return findMatchingTests(config).then(data => {\n         const relPaths = data.paths.map(absPath => (\n           path.relative(rootDir, absPath)\n         ));\n@@ -162,17 +163,14 @@ describe('SearchSource', () => {\n         ]);\n       });\n     });\n-\n     it('finds tests with many kinds of file extensions', () => {\n       const config = normalizeConfig({\n         name,\n         rootDir,\n         testRegex,\n         moduleFileExtensions: ['js', 'jsx'],\n       });\n-      const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      const searchSource = new SearchSource(hasteMap, config);\n-      return searchSource.findMatchingTests().then(data => {\n+      return findMatchingTests(config).then(data => {\n         const relPaths = data.paths.map(absPath => (\n           path.relative(rootDir, absPath)\n         ));\n@@ -189,9 +187,7 @@ describe('SearchSource', () => {\n         rootDir,\n         testDirectoryName: '__testtests__',\n       });\n-      const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      const searchSource = new SearchSource(hasteMap, config);\n-      return searchSource.findMatchingTests().then(data => {\n+      return findMatchingTests(config).then(data => {\n         const relPaths = data.paths.map(absPath => (\n           path.relative(rootDir, absPath)\n         ));\n@@ -207,9 +203,7 @@ describe('SearchSource', () => {\n         rootDir,\n         testFileExtensions: ['js', 'jsx'],\n       });\n-      const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      const searchSource = new SearchSource(hasteMap, config);\n-      return searchSource.findMatchingTests().then(data => {\n+      return findMatchingTests(config).then(data => {\n         const relPaths = data.paths.map(absPath => (\n           path.relative(rootDir, absPath)\n         ));\n@@ -228,9 +222,7 @@ describe('SearchSource', () => {\n         testDirectoryName: '__testtests__',\n         testFileExtensions: ['js', 'jsx', 'foobar'],\n       });\n-      const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      const searchSource = new SearchSource(hasteMap, config);\n-      return searchSource.findMatchingTests().then(data => {\n+      return findMatchingTests(config).then(data => {\n         const relPaths = data.paths.map(absPath => (\n           path.relative(rootDir, absPath)\n         ));\n@@ -256,33 +248,31 @@ describe('SearchSource', () => {\n     );\n     const rootPath = path.join(rootDir, 'root.js');\n \n-    beforeEach(() => {\n+    beforeEach(done => {\n       const config = normalizeConfig({\n         name: 'SearchSource-findRelatedTests-tests',\n         rootDir,\n       });\n-      hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-      searchSource = new SearchSource(hasteMap, config);\n+      Runtime.buildHasteMap(config, {maxWorkers}).then(hasteMap => {\n+        searchSource = new SearchSource(hasteMap, config);\n+        done();\n+      });\n     });\n \n     it('makes sure a file is related to itself', () => {\n-      return searchSource.findRelatedTests(new Set([rootPath]))\n-        .then(data => {\n-          expect(data.paths).toEqual([rootPath]);\n-        });\n+      const data = searchSource.findRelatedTests(new Set([rootPath]));\n+      expect(data.paths).toEqual([rootPath]);\n     });\n \n     it('finds tests that depend directly on the path', () => {\n       const filePath = path.join(rootDir, 'RegularModule.js');\n       const parentDep = path.join(rootDir, 'ModuleWithSideEffects.js');\n-      return searchSource.findRelatedTests(new Set([filePath]))\n-        .then(data => {\n-          expect(data.paths.sort()).toEqual([\n-            parentDep,\n-            filePath,\n-            rootPath,\n-          ]);\n-        });\n+      const data = searchSource.findRelatedTests(new Set([filePath]));\n+      expect(data.paths.sort()).toEqual([\n+        parentDep,\n+        filePath,\n+        rootPath,\n+      ]);\n     });\n   });\n });"},{"sha":"72cc4ec5e95d22d9d4689d2757addcc959fa88b2","filename":"packages/jest-cli/src/jest.js","status":"modified","additions":42,"deletions":40,"changes":82,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fsrc%2Fjest.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-cli%2Fsrc%2Fjest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fjest.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -85,46 +85,48 @@ function getWatcher(config, packageRoot, callback) {\n function runJest(config, argv, pipe, onComplete) {\n   const patternInfo = buildTestPathPatternInfo(argv);\n   const maxWorkers = getMaxWorkers(argv);\n-  const hasteMap = Runtime.buildHasteMap(config, {maxWorkers});\n-  const source = new SearchSource(hasteMap, config);\n-  return source.getTestPaths(patternInfo)\n-    .then(data => {\n-      if (!data.paths.length) {\n-        pipe.write(\n-          source.getNoTestsFoundMessage(patternInfo, config, data) + '\\n',\n-        );\n-      }\n-      return data.paths;\n-    })\n-    .then(testPaths =>\n-      new TestRunner(hasteMap, config, {maxWorkers}).runTests(testPaths),\n-    )\n-    .then(runResults => {\n-      if (config.testResultsProcessor) {\n-        /* $FlowFixMe */\n-        const processor = require(config.testResultsProcessor);\n-        processor(runResults);\n-      }\n-      if (argv.json) {\n-        process.stdout.write(\n-          JSON.stringify(formatTestResults(runResults, config)),\n-        );\n-      }\n-      return runResults;\n-    })\n-    .then(runResults => onComplete && onComplete(runResults.success))\n-    .catch(error => {\n-      if (error.type == 'DependencyGraphError') {\n-        throw new Error([\n-          '\\nError: ' + error.message + '\\n\\n',\n-          'This is most likely a setup ',\n-          'or configuration issue. To resolve a module name collision, ',\n-          'change or blacklist one of the offending modules. See ',\n-          'http://facebook.github.io/jest/docs/api.html#modulepathignorepatterns-array-string',\n-        ].join(''));\n-      } else {\n-        throw error;\n-      }\n+  return Runtime.buildHasteMap(config, {maxWorkers})\n+    .then(hasteMap => {\n+      const source = new SearchSource(hasteMap, config);\n+      return source.getTestPaths(patternInfo)\n+        .then(data => {\n+          if (!data.paths.length) {\n+            pipe.write(\n+              source.getNoTestsFoundMessage(patternInfo, config, data) + '\\n',\n+            );\n+          }\n+          return data.paths;\n+        })\n+        .then(testPaths =>\n+          new TestRunner(hasteMap, config, {maxWorkers}).runTests(testPaths),\n+        )\n+        .then(runResults => {\n+          if (config.testResultsProcessor) {\n+            /* $FlowFixMe */\n+            const processor = require(config.testResultsProcessor);\n+            processor(runResults);\n+          }\n+          if (argv.json) {\n+            process.stdout.write(\n+              JSON.stringify(formatTestResults(runResults, config)),\n+            );\n+          }\n+          return runResults;\n+        })\n+        .then(runResults => onComplete && onComplete(runResults.success))\n+        .catch(error => {\n+          if (error.type == 'DependencyGraphError') {\n+            throw new Error([\n+              '\\nError: ' + error.message + '\\n\\n',\n+              'This is most likely a setup ',\n+              'or configuration issue. To resolve a module name collision, ',\n+              'change or blacklist one of the offending modules. See ',\n+              'http://facebook.github.io/jest/docs/api.html#modulepathignorepatterns-array-string',\n+            ].join(''));\n+          } else {\n+            throw error;\n+          }\n+        });\n     });\n }\n "},{"sha":"85e48fe7b0a4e43aa704fed6e28eb1fea12d0118","filename":"packages/jest-file-exists/.npmignore","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-file-exists%2F.npmignore","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-file-exists%2F.npmignore","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-file-exists%2F.npmignore?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -0,0 +1,3 @@\n+**/__mocks__/**\n+**/__tests__/**\n+src"},{"sha":"63e1553239b8576be75fd17dcec10ad9fbdbbc5d","filename":"packages/jest-file-exists/package.json","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-file-exists%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-file-exists%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-file-exists%2Fpackage.json?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -0,0 +1,19 @@\n+{\n+  \"name\": \"jest-file-exists\",\n+  \"version\": \"13.2.2\",\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"https://github.com/facebook/jest.git\"\n+  },\n+  \"license\": \"BSD-3-Clause\",\n+  \"main\": \"build/index.js\",\n+  \"jest\": {\n+    \"automock\": false,\n+    \"rootDir\": \"./src\",\n+    \"scriptPreprocessor\": \"../../babel-jest\",\n+    \"testEnvironment\": \"node\"\n+  },\n+  \"scripts\": {\n+    \"test\": \"../../packages/jest-cli/bin/jest.js\"\n+  }\n+}"},{"sha":"63cbf4d7cedf4e1b9b55e640ad302e5cc364edd5","filename":"packages/jest-file-exists/src/__tests__/index-test.js","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-file-exists%2Fsrc%2F__tests__%2Findex-test.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-file-exists%2Fsrc%2F__tests__%2Findex-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-file-exists%2Fsrc%2F__tests__%2Findex-test.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @emails oncall+jsinfra\n+ */\n+'use strict';\n+\n+const fileExists = require('../');\n+const path = require('path');\n+\n+test('file exists', () => {\n+  expect(fileExists(__filename)).toBe(true);\n+});\n+\n+test('file exists if module map is provided', () => {\n+  expect(fileExists('/random-string.js', {\n+    '/random-string.js': true,\n+  })).toBe(true);\n+});\n+\n+test('file does not exist', () => {\n+  expect(fileExists(\n+    path.join(path.basename(__filename), 'does-probably-not-exist.js'),\n+    {\n+      '/random-string.js': true,\n+    },\n+  )).toBe(false);\n+});"},{"sha":"b83c0ea99000edb71aa79f52da16bc23091b5740","filename":"packages/jest-file-exists/src/index.js","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-file-exists%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-file-exists%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-file-exists%2Fsrc%2Findex.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2014, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import type {Path} from 'types/Config';\n+import type {FileMetaData} from 'types/HasteMap';\n+\n+const fs = require('fs');\n+\n+module.exports = (\n+  filePath: Path,\n+  files: ?{[filepath: string]: FileMetaData},\n+): boolean => {\n+  if (files && files[filePath]) {\n+    return true;\n+  }\n+\n+  try {\n+    return fs.statSync(filePath).isFile();\n+  } catch (e) {}\n+  return false;\n+};"},{"sha":"104f2e2a885b0a1a5b3a36ceedb6be56509b78c6","filename":"packages/jest-haste-map/src/index.js","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-haste-map%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-haste-map%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -9,14 +9,12 @@\n  */\n 'use strict';\n \n-import type {HasteMap as HasteMapObject} from 'types/HasteMap';\n-import type {Config} from 'types/Config';\n+import type {HasteMap as HasteMapObject, ModuleMetaData} from 'types/HasteMap';\n+import type {Config, Path} from 'types/Config';\n import type {WorkerMessage, WorkerMetadata, WorkerCallback} from './types';\n import typeof HType from './constants';\n import typeof FastpathType from './fastpath';\n \n-type Path = string;\n-\n const H = require('./constants');\n \n const crypto = require('crypto');\n@@ -111,7 +109,7 @@ const getWhiteList = (list: ?Array<string>): ?RegExp => {\n  * type HasteMap = {\n  *   clocks: WatchmanClocks,\n  *   files: {[filepath: string]: FileMetaData},\n- *   map: {[id: string]: ModuleMap},\n+ *   map: {[id: string]: ModuleMapItem},\n  *   mocks: {[id: string]: string},\n  * }\n  *\n@@ -128,7 +126,7 @@ const getWhiteList = (list: ?Array<string>): ?RegExp => {\n  * // Modules can be targeted to a specific platform based on the file name.\n  * // Example: Platform.ios.js and Platform.android.js will both map to the same\n  * // `Platform` module. The platform should be specified during resolution.\n- * type ModuleMap = {[platform: string]: ModuleMetaData};\n+ * type ModuleMapItem = {[platform: string]: ModuleMetaData};\n  *\n  * //\n  * type ModuleMetaData = {\n@@ -288,7 +286,7 @@ class HasteMap {\n     const mocks = Object.create(null);\n     const mocksPattern = this._options.mocksPattern;\n     const promises = [];\n-    const setModule = (id: string, module: [string, number]) => {\n+    const setModule = (id: string, module: ModuleMetaData) => {\n       if (!map[id]) {\n         map[id] = Object.create(null);\n       }"},{"sha":"1ef931d267ad5ee127e71cb8c07e76e472d5854d","filename":"packages/jest-haste-map/src/types.js","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-haste-map%2Fsrc%2Ftypes.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-haste-map%2Fsrc%2Ftypes.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Ftypes.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -10,6 +10,7 @@\n 'use strict';\n \n import type {Error} from 'types/TestResult';\n+import type {ModuleMetaData} from 'types/HasteMap';\n \n export type IgnoreMatcher = (item: string) => boolean;\n \n@@ -18,7 +19,7 @@ export type WorkerMessage = {\n };\n export type WorkerMetadata = {\n   id: ?string,\n-  module: ?[string, number],\n+  module: ?ModuleMetaData,\n   dependencies: ?Array<string>,\n };\n export type WorkerCallback = (error: ?Error, metaData: ?WorkerMetadata) => void;"},{"sha":"85e48fe7b0a4e43aa704fed6e28eb1fea12d0118","filename":"packages/jest-resolve-dependencies/.npmignore","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve-dependencies%2F.npmignore","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve-dependencies%2F.npmignore","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve-dependencies%2F.npmignore?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -0,0 +1,3 @@\n+**/__mocks__/**\n+**/__tests__/**\n+src"},{"sha":"3bcdcc0407fb64eefea4ac8946a6f9b640a10c4f","filename":"packages/jest-resolve-dependencies/package.json","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve-dependencies%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve-dependencies%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve-dependencies%2Fpackage.json?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -0,0 +1,22 @@\n+{\n+  \"name\": \"jest-resolve-dependencies\",\n+  \"version\": \"13.2.2\",\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"https://github.com/facebook/jest.git\"\n+  },\n+  \"license\": \"BSD-3-Clause\",\n+  \"main\": \"build/index.js\",\n+  \"dependencies\": {\n+    \"jest-file-exists\": \"13.2.2\",\n+    \"jest-resolve\": \"13.2.2\"\n+  },\n+  \"jest\": {\n+    \"rootDir\": \"./src\",\n+    \"scriptPreprocessor\": \"../../babel-jest\",\n+    \"testEnvironment\": \"node\"\n+  },\n+  \"scripts\": {\n+    \"test\": \"../../packages/jest-cli/bin/jest.js\"\n+  }\n+}"},{"sha":"13c2ea07d1a891786b35de13d5ac16ac5465686b","filename":"packages/jest-resolve-dependencies/src/index.js","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve-dependencies%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve-dependencies%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve-dependencies%2Fsrc%2Findex.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2014, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the BSD-style license found in the\n+ * LICENSE file in the root directory of this source tree. An additional grant\n+ * of patent rights can be found in the PATENTS file in the same directory.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import type {HasteMap} from 'types/HasteMap';\n+import type {Path} from 'types/Config';\n+import type Resolver from '../../jest-resolve/src';\n+\n+const fileExists = require('jest-file-exists');\n+\n+export type ResolveModuleConfig = {skipNodeResolution?: boolean};\n+\n+function compact(array: Array<?Path>): Array<Path> {\n+  const result = [];\n+  for (let i = 0; i < array.length; ++i) {\n+    const element = array[i];\n+    if (element != null) {\n+      result.push(element);\n+    }\n+  }\n+  return result;\n+}\n+\n+/**\n+ * DependencyResolver is used to resolve the direct dependencies of a module or\n+ * to retrieve a list of all transitive inverse dependencies.\n+ */\n+class DependencyResolver {\n+  _moduleMap: HasteMap;\n+  _resolver: Resolver;\n+\n+  constructor(resolver: Resolver, moduleMap: HasteMap) {\n+    this._resolver = resolver;\n+    this._moduleMap = moduleMap;\n+  }\n+\n+  resolve(\n+    file: Path,\n+    options?: ResolveModuleConfig,\n+  ): Array<Path> {\n+    if (!this._moduleMap.files[file]) {\n+      return [];\n+    }\n+    return compact(\n+      this._moduleMap.files[file][3].map(dependency => {\n+        if (this._resolver.isCoreModule(dependency)) {\n+          return null;\n+        }\n+        try {\n+          return this._resolver.resolveModule(file, dependency, options);\n+        } catch (e) {}\n+        return this._resolver.getMockModule(dependency) || null;\n+      }),\n+    );\n+  }\n+\n+  resolveInverse(\n+    paths: Set<Path>,\n+    filter: (file: Path) => boolean,\n+    options?: ResolveModuleConfig,\n+  ): Array<Path> {\n+    const collectModules = (relatedPaths, moduleMap, changed) => {\n+      const visitedModules = new Set();\n+      while (changed.size) {\n+        changed = new Set(moduleMap.filter(module => (\n+          !visitedModules.has(module.file) &&\n+          module.dependencies.some(dep => dep && changed.has(dep))\n+        )).map(module => {\n+          const file = module.file;\n+          if (filter(file)) {\n+            relatedPaths.add(file);\n+          }\n+          visitedModules.add(file);\n+          return module.file;\n+        }));\n+      }\n+      return relatedPaths;\n+    };\n+\n+    if (!paths.size) {\n+      return [];\n+    }\n+\n+    const relatedPaths = new Set();\n+    const changed = new Set();\n+    for (const path of paths) {\n+      if (fileExists(path, this._moduleMap.files)) {\n+        const module = this._moduleMap.files[path];\n+        if (module) {\n+          changed.add(path);\n+          if (filter(path)) {\n+            relatedPaths.add(path);\n+          }\n+        }\n+      }\n+    }\n+\n+    const modules = [];\n+    for (const file in this._moduleMap.files) {\n+      modules.push({\n+        file,\n+        dependencies: this.resolve(file, options),\n+      });\n+    }\n+    return Array.from(collectModules(relatedPaths, modules, changed));\n+  }\n+\n+}\n+\n+module.exports = DependencyResolver;"},{"sha":"5db174dacd9866f8909aa9afa0f3ff4e7f0f9c84","filename":"packages/jest-resolve/package.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve%2Fpackage.json?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -9,6 +9,7 @@\n   \"main\": \"build/index.js\",\n   \"dependencies\": {\n     \"browser-resolve\": \"^1.11.2\",\n+    \"jest-file-exists\": \"^13.2.2\",\n     \"jest-haste-map\": \"^13.2.2\",\n     \"resolve\": \"^1.1.6\"\n   },"},{"sha":"0c667609ee3f6266e047fd6caf4df301a9011602","filename":"packages/jest-resolve/src/index.js","status":"modified","additions":0,"deletions":90,"changes":90,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-resolve%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve%2Fsrc%2Findex.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -19,7 +19,6 @@ import type {Config, Path} from 'types/Config';\n \n const H: HType = require('jest-haste-map').H;\n \n-const fs = require('fs');\n const nodeModulesPaths = require('resolve/lib/node-modules-paths');\n const path = require('path');\n const resolve = require('resolve');\n@@ -51,17 +50,6 @@ const NATIVE_PLATFORM = 'native';\n const nodePaths =\n   (process.env.NODE_PATH ? process.env.NODE_PATH.split(path.delimiter) : null);\n \n-function compact(array: Array<?Path>): Array<Path> {\n-  const result = [];\n-  for (let i = 0; i < array.length; ++i) {\n-    const element = array[i];\n-    if (element != null) {\n-      result.push(element);\n-    }\n-  }\n-  return result;\n-}\n-\n const getModuleNameMapper = (config: Config) => {\n   if (config.moduleNameMapper.length) {\n     const moduleNameMapper = Object.create(null);\n@@ -132,13 +120,6 @@ class Resolver {\n     return null;\n   }\n \n-  static fileExists(filePath: Path): boolean {\n-    try {\n-      return fs.statSync(filePath).isFile();\n-    } catch (e) {}\n-    return false;\n-  }\n-\n   resolveModule(\n     from: Path,\n     moduleName: string,\n@@ -254,77 +235,6 @@ class Resolver {\n     return this._modulePathCache[from];\n   }\n \n-  resolveDependencies(\n-    file: Path,\n-    options?: ResolveModuleConfig,\n-  ): Array<Path> {\n-    if (!this._moduleMap.files[file]) {\n-      return [];\n-    }\n-\n-    return compact(this._moduleMap.files[file][H.DEPENDENCIES]\n-      .map(dependency => {\n-        if (this.isCoreModule(dependency)) {\n-          return null;\n-        }\n-        try {\n-          return this.resolveModule(file, dependency, options);\n-        } catch (e) {}\n-        return this.getMockModule(dependency) || null;\n-      }));\n-  }\n-\n-  resolveInverseDependencies(\n-    paths: Set<Path>,\n-    filter: (file: Path) => boolean,\n-    options?: ResolveModuleConfig,\n-  ): Array<Path> {\n-    const collectModules = (relatedPaths, moduleMap, changed) => {\n-      const visitedModules = new Set();\n-      while (changed.size) {\n-        changed = new Set(moduleMap.filter(module => (\n-          !visitedModules.has(module.file) &&\n-          module.dependencies.some(dep => dep && changed.has(dep))\n-        )).map(module => {\n-          const file = module.file;\n-          if (filter(file)) {\n-            relatedPaths.add(file);\n-          }\n-          visitedModules.add(file);\n-          return module.file;\n-        }));\n-      }\n-      return relatedPaths;\n-    };\n-\n-    if (!paths.size) {\n-      return [];\n-    }\n-\n-    const relatedPaths = new Set();\n-    const changed = new Set();\n-    for (const path of paths) {\n-      if (Resolver.fileExists(path)) {\n-        const module = this._moduleMap.files[path];\n-        if (module) {\n-          changed.add(path);\n-          if (filter(path)) {\n-            relatedPaths.add(path);\n-          }\n-        }\n-      }\n-    }\n-\n-    const modules = [];\n-    for (const file in this._moduleMap.files) {\n-      modules.push({\n-        file,\n-        dependencies: this.resolveDependencies(file, options),\n-      });\n-    }\n-    return Array.from(collectModules(relatedPaths, modules, changed));\n-  }\n-\n   _resolveStubModuleName(moduleName: string): ?Path {\n     const moduleNameMapper = this._options.moduleNameMapper;\n     if (moduleNameMapper) {"},{"sha":"8cc6aada302f59a7e47ae0087a200c9951523d50","filename":"packages/jest-runtime/package.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-runtime%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-runtime%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fpackage.json?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -11,6 +11,7 @@\n     \"chalk\": \"^1.1.3\",\n     \"graceful-fs\": \"^4.1.3\",\n     \"jest-config\": \"^13.2.3\",\n+    \"jest-file-exists\": \"^13.2.2\",\n     \"jest-haste-map\": \"^13.2.2\",\n     \"jest-mock\": \"^13.2.2\",\n     \"jest-resolve\": \"^13.2.2\","},{"sha":"61d4661576d7f979afac6f2c419b66cf737bb40a","filename":"packages/jest-runtime/src/__tests__/transform-test.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Ftransform-test.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Ftransform-test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Ftransform-test.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -11,7 +11,7 @@\n \n jest\n   .mock('graceful-fs')\n-  .mock('jest-resolve')\n+  .mock('jest-file-exists')\n   .mock('jest-util')\n   .mock('vm');\n \n@@ -89,7 +89,7 @@ describe('transform', () => {\n       mtime: {getTime: () => 42},\n     }));\n \n-    require('jest-resolve').fileExists = jest.fn(path => !!mockFs[path]);\n+    require('jest-file-exists').mockImplementation(path => !!mockFs[path]);\n \n     config = {\n       cache: true,"},{"sha":"b09c1f2d8c204d9426d099ad0547b35337834220","filename":"packages/jest-runtime/src/index.js","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-runtime%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-runtime%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Findex.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -12,9 +12,9 @@\n \n import type {Config, Path} from 'types/Config';\n import type {Environment} from 'types/Environment';\n-import type {HasteResolverContext} from 'types/Runtime';\n-import type Resolver from '../../jest-resolve/src';\n+import type {HasteContext} from 'types/HasteMap';\n import type {Script} from 'vm';\n+import type Resolver from '../../jest-resolve/src';\n \n const createHasteMap = require('jest-haste-map').create;\n const createResolver = require('jest-resolve').create;\n@@ -136,7 +136,7 @@ class Runtime {\n   static buildHasteMap(\n     config: Config,\n     options: {maxWorkers: number},\n-  ): Promise<HasteResolverContext> {\n+  ): Promise<HasteContext> {\n     utils.createDirectory(config.cacheDirectory);\n     const instance = createHasteMap(config, {\n       maxWorkers: options.maxWorkers,"},{"sha":"2358d115153e7646176aa28c30ea4e2b3ecad667","filename":"packages/jest-runtime/src/transform.js","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-runtime%2Fsrc%2Ftransform.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-runtime%2Fsrc%2Ftransform.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Ftransform.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -11,10 +11,9 @@\n \n import type {Config, Path} from 'types/Config';\n \n-const Resolver = require('jest-resolve');\n-\n const createDirectory = require('jest-util').createDirectory;\n const crypto = require('crypto');\n+const fileExists = require('jest-file-exists');\n const fs = require('graceful-fs');\n const getCacheFilePath = require('jest-haste-map').getCacheFilePath;\n const path = require('path');\n@@ -64,7 +63,7 @@ const getCacheKey = (\n       testRegex: config.testRegex,\n     }));\n   }\n-  const configStr = configToJsonMap.get(config);\n+  const configStr = configToJsonMap.get(config) || '';\n   if (typeof preprocessor.getCacheKey === 'function') {\n     return preprocessor.getCacheKey(fileData, filePath, configStr);\n   } else {\n@@ -90,7 +89,7 @@ const wrap = content => '({\"' + EVAL_RESULT_VARIABLE + '\":function(module,export\n /* eslint-enable max-len */\n \n const readCacheFile = (filePath: Path, cachePath: Path): ?string => {\n-  if (!Resolver.fileExists(cachePath)) {\n+  if (!fileExists(cachePath)) {\n     return null;\n   }\n "},{"sha":"f874e6edbef30b23d4eb11ba720c51734b44f791","filename":"packages/jest-snapshot/package.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-snapshot%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-snapshot%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-snapshot%2Fpackage.json?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -9,6 +9,7 @@\n   \"main\": \"build/index.js\",\n   \"dependencies\": {\n     \"jest-diff\": \"^13.2.3\",\n+    \"jest-file-exists\": \"^13.2.2\",\n     \"jest-util\": \"^13.2.2\",\n     \"pretty-format\": \"^3.5.0\"\n   },"},{"sha":"e82771e250249168fe1ca65f1e70ee6820cfb634","filename":"packages/jest-snapshot/src/SnapshotFile.js","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-snapshot%2Fsrc%2FSnapshotFile.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-snapshot%2Fsrc%2FSnapshotFile.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-snapshot%2Fsrc%2FSnapshotFile.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -10,10 +10,12 @@\n 'use strict';\n \n const createDirectory = require('jest-util').createDirectory;\n+const fileExists = require('jest-file-exists');\n const fs = require('fs');\n+const jsxLikeExtension = require('pretty-format/plugins/ReactTestComponent');\n const path = require('path');\n const prettyFormat = require('pretty-format');\n-const jsxLikeExtension = require('pretty-format/plugins/ReactTestComponent');\n+\n const SNAPSHOT_EXTENSION = 'snap';\n \n import type {Path} from 'types/Config';\n@@ -47,13 +49,6 @@ const unescape = string => string.replace(/\\\\(\\\"|\\\\|\\')/g, '$1');\n const addExtraLineBreaks =\n   string => string.includes('\\n') ? `\\n${string}\\n` : string;\n \n-const fileExists = (filePath: Path): boolean => {\n-  try {\n-    return fs.statSync(filePath).isFile();\n-  } catch (e) {}\n-  return false;\n-};\n-\n class SnapshotFile {\n \n   _content: SnapshotData;"},{"sha":"7e4fec388227c886e5f18dcdaae7ccefef6300d8","filename":"packages/jest-snapshot/src/index.js","status":"modified","additions":18,"deletions":17,"changes":35,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-snapshot%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-snapshot%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-snapshot%2Fsrc%2Findex.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -9,13 +9,14 @@\n  */\n 'use strict';\n \n-import type HasteMap from '../../jest-haste-map/src';\n+import type {HasteContext} from 'types/HasteMap';\n import type {Jasmine} from 'types/Jasmine';\n import type {Path} from 'types/Config';\n import type {SnapshotState} from './SnapshotState';\n \n const SnapshotFile = require('./SnapshotFile');\n \n+const fileExists = require('jest-file-exists');\n const fs = require('fs');\n const matcher = require('./matcher');\n const path = require('path');\n@@ -50,25 +51,25 @@ const patchJasmine = (jasmine, state) => {\n   })(jasmine.Spec);\n };\n \n-const fileExists = filePath => {\n-  try {\n-    return fs.statSync(filePath).isFile();\n-  } catch (e) {}\n-  return false;\n-};\n-\n module.exports = {\n   EXTENSION,\n-  cleanup(hasteMap: HasteMap, update: boolean) {\n-    const extension = new RegExp('\\\\.' + EXTENSION);\n-    return hasteMap.matchFiles(extension).then(files => {\n+  cleanup(hasteContext: HasteContext, update: boolean) {\n+    const pattern = '\\\\.' + EXTENSION + '$';\n+    return hasteContext.instance.matchFiles(pattern).then(files => {\n       const filesRemoved = files\n-        .filter(snapshotFile => !fileExists(path.resolve(\n-          path.dirname(snapshotFile),\n-          '..',\n-          path.basename(snapshotFile, '.' + EXTENSION),\n-        )))\n-        .map(snapshotFile => update && fs.unlinkSync(snapshotFile))\n+        .filter(snapshotFile => !fileExists(\n+          path.resolve(\n+            path.dirname(snapshotFile),\n+            '..',\n+            path.basename(snapshotFile, '.' + EXTENSION),\n+          ),\n+          hasteContext.moduleMap.files,\n+        ))\n+        .map(snapshotFile => {\n+          if (update) {\n+            fs.unlinkSync(snapshotFile);\n+          }\n+        })\n         .length;\n \n       return {"},{"sha":"cee7c97c81ea5007a9da5fa7bdae4f6e3bf0c6c5","filename":"packages/jest-util/src/installCommonGlobals.js","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-util%2Fsrc%2FinstallCommonGlobals.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/packages%2Fjest-util%2Fsrc%2FinstallCommonGlobals.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fsrc%2FinstallCommonGlobals.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -33,7 +33,6 @@ module.exports = (global: Global, globals: ConfigGlobals) => {\n   // object for the jsdom environment to prevent memory leaks.\n   global.process = Object.assign({}, process);\n   global.process.setMaxListeners = process.setMaxListeners.bind(process);\n-  /* $FlowFixMe https://github.com/facebook/flow/pull/1942 */\n   global.process.getMaxListeners = process.getMaxListeners.bind(process);\n   global.process.emit = process.emit.bind(process);\n   global.process.addListener = process.addListener.bind(process);"},{"sha":"1fa4ed3a712388aef06ee22da3724574e62ce287","filename":"types/HasteMap.js","status":"modified","additions":20,"deletions":6,"changes":26,"blob_url":"https://github.com/facebook/jest/blob/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/types%2FHasteMap.js","raw_url":"https://github.com/facebook/jest/raw/f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5/types%2FHasteMap.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/types%2FHasteMap.js?ref=f2a1d31431d88f2fbe4847ed3ec3c60e6f0341c5","patch":"@@ -9,14 +9,28 @@\n  */\n 'use strict';\n \n-export type HasteMap = {\n+import type HasteMapInstance from '../packages/jest-haste-map/src';\n+import type HasteResolver from '../packages/jest-resolve/src';\n+\n+export type HasteContext = {\n+  instance: HasteMapInstance,\n+  moduleMap: HasteMap,\n+  resolver: HasteResolver,\n+};\n+\n+export type HasteMap = FileMap & ModuleMap;\n+\n+export type FileMap = {\n   clocks: WatchmanClocks,\n   files: {[filepath: string]: FileMetaData},\n-  map: {[id: string]: ModuleMap},\n-  mocks: {[id: string]: string},\n };\n \n-export type WatchmanClocks = {[filepath: string]: string};\n+export type ModuleMap = {\n+  map: {[id: string]: ModuleMapItem},\n+  mocks: {[id: string]: string},\n+}\n+\n+type WatchmanClocks = {[filepath: string]: string};\n \n export type FileMetaData = [\n   /* id */ string,\n@@ -25,10 +39,10 @@ export type FileMetaData = [\n   /* dependencies */ Array<string>,\n ];\n \n-export type ModuleMap = {[platform: string]: ModuleMetaData};\n+type ModuleMapItem = {[platform: string]: ModuleMetaData};\n export type ModuleMetaData = [\n   /* path */ string,\n-  /* type */ string,\n+  /* type */ number,\n ];\n \n export type HType = {"},{"sha":"cd4a4e1fa399808838c674d469a46f491009703d","filename":"types/Runtime.js","status":"removed","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/facebook/jest/blob/b91ff5545ee4b4bdee6f93bb34393b6993cd870f/types%2FRuntime.js","raw_url":"https://github.com/facebook/jest/raw/b91ff5545ee4b4bdee6f93bb34393b6993cd870f/types%2FRuntime.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/types%2FRuntime.js?ref=b91ff5545ee4b4bdee6f93bb34393b6993cd870f","patch":"@@ -1,19 +0,0 @@\n-/**\n- * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n- *\n- * This source code is licensed under the BSD-style license found in the\n- * LICENSE file in the root directory of this source tree. An additional grant\n- * of patent rights can be found in the PATENTS file in the same directory.\n- *\n- * @flow\n- */\n-\n-import type {HasteMap as HasteMapObject} from './HasteMap';\n-import type HasteMap from '../packages/jest-haste-map/src';\n-import type HasteResolver from '../packages/jest-resolve/src';\n-\n-export type HasteResolverContext = {\n-  instance: HasteMap,\n-  moduleMap: HasteMapObject,\n-  resolver: HasteResolver,\n-};"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/5317","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/5317/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/5317/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/5317/events","html_url":"https://github.com/facebook/jest/pull/5317","id":288648006,"node_id":"MDExOlB1bGxSZXF1ZXN0MTYyOTkxNzk4","number":5317,"title":"Verify passed test path is a file before resolving","user":{"login":"LINKIWI","id":8386642,"node_id":"MDQ6VXNlcjgzODY2NDI=","avatar_url":"https://avatars.githubusercontent.com/u/8386642?v=4","gravatar_id":"","url":"https://api.github.com/users/LINKIWI","html_url":"https://github.com/LINKIWI","followers_url":"https://api.github.com/users/LINKIWI/followers","following_url":"https://api.github.com/users/LINKIWI/following{/other_user}","gists_url":"https://api.github.com/users/LINKIWI/gists{/gist_id}","starred_url":"https://api.github.com/users/LINKIWI/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LINKIWI/subscriptions","organizations_url":"https://api.github.com/users/LINKIWI/orgs","repos_url":"https://api.github.com/users/LINKIWI/repos","events_url":"https://api.github.com/users/LINKIWI/events{/privacy}","received_events_url":"https://api.github.com/users/LINKIWI/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2018-01-15T16:17:56Z","updated_at":"2021-05-12T23:07:03Z","closed_at":"2018-01-15T17:21:12Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/5317","html_url":"https://github.com/facebook/jest/pull/5317","diff_url":"https://github.com/facebook/jest/pull/5317.diff","patch_url":"https://github.com/facebook/jest/pull/5317.patch","merged_at":"2018-01-15T17:21:12Z"},"body":"**Summary**\r\n\r\nThis PR fixes #5272 by fixing the regression introduced in #3882.\r\n\r\n#3882 allows directly specifying file names as arguments to the `jest` CLI but this unintentionally breaks existing behavior when a test directory is passed as the sole argument to `jest`.\r\n\r\n**Fix details**\r\n\r\n*Symptom*: When `*.test.js` files are stored in a directory e.g. `test`, invoking `jest test` on v22.0.5+ results in the following:\r\n\r\n```\r\n FAIL  ./test\r\n  ● Test suite failed to run\r\n\r\n    EISDIR: illegal operation on a directory, read\r\n      \r\n      at Object.readSync (node_modules/graceful-fs/polyfills.js:138:28)\r\n\r\nTest Suites: 1 failed, 1 total\r\nTests:       0 total\r\nSnapshots:   0 total\r\nTime:        0.03s\r\nRan all test suites matching /test/i.\r\n```\r\n\r\n*Root cause*: The change allowing directly running tests by file name does not ensure that the passed argument is not a directory (or, more generally, that the passed argument *is* a file).\r\n\r\n*Remediation*: Filter out all valid test paths that aren't files before continuing existing logic.\r\n\r\n**Test plan**\r\n\r\nThe test added by #3882 was updated to also pass a directory as an argument to the CLI. We observe that no errors are thrown; without this change, the test would fatally throw with `EISDIR` as shown in the example symptom above.\r\n\r\n**Discussion**\r\n\r\n1. Unclear if the performance impact by invoking `fs.lstatSync` on each valid test path is significant enough to explore alternatives.\r\n\r\n2. After poking around with this for a bit, I actually believe this regression creates a desired interface change. If the client wants to recursively search a directory for tests to run, he/she *should* explicitly pass option `--testPathPattern` as stated [here](https://github.com/facebook/jest/issues/5272#issuecomment-357664584) as a workaround for the bug. Based on the [changeset](https://github.com/facebook/jest/pull/3882/files#diff-c53e4529a552a817e1fa7c27419db19bL210) in #3882 it seems like the fact that invoking the CLI as `jest dir-with-tests` works seems to be a coincidental side effect.\r\n\r\nBut anyway, that is a breaking interface change, so this PR just tries to fix the regression as-is.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/5317/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/5317/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"36682127615e8e8d67aa6cf158bc1126f926c0f1","filename":"CHANGELOG.md","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/281a589c6bea0ce432f75ac98d5af6662d7312a5/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/281a589c6bea0ce432f75ac98d5af6662d7312a5/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=281a589c6bea0ce432f75ac98d5af6662d7312a5","patch":"@@ -1,5 +1,10 @@\n ## master\n \n+### Fixes\n+\n+* `[jest-cli]` Fix `EISDIR` when a directory is passed as an argument to `jest`.\n+  ([#5317](https://github.com/facebook/jest/pull/5317))\n+\n ## jest 22.1.0\n \n ### Features"},{"sha":"14f0f7d5b8bce23eb8c65b11e5cc6f746cf6126e","filename":"integration-tests/__tests__/__snapshots__/cli-accepts-exact-filenames.test.js.snap","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/281a589c6bea0ce432f75ac98d5af6662d7312a5/integration-tests%2F__tests__%2F__snapshots__%2Fcli-accepts-exact-filenames.test.js.snap","raw_url":"https://github.com/facebook/jest/raw/281a589c6bea0ce432f75ac98d5af6662d7312a5/integration-tests%2F__tests__%2F__snapshots__%2Fcli-accepts-exact-filenames.test.js.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/integration-tests%2F__tests__%2F__snapshots__%2Fcli-accepts-exact-filenames.test.js.snap?ref=281a589c6bea0ce432f75ac98d5af6662d7312a5","patch":"@@ -22,7 +22,7 @@ exports[`CLI accepts exact filenames 2`] = `\n Tests:       2 passed, 2 total\n Snapshots:   0 total\n Time:        <<REPLACED>>\n-Ran all test suites matching /.\\\\\\\\/bar.js|.\\\\\\\\/foo\\\\\\\\/baz.js/i.\n+Ran all test suites matching /.\\\\\\\\/bar.js|.\\\\\\\\/foo\\\\\\\\/baz.js|.\\\\\\\\/foo/i.\n \"\n `;\n "},{"sha":"0ef90d7da4fdfdf17d3e23a819d6b0ffa92fe4d6","filename":"integration-tests/__tests__/cli-accepts-exact-filenames.test.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/281a589c6bea0ce432f75ac98d5af6662d7312a5/integration-tests%2F__tests__%2Fcli-accepts-exact-filenames.test.js","raw_url":"https://github.com/facebook/jest/raw/281a589c6bea0ce432f75ac98d5af6662d7312a5/integration-tests%2F__tests__%2Fcli-accepts-exact-filenames.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/integration-tests%2F__tests__%2Fcli-accepts-exact-filenames.test.js?ref=281a589c6bea0ce432f75ac98d5af6662d7312a5","patch":"@@ -38,6 +38,7 @@ test('CLI accepts exact filenames', () => {\n     '--forceExit',\n     './bar.js',\n     './foo/baz.js',\n+    './foo',\n   ]);\n   const {rest, summary} = extractSummary(stderr);\n   expect(status).toBe(0);"},{"sha":"b49fbae44ee1e734d9e2a10efdcce13e974b24f9","filename":"packages/jest-cli/src/search_source.js","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/facebook/jest/blob/281a589c6bea0ce432f75ac98d5af6662d7312a5/packages%2Fjest-cli%2Fsrc%2Fsearch_source.js","raw_url":"https://github.com/facebook/jest/raw/281a589c6bea0ce432f75ac98d5af6662d7312a5/packages%2Fjest-cli%2Fsrc%2Fsearch_source.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-cli%2Fsrc%2Fsearch_source.js?ref=281a589c6bea0ce432f75ac98d5af6662d7312a5","patch":"@@ -209,7 +209,15 @@ export default class SearchSource {\n     } else if (globalConfig.findRelatedTests && paths && paths.length) {\n       return Promise.resolve(this.findRelatedTestsFromPattern(paths));\n     } else {\n-      const validTestPaths = paths && paths.filter(fs.existsSync);\n+      const validTestPaths =\n+        paths &&\n+        paths.filter(name => {\n+          try {\n+            return fs.lstatSync(name).isFile();\n+          } catch (e) {\n+            return false;\n+          }\n+        });\n \n       if (validTestPaths && validTestPaths.length) {\n         return Promise.resolve({tests: toTests(this._context, validTestPaths)});"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/5565","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/5565/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/5565/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/5565/events","html_url":"https://github.com/facebook/jest/pull/5565","id":297102256,"node_id":"MDExOlB1bGxSZXF1ZXN0MTY5MTE0NzEy","number":5565,"title":"Use v8.serialize when available.","user":{"login":"cpojer","id":13352,"node_id":"MDQ6VXNlcjEzMzUy","avatar_url":"https://avatars.githubusercontent.com/u/13352?v=4","gravatar_id":"","url":"https://api.github.com/users/cpojer","html_url":"https://github.com/cpojer","followers_url":"https://api.github.com/users/cpojer/followers","following_url":"https://api.github.com/users/cpojer/following{/other_user}","gists_url":"https://api.github.com/users/cpojer/gists{/gist_id}","starred_url":"https://api.github.com/users/cpojer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpojer/subscriptions","organizations_url":"https://api.github.com/users/cpojer/orgs","repos_url":"https://api.github.com/users/cpojer/repos","events_url":"https://api.github.com/users/cpojer/events{/privacy}","received_events_url":"https://api.github.com/users/cpojer/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2018-02-14T13:50:37Z","updated_at":"2021-05-12T20:07:18Z","closed_at":"2018-02-14T23:52:09Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/5565","html_url":"https://github.com/facebook/jest/pull/5565","diff_url":"https://github.com/facebook/jest/pull/5565.diff","patch_url":"https://github.com/facebook/jest/pull/5565.patch","merged_at":"2018-02-14T23:52:09Z"},"body":"## Summary\r\n\r\nv8 (in Node 8+) has a new function called [`v8.serialize`](https://nodejs.org/api/v8.html#v8_v8_serialize_value) which can be used to encode/decode JavaScript data structures faster than JSON. This diff changes `jest-haste-map` to use the new function in newer versions of Node and falls back to JSON if the serializer/deserializer aren't available. It also does a v8 version check to ensure we aren't trying to read a possible outdated binary blob. Making the cache work across node versions is a non goal and will be broken by this feature. If a user upgrades node, the function will throw and recreate the haste map.\r\n\r\nI benchmarked this on a 73mb haste map and got the following results averaged over 10 runs:\r\n* v8.deserialize: 1621.34\r\n* JSON.parse: 1810.15\r\n* v8.serialize: 608.28\r\n* JSON.stringify: 1177.84\r\n\r\nReading is ~200ms faster and writing is 500ms faster. I suspect this is because of less validation work and less GC (*edit: it's not GC*). Since during startup we read the haste map once, write updates and then read it once per worker, this means that on a gigantic repo, this saves 500+200+(200*workers) time, or close to a second of actual time. On most repos out there in the world, there is likely no visible performance difference.\r\n\r\nNext steps (up for grabs):\r\n* Create a `jest-serialize` package that uses either v8 serialize or JSON.\r\n* Use `jest-serialize` across Jest (`jest-worker`, `jest-haste-map`) and Metro.\r\n* Use more efficient data structures for Jest's haste map to save space and time (this is a large project).\r\n\r\n## Test plan\r\n\r\nI updated some of the tests to pass on either node 8+ or node versions below that.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/5565/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/5565/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"df588dc896d199763b1ddc8b7cd4655259fb75f5","filename":"packages/jest-haste-map/src/__tests__/index.test.js","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/facebook/jest/blob/a706549c46f2406328f6a784f6cef9ce233c5a41/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","raw_url":"https://github.com/facebook/jest/raw/a706549c46f2406328f6a784f6cef9ce233c5a41/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js?ref=a706549c46f2406328f6a784f6cef9ce233c5a41","patch":"@@ -70,8 +70,6 @@ let mockFs;\n \n jest.mock('graceful-fs', () => ({\n   readFileSync: jest.fn((path, options) => {\n-    expect(options).toBe('utf8');\n-\n     // A file change can be triggered by writing into the\n     // mockChangedFiles object.\n     if (mockChangedFiles && path in mockChangedFiles) {\n@@ -87,7 +85,7 @@ jest.mock('graceful-fs', () => ({\n     throw error;\n   }),\n   writeFileSync: jest.fn((path, data, options) => {\n-    expect(options).toBe('utf8');\n+    expect(options).toBe(require('v8').serialize ? undefined : 'utf8');\n     mockFs[path] = data;\n   }),\n }));\n@@ -468,8 +466,11 @@ describe('HasteMap', () => {\n           .build()\n           .then(({__hasteMapForTest: data}) => {\n             expect(fs.readFileSync.mock.calls.length).toBe(1);\n-            expect(fs.readFileSync).toBeCalledWith(cacheFilePath, 'utf8');\n-\n+            if (require('v8').deserialize) {\n+              expect(fs.readFileSync).toBeCalledWith(cacheFilePath);\n+            } else {\n+              expect(fs.readFileSync).toBeCalledWith(cacheFilePath, 'utf8');\n+            }\n             expect(data.clocks).toEqual(mockClocks);\n             expect(data.files).toEqual(initialData.files);\n             expect(data.map).toEqual(initialData.map);\n@@ -504,7 +505,11 @@ describe('HasteMap', () => {\n           .then(({__hasteMapForTest: data}) => {\n             expect(fs.readFileSync.mock.calls.length).toBe(2);\n \n-            expect(fs.readFileSync).toBeCalledWith(cacheFilePath, 'utf8');\n+            if (require('v8').serialize) {\n+              expect(fs.readFileSync).toBeCalledWith(cacheFilePath);\n+            } else {\n+              expect(fs.readFileSync).toBeCalledWith(cacheFilePath, 'utf8');\n+            }\n             expect(fs.readFileSync).toBeCalledWith('/fruits/banana.js', 'utf8');\n \n             expect(data.clocks).toEqual(mockClocks);"},{"sha":"c990ea92f9ae23189d0544b7233ee6ce326603c5","filename":"packages/jest-haste-map/src/index.js","status":"modified","additions":57,"deletions":36,"changes":93,"blob_url":"https://github.com/facebook/jest/blob/a706549c46f2406328f6a784f6cef9ce233c5a41/packages%2Fjest-haste-map%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/a706549c46f2406328f6a784f6cef9ce233c5a41/packages%2Fjest-haste-map%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.js?ref=a706549c46f2406328f6a784f6cef9ce233c5a41","patch":"@@ -7,6 +7,30 @@\n  * @flow\n  */\n \n+import {execSync} from 'child_process';\n+import {version as VERSION} from '../package.json';\n+import {worker} from './worker';\n+import crypto from 'crypto';\n+import EventEmitter from 'events';\n+import fs from 'graceful-fs';\n+import getMockName from './get_mock_name';\n+import getPlatformExtension from './lib/get_platform_extension';\n+// eslint-disable-next-line import/no-duplicates\n+import H from './constants';\n+import HasteFS from './haste_fs';\n+import HasteModuleMap from './module_map';\n+// eslint-disable-next-line import/default\n+import nodeCrawl from './crawlers/node';\n+import normalizePathSep from './lib/normalize_path_sep';\n+import os from 'os';\n+import path from 'path';\n+import sane from 'sane';\n+import v8 from 'v8';\n+// eslint-disable-next-line import/default\n+import watchmanCrawl from './crawlers/watchman';\n+import WatchmanWatcher from './lib/watchman_watcher';\n+import Worker from 'jest-worker';\n+\n import type {Console} from 'console';\n import type {Path} from 'types/Config';\n import type {\n@@ -18,34 +42,9 @@ import type {\n   MockData,\n } from 'types/HasteMap';\n \n-import {worker} from './worker';\n-\n // eslint-disable-next-line import/no-duplicates\n import typeof HType from './constants';\n \n-import EventEmitter from 'events';\n-import os from 'os';\n-import path from 'path';\n-import crypto from 'crypto';\n-import {execSync} from 'child_process';\n-import fs from 'graceful-fs';\n-import sane from 'sane';\n-import {version as VERSION} from '../package.json';\n-// eslint-disable-next-line import/no-duplicates\n-import H from './constants';\n-import HasteFS from './haste_fs';\n-import HasteModuleMap from './module_map';\n-import getMockName from './get_mock_name';\n-import getPlatformExtension from './lib/get_platform_extension';\n-import normalizePathSep from './lib/normalize_path_sep';\n-import Worker from 'jest-worker';\n-import WatchmanWatcher from './lib/watchman_watcher';\n-\n-// eslint-disable-next-line import/default\n-import nodeCrawl from './crawlers/node';\n-// eslint-disable-next-line import/default\n-import watchmanCrawl from './crawlers/watchman';\n-\n type Options = {\n   cacheDirectory?: string,\n   console?: Console,\n@@ -291,7 +290,21 @@ class HasteMap extends EventEmitter {\n    * 1. read data from the cache or create an empty structure.\n    */\n   read(): InternalHasteMap {\n-    return this._parse(fs.readFileSync(this._cachePath, 'utf8'));\n+    if (v8.deserialize) {\n+      // This may throw. `_buildFileMap` will catch it and create a new map.\n+      const {version, hasteMap} = v8.deserialize(\n+        fs.readFileSync(this._cachePath),\n+      );\n+      if (version !== process.versions.v8) {\n+        throw new Error('jest-haste-map: v8 versions do not match.');\n+      }\n+      return removePrototypes(hasteMap);\n+    } else {\n+      const hasteMap = (JSON.parse(\n+        fs.readFileSync(this._cachePath, 'utf8'),\n+      ): InternalHasteMap);\n+      return removePrototypes(hasteMap);\n+    }\n   }\n \n   readModuleMap(): ModuleMap {\n@@ -520,8 +533,18 @@ class HasteMap extends EventEmitter {\n   /**\n    * 4. serialize the new `HasteMap` in a cache file.\n    */\n-  _persist(hasteMap: InternalHasteMap): void {\n-    fs.writeFileSync(this._cachePath, JSON.stringify(hasteMap), 'utf8');\n+  _persist(hasteMap: InternalHasteMap) {\n+    if (v8.serialize) {\n+      fs.writeFileSync(\n+        this._cachePath,\n+        v8.serialize({\n+          hasteMap,\n+          version: process.versions.v8,\n+        }),\n+      );\n+    } else {\n+      fs.writeFileSync(this._cachePath, JSON.stringify(hasteMap), 'utf8');\n+    }\n   }\n \n   /**\n@@ -544,14 +567,6 @@ class HasteMap extends EventEmitter {\n     return this._worker;\n   }\n \n-  _parse(hasteMapPath: string): InternalHasteMap {\n-    const hasteMap = (JSON.parse(hasteMapPath): InternalHasteMap);\n-    for (const key in hasteMap) {\n-      Object.setPrototypeOf(hasteMap[key], null);\n-    }\n-    return hasteMap;\n-  }\n-\n   _crawl(hasteMap: InternalHasteMap): Promise<InternalHasteMap> {\n     const options = this._options;\n     const ignore = this._ignore.bind(this);\n@@ -898,6 +913,12 @@ class HasteMap extends EventEmitter {\n }\n \n const copy = object => Object.assign(Object.create(null), object);\n+const removePrototypes = object => {\n+  for (const key in object) {\n+    Object.setPrototypeOf(object[key], null);\n+  }\n+  return object;\n+};\n \n HasteMap.H = H;\n HasteMap.ModuleMap = HasteModuleMap;"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/7408","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/7408/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/7408/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/7408/events","html_url":"https://github.com/facebook/jest/pull/7408","id":384128628,"node_id":"MDExOlB1bGxSZXF1ZXN0MjMzNDA3MDA3","number":7408,"title":"Add node worker-thread support to jest-worker","user":{"login":"rickhanlonii","id":2440089,"node_id":"MDQ6VXNlcjI0NDAwODk=","avatar_url":"https://avatars.githubusercontent.com/u/2440089?v=4","gravatar_id":"","url":"https://api.github.com/users/rickhanlonii","html_url":"https://github.com/rickhanlonii","followers_url":"https://api.github.com/users/rickhanlonii/followers","following_url":"https://api.github.com/users/rickhanlonii/following{/other_user}","gists_url":"https://api.github.com/users/rickhanlonii/gists{/gist_id}","starred_url":"https://api.github.com/users/rickhanlonii/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rickhanlonii/subscriptions","organizations_url":"https://api.github.com/users/rickhanlonii/orgs","repos_url":"https://api.github.com/users/rickhanlonii/repos","events_url":"https://api.github.com/users/rickhanlonii/events{/privacy}","received_events_url":"https://api.github.com/users/rickhanlonii/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2018-11-25T22:58:13Z","updated_at":"2021-05-12T05:14:21Z","closed_at":"2018-12-05T17:16:28Z","author_association":"MEMBER","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/7408","html_url":"https://github.com/facebook/jest/pull/7408","diff_url":"https://github.com/facebook/jest/pull/7408.diff","patch_url":"https://github.com/facebook/jest/pull/7408.patch","merged_at":"2018-12-05T17:16:28Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md in the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\n**This PR is a continuation of https://github.com/facebook/jest/pull/6676**\r\n\r\nNode 10 shipped with a \"threading API\" that uses SharedBuffers to communicate between the main process and its child threads. Being jest-worker a parallelization library, we can take advantage of this API when available. At the same time, we'll decouple our scheduling logic from our communication logic for better re-usability.\r\n\r\nHere are some key things:\r\n\r\n- Decouple the scheduling logic (i.e. everything that's not specifically to send and receive jobs)\r\n- Add the option to use \"threads\" into the library. If they are present, we'll favor them.\r\n\r\n## Test plan\r\nAdd unit and integration tests, near 100% coverage\r\n\r\nI also tried as much as possible to _move_ existing tests rather than writing new ones. In a few places where the refactoring broke the test irrecoverably I wrote new tests\r\n\r\n<img width=\"1677\" alt=\"screenshot 2018-11-25 22 29 33\" src=\"https://user-images.githubusercontent.com/2440089/48985771-62d32200-f103-11e8-91de-fab07991a7fd.png\">\r\n\r\n## Performance\r\n### Without experimental worker\r\n```bash\r\ntotal worker-farm: { wFGT: 3110, wFPT: 2947 }\r\ntotal jest-worker: { jWGT: 2958, jWPT: 2577 }\r\n---------------------------------------------------------------------------\r\n% improvement over 10000 calls (global time): 4.887459807073955\r\n% improvement over 10000 calls (processing time): 12.555140821174076\r\n```\r\n### With experimental worker\r\n\r\n```bash\r\n❯ node --experimental-worker --expose-gc test.js empty 10000\r\ntotal worker-farm: { wFGT: 3084, wFPT: 2913 }\r\ntotal jest-worker: { jWGT: 2070, jWPT: 1504 }\r\n---------------------------------------------------------------------------\r\n% improvement over 10000 calls (global time): 32.87937743190661\r\n% improvement over 10000 calls (processing time): 48.3693786474425\r\n```","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/7408/reactions","total_count":8,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":4,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/7408/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"60ba0f22d861d907f432222fae0841446bfd52c9","filename":".gitignore","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/.gitignore","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/.gitignore","contents_url":"https://api.github.com/repos/facebook/jest/contents/.gitignore?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -1,3 +1,4 @@\n+.idea\n .DS_STORE\n .eslintcache\n *.swp"},{"sha":"37cf215683c98816e7734e33ba5c913739c92e87","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -33,6 +33,7 @@\n - `[jest-haste-map]` Accept a `getCacheKey` method in `hasteImplModulePath` modules to reset the cache when the logic changes ([#7350](https://github.com/facebook/jest/pull/7350))\n - `[jest-config]` Add `haste.computeSha1` option to compute the sha-1 of the files in the haste map ([#7345](https://github.com/facebook/jest/pull/7345))\n - `[expect]` `expect(Infinity).toBeCloseTo(Infinity)` Treats `Infinity` as equal in toBeCloseTo matcher ([#7405](https://github.com/facebook/jest/pull/7405))\n+- `[jest-worker]` Add node worker-thread support to jest-worker ([#7408](https://github.com/facebook/jest/pull/7408))\n \n ### Fixes\n "},{"sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","filename":"jest-worker","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/jest-worker","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/jest-worker","contents_url":"https://api.github.com/repos/facebook/jest/contents/jest-worker?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd"},{"sha":"48378729f34b5db979a07e006d435b084bb1c594","filename":"packages/jest-resolve/src/isBuiltinModule.js","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-resolve%2Fsrc%2FisBuiltinModule.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-resolve%2Fsrc%2FisBuiltinModule.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve%2Fsrc%2FisBuiltinModule.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -15,11 +15,13 @@ declare var process: {\n   binding(type: string): {},\n };\n \n+const EXPERIMENTAL_MODULES = ['worker_threads'];\n+\n const BUILTIN_MODULES =\n-  builtinModules ||\n-  Object.keys(process.binding('natives')).filter(\n-    (module: string) => !/^internal\\//.test(module),\n-  );\n+  builtinModules.concat(EXPERIMENTAL_MODULES) ||\n+  Object.keys(process.binding('natives'))\n+    .filter((module: string) => !/^internal\\//.test(module))\n+    .concat(EXPERIMENTAL_MODULES);\n \n export default function isBuiltinModule(module: string): boolean {\n   return BUILTIN_MODULES.indexOf(module) !== -1;"},{"sha":"c5de73619559aabfe5412294095175409410bf5d","filename":"packages/jest-worker/README.md","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2FREADME.md","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2FREADME.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2FREADME.md?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -39,6 +39,12 @@ export function hello(param) {\n }\n ```\n \n+## Experimental worker\n+\n+Node 10 shipped with [worker-threads](https://nodejs.org/api/worker_threads.html), a \"threading API\" that uses SharedArrayBuffers to communicate between the main process and its child threads. This experimental Node feature can significantly improve the communication time between parent and child processes in `jest-worker`.\n+\n+We will use worker threads where available. To enable in Node 10+, run the Node process with the `--experimental-worker` flag.\n+\n ## API\n \n The only exposed method is a constructor (`Worker`) that is initialized by passing the worker path, plus an options object.\n@@ -77,6 +83,12 @@ By default, no process is bound to any worker.\n \n The arguments that will be passed to the `setup` method during initialization.\n \n+#### `workerPool: (workerPath: string, options?: WorkerPoolOptions) => WorkerPoolInterface` (optional)\n+\n+Provide a custom worker pool to be used for spawning child processes. By default, Jest will use a node thread pool if available and fall back to child process threads.\n+\n+The arguments that will be passed to the `setup` method during initialization.\n+\n ## Worker\n \n The returned `Worker` instance has all the exposed methods, plus some additional ones to interact with the workers itself:"},{"sha":"b69846ceafa001186dbc42b252b5c0e978671bd0","filename":"packages/jest-worker/src/Farm.js","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2FFarm.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2FFarm.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2FFarm.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import type {\n+  ChildMessage,\n+  QueueChildMessage,\n+  WorkerInterface,\n+  OnStart,\n+  OnEnd,\n+} from './types';\n+import {CHILD_MESSAGE_CALL} from './types';\n+\n+export default class Farm {\n+  _computeWorkerKey: (string, ...Array<any>) => ?string;\n+  _cacheKeys: {[string]: WorkerInterface, __proto__: null};\n+  _callback: Function;\n+  _last: Array<QueueChildMessage>;\n+  _locks: Array<boolean>;\n+  _numOfWorkers: number;\n+  _offset: number;\n+  _queue: Array<?QueueChildMessage>;\n+\n+  constructor(\n+    numOfWorkers: number,\n+    callback: Function,\n+    computeWorkerKey?: (string, ...Array<any>) => ?string,\n+  ) {\n+    this._callback = callback;\n+    this._numOfWorkers = numOfWorkers;\n+    this._cacheKeys = Object.create(null);\n+    this._queue = [];\n+    this._last = [];\n+    this._locks = [];\n+    this._offset = 0;\n+    if (computeWorkerKey) {\n+      this._computeWorkerKey = computeWorkerKey;\n+    }\n+  }\n+\n+  doWork(method: string, ...args: Array<any>): Promise<mixed> {\n+    return new Promise((resolve, reject) => {\n+      const computeWorkerKey = this._computeWorkerKey;\n+      const request: ChildMessage = [CHILD_MESSAGE_CALL, false, method, args];\n+\n+      let worker: ?WorkerInterface = null;\n+      let hash: ?string = null;\n+\n+      if (computeWorkerKey) {\n+        hash = computeWorkerKey.apply(this, [method].concat(args));\n+        worker = hash == null ? null : this._cacheKeys[hash];\n+      }\n+\n+      const onStart: OnStart = (worker: WorkerInterface) => {\n+        if (hash != null) {\n+          this._cacheKeys[hash] = worker;\n+        }\n+      };\n+\n+      const onEnd: OnEnd = (error: ?Error, result: ?mixed) => {\n+        if (error) {\n+          reject(error);\n+        } else {\n+          resolve(result);\n+        }\n+      };\n+\n+      const task = {onEnd, onStart, request};\n+      if (worker) {\n+        this._enqueue(task, worker.getWorkerId());\n+      } else {\n+        this._push(task);\n+      }\n+    });\n+  }\n+\n+  _getNextJob(workerId: number): ?QueueChildMessage {\n+    let queueHead = this._queue[workerId];\n+\n+    while (queueHead && queueHead.request[1]) {\n+      queueHead = queueHead.next;\n+    }\n+\n+    this._queue[workerId] = queueHead;\n+\n+    return queueHead;\n+  }\n+\n+  _process(workerId: number): Farm {\n+    if (this.isLocked(workerId)) {\n+      return this;\n+    }\n+\n+    const job = this._getNextJob(workerId);\n+\n+    if (!job) {\n+      return this;\n+    }\n+\n+    const onEnd = (error: ?Error, result: mixed) => {\n+      job.onEnd(error, result);\n+      this.unlock(workerId);\n+      this._process(workerId);\n+    };\n+\n+    this.lock(workerId);\n+\n+    this._callback(workerId, job.request, job.onStart, onEnd);\n+\n+    job.request[1] = true;\n+\n+    return this;\n+  }\n+\n+  _enqueue(task: QueueChildMessage, workerId: number): Farm {\n+    if (task.request[1]) {\n+      return this;\n+    }\n+\n+    if (this._queue[workerId]) {\n+      this._last[workerId].next = task;\n+    } else {\n+      this._queue[workerId] = task;\n+    }\n+\n+    this._last[workerId] = task;\n+    this._process(workerId);\n+\n+    return this;\n+  }\n+\n+  _push(task: QueueChildMessage): Farm {\n+    for (let i = 0; i < this._numOfWorkers; i++) {\n+      const workerIdx = (this._offset + i) % this._numOfWorkers;\n+      this._enqueue(task, workerIdx);\n+    }\n+    this._offset++;\n+\n+    return this;\n+  }\n+\n+  lock(workerId: number): void {\n+    this._locks[workerId] = true;\n+  }\n+\n+  unlock(workerId: number): void {\n+    this._locks[workerId] = false;\n+  }\n+\n+  isLocked(workerId: number): boolean {\n+    return this._locks[workerId];\n+  }\n+}"},{"sha":"adb93a62e7c6aae2f602d87dfa7426481730535f","filename":"packages/jest-worker/src/WorkerPool.js","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2FWorkerPool.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2FWorkerPool.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2FWorkerPool.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import BaseWorkerPool from './base/BaseWorkerPool';\n+\n+import type {\n+  ChildMessage,\n+  WorkerOptions,\n+  OnStart,\n+  OnEnd,\n+  WorkerPoolInterface,\n+  WorkerInterface,\n+} from './types';\n+\n+const canUseWorkerThreads = () => {\n+  try {\n+    // $FlowFixMe: Flow doesn't know about experimental APIs\n+    require('worker_threads');\n+    return true;\n+  } catch (_) {\n+    return false;\n+  }\n+};\n+\n+class WorkerPool extends BaseWorkerPool implements WorkerPoolInterface {\n+  send(\n+    workerId: number,\n+    request: ChildMessage,\n+    onStart: OnStart,\n+    onEnd: OnEnd,\n+  ): void {\n+    this.getWorkerById(workerId).send(request, onStart, onEnd);\n+  }\n+\n+  createWorker(workerOptions: WorkerOptions): WorkerInterface {\n+    let Worker;\n+    if (canUseWorkerThreads()) {\n+      Worker = require('./workers/NodeThreadsWorker').default;\n+    } else {\n+      Worker = require('./workers/ChildProcessWorker').default;\n+    }\n+\n+    return new Worker(workerOptions);\n+  }\n+}\n+\n+export default WorkerPool;"},{"sha":"b8733fb46380917bc464851640affd26e32f25a0","filename":"packages/jest-worker/src/__performance_tests__/test.js","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -1,4 +1,9 @@\n-// Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n \n 'use strict';\n "},{"sha":"5dc97a78d789ab8a1414fec8e7b66d6e796d4d2d","filename":"packages/jest-worker/src/__performance_tests__/workers/jest_worker.js","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -1,4 +1,9 @@\n-// Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n \n 'use strict';\n "},{"sha":"5d43441c111efd4cacd8bbd9313d30a26392cf32","filename":"packages/jest-worker/src/__performance_tests__/workers/pi.js","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fpi.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fpi.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fpi.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -1,4 +1,9 @@\n-// Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n \n 'use strict';\n "},{"sha":"ae93de3317f315213b576dc802ee756dc718b058","filename":"packages/jest-worker/src/__performance_tests__/workers/worker_farm.js","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -1,4 +1,9 @@\n-// Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n \n 'use strict';\n "},{"sha":"43a2b25c47c02c4c8878d9314f2f8117b320aae7","filename":"packages/jest-worker/src/__tests__/Farm.test.js","status":"added","additions":272,"deletions":0,"changes":272,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2FFarm.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2FFarm.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2FFarm.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,272 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+import Farm from '../Farm';\n+\n+let mockWorkerCalls;\n+let callback;\n+\n+function workerReplyStart(i) {\n+  mockWorkerCalls[i].onStart({getWorkerId: () => mockWorkerCalls[i].workerId});\n+}\n+\n+function workerReplyEnd(i, error, result) {\n+  mockWorkerCalls[i].onEnd(error, result);\n+}\n+\n+function workerReply(i, error, result) {\n+  workerReplyStart(i);\n+  workerReplyEnd(i, error, result);\n+}\n+\n+describe('Farm', () => {\n+  beforeEach(() => {\n+    mockWorkerCalls = [];\n+    callback = jest.fn((...args) => {\n+      mockWorkerCalls.push({\n+        onEnd: args[3],\n+        onStart: args[2],\n+        passed: args[1],\n+        workerId: args[0],\n+      });\n+    });\n+  });\n+\n+  it('sends a request to one worker', () => {\n+    const farm = new Farm(4, callback);\n+\n+    farm.doWork('foo', 42);\n+\n+    expect(callback).toHaveBeenCalledTimes(1);\n+    expect(callback).toHaveBeenCalledWith(\n+      0,\n+      [1, true, 'foo', [42]],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+  });\n+\n+  it('sends four requests to four unique workers', () => {\n+    const farm = new Farm(4, callback);\n+\n+    farm.doWork('foo', 42);\n+    farm.doWork('foo1', 43);\n+    farm.doWork('foo2', 44);\n+    farm.doWork('foo3', 45);\n+\n+    expect(callback).toHaveBeenCalledTimes(4);\n+    expect(callback).toHaveBeenNthCalledWith(\n+      1,\n+      0, // first worker\n+      [1, true, 'foo', [42]],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+    expect(callback).toHaveBeenNthCalledWith(\n+      2,\n+      1, // second worker\n+      [1, true, 'foo1', [43]],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+    expect(callback).toHaveBeenNthCalledWith(\n+      3,\n+      2, // third worker\n+      [1, true, 'foo2', [44]],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+    expect(callback).toHaveBeenNthCalledWith(\n+      4,\n+      3, // fourth worker\n+      [1, true, 'foo3', [45]],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+  });\n+\n+  it('handles null computeWorkerKey, sending to first worker', async () => {\n+    const computeWorkerKey = jest.fn(() => null);\n+\n+    const farm = new Farm(4, callback, computeWorkerKey);\n+\n+    const p0 = farm.doWork('foo', 42);\n+    workerReply(0);\n+    await p0;\n+\n+    expect(computeWorkerKey).toBeCalledTimes(1);\n+    expect(computeWorkerKey).toHaveBeenNthCalledWith(1, 'foo', 42);\n+\n+    expect(callback).toHaveBeenCalledTimes(1);\n+    expect(callback).toHaveBeenNthCalledWith(\n+      1,\n+      0, // first worker\n+      [1, true, 'foo', [42]],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+  });\n+\n+  it('sends the same worker key to the same worker', async () => {\n+    const computeWorkerKey = jest\n+      .fn(() => {})\n+      .mockReturnValueOnce('one')\n+      .mockReturnValueOnce('two')\n+      .mockReturnValueOnce('one');\n+\n+    const farm = new Farm(4, callback, computeWorkerKey);\n+\n+    const p0 = farm.doWork('foo', 42);\n+    workerReply(0);\n+    await p0;\n+\n+    const p1 = farm.doWork('foo1', 43);\n+    workerReply(1);\n+    await p1;\n+\n+    const p2 = farm.doWork('foo2', 44);\n+    workerReply(2);\n+    await p2;\n+\n+    expect(computeWorkerKey).toBeCalledTimes(3);\n+    expect(computeWorkerKey).toHaveBeenNthCalledWith(1, 'foo', 42);\n+    expect(computeWorkerKey).toHaveBeenNthCalledWith(2, 'foo1', 43);\n+    expect(computeWorkerKey).toHaveBeenNthCalledWith(3, 'foo2', 44);\n+\n+    expect(callback).toHaveBeenCalledTimes(3);\n+    expect(callback).toHaveBeenNthCalledWith(\n+      1,\n+      0, // first worker\n+      [1, true, 'foo', [42]],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+    expect(callback).toHaveBeenNthCalledWith(\n+      2,\n+      1, // second worker\n+      [1, true, 'foo1', [43]],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+    expect(callback).toHaveBeenNthCalledWith(\n+      3,\n+      0, // first worker again\n+      [1, true, 'foo2', [44]],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+  });\n+\n+  it('returns the result if the call worked', async () => {\n+    const farm = new Farm(4, callback);\n+\n+    const promise = farm.doWork('car', 'plane');\n+\n+    workerReply(0, null, 34);\n+    const result = await promise;\n+\n+    expect(result).toEqual(34);\n+  });\n+\n+  it('throws if the call failed', async () => {\n+    const farm = new Farm(4, callback);\n+\n+    const promise = farm.doWork('car', 'plane');\n+    let error = null;\n+\n+    workerReply(0, new TypeError('Massively broken'));\n+\n+    try {\n+      await promise;\n+    } catch (err) {\n+      error = err;\n+    }\n+\n+    expect(error).not.toBe(null);\n+    expect(error).toBeInstanceOf(TypeError);\n+  });\n+\n+  it('checks that once a sticked task finishes, next time is sent to that worker', async () => {\n+    const farm = new Farm(4, callback, () => '1234567890abcdef');\n+\n+    // Worker 1 successfully replies with \"17\" as a result.\n+    const p0 = farm.doWork('car', 'plane');\n+    workerReply(0, null, 17);\n+    await p0;\n+\n+    // Note that the stickiness is not created by the method name or the arguments\n+    // it is solely controlled by the provided \"computeWorkerKey\" method, which in\n+    // the test example always returns the same key, so all calls should be\n+    // redirected to worker 1 (which is the one that resolved the first call).\n+    const p1 = farm.doWork('foo', 'bar');\n+    workerReply(1, null, 17);\n+    await p1;\n+\n+    // The first time, a call with a \"1234567890abcdef\" hash had never been done\n+    // earlier (\"foo\" call), so it got queued to all workers. Later, since the one\n+    // that resolved the call was the one in position 1, all subsequent calls are\n+    // only redirected to that worker.\n+    expect(callback).toHaveBeenCalledTimes(2); // Only \"foo\".\n+    expect(callback).toHaveBeenNthCalledWith(\n+      1,\n+      0, // first worker\n+      [1, true, 'car', ['plane']],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+    expect(callback).toHaveBeenNthCalledWith(\n+      2,\n+      0, // first worker\n+      [1, true, 'foo', ['bar']],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+  });\n+\n+  it('checks that even before a sticked task finishes, next time is sent to that worker', async () => {\n+    const farm = new Farm(4, callback, () => '1234567890abcdef');\n+\n+    // Note that the worker is sending a start response synchronously.\n+    const p0 = farm.doWork('car', 'plane');\n+    workerReplyStart(0);\n+\n+    // Note that the worker is sending a start response synchronously.\n+    const p1 = farm.doWork('foo', 'bar');\n+\n+    // The first call is sent the the worker, the second is queued\n+    expect(callback).toHaveBeenCalledTimes(1);\n+\n+    // Flush the queue\n+    workerReplyEnd(0, null, 17);\n+    await p0;\n+    workerReply(1, null, 17);\n+    await p1;\n+\n+    // Both requests are send to the same worker\n+    // The first time, a call with a \"1234567890abcdef\" hash had never been done\n+    // earlier (\"foo\" call), so it got queued to all workers. Later, since the one\n+    // that resolved the call was the one in position 1, all subsequent calls are\n+    // only redirected to that worker.\n+    expect(callback).toHaveBeenCalledTimes(2);\n+    expect(callback).toHaveBeenNthCalledWith(\n+      1,\n+      0, // first worker\n+      [1, true, 'car', ['plane']],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+    expect(callback).toHaveBeenNthCalledWith(\n+      2,\n+      0, // first worker\n+      [1, true, 'foo', ['bar']],\n+      expect.any(Function),\n+      expect.any(Function),\n+    );\n+  });\n+});"},{"sha":"51898348c2bd22980983c7bf417b72bffd95c642","filename":"packages/jest-worker/src/__tests__/WorkerPool.test.js","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2FWorkerPool.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2FWorkerPool.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2FWorkerPool.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+import WorkerPool from '../WorkerPool';\n+\n+jest.mock('../workers/ChildProcessWorker', () => {\n+  const fakeClass = jest.fn(() => ({\n+    getStderr: jest.fn(),\n+    getStdout: jest.fn(),\n+    send: jest.fn(),\n+  }));\n+\n+  return {\n+    __esModule: true,\n+    default: fakeClass,\n+  };\n+});\n+\n+jest.mock('../workers/NodeThreadsWorker', () => {\n+  const fakeClass = jest.fn(() => ({\n+    getStderr: jest.fn(),\n+    getStdout: jest.fn(),\n+    send: jest.fn(),\n+  }));\n+\n+  return {\n+    __esModule: true,\n+    default: fakeClass,\n+  };\n+});\n+\n+const ChildProcessWorker = require('../workers/ChildProcessWorker').default;\n+const NodeThreadWorker = require('../workers/NodeThreadsWorker').default;\n+\n+describe('WorkerPool', () => {\n+  beforeEach(() => {\n+    ChildProcessWorker.mockClear();\n+    NodeThreadWorker.mockClear();\n+  });\n+\n+  it('should create a ChildProcessWorker and send to it', () => {\n+    jest.mock('worker_threads', () => {\n+      throw Error('Undefined');\n+    });\n+    const workerPool = new WorkerPool('/path', {\n+      forkOptions: {},\n+      maxRetries: 1,\n+      numWorkers: 1,\n+      workerId: 0,\n+      workerPath: '/path',\n+    });\n+\n+    const onStart = () => {};\n+    const onEnd = () => {};\n+    workerPool.send(0, {foo: 'bar'}, onStart, onEnd);\n+\n+    expect(ChildProcessWorker).toBeCalledWith({\n+      forkOptions: {},\n+      maxRetries: 1,\n+      workerId: 0,\n+      workerPath: '/path',\n+    });\n+    expect(NodeThreadWorker).not.toBeCalled();\n+    expect(workerPool._workers[0].send).toBeCalledWith(\n+      {foo: 'bar'},\n+      onStart,\n+      onEnd,\n+    );\n+  });\n+\n+  it('should create a NodeThreadWorker and send to it', () => {\n+    jest.mock('worker_threads', () => 'Defined');\n+    const workerPool = new WorkerPool('/path', {\n+      forkOptions: {},\n+      maxRetries: 1,\n+      numWorkers: 1,\n+      workerId: 0,\n+      workerPath: '/path',\n+    });\n+\n+    const onStart = () => {};\n+    const onEnd = () => {};\n+    workerPool.send(0, {foo: 'bar'}, onStart, onEnd);\n+\n+    expect(NodeThreadWorker).toBeCalledWith({\n+      forkOptions: {},\n+      maxRetries: 1,\n+      workerId: 0,\n+      workerPath: '/path',\n+    });\n+    expect(ChildProcessWorker).not.toBeCalled();\n+    expect(workerPool._workers[0].send).toBeCalledWith(\n+      {foo: 'bar'},\n+      onStart,\n+      onEnd,\n+    );\n+  });\n+});"},{"sha":"6d3b122c190897274ad96704d8f993dc3f7e8fd3","filename":"packages/jest-worker/src/__tests__/index-integration.test.js","status":"removed","additions":0,"deletions":151,"changes":151,"blob_url":"https://github.com/facebook/jest/blob/053b74128d7dbff8ad423e85ff45ea167c23f192/packages%2Fjest-worker%2Fsrc%2F__tests__%2Findex-integration.test.js","raw_url":"https://github.com/facebook/jest/raw/053b74128d7dbff8ad423e85ff45ea167c23f192/packages%2Fjest-worker%2Fsrc%2F__tests__%2Findex-integration.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2Findex-integration.test.js?ref=053b74128d7dbff8ad423e85ff45ea167c23f192","patch":"@@ -1,151 +0,0 @@\n-/**\n- * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n- *\n- * This source code is licensed under the MIT license found in the\n- * LICENSE file in the root directory of this source tree.\n- */\n-\n-'use strict';\n-\n-import EventEmitter from 'events';\n-\n-import {CHILD_MESSAGE_CALL, PARENT_MESSAGE_OK} from '../types';\n-\n-let Farm;\n-let mockForkedProcesses;\n-\n-function mockBuildForkedProcess() {\n-  const mockChild = new EventEmitter();\n-\n-  mockChild.send = jest.fn();\n-\n-  return mockChild;\n-}\n-\n-function replySuccess(i, result) {\n-  mockForkedProcesses[i].emit('message', [PARENT_MESSAGE_OK, result]);\n-}\n-\n-function assertCallsToChild(childNum, ...calls) {\n-  expect(mockForkedProcesses[childNum].send).toHaveBeenCalledTimes(\n-    calls.length + 1,\n-  );\n-\n-  calls.forEach(([methodName, ...args], numCall) => {\n-    expect(\n-      mockForkedProcesses[childNum].send.mock.calls[numCall + 1][0],\n-    ).toEqual([CHILD_MESSAGE_CALL, true, methodName, args]);\n-  });\n-}\n-\n-beforeEach(() => {\n-  mockForkedProcesses = [];\n-\n-  jest.mock('child_process', () => ({\n-    fork() {\n-      const forkedProcess = mockBuildForkedProcess();\n-\n-      mockForkedProcesses.push(forkedProcess);\n-\n-      return forkedProcess;\n-    },\n-  }));\n-\n-  Farm = require('../index').default;\n-});\n-\n-afterEach(() => {\n-  jest.resetModules();\n-});\n-\n-it('calls a single method from the worker', async () => {\n-  const farm = new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 4,\n-  });\n-\n-  const promise = farm.foo();\n-\n-  replySuccess(0, 42);\n-\n-  expect(await promise).toBe(42);\n-});\n-\n-it('distributes sequential calls across child processes', async () => {\n-  const farm = new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 4,\n-  });\n-\n-  // The first call will go to the first child process.\n-  const promise0 = farm.foo('param-0');\n-\n-  assertCallsToChild(0, ['foo', 'param-0']);\n-  replySuccess(0, 'worker-0');\n-  expect(await promise0).toBe('worker-0');\n-\n-  // The second call will go to the second child process.\n-  const promise1 = farm.foo(1);\n-\n-  assertCallsToChild(1, ['foo', 1]);\n-  replySuccess(1, 'worker-1');\n-  expect(await promise1).toBe('worker-1');\n-});\n-\n-it('distributes concurrent calls across child processes', async () => {\n-  const farm = new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 4,\n-  });\n-\n-  // Do 3 calls to the farm in parallel.\n-  const promise0 = farm.foo('param-0');\n-  const promise1 = farm.foo('param-1');\n-  const promise2 = farm.foo('param-2');\n-\n-  // Check that the method calls are sent to each separate child process.\n-  assertCallsToChild(0, ['foo', 'param-0']);\n-  assertCallsToChild(1, ['foo', 'param-1']);\n-  assertCallsToChild(2, ['foo', 'param-2']);\n-\n-  // Send different responses from each child.\n-  replySuccess(0, 'worker-0');\n-  replySuccess(1, 'worker-1');\n-  replySuccess(2, 'worker-2');\n-\n-  // Check\n-  expect(await promise0).toBe('worker-0');\n-  expect(await promise1).toBe('worker-1');\n-  expect(await promise2).toBe('worker-2');\n-});\n-\n-it('sticks parallel calls to children', async () => {\n-  const farm = new Farm('/tmp/baz.js', {\n-    computeWorkerKey: () => '1234567890abcdef',\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 4,\n-  });\n-\n-  // Do 3 calls to the farm in parallel.\n-  const promise0 = farm.foo('param-0');\n-  const promise1 = farm.foo('param-1');\n-  const promise2 = farm.foo('param-2');\n-\n-  // Send different responses for each call (from the same child).\n-  replySuccess(0, 'worker-0');\n-  replySuccess(0, 'worker-1');\n-  replySuccess(0, 'worker-2');\n-\n-  // Check that all the calls have been received by the same child).\n-  assertCallsToChild(\n-    0,\n-    ['foo', 'param-0'],\n-    ['foo', 'param-1'],\n-    ['foo', 'param-2'],\n-  );\n-\n-  // Check that responses are correct.\n-  expect(await promise0).toBe('worker-0');\n-  expect(await promise1).toBe('worker-1');\n-  expect(await promise2).toBe('worker-2');\n-});"},{"sha":"af00ddfd6c9de6f71b0d228022f7fd83cbe3fb40","filename":"packages/jest-worker/src/__tests__/index.test.js","status":"modified","additions":65,"deletions":316,"changes":381,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2Findex.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2Findex.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2Findex.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -8,44 +8,33 @@\n 'use strict';\n \n let Farm;\n-let Worker;\n-let mockWorkers;\n-\n-function workerReplyStart(i) {\n-  mockWorkers[i].send.mock.calls[0][1](mockWorkers[i]);\n-}\n-\n-function workerReplyEnd(i, error, result) {\n-  mockWorkers[i].send.mock.calls[0][2](error, result);\n-}\n-\n-function workerReply(i, error, result) {\n-  workerReplyStart(i);\n-  workerReplyEnd(i, error, result);\n-}\n+let WorkerPool;\n+let Queue;\n \n beforeEach(() => {\n-  mockWorkers = [];\n-\n-  // The worker mock returns a worker with custom methods, plus it stores them\n-  // in a global list, so that they can be accessed later. This list is reset in\n-  // every test.\n-  jest.mock('../Worker', () => {\n-    const fakeClass = jest.fn(() => {\n-      const fakeWorker = {\n-        getStderr: () => ({once() {}, pipe() {}}),\n-        getStdout: () => ({once() {}, pipe() {}}),\n-        send: jest.fn(),\n-      };\n+  jest.mock('../Farm', () => {\n+    const fakeClass = jest.fn(() => ({\n+      doWork: jest.fn().mockResolvedValue(42),\n+    }));\n \n-      mockWorkers.push(fakeWorker);\n+    return {\n+      __esModule: true,\n+      default: fakeClass,\n+    };\n+  });\n \n-      return fakeWorker;\n-    });\n+  jest.mock('../WorkerPool', () => {\n+    const fakeWorker = jest.fn(() => ({\n+      createWorker: jest.fn(),\n+      end: jest.fn(),\n+      getStderr: () => jest.fn(a => a),\n+      getStdout: () => jest.fn(a => a),\n+      send: jest.fn(),\n+    }));\n \n     return {\n       __esModule: true,\n-      default: fakeClass,\n+      default: fakeWorker,\n     };\n   });\n \n@@ -63,16 +52,36 @@ beforeEach(() => {\n     virtual: true,\n   });\n \n-  Worker = require('../Worker').default;\n-  Farm = require('../index').default;\n+  Farm = require('..').default;\n+  Queue = require('../Farm').default;\n+  WorkerPool = require('../WorkerPool').default;\n });\n \n afterEach(() => {\n   jest.resetModules();\n });\n \n-it('exposes the right API', () => {\n+it('exposes the right API using default working', () => {\n+  const farm = new Farm('/tmp/baz.js', {\n+    exposedMethods: ['foo', 'bar'],\n+    numWorkers: 4,\n+  });\n+\n+  expect(typeof farm.foo).toBe('function');\n+  expect(typeof farm.bar).toBe('function');\n+});\n+\n+it('exposes the right API using passed worker', () => {\n+  const WorkerPool = jest.fn(() => ({\n+    createWorker: jest.fn(),\n+    end: jest.fn(),\n+    getStderr: () => jest.fn(a => a),\n+    getStdout: () => jest.fn(a => a),\n+    send: jest.fn(),\n+  }));\n+\n   const farm = new Farm('/tmp/baz.js', {\n+    WorkerPool,\n     exposedMethods: ['foo', 'bar'],\n     numWorkers: 4,\n   });\n@@ -94,128 +103,19 @@ it('breaks if any of the forbidden methods is tried to be exposed', () => {\n });\n \n it('works with minimal options', () => {\n-  // eslint-disable-next-line no-new\n   const farm1 = new Farm('/fake-worker.js');\n \n-  expect(Worker).toHaveBeenCalledTimes(require('os').cpus().length - 1);\n+  expect(Queue).toHaveBeenCalledTimes(1);\n+  expect(WorkerPool).toHaveBeenCalledTimes(1);\n   expect(typeof farm1.methodA).toBe('function');\n   expect(typeof farm1.methodB).toBe('function');\n   expect(typeof farm1._shouldNotExist).not.toBe('function');\n \n-  // eslint-disable-next-line no-new\n   const farm2 = new Farm('/fake-worker-with-default-method.js');\n \n   expect(typeof farm2.default).toBe('function');\n });\n \n-it('tries instantiating workers with the right options', () => {\n-  // eslint-disable-next-line no-new\n-  new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    forkOptions: {execArgv: []},\n-    maxRetries: 6,\n-    numWorkers: 4,\n-  });\n-\n-  expect(Worker).toHaveBeenCalledTimes(4);\n-  expect(Worker.mock.calls[0][0]).toEqual({\n-    forkOptions: {execArgv: []},\n-    maxRetries: 6,\n-    setupArgs: [],\n-    workerId: 1,\n-    workerPath: '/tmp/baz.js',\n-  });\n-});\n-\n-it('create multiple workers with unique worker ids', () => {\n-  // eslint-disable-next-line no-new\n-  new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    forkOptions: {execArgv: []},\n-    maxRetries: 6,\n-    numWorkers: 3,\n-  });\n-\n-  expect(Worker).toHaveBeenCalledTimes(3);\n-  expect(Worker.mock.calls[0][0].workerId).toEqual(1);\n-  expect(Worker.mock.calls[1][0].workerId).toEqual(2);\n-  expect(Worker.mock.calls[2][0].workerId).toEqual(3);\n-});\n-\n-it('makes a non-existing relative worker throw', () => {\n-  expect(\n-    () =>\n-      new Farm('./baz.js', {\n-        exposedMethods: [],\n-        numWorkers: 1,\n-      }),\n-  ).toThrow();\n-});\n-\n-it('aggregates all stdouts and stderrs from all workers', () => {\n-  const out = [];\n-  const err = [];\n-\n-  Worker.mockImplementation(() => ({\n-    getStderr: () => ({\n-      once() {},\n-      pipe(errStream) {\n-        err.push(errStream);\n-      },\n-    }),\n-    getStdout: () => ({\n-      once() {},\n-      pipe(outStream) {\n-        out.push(outStream);\n-      },\n-    }),\n-  }));\n-\n-  const farm = new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 2,\n-  });\n-\n-  expect(out.length).toBe(2);\n-  expect(err.length).toBe(2);\n-\n-  const stdout = jest.fn();\n-  const stderr = jest.fn();\n-\n-  farm.getStdout().on('data', stdout);\n-  farm.getStderr().on('data', stderr);\n-\n-  out[0].write(Buffer.from('hello'));\n-  out[1].write(Buffer.from('bye'));\n-  err[1].write(Buffer.from('house'));\n-  err[0].write(Buffer.from('tree'));\n-\n-  expect(stdout.mock.calls[0][0].toString()).toBe('hello');\n-  expect(stdout.mock.calls[1][0].toString()).toBe('bye');\n-  expect(stderr.mock.calls[0][0].toString()).toBe('house');\n-  expect(stderr.mock.calls[1][0].toString()).toBe('tree');\n-});\n-\n-it('works when stdout and stderr are not piped to the parent', () => {\n-  Worker.mockImplementation(() => ({\n-    getStderr: () => null,\n-    getStdout: () => null,\n-    send: () => null,\n-  }));\n-\n-  const farm = new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    forkOptions: {\n-      silent: false,\n-      stdio: 'inherit',\n-    },\n-    numWorkers: 2,\n-  });\n-\n-  expect(() => farm.foo()).not.toThrow();\n-  expect(() => farm.bar()).not.toThrow();\n-});\n-\n it('does not let make calls after the farm is ended', () => {\n   const farm = new Farm('/tmp/baz.js', {\n     exposedMethods: ['foo', 'bar'],\n@@ -224,8 +124,13 @@ it('does not let make calls after the farm is ended', () => {\n \n   farm.end();\n \n-  expect(() => farm.foo()).toThrow();\n-  expect(() => farm.bar()).toThrow();\n+  expect(farm._workerPool.end).toHaveBeenCalledTimes(1);\n+  expect(() => farm.foo()).toThrow(\n+    'Farm is ended, no more calls can be done to it',\n+  );\n+  expect(() => farm.bar()).toThrow(\n+    'Farm is ended, no more calls can be done to it',\n+  );\n });\n \n it('does not let end the farm after it is ended', () => {\n@@ -235,189 +140,33 @@ it('does not let end the farm after it is ended', () => {\n   });\n \n   farm.end();\n-\n-  expect(() => farm.end()).toThrow();\n-});\n-\n-it('calls \"computeWorkerKey\" for each of the calls', () => {\n-  const computeWorkerKey = jest.fn();\n-  const farm = new Farm('/tmp/baz.js', {\n-    computeWorkerKey,\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 3,\n-  });\n-\n-  farm.foo('car', 'plane');\n-\n-  expect(computeWorkerKey.mock.calls[0]).toEqual(['foo', 'car', 'plane']);\n+  expect(farm._workerPool.end).toHaveBeenCalledTimes(1);\n+  expect(() => farm.end()).toThrow(\n+    'Farm is ended, no more calls can be done to it',\n+  );\n+  expect(() => farm.end()).toThrow(\n+    'Farm is ended, no more calls can be done to it',\n+  );\n+  expect(farm._workerPool.end).toHaveBeenCalledTimes(1);\n });\n \n-it('returns the result if the call worked', async () => {\n+it('calls doWork', async () => {\n   const farm = new Farm('/tmp/baz.js', {\n     exposedMethods: ['foo', 'bar'],\n     numWorkers: 1,\n   });\n \n   const promise = farm.foo('car', 'plane');\n \n-  workerReply(0, null, 34);\n-  expect(await promise).toEqual(34);\n+  expect(await promise).toEqual(42);\n });\n \n-it('throws if the call failed', async () => {\n+it('calls getStderr and getStdout from worker', async () => {\n   const farm = new Farm('/tmp/baz.js', {\n     exposedMethods: ['foo', 'bar'],\n     numWorkers: 1,\n   });\n \n-  const promise = farm.foo('car', 'plane');\n-  let error = null;\n-\n-  workerReply(0, new TypeError('Massively broken'));\n-\n-  try {\n-    await promise;\n-  } catch (err) {\n-    error = err;\n-  }\n-\n-  expect(error).not.toBe(null);\n-  expect(error).toBeInstanceOf(TypeError);\n-});\n-\n-it('sends non-sticked tasks to all workers', () => {\n-  const farm = new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 3,\n-  });\n-\n-  farm.foo('car', 'plane');\n-\n-  expect(mockWorkers[0].send).toHaveBeenCalledTimes(1);\n-  expect(mockWorkers[1].send).toHaveBeenCalledTimes(1);\n-  expect(mockWorkers[2].send).toHaveBeenCalledTimes(1);\n-});\n-\n-it('sends first-time sticked tasks to all workers', () => {\n-  const farm = new Farm('/tmp/baz.js', {\n-    computeWorkerKey: () => '1234567890abcdef',\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 3,\n-  });\n-\n-  farm.foo('car', 'plane');\n-\n-  expect(mockWorkers[0].send).toHaveBeenCalledTimes(1);\n-  expect(mockWorkers[1].send).toHaveBeenCalledTimes(1);\n-  expect(mockWorkers[2].send).toHaveBeenCalledTimes(1);\n-});\n-\n-it('checks that once a sticked task finishes, next time is sent to that worker', async () => {\n-  const farm = new Farm('/tmp/baz.js', {\n-    computeWorkerKey: () => '1234567890abcdef',\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 3,\n-  });\n-\n-  // Worker 1 successfully replies with \"17\" as a result.\n-  farm.foo('car', 'plane');\n-  workerReply(1, null, 17);\n-\n-  // Note that the stickiness is not created by the method name or the arguments\n-  // it is solely controlled by the provided \"computeWorkerKey\" method, which in\n-  // the test example always returns the same key, so all calls should be\n-  // redirected to worker 1 (which is the one that resolved the first call).\n-  farm.bar();\n-\n-  // The first time, a call with a \"1234567890abcdef\" hash had never been done\n-  // earlier (\"foo\" call), so it got queued to all workers. Later, since the one\n-  // that resolved the call was the one in position 1, all subsequent calls are\n-  // only redirected to that worker.\n-  expect(mockWorkers[0].send).toHaveBeenCalledTimes(1); // Only \"foo\".\n-  expect(mockWorkers[1].send).toHaveBeenCalledTimes(2); // \"foo\" + \"bar\".\n-  expect(mockWorkers[2].send).toHaveBeenCalledTimes(1); // Only \"foo\".\n-});\n-\n-it('checks that even before a sticked task finishes, next time is sent to that worker', async () => {\n-  const farm = new Farm('/tmp/baz.js', {\n-    computeWorkerKey: () => '1234567890abcdef',\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 3,\n-  });\n-\n-  // Call \"foo\". Not that the worker is sending a start response synchronously.\n-  farm.foo('car', 'plane');\n-  workerReplyStart(1);\n-\n-  // Call \"bar\". Not that the worker is sending a start response synchronously.\n-  farm.bar();\n-  workerReplyStart(1);\n-\n-  // The first time, a call with a \"1234567890abcdef\" hash had never been done\n-  // earlier (\"foo\" call), so it got queued to all workers. Later, since the one\n-  // that resolved the call was the one in position 1, all subsequent calls are\n-  // only redirected to that worker.\n-  expect(mockWorkers[0].send).toHaveBeenCalledTimes(1); // Only \"foo\".\n-  expect(mockWorkers[1].send).toHaveBeenCalledTimes(2); // \"foo\" + \"bar\".\n-  expect(mockWorkers[2].send).toHaveBeenCalledTimes(1); // Only \"foo\".\n-});\n-\n-it('checks that once a non-sticked task finishes, next time is sent to all workers', async () => {\n-  // Note there is no \"computeWorkerKey\".\n-  const farm = new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 3,\n-  });\n-\n-  // Worker 1 successfully replies with \"17\" as a result.\n-  const promise = farm.foo('car', 'plane');\n-  workerReply(1, null, 17);\n-  await promise;\n-\n-  farm.bar();\n-\n-  // Since \"computeWorkerKey\" does not return anything, new jobs are sent again to\n-  // all existing workers.\n-  expect(mockWorkers[0].send).toHaveBeenCalledTimes(2);\n-  expect(mockWorkers[1].send).toHaveBeenCalledTimes(2);\n-  expect(mockWorkers[2].send).toHaveBeenCalledTimes(2);\n-});\n-\n-it('rotates workers when they are idling', async () => {\n-  let order;\n-  let promise;\n-\n-  // Note there is no \"computeWorkerKey\".\n-  const farm = new Farm('/tmp/baz.js', {\n-    exposedMethods: ['foo', 'bar'],\n-    numWorkers: 3,\n-  });\n-\n-  [0, 1, 2].forEach(i => {\n-    mockWorkers[i].send.mockReset();\n-    mockWorkers[i].send.mockImplementation(() => order.push(i));\n-  });\n-\n-  // First time, the order is 0, 1, 2.\n-  order = [];\n-  promise = farm.foo('car', 'plane');\n-  expect(order).toEqual([0, 1, 2]);\n-\n-  // Worker 1 successfully replies with \"17\" as a result.\n-  workerReply(1, null, 17);\n-  await promise;\n-\n-  [0, 1, 2].forEach(i => {\n-    mockWorkers[i].send.mockReset();\n-    mockWorkers[i].send.mockImplementation(() => order.push(i));\n-  });\n-\n-  // Now, the order is 1, 2, 0 (shifted one).\n-  order = [];\n-  promise = farm.foo('car', 'plane');\n-  expect(order).toEqual([1, 2, 0]);\n-\n-  // Worker 1 successfully replies again.\n-  workerReply(1, null, 17);\n-  await promise;\n+  expect(farm.getStderr()('err')).toEqual('err');\n+  expect(farm.getStdout()('out')).toEqual('out');\n });"},{"sha":"51e565dfd1019db2adc7388a741f7bf1f6ca3daa","filename":"packages/jest-worker/src/__tests__/process-integration.test.js","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fprocess-integration.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fprocess-integration.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fprocess-integration.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,157 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+import EventEmitter from 'events';\n+\n+import {CHILD_MESSAGE_CALL, PARENT_MESSAGE_OK} from '../types';\n+\n+let Farm;\n+let mockForkedProcesses;\n+\n+function mockBuildForkedProcess() {\n+  const mockChild = new EventEmitter();\n+\n+  mockChild.send = jest.fn();\n+\n+  return mockChild;\n+}\n+\n+function replySuccess(i, result) {\n+  mockForkedProcesses[i].emit('message', [PARENT_MESSAGE_OK, result]);\n+}\n+\n+function assertCallsToChild(childNum, ...calls) {\n+  expect(mockForkedProcesses[childNum].send).toHaveBeenCalledTimes(\n+    calls.length + 1,\n+  );\n+\n+  calls.forEach(([methodName, ...args], numCall) => {\n+    expect(\n+      mockForkedProcesses[childNum].send.mock.calls[numCall + 1][0],\n+    ).toEqual([CHILD_MESSAGE_CALL, true, methodName, args]);\n+  });\n+}\n+\n+jest.mock('worker_threads', () => {\n+  throw Error('Unsupported');\n+});\n+\n+describe('Jest Worker Integration', () => {\n+  beforeEach(() => {\n+    mockForkedProcesses = [];\n+\n+    jest.mock('child_process', () => ({\n+      fork() {\n+        const forkedProcess = mockBuildForkedProcess();\n+\n+        mockForkedProcesses.push(forkedProcess);\n+\n+        return forkedProcess;\n+      },\n+    }));\n+\n+    Farm = require('../index').default;\n+  });\n+\n+  afterEach(() => {\n+    jest.resetModules();\n+  });\n+\n+  it('calls a single method from the worker', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+    });\n+\n+    const promise = farm.foo();\n+\n+    replySuccess(0, 42);\n+\n+    expect(await promise).toBe(42);\n+  });\n+\n+  it('distributes sequential calls across child processes', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+    });\n+\n+    // The first call will go to the first child process.\n+    const promise0 = farm.foo('param-0');\n+\n+    assertCallsToChild(0, ['foo', 'param-0']);\n+    replySuccess(0, 'worker-0');\n+    expect(await promise0).toBe('worker-0');\n+\n+    // The second call will go to the second child process.\n+    const promise1 = farm.foo(1);\n+\n+    assertCallsToChild(1, ['foo', 1]);\n+    replySuccess(1, 'worker-1');\n+    expect(await promise1).toBe('worker-1');\n+  });\n+\n+  it('distributes concurrent calls across child processes', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+    });\n+\n+    // Do 3 calls to the farm in parallel.\n+    const promise0 = farm.foo('param-0');\n+    const promise1 = farm.foo('param-1');\n+    const promise2 = farm.foo('param-2');\n+\n+    // Check that the method calls are sent to each separate child process.\n+    assertCallsToChild(0, ['foo', 'param-0']);\n+    assertCallsToChild(1, ['foo', 'param-1']);\n+    assertCallsToChild(2, ['foo', 'param-2']);\n+\n+    // Send different responses from each child.\n+    replySuccess(0, 'worker-0');\n+    replySuccess(1, 'worker-1');\n+    replySuccess(2, 'worker-2');\n+\n+    // Check\n+    expect(await promise0).toBe('worker-0');\n+    expect(await promise1).toBe('worker-1');\n+    expect(await promise2).toBe('worker-2');\n+  });\n+\n+  it('sticks parallel calls to children', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      computeWorkerKey: () => '1234567890abcdef',\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+    });\n+\n+    // Do 3 calls to the farm in parallel.\n+    const promise0 = farm.foo('param-0');\n+    const promise1 = farm.foo('param-1');\n+    const promise2 = farm.foo('param-2');\n+\n+    // Send different responses for each call (from the same child).\n+    replySuccess(0, 'worker-0');\n+    replySuccess(0, 'worker-1');\n+    replySuccess(0, 'worker-2');\n+\n+    // Check that all the calls have been received by the same child).\n+    assertCallsToChild(\n+      0,\n+      ['foo', 'param-0'],\n+      ['foo', 'param-1'],\n+      ['foo', 'param-2'],\n+    );\n+\n+    // Check that responses are correct.\n+    expect(await promise0).toBe('worker-0');\n+    expect(await promise1).toBe('worker-1');\n+    expect(await promise2).toBe('worker-2');\n+  });\n+});"},{"sha":"9c701c362fa1797458e28183e72a7d42518daf07","filename":"packages/jest-worker/src/__tests__/thread-integration.test.js","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fthread-integration.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fthread-integration.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fthread-integration.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+import EventEmitter from 'events';\n+\n+import {CHILD_MESSAGE_CALL, PARENT_MESSAGE_OK} from '../types';\n+\n+let Farm;\n+let mockForkedProcesses;\n+\n+function mockBuildForkedProcess() {\n+  const mockChild = new EventEmitter();\n+\n+  mockChild.postMessage = jest.fn();\n+\n+  return mockChild;\n+}\n+\n+function replySuccess(i, result) {\n+  mockForkedProcesses[i].emit('message', [PARENT_MESSAGE_OK, result]);\n+}\n+\n+function assertCallsToChild(childNum, ...calls) {\n+  expect(mockForkedProcesses[childNum].postMessage).toHaveBeenCalledTimes(\n+    calls.length + 1,\n+  );\n+\n+  calls.forEach(([methodName, ...args], numCall) => {\n+    expect(\n+      mockForkedProcesses[childNum].postMessage.mock.calls[numCall + 1][0],\n+    ).toEqual([CHILD_MESSAGE_CALL, true, methodName, args]);\n+  });\n+}\n+\n+describe('Jest Worker Process Integration', () => {\n+  beforeEach(() => {\n+    mockForkedProcesses = [];\n+\n+    jest.mock('worker_threads', () => {\n+      const fakeClass = jest.fn(() => {\n+        const forkedProcess = mockBuildForkedProcess();\n+\n+        mockForkedProcesses.push(forkedProcess);\n+\n+        return forkedProcess;\n+      });\n+\n+      return {\n+        Worker: fakeClass,\n+        __esModule: true,\n+      };\n+    });\n+\n+    Farm = require('../index').default;\n+  });\n+\n+  afterEach(() => {\n+    jest.resetModules();\n+  });\n+\n+  it('calls a single method from the worker', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+    });\n+\n+    const promise = farm.foo();\n+\n+    replySuccess(0, 42);\n+\n+    expect(await promise).toBe(42);\n+  });\n+\n+  it('distributes sequential calls across child processes', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+    });\n+\n+    // The first call will go to the first child process.\n+    const promise0 = farm.foo('param-0');\n+\n+    assertCallsToChild(0, ['foo', 'param-0']);\n+    replySuccess(0, 'worker-0');\n+    expect(await promise0).toBe('worker-0');\n+\n+    // The second call will go to the second child process.\n+    const promise1 = farm.foo(1);\n+\n+    assertCallsToChild(1, ['foo', 1]);\n+    replySuccess(1, 'worker-1');\n+    expect(await promise1).toBe('worker-1');\n+  });\n+\n+  it('distributes concurrent calls across child processes', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+    });\n+\n+    // Do 3 calls to the farm in parallel.\n+    const promise0 = farm.foo('param-0');\n+    const promise1 = farm.foo('param-1');\n+    const promise2 = farm.foo('param-2');\n+\n+    // Check that the method calls are sent to each separate child process.\n+    assertCallsToChild(0, ['foo', 'param-0']);\n+    assertCallsToChild(1, ['foo', 'param-1']);\n+    assertCallsToChild(2, ['foo', 'param-2']);\n+\n+    // Send different responses from each child.\n+    replySuccess(0, 'worker-0');\n+    replySuccess(1, 'worker-1');\n+    replySuccess(2, 'worker-2');\n+\n+    // Check\n+    expect(await promise0).toBe('worker-0');\n+    expect(await promise1).toBe('worker-1');\n+    expect(await promise2).toBe('worker-2');\n+  });\n+\n+  it('sticks parallel calls to children', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      computeWorkerKey: () => '1234567890abcdef',\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+    });\n+\n+    // Do 3 calls to the farm in parallel.\n+    const promise0 = farm.foo('param-0');\n+    const promise1 = farm.foo('param-1');\n+    const promise2 = farm.foo('param-2');\n+\n+    // Send different responses for each call (from the same child).\n+    replySuccess(0, 'worker-0');\n+    replySuccess(0, 'worker-1');\n+    replySuccess(0, 'worker-2');\n+\n+    // Check that all the calls have been received by the same child).\n+    assertCallsToChild(\n+      0,\n+      ['foo', 'param-0'],\n+      ['foo', 'param-1'],\n+      ['foo', 'param-2'],\n+    );\n+\n+    // Check that responses are correct.\n+    expect(await promise0).toBe('worker-0');\n+    expect(await promise1).toBe('worker-1');\n+    expect(await promise2).toBe('worker-2');\n+  });\n+});"},{"sha":"56d9e2dea48e092d9a32f2027673bad374a1a77f","filename":"packages/jest-worker/src/base/BaseWorkerPool.js","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fbase%2FBaseWorkerPool.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fbase%2FBaseWorkerPool.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fbase%2FBaseWorkerPool.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,101 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import mergeStream from 'merge-stream';\n+import path from 'path';\n+\n+import {CHILD_MESSAGE_END} from '../types';\n+\n+import type {Readable} from 'stream';\n+import type {WorkerPoolOptions, WorkerOptions, WorkerInterface} from '../types';\n+\n+/* istanbul ignore next */\n+const emptyMethod = () => {};\n+\n+export default class BaseWorkerPool {\n+  _stderr: Readable;\n+  _stdout: Readable;\n+  _options: WorkerPoolOptions;\n+  _workers: Array<WorkerInterface>;\n+\n+  constructor(workerPath: string, options: WorkerPoolOptions) {\n+    this._options = options;\n+    this._workers = new Array(options.numWorkers);\n+\n+    if (!path.isAbsolute(workerPath)) {\n+      workerPath = require.resolve(workerPath);\n+    }\n+\n+    const stdout = mergeStream();\n+    const stderr = mergeStream();\n+\n+    const {forkOptions, maxRetries, setupArgs} = options;\n+\n+    for (let i = 0; i < options.numWorkers; i++) {\n+      const workerOptions: WorkerOptions = {\n+        forkOptions,\n+        maxRetries,\n+        setupArgs,\n+        workerId: i,\n+        workerPath,\n+      };\n+\n+      const worker = this.createWorker(workerOptions);\n+      const workerStdout = worker.getStdout();\n+      const workerStderr = worker.getStderr();\n+\n+      if (workerStdout) {\n+        stdout.add(workerStdout);\n+      }\n+\n+      if (workerStderr) {\n+        stderr.add(workerStderr);\n+      }\n+\n+      this._workers[i] = worker;\n+    }\n+\n+    this._stdout = stdout;\n+    this._stderr = stderr;\n+  }\n+\n+  getStderr(): Readable {\n+    return this._stderr;\n+  }\n+\n+  getStdout(): Readable {\n+    return this._stdout;\n+  }\n+\n+  getWorkers(): Array<WorkerInterface> {\n+    return this._workers;\n+  }\n+\n+  getWorkerById(workerId: number): WorkerInterface {\n+    return this._workers[workerId];\n+  }\n+\n+  createWorker(workerOptions: WorkerOptions): WorkerInterface {\n+    throw Error('Missing method createWorker in WorkerPool');\n+  }\n+\n+  end(): void {\n+    // We do not cache the request object here. If so, it would only be only\n+    // processed by one of the workers, and we want them all to close.\n+    for (let i = 0; i < this._workers.length; i++) {\n+      this._workers[i].send(\n+        [CHILD_MESSAGE_END, false],\n+        emptyMethod,\n+        emptyMethod,\n+      );\n+    }\n+  }\n+}"},{"sha":"ca7297a58d1b1cb871c2e3e2f3fa5091fba62019","filename":"packages/jest-worker/src/base/__tests__/BaseWorkerPool.test.js","status":"added","additions":224,"deletions":0,"changes":224,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fbase%2F__tests__%2FBaseWorkerPool.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fbase%2F__tests__%2FBaseWorkerPool.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fbase%2F__tests__%2FBaseWorkerPool.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+import {CHILD_MESSAGE_END} from '../../types';\n+\n+import BaseWorkerPool from '../BaseWorkerPool';\n+\n+const Worker = jest.fn(() => ({\n+  getStderr: () => ({once() {}, pipe() {}}),\n+  getStdout: () => ({once() {}, pipe() {}}),\n+  send: jest.fn(),\n+}));\n+\n+const mockSend = jest.fn();\n+\n+class MockWorkerPool extends BaseWorkerPool {\n+  createWorker(...args) {\n+    return new Worker(...args);\n+  }\n+  send(...args) {\n+    return mockSend(...args);\n+  }\n+}\n+\n+describe('BaseWorkerPool', () => {\n+  beforeEach(() => {\n+    Worker.mockClear();\n+  });\n+\n+  it('throws error when createWorker is not defined', () => {\n+    expect(\n+      () =>\n+        new BaseWorkerPool('/tmp/baz.js', {\n+          forkOptions: {execArgv: []},\n+          maxRetries: 6,\n+          numWorkers: 4,\n+          setupArgs: [],\n+        }),\n+    ).toThrow('Missing method createWorker in WorkerPool');\n+  });\n+\n+  it('creates and exposes n workers', () => {\n+    const pool = new MockWorkerPool('/tmp/baz.js', {\n+      forkOptions: {execArgv: []},\n+      maxRetries: 6,\n+      numWorkers: 4,\n+      setupArgs: [],\n+    });\n+\n+    expect(pool.getWorkers()).toHaveLength(4);\n+    expect(pool.getWorkerById(0)).toBeDefined();\n+    expect(pool.getWorkerById(1)).toBeDefined();\n+    expect(pool.getWorkerById(2)).toBeDefined();\n+    expect(pool.getWorkerById(3)).toBeDefined();\n+  });\n+\n+  it('ends all workers', () => {\n+    const pool = new MockWorkerPool('/tmp/baz.js', {\n+      forkOptions: {execArgv: []},\n+      maxRetries: 6,\n+      numWorkers: 4,\n+      setupArgs: [],\n+    });\n+\n+    const workers = pool.getWorkers();\n+    pool.end();\n+\n+    const endMessage = [CHILD_MESSAGE_END, false];\n+    expect(workers[0].send.mock.calls[0][0]).toEqual(endMessage);\n+    expect(workers[1].send.mock.calls[0][0]).toEqual(endMessage);\n+    expect(workers[2].send.mock.calls[0][0]).toEqual(endMessage);\n+    expect(workers[3].send.mock.calls[0][0]).toEqual(endMessage);\n+  });\n+\n+  it('creates and expoeses n workers', () => {\n+    const pool = new MockWorkerPool('/tmp/baz.js', {\n+      forkOptions: {execArgv: []},\n+      maxRetries: 6,\n+      numWorkers: 4,\n+      setupArgs: [],\n+    });\n+\n+    expect(pool.getWorkers()).toHaveLength(4);\n+    expect(pool.getWorkerById(0)).toBeDefined();\n+    expect(pool.getWorkerById(1)).toBeDefined();\n+    expect(pool.getWorkerById(2)).toBeDefined();\n+    expect(pool.getWorkerById(3)).toBeDefined();\n+  });\n+\n+  it('creates workers with the right options', () => {\n+    // eslint-disable-next-line no-new\n+    new MockWorkerPool('/tmp/baz.js', {\n+      forkOptions: {execArgv: []},\n+      maxRetries: 6,\n+      numWorkers: 4,\n+      setupArgs: [{foo: 'bar'}],\n+    });\n+\n+    expect(Worker).toHaveBeenCalledTimes(4);\n+    expect(Worker).toHaveBeenNthCalledWith(1, {\n+      forkOptions: {execArgv: []},\n+      maxRetries: 6,\n+      setupArgs: [{foo: 'bar'}],\n+      workerId: 0,\n+      workerPath: '/tmp/baz.js',\n+    });\n+    expect(Worker).toHaveBeenNthCalledWith(2, {\n+      forkOptions: {execArgv: []},\n+      maxRetries: 6,\n+      setupArgs: [{foo: 'bar'}],\n+      workerId: 1,\n+      workerPath: '/tmp/baz.js',\n+    });\n+    expect(Worker).toHaveBeenNthCalledWith(3, {\n+      forkOptions: {execArgv: []},\n+      maxRetries: 6,\n+      setupArgs: [{foo: 'bar'}],\n+      workerId: 2,\n+      workerPath: '/tmp/baz.js',\n+    });\n+    expect(Worker).toHaveBeenNthCalledWith(4, {\n+      forkOptions: {execArgv: []},\n+      maxRetries: 6,\n+      setupArgs: [{foo: 'bar'}],\n+      workerId: 3,\n+      workerPath: '/tmp/baz.js',\n+    });\n+  });\n+\n+  it('makes a non-existing relative worker throw', () => {\n+    expect(() => {\n+      // eslint-disable-next-line no-new\n+      new MockWorkerPool('./baz.js', {\n+        exposedMethods: [],\n+        numWorkers: 1,\n+      });\n+    }).toThrow();\n+  });\n+\n+  it('create multiple workers with unique worker ids', () => {\n+    // eslint-disable-next-line no-new\n+    new MockWorkerPool('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      forkOptions: {execArgv: []},\n+      maxRetries: 6,\n+      numWorkers: 3,\n+    });\n+\n+    expect(Worker).toHaveBeenCalledTimes(3);\n+    expect(Worker.mock.calls[0][0].workerId).toEqual(0);\n+    expect(Worker.mock.calls[1][0].workerId).toEqual(1);\n+    expect(Worker.mock.calls[2][0].workerId).toEqual(2);\n+  });\n+\n+  it('aggregates all stdouts and stderrs from all workers', () => {\n+    const out = [];\n+    const err = [];\n+\n+    Worker.mockImplementation(() => ({\n+      getStderr: () => ({\n+        once() {},\n+        pipe(errStream) {\n+          err.push(errStream);\n+        },\n+      }),\n+      getStdout: () => ({\n+        once() {},\n+        pipe(outStream) {\n+          out.push(outStream);\n+        },\n+      }),\n+    }));\n+\n+    const farm = new MockWorkerPool('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 2,\n+    });\n+\n+    expect(out.length).toBe(2);\n+    expect(err.length).toBe(2);\n+\n+    const stdout = jest.fn();\n+    const stderr = jest.fn();\n+\n+    farm.getStdout().on('data', stdout);\n+    farm.getStderr().on('data', stderr);\n+\n+    out[0].write(Buffer.from('hello'));\n+    out[1].write(Buffer.from('bye'));\n+    err[1].write(Buffer.from('house'));\n+    err[0].write(Buffer.from('tree'));\n+\n+    expect(stdout.mock.calls[0][0].toString()).toBe('hello');\n+    expect(stdout.mock.calls[1][0].toString()).toBe('bye');\n+    expect(stderr.mock.calls[0][0].toString()).toBe('house');\n+    expect(stderr.mock.calls[1][0].toString()).toBe('tree');\n+  });\n+\n+  it('works when stdout and stderr are not piped to the parent', () => {\n+    Worker.mockImplementation(() => ({\n+      getStderr: () => null,\n+      getStdout: () => null,\n+      send: () => null,\n+    }));\n+\n+    const farm = new MockWorkerPool('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      forkOptions: {\n+        silent: false,\n+        stdio: 'inherit',\n+      },\n+      numWorkers: 2,\n+    });\n+\n+    expect(() => farm.send()).not.toThrow();\n+    expect(() => farm.send()).not.toThrow();\n+  });\n+});"},{"sha":"fbaff49e7b02225c7db682d5efa4f9fc89a175a0","filename":"packages/jest-worker/src/index.js","status":"modified","additions":65,"deletions":137,"changes":202,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Findex.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -9,18 +9,38 @@\n \n 'use strict';\n \n-import mergeStream from 'merge-stream';\n import os from 'os';\n-import path from 'path';\n-\n-import type {FarmOptions} from './types';\n+import WorkerPool from './WorkerPool';\n+import Farm from './Farm';\n+import type {\n+  WorkerPoolInterface,\n+  WorkerPoolOptions,\n+  FarmOptions,\n+} from './types';\n import type {Readable} from 'stream';\n \n-import {CHILD_MESSAGE_CALL, CHILD_MESSAGE_END} from './types';\n-import Worker from './Worker';\n+function getExposedMethods(\n+  workerPath: string,\n+  options: FarmOptions,\n+): $ReadOnlyArray<string> {\n+  let exposedMethods = options.exposedMethods;\n+\n+  // If no methods list is given, try getting it by auto-requiring the module.\n+  if (!exposedMethods) {\n+    // $FlowFixMe: This has to be a dynamic require.\n+    const module: Function | Object = require(workerPath);\n+\n+    exposedMethods = Object.keys(module).filter(\n+      name => typeof module[name] === 'function',\n+    );\n+\n+    if (typeof module === 'function') {\n+      exposedMethods.push('default');\n+    }\n+  }\n \n-/* istanbul ignore next */\n-const emptyMethod = () => {};\n+  return exposedMethods;\n+}\n \n /**\n  * The Jest farm (publicly called \"Worker\") is a class that allows you to queue\n@@ -29,7 +49,7 @@ const emptyMethod = () => {};\n  * of the child processes, and bridged to the main process.\n  *\n  * Bridged methods are specified by using the \"exposedMethods\" property of the\n- * options \"object\". This is an array of strings, where each of them corresponds\n+ * \"options\" object. This is an array of strings, where each of them corresponds\n  * to the exported name in the loaded module.\n  *\n  * You can also control the amount of workers by using the \"numWorkers\" property\n@@ -43,72 +63,41 @@ const emptyMethod = () => {};\n  *\n  *   - Sticky method: if a \"computeWorkerKey\" method is provided within the\n  *   config, the resulting string of this method will be used as a key.\n- *   Everytime this key is returned, it is guaranteed that your job will be\n+ *   Every time this key is returned, it is guaranteed that your job will be\n  *   processed by the same worker. This is specially useful if your workers are\n  *   caching results.\n  */\n-export default class {\n-  _stdout: Readable;\n-  _stderr: Readable;\n+export default class JestWorker {\n   _ending: boolean;\n-  _cacheKeys: {[string]: Worker, __proto__: null};\n+  _farm: Farm;\n   _options: FarmOptions;\n-  _workers: Array<Worker>;\n-  _offset: number;\n-\n-  constructor(workerPath: string, options?: FarmOptions = {}) {\n-    const numWorkers = options.numWorkers || Math.max(os.cpus().length - 1, 1);\n-    const workers = new Array(numWorkers);\n-    const stdout = mergeStream();\n-    const stderr = mergeStream();\n+  _workerPool: WorkerPoolInterface;\n \n-    if (!path.isAbsolute(workerPath)) {\n-      workerPath = require.resolve(workerPath);\n-    }\n+  constructor(workerPath: string, options?: FarmOptions) {\n+    this._options = Object.assign({}, options);\n \n-    const sharedWorkerOptions = {\n-      forkOptions: options.forkOptions || {},\n-      maxRetries: options.maxRetries || 3,\n-      setupArgs: options.setupArgs || [],\n-      workerPath,\n+    const workerPoolOptions: WorkerPoolOptions = {\n+      forkOptions: this._options.forkOptions || {},\n+      maxRetries: this._options.maxRetries || 3,\n+      numWorkers: this._options.numWorkers || Math.max(os.cpus().length - 1, 1),\n+      setupArgs: this._options.setupArgs || [],\n     };\n \n-    for (let i = 0; i < numWorkers; i++) {\n-      const workerOptions = Object.assign({}, sharedWorkerOptions, {\n-        workerId: i + 1,\n-      });\n-      const worker = new Worker(workerOptions);\n-      const workerStdout = worker.getStdout();\n-      const workerStderr = worker.getStderr();\n+    this._workerPool = this._options.WorkerPool\n+      ? new this._options.WorkerPool(workerPath, workerPoolOptions)\n+      : new WorkerPool(workerPath, workerPoolOptions);\n \n-      if (workerStdout) {\n-        stdout.add(workerStdout);\n-      }\n-\n-      if (workerStderr) {\n-        stderr.add(workerStderr);\n-      }\n+    this._farm = new Farm(\n+      workerPoolOptions.numWorkers,\n+      this._workerPool.send.bind(this._workerPool),\n+      this._options.computeWorkerKey,\n+    );\n \n-      workers[i] = worker;\n-    }\n-\n-    let exposedMethods = options.exposedMethods;\n-\n-    // If no methods list is given, try getting it by auto-requiring the module.\n-    if (!exposedMethods) {\n-      // $FlowFixMe: This has to be a dynamic require.\n-      const child = require(workerPath);\n-\n-      exposedMethods = Object.keys(child).filter(\n-        name => typeof child[name] === 'function',\n-      );\n-\n-      if (typeof child === 'function') {\n-        exposedMethods.push('default');\n-      }\n-    }\n+    this._bindExposedWorkerMethods(workerPath, this._options);\n+  }\n \n-    exposedMethods.forEach(name => {\n+  _bindExposedWorkerMethods(workerPath: string, options: FarmOptions): void {\n+    getExposedMethods(workerPath, options).forEach(name => {\n       if (name.startsWith('_')) {\n         return;\n       }\n@@ -118,95 +107,34 @@ export default class {\n       }\n \n       // $FlowFixMe: dynamic extension of the class instance is expected.\n-      this[name] = this._makeCall.bind(this, name);\n+      this[name] = this._callFunctionWithArgs.bind(this, name);\n     });\n-\n-    this._stdout = stdout;\n-    this._stderr = stderr;\n-    this._ending = false;\n-    this._cacheKeys = Object.create(null);\n-    this._options = options;\n-    this._workers = workers;\n-    this._offset = 0;\n   }\n \n-  getStdout(): Readable {\n-    return this._stdout;\n-  }\n-\n-  getStderr(): Readable {\n-    return this._stderr;\n-  }\n-\n-  end() {\n+  // eslint-disable-next-line no-unclear-flowtypes\n+  _callFunctionWithArgs(method: string, ...args: Array<any>): Promise<any> {\n     if (this._ending) {\n       throw new Error('Farm is ended, no more calls can be done to it');\n     }\n \n-    const workers = this._workers;\n+    return this._farm.doWork(method, ...args);\n+  }\n \n-    // We do not cache the request object here. If so, it would only be only\n-    // processed by one of the workers, and we want them all to close.\n-    for (let i = 0; i < workers.length; i++) {\n-      workers[i].send([CHILD_MESSAGE_END, false], emptyMethod, emptyMethod);\n-    }\n+  getStderr(): Readable {\n+    return this._workerPool.getStderr();\n+  }\n \n-    this._ending = true;\n+  getStdout(): Readable {\n+    return this._workerPool.getStdout();\n   }\n \n-  // eslint-disable-next-line no-unclear-flowtypes\n-  _makeCall(method: string, ...args: Array<any>): Promise<any> {\n+  end(): void {\n     if (this._ending) {\n       throw new Error('Farm is ended, no more calls can be done to it');\n     }\n \n-    return new Promise((resolve, reject) => {\n-      const {computeWorkerKey} = this._options;\n-      const workers = this._workers;\n-      const length = workers.length;\n-      const cacheKeys = this._cacheKeys;\n-      const request = [CHILD_MESSAGE_CALL, false, method, args];\n-\n-      let worker = null;\n-      let hash = null;\n-\n-      if (computeWorkerKey) {\n-        hash = computeWorkerKey.apply(this, [method].concat(args));\n-        worker = hash == null ? null : cacheKeys[hash];\n-      }\n+    this._workerPool.end();\n \n-      // Do not use a fat arrow since we need the \"this\" value, which points to\n-      // the worker that executed the call.\n-      const onProcessStart = worker => {\n-        if (hash != null) {\n-          cacheKeys[hash] = worker;\n-        }\n-      };\n-\n-      const onProcessEnd = (error, result) => {\n-        if (error) {\n-          reject(error);\n-        } else {\n-          resolve(result);\n-        }\n-      };\n-\n-      // If a worker is pre-selected, use it...\n-      if (worker) {\n-        worker.send(request, onProcessStart, onProcessEnd);\n-        return;\n-      }\n-\n-      // ... otherwise use all workers, so the first one available will pick it.\n-      for (let i = 0; i < length; i++) {\n-        workers[(i + this._offset) % length].send(\n-          request,\n-          onProcessStart,\n-          onProcessEnd,\n-        );\n-      }\n-\n-      this._offset++;\n-    });\n+    this._ending = true;\n   }\n }"},{"sha":"30f4e6254dfee9e803c38b2c2a7455c962dee473","filename":"packages/jest-worker/src/types.js","status":"modified","additions":47,"deletions":7,"changes":54,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Ftypes.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Ftypes.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Ftypes.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -29,7 +29,8 @@ export type PARENT_MESSAGE_ERROR =\n \n // Option objects.\n \n-import type Worker from './Worker';\n+import type {Readable} from 'stream';\n+const EventEmitter = require('events');\n \n export type ForkOptions = {\n   cwd?: string,\n@@ -42,15 +43,44 @@ export type ForkOptions = {\n   gid?: number,\n };\n \n+export interface WorkerPoolInterface {\n+  getStderr(): Readable;\n+  getStdout(): Readable;\n+  getWorkers(): Array<WorkerInterface>;\n+  createWorker(WorkerOptions): WorkerInterface;\n+  send(number, ChildMessage, Function, Function): void;\n+  end(): void;\n+}\n+\n+export interface WorkerInterface {\n+  send(ChildMessage, Function, Function): void;\n+  getWorkerId(): number;\n+  getStderr(): Readable;\n+  getStdout(): Readable;\n+  onExit(number): void;\n+  onMessage(any): void;\n+}\n+\n export type FarmOptions = {\n   computeWorkerKey?: (string, ...Array<any>) => ?string,\n   exposedMethods?: $ReadOnlyArray<string>,\n   forkOptions?: ForkOptions,\n   setupArgs?: Array<mixed>,\n   maxRetries?: number,\n   numWorkers?: number,\n+  WorkerPool?: (\n+    workerPath: string,\n+    options?: WorkerPoolOptions,\n+  ) => WorkerPoolInterface,\n };\n \n+export type WorkerPoolOptions = {|\n+  setupArgs: Array<mixed>,\n+  forkOptions: ForkOptions,\n+  maxRetries: number,\n+  numWorkers: number,\n+|};\n+\n export type WorkerOptions = {|\n   forkOptions: ForkOptions,\n   setupArgs: Array<mixed>,\n@@ -61,11 +91,22 @@ export type WorkerOptions = {|\n \n // Messages passed from the parent to the children.\n \n+export type MessagePort = {\n+  ...typeof EventEmitter,\n+  postMessage(any): void,\n+};\n+\n+export type MessageChannel = {\n+  port1: MessagePort,\n+  port2: MessagePort,\n+};\n+\n export type ChildMessageInitialize = [\n   typeof CHILD_MESSAGE_INITIALIZE, // type\n   boolean, // processed\n   string, // file\n   ?Array<mixed>, // setupArgs\n+  ?MessagePort, // MessagePort\n ];\n \n export type ChildMessageCall = [\n@@ -103,13 +144,12 @@ export type ParentMessageError = [\n export type ParentMessage = ParentMessageOk | ParentMessageError;\n \n // Queue types.\n-\n-export type OnProcessStart = Worker => void;\n-export type OnProcessEnd = (?Error, ?any) => void;\n+export type OnStart = WorkerInterface => void;\n+export type OnEnd = (?Error, ?any) => void;\n \n export type QueueChildMessage = {|\n   request: ChildMessage,\n-  onProcessStart: OnProcessStart,\n-  onProcessEnd: OnProcessEnd,\n-  next: ?QueueChildMessage,\n+  onStart: OnStart,\n+  onEnd: OnEnd,\n+  next?: QueueChildMessage,\n |};"},{"sha":"ddff2ad348b3f6ed744a45abd77a0d7360b90145","filename":"packages/jest-worker/src/workers/ChildProcessWorker.js","status":"renamed","additions":39,"deletions":97,"changes":136,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2FChildProcessWorker.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2FChildProcessWorker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworkers%2FChildProcessWorker.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -16,18 +16,13 @@ import {\n   PARENT_MESSAGE_CLIENT_ERROR,\n   PARENT_MESSAGE_SETUP_ERROR,\n   PARENT_MESSAGE_OK,\n-} from './types';\n+  WorkerInterface,\n+} from '../types';\n \n import type {ChildProcess} from 'child_process';\n import type {Readable} from 'stream';\n \n-import type {\n-  ChildMessage,\n-  QueueChildMessage,\n-  OnProcessEnd,\n-  OnProcessStart,\n-  WorkerOptions,\n-} from './types';\n+import type {ChildMessage, OnEnd, OnStart, WorkerOptions} from '../types';\n \n /**\n  * This class wraps the child process and provides a nice interface to\n@@ -47,49 +42,20 @@ import type {\n  * field is changed to \"true\", so that other workers which might encounter the\n  * same call skip it.\n  */\n-export default class {\n-  _busy: boolean;\n+export default class ChildProcessWorker implements WorkerInterface {\n   _child: ChildProcess;\n-  _last: ?QueueChildMessage;\n   _options: WorkerOptions;\n-  _queue: ?QueueChildMessage;\n+  _onProcessEnd: OnEnd;\n   _retries: number;\n \n   constructor(options: WorkerOptions) {\n     this._options = options;\n-    this._queue = null;\n-\n-    this._initialize();\n-  }\n-\n-  getStdout(): Readable {\n-    return this._child.stdout;\n-  }\n-\n-  getStderr(): Readable {\n-    return this._child.stderr;\n+    this.initialize();\n   }\n \n-  send(\n-    request: ChildMessage,\n-    onProcessStart: OnProcessStart,\n-    onProcessEnd: OnProcessEnd,\n-  ) {\n-    const item = {next: null, onProcessEnd, onProcessStart, request};\n-\n-    if (this._last) {\n-      this._last.next = item;\n-    } else {\n-      this._queue = item;\n-    }\n-\n-    this._last = item;\n-    this._process();\n-  }\n-\n-  _initialize() {\n+  initialize() {\n     const child = childProcess.fork(\n-      require.resolve('./child'),\n+      require.resolve('./processChild'),\n       // $FlowFixMe: Flow does not work well with Object.assign.\n       Object.assign(\n         {\n@@ -105,8 +71,8 @@ export default class {\n       ),\n     );\n \n-    child.on('message', this._receive.bind(this));\n-    child.on('exit', this._exit.bind(this));\n+    child.on('message', this.onMessage.bind(this));\n+    child.on('exit', this.onExit.bind(this));\n \n     // $FlowFixMe: wrong \"ChildProcess.send\" signature.\n     child.send([\n@@ -116,17 +82,16 @@ export default class {\n       this._options.setupArgs,\n     ]);\n \n-    this._retries++;\n     this._child = child;\n-    this._busy = false;\n+    this._retries++;\n \n     // If we exceeded the amount of retries, we will emulate an error reply\n     // coming from the child. This avoids code duplication related with cleaning\n     // the queue, and scheduling the next call.\n     if (this._retries > this._options.maxRetries) {\n       const error = new Error('Call retries were exceeded');\n \n-      this._receive([\n+      this.onMessage([\n         PARENT_MESSAGE_CLIENT_ERROR,\n         error.name,\n         error.message,\n@@ -136,56 +101,12 @@ export default class {\n     }\n   }\n \n-  _process() {\n-    if (this._busy) {\n-      return;\n-    }\n-\n-    let item = this._queue;\n-\n-    // Calls in the queue might have already been processed by another worker,\n-    // so we have to skip them.\n-    while (item && item.request[1]) {\n-      item = item.next;\n-    }\n-\n-    this._queue = item;\n-\n-    if (item) {\n-      // Flag the call as processed, so that other workers know that they don't\n-      // have to process it as well.\n-      item.request[1] = true;\n-\n-      // Tell the parent that this item is starting to be processed.\n-      item.onProcessStart(this);\n-\n-      this._retries = 0;\n-      this._busy = true;\n-\n-      // $FlowFixMe: wrong \"ChildProcess.send\" signature.\n-      this._child.send(item.request);\n-    } else {\n-      this._last = item;\n-    }\n-  }\n-\n-  _receive(response: any /* Should be ParentMessage */) {\n-    const item = this._queue;\n-\n-    if (!item) {\n-      throw new TypeError('Unexpected response with an empty queue');\n-    }\n-\n-    const onProcessEnd = item.onProcessEnd;\n-\n-    this._busy = false;\n-    this._process();\n-\n+  onMessage(response: any /* Should be ParentMessage */) {\n     let error;\n \n     switch (response[0]) {\n       case PARENT_MESSAGE_OK:\n-        onProcessEnd(null, response[1]);\n+        this._onProcessEnd(null, response[1]);\n         break;\n \n       case PARENT_MESSAGE_CLIENT_ERROR:\n@@ -207,7 +128,7 @@ export default class {\n           }\n         }\n \n-        onProcessEnd(error, null);\n+        this._onProcessEnd(error, null);\n         break;\n \n       case PARENT_MESSAGE_SETUP_ERROR:\n@@ -217,17 +138,38 @@ export default class {\n         error.type = response[1];\n         error.stack = response[3];\n \n-        onProcessEnd(error, null);\n+        this._onProcessEnd(error, null);\n         break;\n \n       default:\n         throw new TypeError('Unexpected response from worker: ' + response[0]);\n     }\n   }\n \n-  _exit(exitCode: number) {\n+  onExit(exitCode: number) {\n     if (exitCode !== 0) {\n-      this._initialize();\n+      this.initialize();\n     }\n   }\n+\n+  send(request: ChildMessage, onProcessStart: OnStart, onProcessEnd: OnEnd) {\n+    onProcessStart(this);\n+    this._onProcessEnd = onProcessEnd;\n+\n+    this._retries = 0;\n+    // $FlowFixMe\n+    this._child.send(request);\n+  }\n+\n+  getWorkerId(): number {\n+    return this._options.workerId;\n+  }\n+\n+  getStdout(): Readable {\n+    return this._child.stdout;\n+  }\n+\n+  getStderr(): Readable {\n+    return this._child.stderr;\n+  }\n }","previous_filename":"packages/jest-worker/src/Worker.js"},{"sha":"67e6fbf4b58869fb1b7bf1de5de3047fd0d13413","filename":"packages/jest-worker/src/workers/NodeThreadsWorker.js","status":"added","additions":161,"deletions":0,"changes":161,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2FNodeThreadsWorker.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2FNodeThreadsWorker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworkers%2FNodeThreadsWorker.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import {\n+  CHILD_MESSAGE_INITIALIZE,\n+  PARENT_MESSAGE_OK,\n+  PARENT_MESSAGE_CLIENT_ERROR,\n+  PARENT_MESSAGE_SETUP_ERROR,\n+} from '../types';\n+\n+import path from 'path';\n+\n+import type {Readable} from 'stream';\n+import type {\n+  ChildMessage,\n+  OnEnd,\n+  OnStart,\n+  WorkerOptions,\n+  WorkerInterface,\n+} from '../types';\n+\n+// $FlowFixMe: Flow doesn't know about experimental features of Node\n+const {Worker} = require('worker_threads');\n+\n+export default class ExperimentalWorker implements WorkerInterface {\n+  _worker: Worker;\n+  _options: WorkerOptions;\n+  _onProcessEnd: OnEnd;\n+  _retries: number;\n+\n+  constructor(options: WorkerOptions) {\n+    this._options = options;\n+    this.initialize();\n+  }\n+\n+  initialize() {\n+    this._worker = new Worker(path.resolve(__dirname, './threadChild.js'), {\n+      eval: false,\n+      stderr: true,\n+      stdout: true,\n+      // $FlowFixMe: Flow does not work well with Object.assign.\n+      workerData: Object.assign(\n+        {\n+          cwd: process.cwd(),\n+          env: Object.assign({}, process.env, {\n+            JEST_WORKER_ID: this._options.workerId,\n+          }),\n+          // Suppress --debug / --inspect flags while preserving others (like --harmony).\n+          execArgv: process.execArgv.filter(v => !/^--(debug|inspect)/.test(v)),\n+          silent: true,\n+        },\n+        this._options.forkOptions,\n+      ),\n+    });\n+\n+    this._worker.on('message', this.onMessage.bind(this));\n+    this._worker.on('exit', this.onExit.bind(this));\n+\n+    this._worker.postMessage([\n+      CHILD_MESSAGE_INITIALIZE,\n+      false,\n+      this._options.workerPath,\n+      this._options.setupArgs,\n+    ]);\n+\n+    this._retries++;\n+\n+    // If we exceeded the amount of retries, we will emulate an error reply\n+    // coming from the child. This avoids code duplication related with cleaning\n+    // the queue, and scheduling the next call.\n+    if (this._retries > this._options.maxRetries) {\n+      const error = new Error('Call retries were exceeded');\n+\n+      this.onMessage([\n+        PARENT_MESSAGE_CLIENT_ERROR,\n+        error.name,\n+        error.message,\n+        error.stack,\n+        {type: 'WorkerError'},\n+      ]);\n+    }\n+  }\n+\n+  onMessage(response: any /* Should be ParentMessage */) {\n+    let error;\n+\n+    switch (response[0]) {\n+      case PARENT_MESSAGE_OK:\n+        this._onProcessEnd(null, response[1]);\n+        break;\n+\n+      case PARENT_MESSAGE_CLIENT_ERROR:\n+        error = response[4];\n+\n+        if (error != null && typeof error === 'object') {\n+          const extra = error;\n+          const NativeCtor = global[response[1]];\n+          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n+\n+          error = new Ctor(response[2]);\n+          // $FlowFixMe: adding custom properties to errors.\n+          error.type = response[1];\n+          error.stack = response[3];\n+\n+          for (const key in extra) {\n+            // $FlowFixMe: adding custom properties to errors.\n+            error[key] = extra[key];\n+          }\n+        }\n+\n+        this._onProcessEnd(error, null);\n+        break;\n+      case PARENT_MESSAGE_SETUP_ERROR:\n+        error = new Error('Error when calling setup: ' + response[2]);\n+\n+        // $FlowFixMe: adding custom properties to errors.\n+        error.type = response[1];\n+        error.stack = response[3];\n+\n+        this._onProcessEnd(error, null);\n+        break;\n+      default:\n+        throw new TypeError('Unexpected response from worker: ' + response[0]);\n+    }\n+  }\n+\n+  onExit(exitCode: number) {\n+    if (exitCode !== 0) {\n+      this.initialize();\n+    }\n+  }\n+\n+  send(request: ChildMessage, onProcessStart: OnStart, onProcessEnd: OnEnd) {\n+    onProcessStart(this);\n+    this._onProcessEnd = onProcessEnd;\n+\n+    this._retries = 0;\n+\n+    this._worker.postMessage(request);\n+  }\n+\n+  getWorkerId(): number {\n+    return this._options.workerId;\n+  }\n+\n+  getStdout(): Readable {\n+    return this._worker.stdout;\n+  }\n+\n+  getStderr(): Readable {\n+    return this._worker.stderr;\n+  }\n+}"},{"sha":"5e328bb666f006fd06e663841453226323eaf61c","filename":"packages/jest-worker/src/workers/__tests__/ChildProcessWorker.test.js","status":"renamed","additions":5,"deletions":101,"changes":106,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FChildProcessWorker.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FChildProcessWorker.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FChildProcessWorker.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -16,7 +16,7 @@ import {\n   CHILD_MESSAGE_INITIALIZE,\n   PARENT_MESSAGE_CLIENT_ERROR,\n   PARENT_MESSAGE_OK,\n-} from '../types';\n+} from '../../types';\n \n let Worker;\n let forkInterface;\n@@ -38,7 +38,7 @@ beforeEach(() => {\n     return forkInterface;\n   });\n \n-  Worker = require('../Worker').default;\n+  Worker = require('../ChildProcessWorker').default;\n });\n \n afterEach(() => {\n@@ -47,7 +47,7 @@ afterEach(() => {\n });\n \n it('passes fork options down to child_process.fork, adding the defaults', () => {\n-  const child = require.resolve('../child');\n+  const child = require.resolve('../processChild');\n \n   process.execArgv = ['--inspect', '-p'];\n \n@@ -119,6 +119,7 @@ it('stops initializing the worker after the amount of retries is exceeded', () =\n \n   expect(childProcess.fork).toHaveBeenCalledTimes(5);\n   expect(onProcessStart).toBeCalledWith(worker);\n+  expect(onProcessEnd).toHaveBeenCalledTimes(1);\n   expect(onProcessEnd.mock.calls[0][0]).toBeInstanceOf(Error);\n   expect(onProcessEnd.mock.calls[0][0].type).toBe('WorkerError');\n   expect(onProcessEnd.mock.calls[0][1]).toBe(null);\n@@ -135,30 +136,11 @@ it('provides stdout and stderr fields from the child process', () => {\n   expect(worker.getStderr()).toBe(forkInterface.stderr);\n });\n \n-it('swtiches the processed flag of a task as soon as it is processed', () => {\n-  const worker = new Worker({\n-    forkOptions: {},\n-    maxRetries: 3,\n-    workerPath: '/tmp/foo',\n-  });\n-\n-  const request1 = [CHILD_MESSAGE_CALL, false, 'foo', []];\n-  const request2 = [CHILD_MESSAGE_CALL, false, 'bar', []];\n-\n-  worker.send(request1, () => {}, () => {});\n-  worker.send(request2, () => {}, () => {});\n-\n-  // The queue is empty when it got send, so the task is processed.\n-  expect(request1[1]).toBe(true);\n-\n-  // The previous one is being processed, so that one stays as unprocessed.\n-  expect(request2[1]).toBe(false);\n-});\n-\n it('sends the task to the child process', () => {\n   const worker = new Worker({\n     forkOptions: {},\n     maxRetries: 3,\n+    setupArgs: [],\n     workerPath: '/tmp/foo',\n   });\n \n@@ -170,50 +152,6 @@ it('sends the task to the child process', () => {\n   expect(forkInterface.send.mock.calls[1][0]).toEqual(request);\n });\n \n-it('relates replies to requests, in order', () => {\n-  const worker = new Worker({\n-    forkOptions: {},\n-    maxRetries: 3,\n-    workerPath: '/tmp/foo',\n-  });\n-\n-  const onProcessStart1 = jest.fn();\n-  const onProcessEnd1 = jest.fn();\n-  const request1 = [CHILD_MESSAGE_CALL, false, 'foo', []];\n-\n-  const onProcessStart2 = jest.fn();\n-  const onProcessEnd2 = jest.fn();\n-  const request2 = [CHILD_MESSAGE_CALL, false, 'bar', []];\n-\n-  worker.send(request1, onProcessStart1, onProcessEnd1);\n-  worker.send(request2, onProcessStart2, onProcessEnd2);\n-\n-  // 2nd call waits on the queue...\n-  expect(request2[1]).toBe(false);\n-\n-  // then first call replies...\n-  forkInterface.emit('message', [PARENT_MESSAGE_OK, 44]);\n-\n-  expect(onProcessStart1.mock.calls[0][0]).toBe(worker);\n-  expect(onProcessEnd1.mock.calls[0][0]).toBeFalsy();\n-  expect(onProcessEnd1.mock.calls[0][1]).toBe(44);\n-\n-  // which causes the second call to be processed...\n-  expect(request2[1]).toBe(true);\n-\n-  // and then the second call replies...\n-  forkInterface.emit('message', [\n-    PARENT_MESSAGE_CLIENT_ERROR,\n-    'TypeError',\n-    'foo',\n-    'TypeError: foo',\n-    {},\n-  ]);\n-\n-  expect(onProcessStart2.mock.calls[0][0]).toBe(worker);\n-  expect(onProcessEnd2.mock.calls[0][0].message).toBe('foo');\n-});\n-\n it('calls the onProcessStart method synchronously if the queue is empty', () => {\n   const worker = new Worker({\n     forkOptions: {},\n@@ -240,40 +178,6 @@ it('calls the onProcessStart method synchronously if the queue is empty', () =>\n   expect(onProcessEnd).toHaveBeenCalledTimes(1);\n });\n \n-it('calls the onProcessStart method only when the request is starting to be processed', () => {\n-  const worker = new Worker({\n-    forkOptions: {},\n-    maxRetries: 3,\n-    workerPath: '/tmp/foo',\n-  });\n-\n-  const onProcessStart1 = jest.fn();\n-  const onProcessEnd1 = jest.fn();\n-\n-  const onProcessStart2 = jest.fn();\n-  const onProcessEnd2 = jest.fn();\n-\n-  worker.send(\n-    [CHILD_MESSAGE_CALL, false, 'foo', []],\n-    onProcessStart1,\n-    onProcessEnd1,\n-  );\n-  worker.send(\n-    [CHILD_MESSAGE_CALL, false, 'bar', []],\n-    onProcessStart2,\n-    onProcessEnd2,\n-  );\n-\n-  // Not called yet since the second request is on the queue.\n-  expect(onProcessStart2).not.toHaveBeenCalled();\n-\n-  // then first call replies...\n-  forkInterface.emit('message', [PARENT_MESSAGE_OK]);\n-\n-  // Now it's been called.\n-  expect(onProcessStart2).toHaveBeenCalledTimes(1);\n-});\n-\n it('creates error instances for known errors', () => {\n   const worker = new Worker({\n     forkOptions: {},","previous_filename":"packages/jest-worker/src/__tests__/Worker.test.js"},{"sha":"db4cfaa06a0b65137ff7187bc509581344dc37cd","filename":"packages/jest-worker/src/workers/__tests__/NodeThreadsWorker.test.js","status":"added","additions":282,"deletions":0,"changes":282,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FNodeThreadsWorker.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FNodeThreadsWorker.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FNodeThreadsWorker.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,282 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+/* eslint-disable no-new */\n+\n+import {\n+  CHILD_MESSAGE_CALL,\n+  CHILD_MESSAGE_INITIALIZE,\n+  PARENT_MESSAGE_OK,\n+  PARENT_MESSAGE_CLIENT_ERROR,\n+} from '../../types';\n+\n+let Worker;\n+let childProcess;\n+let originalExecArgv;\n+\n+beforeEach(() => {\n+  jest.mock('worker_threads', () => {\n+    const fakeClass = jest.fn(() => {\n+      const EventEmitter = require('events');\n+      const thread = new EventEmitter();\n+      thread.postMessage = jest.fn();\n+      thread.stdout = 'stdout';\n+      thread.stderr = 'stderr';\n+      return thread;\n+    });\n+\n+    return {\n+      Worker: fakeClass,\n+    };\n+  });\n+  originalExecArgv = process.execArgv;\n+\n+  childProcess = require('worker_threads').Worker;\n+  childProcess.postMessage = jest.fn();\n+\n+  Worker = require('../NodeThreadsWorker').default;\n+});\n+\n+afterEach(() => {\n+  jest.resetModules();\n+  process.execArgv = originalExecArgv;\n+});\n+\n+it('passes fork options down to child_process.fork, adding the defaults', () => {\n+  const child = require.resolve('../threadChild');\n+\n+  process.execArgv = ['--inspect', '-p'];\n+\n+  new Worker({\n+    forkOptions: {\n+      cwd: '/tmp',\n+      execPath: 'hello',\n+    },\n+    maxRetries: 3,\n+    workerId: process.env.JEST_WORKER_ID,\n+    workerPath: '/tmp/foo/bar/baz.js',\n+  });\n+\n+  expect(childProcess.mock.calls[0][0]).toBe(child);\n+  expect(childProcess.mock.calls[0][1]).toEqual({\n+    eval: false,\n+    stderr: true,\n+    stdout: true,\n+    workerData: {\n+      cwd: '/tmp', // Overridden default option.\n+      env: process.env, // Default option.\n+      execArgv: ['-p'], // Filtered option.\n+      execPath: 'hello', // Added option.\n+      silent: true, // Default option.\n+    },\n+  });\n+});\n+\n+it('passes workerId to the child process and assign it to env.JEST_WORKER_ID', () => {\n+  new Worker({\n+    forkOptions: {},\n+    maxRetries: 3,\n+    workerId: 2,\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  expect(childProcess.mock.calls[0][1].workerData.env.JEST_WORKER_ID).toEqual(\n+    2,\n+  );\n+});\n+\n+it('initializes the child process with the given workerPath', () => {\n+  const worker = new Worker({\n+    forkOptions: {},\n+    maxRetries: 3,\n+    setupArgs: ['foo', 'bar'],\n+    workerPath: '/tmp/foo/bar/baz.js',\n+  });\n+\n+  expect(worker._worker.postMessage.mock.calls[0][0]).toEqual([\n+    CHILD_MESSAGE_INITIALIZE,\n+    false,\n+    '/tmp/foo/bar/baz.js',\n+    ['foo', 'bar'],\n+  ]);\n+});\n+\n+it('stops initializing the worker after the amount of retries is exceeded', () => {\n+  const worker = new Worker({\n+    forkOptions: {},\n+    maxRetries: 3,\n+    workerPath: '/tmp/foo/bar/baz.js',\n+  });\n+\n+  const request = [CHILD_MESSAGE_CALL, false, 'foo', []];\n+  const onProcessStart = jest.fn();\n+  const onProcessEnd = jest.fn();\n+\n+  worker.send(request, onProcessStart, onProcessEnd);\n+\n+  // We fail four times (initial + three retries).\n+  worker._worker.emit('exit');\n+  worker._worker.emit('exit');\n+  worker._worker.emit('exit');\n+  worker._worker.emit('exit');\n+\n+  expect(childProcess).toHaveBeenCalledTimes(5);\n+  expect(onProcessStart).toBeCalledWith(worker);\n+  expect(onProcessEnd).toHaveBeenCalledTimes(1);\n+  expect(onProcessEnd.mock.calls[0][0]).toBeInstanceOf(Error);\n+  expect(onProcessEnd.mock.calls[0][0].type).toBe('WorkerError');\n+  expect(onProcessEnd.mock.calls[0][1]).toBe(null);\n+});\n+\n+it('provides stdout and stderr fields from the child process', () => {\n+  const worker = new Worker({\n+    forkOptions: {},\n+    maxRetries: 3,\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  expect(worker.getStdout()).toBe('stdout');\n+  expect(worker.getStderr()).toBe('stderr');\n+});\n+\n+it('sends the task to the child process', () => {\n+  const worker = new Worker({\n+    forkOptions: {},\n+    maxRetries: 3,\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  const request = [CHILD_MESSAGE_CALL, false, 'foo', []];\n+\n+  worker.send(request, () => {}, () => {});\n+\n+  // Skipping call \"0\" because it corresponds to the \"initialize\" one.\n+  expect(worker._worker.postMessage.mock.calls[1][0]).toEqual(request);\n+});\n+\n+it('calls the onProcessStart method synchronously if the queue is empty', () => {\n+  const worker = new Worker({\n+    forkOptions: {},\n+    maxRetries: 3,\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  const onProcessStart = jest.fn();\n+  const onProcessEnd = jest.fn();\n+\n+  worker.send(\n+    [CHILD_MESSAGE_CALL, false, 'foo', []],\n+    onProcessStart,\n+    onProcessEnd,\n+  );\n+\n+  // Only onProcessStart has been called\n+  expect(onProcessStart).toHaveBeenCalledTimes(1);\n+  expect(onProcessEnd).not.toHaveBeenCalled();\n+\n+  // then first call replies...\n+  worker._worker.emit('message', [PARENT_MESSAGE_OK]);\n+\n+  expect(onProcessEnd).toHaveBeenCalledTimes(1);\n+});\n+\n+it('creates error instances for known errors', () => {\n+  const worker = new Worker({\n+    forkOptions: {},\n+    maxRetries: 3,\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  const callback1 = jest.fn();\n+  const callback2 = jest.fn();\n+  const callback3 = jest.fn();\n+\n+  // Testing a generic ECMAScript error.\n+  worker.send([CHILD_MESSAGE_CALL, false, 'method', []], () => {}, callback1);\n+\n+  worker._worker.emit('message', [\n+    PARENT_MESSAGE_CLIENT_ERROR,\n+    'TypeError',\n+    'bar',\n+    'TypeError: bar',\n+    {},\n+  ]);\n+\n+  expect(callback1.mock.calls[0][0]).toBeInstanceOf(TypeError);\n+  expect(callback1.mock.calls[0][0].message).toBe('bar');\n+  expect(callback1.mock.calls[0][0].type).toBe('TypeError');\n+  expect(callback1.mock.calls[0][0].stack).toBe('TypeError: bar');\n+\n+  // Testing a custom error.\n+  worker.send([CHILD_MESSAGE_CALL, false, 'method', []], () => {}, callback2);\n+\n+  worker._worker.emit('message', [\n+    PARENT_MESSAGE_CLIENT_ERROR,\n+    'RandomCustomError',\n+    'bar',\n+    'RandomCustomError: bar',\n+    {qux: 'extra property'},\n+  ]);\n+\n+  expect(callback2.mock.calls[0][0]).toBeInstanceOf(Error);\n+  expect(callback2.mock.calls[0][0].message).toBe('bar');\n+  expect(callback2.mock.calls[0][0].type).toBe('RandomCustomError');\n+  expect(callback2.mock.calls[0][0].stack).toBe('RandomCustomError: bar');\n+  expect(callback2.mock.calls[0][0].qux).toBe('extra property');\n+\n+  // Testing a non-object throw.\n+  worker.send([CHILD_MESSAGE_CALL, false, 'method', []], () => {}, callback3);\n+\n+  worker._worker.emit('message', [\n+    PARENT_MESSAGE_CLIENT_ERROR,\n+    'Number',\n+    null,\n+    null,\n+    412,\n+  ]);\n+\n+  expect(callback3.mock.calls[0][0]).toBe(412);\n+});\n+\n+it('throws when the child process returns a strange message', () => {\n+  const worker = new Worker({\n+    forkOptions: {},\n+    maxRetries: 3,\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  worker.send([CHILD_MESSAGE_CALL, false, 'method', []], () => {}, () => {});\n+\n+  // Type 27 does not exist.\n+  expect(() => {\n+    worker._worker.emit('message', [27]);\n+  }).toThrow(TypeError);\n+});\n+\n+it('does not restart the child if it cleanly exited', () => {\n+  const worker = new Worker({\n+    forkOptions: {},\n+    maxRetries: 3,\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  expect(childProcess).toHaveBeenCalledTimes(1);\n+  worker._worker.emit('exit', 0);\n+  expect(childProcess).toHaveBeenCalledTimes(1);\n+});\n+\n+it('restarts the child when the child process dies', () => {\n+  const worker = new Worker({\n+    workerPath: '/tmp/foo',\n+  });\n+\n+  expect(childProcess).toHaveBeenCalledTimes(1);\n+  worker._worker.emit('exit', 1);\n+  expect(childProcess).toHaveBeenCalledTimes(2);\n+});"},{"sha":"1e4ac3ffd70e4ba559eb44038a158a2741fab1b0","filename":"packages/jest-worker/src/workers/__tests__/processChild.test.js","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FprocessChild.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FprocessChild.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FprocessChild.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -20,7 +20,7 @@ import {\n   CHILD_MESSAGE_END,\n   PARENT_MESSAGE_OK,\n   PARENT_MESSAGE_CLIENT_ERROR,\n-} from '../types';\n+} from '../../types';\n \n let ended;\n let mockCount;\n@@ -106,7 +106,7 @@ beforeEach(() => {\n   process.send = jest.fn();\n \n   // Require the child!\n-  require('../child');\n+  require('../processChild');\n });\n \n afterEach(() => {","previous_filename":"packages/jest-worker/src/__tests__/child.test.js"},{"sha":"b0d3c41cd10590ec84ec93f5cf8c029f6bc6fb07","filename":"packages/jest-worker/src/workers/__tests__/threadChild.test.js","status":"added","additions":407,"deletions":0,"changes":407,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FthreadChild.test.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FthreadChild.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworkers%2F__tests__%2FthreadChild.test.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,407 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+'use strict';\n+\n+jest.mock('worker_threads', () => {\n+  const EventEmitter = require('events');\n+  const thread = new EventEmitter();\n+  thread.postMessage = jest.fn();\n+\n+  return {\n+    isMainThread: false,\n+    parentPort: thread,\n+  };\n+});\n+let thread;\n+\n+const mockError = new TypeError('Booo');\n+const mockExtendedError = new ReferenceError('Booo extended');\n+const uninitializedParam = {};\n+const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n+\n+import {\n+  CHILD_MESSAGE_INITIALIZE,\n+  CHILD_MESSAGE_CALL,\n+  CHILD_MESSAGE_END,\n+  PARENT_MESSAGE_OK,\n+  PARENT_MESSAGE_CLIENT_ERROR,\n+} from '../../types';\n+\n+let ended;\n+let mockCount;\n+let initializeParm = uninitializedParam;\n+\n+beforeEach(() => {\n+  mockCount = 0;\n+  ended = false;\n+\n+  jest.mock(\n+    '../my-fancy-worker',\n+    () => {\n+      mockCount++;\n+\n+      return {\n+        fooPromiseThrows() {\n+          return new Promise((resolve, reject) => {\n+            setTimeout(() => reject(mockError), 5);\n+          });\n+        },\n+\n+        fooPromiseWorks() {\n+          return new Promise((resolve, reject) => {\n+            setTimeout(() => resolve(1989), 5);\n+          });\n+        },\n+\n+        fooThrows() {\n+          throw mockError;\n+        },\n+\n+        fooThrowsANumber() {\n+          // eslint-disable-next-line no-throw-literal\n+          throw 412;\n+        },\n+\n+        fooThrowsAnErrorWithExtraProperties() {\n+          mockExtendedError.baz = 123;\n+          mockExtendedError.qux = 456;\n+\n+          throw mockExtendedError;\n+        },\n+\n+        fooThrowsNull() {\n+          // eslint-disable-next-line no-throw-literal\n+          throw null;\n+        },\n+\n+        fooWorks() {\n+          return 1989;\n+        },\n+\n+        setup(param) {\n+          initializeParm = param;\n+        },\n+\n+        teardown() {\n+          ended = true;\n+        },\n+      };\n+    },\n+    {virtual: true},\n+  );\n+\n+  jest.mock(\n+    '../my-fancy-standalone-worker',\n+    () => jest.fn().mockImplementation(() => 12345),\n+    {virtual: true},\n+  );\n+\n+  // This mock emulates a transpiled Babel module that carries a default export\n+  // that corresponds to a method.\n+  jest.mock(\n+    '../my-fancy-babel-worker',\n+    () => ({\n+      __esModule: true,\n+      default: jest.fn().mockImplementation(() => 67890),\n+    }),\n+    {virtual: true},\n+  );\n+\n+  thread = require('worker_threads').parentPort;\n+\n+  process.exit = jest.fn();\n+\n+  // Require the child!\n+  require('../threadChild');\n+});\n+\n+beforeEach(() => {\n+  process.exit.mockClear();\n+  thread.postMessage.mockClear();\n+});\n+\n+afterEach(() => {\n+  jest.resetModules();\n+\n+  thread.removeAllListeners('message');\n+});\n+\n+it('lazily requires the file', () => {\n+  expect(mockCount).toBe(0);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  expect(mockCount).toBe(0);\n+  expect(initializeParm).toBe(uninitializedParam); // Not called yet.\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooWorks',\n+    [],\n+  ]);\n+\n+  expect(mockCount).toBe(1);\n+  expect(initializeParm).toBe(undefined);\n+});\n+\n+it('calls initialize with the correct arguments', () => {\n+  expect(mockCount).toBe(0);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+    ['foo'], // Pass empty initialize params so the initialize method is called.\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooWorks',\n+    [],\n+  ]);\n+\n+  expect(initializeParm).toBe('foo');\n+});\n+\n+it('returns results immediately when function is synchronous', () => {\n+  thread.send = jest.fn();\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooWorks',\n+    [],\n+  ]);\n+\n+  expect(thread.postMessage.mock.calls[0][0]).toEqual([\n+    PARENT_MESSAGE_OK,\n+    1989,\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooThrows',\n+    [],\n+  ]);\n+\n+  expect(thread.postMessage.mock.calls[1][0]).toEqual([\n+    PARENT_MESSAGE_CLIENT_ERROR,\n+    'TypeError',\n+    'Booo',\n+    mockError.stack,\n+    {},\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooThrowsANumber',\n+    [],\n+  ]);\n+\n+  expect(thread.postMessage.mock.calls[2][0]).toEqual([\n+    PARENT_MESSAGE_CLIENT_ERROR,\n+    'Number',\n+    void 0,\n+    void 0,\n+    412,\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooThrowsAnErrorWithExtraProperties',\n+    [],\n+  ]);\n+\n+  expect(thread.postMessage.mock.calls[3][0]).toEqual([\n+    PARENT_MESSAGE_CLIENT_ERROR,\n+    'ReferenceError',\n+    'Booo extended',\n+    mockExtendedError.stack,\n+    {baz: 123, qux: 456},\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooThrowsNull',\n+    [],\n+  ]);\n+\n+  expect(thread.postMessage.mock.calls[4][0][0]).toBe(\n+    PARENT_MESSAGE_CLIENT_ERROR,\n+  );\n+  expect(thread.postMessage.mock.calls[4][0][1]).toBe('Error');\n+  expect(thread.postMessage.mock.calls[4][0][2]).toEqual(\n+    '\"null\" or \"undefined\" thrown',\n+  );\n+\n+  expect(thread.postMessage).toHaveBeenCalledTimes(5);\n+});\n+\n+it('returns results when it gets resolved if function is asynchronous', async () => {\n+  jest.useRealTimers();\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooPromiseWorks',\n+    [],\n+  ]);\n+\n+  await sleep(10);\n+\n+  expect(thread.postMessage.mock.calls[0][0]).toEqual([\n+    PARENT_MESSAGE_OK,\n+    1989,\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'fooPromiseThrows',\n+    [],\n+  ]);\n+\n+  await sleep(10);\n+\n+  expect(thread.postMessage.mock.calls[1][0]).toEqual([\n+    PARENT_MESSAGE_CLIENT_ERROR,\n+    'TypeError',\n+    'Booo',\n+    mockError.stack,\n+    {},\n+  ]);\n+\n+  expect(thread.postMessage).toHaveBeenCalledTimes(2);\n+});\n+\n+it('calls the main module if the method call is \"default\"', () => {\n+  thread.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-standalone-worker',\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'default',\n+    [],\n+  ]);\n+\n+  expect(thread.postMessage.mock.calls[0][0]).toEqual([\n+    PARENT_MESSAGE_OK,\n+    12345,\n+  ]);\n+});\n+\n+it('calls the main export if the method call is \"default\" and it is a Babel transpiled one', () => {\n+  thread.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-babel-worker',\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_CALL,\n+    true, // Not really used here, but for flow type purity.\n+    'default',\n+    [],\n+  ]);\n+\n+  expect(thread.postMessage.mock.calls[0][0]).toEqual([\n+    PARENT_MESSAGE_OK,\n+    67890,\n+  ]);\n+});\n+\n+it('finishes the process with exit code 0 if requested', () => {\n+  thread.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_END,\n+    true, // Not really used here, but for flow type purity.\n+  ]);\n+\n+  expect(process.exit).toHaveBeenCalledWith(0);\n+});\n+\n+it('calls the teardown method ', () => {\n+  thread.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_END,\n+    true, // Not really used here, but for flow type purity.\n+  ]);\n+\n+  expect(ended).toBe(true);\n+});\n+\n+it('throws if an invalid message is detected', () => {\n+  // Type 27 does not exist.\n+  expect(() => {\n+    thread.emit('message', [27]);\n+  }).toThrow(TypeError);\n+});\n+\n+it('throws if child is not forked', () => {\n+  delete thread.postMessage;\n+\n+  thread.emit('message', [\n+    CHILD_MESSAGE_INITIALIZE,\n+    true, // Not really used here, but for flow type purity.\n+    './my-fancy-worker',\n+  ]);\n+\n+  expect(() => {\n+    thread.emit('message', [\n+      CHILD_MESSAGE_CALL,\n+      true, // Not really used here, but for flow type purity.\n+      'fooWorks',\n+      [],\n+    ]);\n+  }).toThrow();\n+\n+  expect(() => {\n+    thread.emit('message', [\n+      CHILD_MESSAGE_CALL,\n+      true, // Not really used here, but for flow type purity.\n+      'fooThrows',\n+      [],\n+    ]);\n+  }).toThrow();\n+});"},{"sha":"39359b81ec87cb368cff402103312d69eedef94c","filename":"packages/jest-worker/src/workers/processChild.js","status":"renamed","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2FprocessChild.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2FprocessChild.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworkers%2FprocessChild.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -16,9 +16,13 @@ import {\n   PARENT_MESSAGE_CLIENT_ERROR,\n   PARENT_MESSAGE_SETUP_ERROR,\n   PARENT_MESSAGE_OK,\n-} from './types';\n+} from '../types';\n \n-import type {PARENT_MESSAGE_ERROR} from './types';\n+import type {\n+  ChildMessageInitialize,\n+  ChildMessageCall,\n+  PARENT_MESSAGE_ERROR,\n+} from '../types';\n \n let file = null;\n let setupArgs: Array<mixed> = [];\n@@ -37,15 +41,17 @@ let initialized = false;\n  * If an invalid message is detected, the child will exit (by throwing) with a\n  * non-zero exit code.\n  */\n-process.on('message', (request: any /* Should be ChildMessage */) => {\n+process.on('message', (request: any) => {\n   switch (request[0]) {\n     case CHILD_MESSAGE_INITIALIZE:\n-      file = request[2];\n+      const init: ChildMessageInitialize = request;\n+      file = init[2];\n       setupArgs = request[3];\n       break;\n \n     case CHILD_MESSAGE_CALL:\n-      execMethod(request[2], request[3]);\n+      const call: ChildMessageCall = request;\n+      execMethod(call[2], call[3]);\n       break;\n \n     case CHILD_MESSAGE_END:","previous_filename":"packages/jest-worker/src/child.js"},{"sha":"77c7a96fa6d30696d1231d6979fd7d6dc056acf4","filename":"packages/jest-worker/src/workers/threadChild.js","status":"added","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/facebook/jest/blob/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2FthreadChild.js","raw_url":"https://github.com/facebook/jest/raw/aec33685a49741a9e3fc41e5f7a6b5331df332dd/packages%2Fjest-worker%2Fsrc%2Fworkers%2FthreadChild.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworkers%2FthreadChild.js?ref=aec33685a49741a9e3fc41e5f7a6b5331df332dd","patch":"@@ -0,0 +1,174 @@\n+/**\n+ * Copyright (c) 2017-present, Facebook, Inc. All rights reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ *\n+ * @flow\n+ */\n+\n+'use strict';\n+\n+import {\n+  CHILD_MESSAGE_CALL,\n+  CHILD_MESSAGE_END,\n+  CHILD_MESSAGE_INITIALIZE,\n+  PARENT_MESSAGE_CLIENT_ERROR,\n+  PARENT_MESSAGE_SETUP_ERROR,\n+  PARENT_MESSAGE_OK,\n+} from '../types';\n+\n+import type {\n+  ChildMessageInitialize,\n+  ChildMessageCall,\n+  PARENT_MESSAGE_ERROR,\n+} from '../types';\n+\n+let file = null;\n+let setupArgs: Array<mixed> = [];\n+let initialized = false;\n+\n+/* eslint-disable import/no-unresolved */\n+// $FlowFixMe: Flow doesn't support experimental node modules\n+import {parentPort, isMainThread} from 'worker_threads';\n+/* eslint-enable import/no-unresolved */\n+\n+/**\n+ * This file is a small bootstrapper for workers. It sets up the communication\n+ * between the worker and the parent process, interpreting parent messages and\n+ * sending results back.\n+ *\n+ * The file loaded will be lazily initialized the first time any of the workers\n+ * is called. This is done for optimal performance: if the farm is initialized,\n+ * but no call is made to it, child Node processes will be consuming the least\n+ * possible amount of memory.\n+ *\n+ * If an invalid message is detected, the child will exit (by throwing) with a\n+ * non-zero exit code.\n+ */\n+parentPort.on('message', (request: any) => {\n+  switch (request[0]) {\n+    case CHILD_MESSAGE_INITIALIZE:\n+      const init: ChildMessageInitialize = request;\n+      file = init[2];\n+      setupArgs = request[3];\n+      break;\n+\n+    case CHILD_MESSAGE_CALL:\n+      const call: ChildMessageCall = request;\n+      execMethod(call[2], call[3]);\n+      break;\n+\n+    case CHILD_MESSAGE_END:\n+      end();\n+      break;\n+\n+    default:\n+      throw new TypeError(\n+        'Unexpected request from parent process: ' + request[0],\n+      );\n+  }\n+});\n+\n+function reportSuccess(result: any) {\n+  if (isMainThread) {\n+    throw new Error('Child can only be used on a forked process');\n+  }\n+\n+  parentPort.postMessage([PARENT_MESSAGE_OK, result]);\n+}\n+\n+function reportClientError(error: Error) {\n+  return reportError(error, PARENT_MESSAGE_CLIENT_ERROR);\n+}\n+\n+function reportInitializeError(error: Error) {\n+  return reportError(error, PARENT_MESSAGE_SETUP_ERROR);\n+}\n+\n+function reportError(error: Error, type: PARENT_MESSAGE_ERROR) {\n+  if (isMainThread) {\n+    throw new Error('Child can only be used on a forked process');\n+  }\n+\n+  if (error == null) {\n+    error = new Error('\"null\" or \"undefined\" thrown');\n+  }\n+\n+  parentPort.postMessage([\n+    type,\n+    error.constructor && error.constructor.name,\n+    error.message,\n+    error.stack,\n+    // $FlowFixMe: this is safe to just inherit from Object.\n+    typeof error === 'object' ? Object.assign({}, error) : error,\n+  ]);\n+}\n+\n+function end(): void {\n+  // $FlowFixMe: This has to be a dynamic require.\n+  const main = require(file);\n+\n+  if (!main.teardown) {\n+    exitProcess();\n+\n+    return;\n+  }\n+\n+  execFunction(main.teardown, main, [], exitProcess, exitProcess);\n+}\n+\n+function exitProcess(): void {\n+  process.exit(0);\n+}\n+\n+function execMethod(method: string, args: $ReadOnlyArray<any>): void {\n+  // $FlowFixMe: This has to be a dynamic require.\n+  const main = require(file);\n+\n+  let fn;\n+\n+  if (method === 'default') {\n+    fn = main.__esModule ? main['default'] : main;\n+  } else {\n+    fn = main[method];\n+  }\n+\n+  function execHelper() {\n+    execFunction(fn, main, args, reportSuccess, reportClientError);\n+  }\n+\n+  if (initialized || !main.setup) {\n+    execHelper();\n+\n+    return;\n+  }\n+\n+  initialized = true;\n+\n+  execFunction(main.setup, main, setupArgs, execHelper, reportInitializeError);\n+}\n+\n+function execFunction(\n+  fn: (...args: $ReadOnlyArray<mixed>) => mixed,\n+  ctx: mixed,\n+  args: $ReadOnlyArray<mixed>,\n+  onResult: (result: mixed) => void,\n+  onError: (error: Error) => void,\n+): void {\n+  let result;\n+\n+  try {\n+    result = fn.apply(ctx, args);\n+  } catch (err) {\n+    onError(err);\n+\n+    return;\n+  }\n+\n+  if (result && typeof result.then === 'function') {\n+    result.then(onResult, onError);\n+  } else {\n+    onResult(result);\n+  }\n+}"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8153","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8153/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8153/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8153/events","html_url":"https://github.com/facebook/jest/pull/8153","id":422468581,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYyMjUzNzE1","number":8153,"title":"Perf improvements - avoid persisting haste map / processing files when not changed.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2019-03-18T22:48:17Z","updated_at":"2021-05-11T21:07:26Z","closed_at":"2019-03-19T16:47:58Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8153","html_url":"https://github.com/facebook/jest/pull/8153","diff_url":"https://github.com/facebook/jest/pull/8153.diff","patch_url":"https://github.com/facebook/jest/pull/8153.patch","merged_at":"2019-03-19T16:47:58Z"},"body":"## Summary\r\n\r\nAt Facebook, in a common situation where you've changed a couple of files in the largest haste map, this PR cuts off 25%~ of the startup time. In other less common situations where you've working on a smaller haste map, the improvement is 60%~.\r\n\r\nThe improvement is gained by:\r\n- Not re-serializing and writing the haste map to disk if it was loaded off of disk and then not changed.\r\n- Not re-creating from scratch the `map` and `mocks` part of the haste map on startup when we know what specific files were changed. Instead, just re-process only the specific changed files.\r\n\r\nI've benchmarked the startup time by:\r\n1. Setting up a single test\r\n2. Running once to prime the cache\r\n3. Changing a test file\r\n4. Running the test again with `--skipFilter` (measuring at this point via `time`)\r\n\r\nI've been a bit conservative and I'm just doing a full re-process when files were deleted (same as current behavior) but I may improve that. It's much less common to delete a file than to edit a file and I wanted to keep the code as simple as possible initially.\r\n\r\nIn cases where Watchman isn't being used or is freshly started, there is no difference.\r\n\r\nI'm always a little suspicious when something relatively simple yields such a large performance improvement, so please help by casting a very critical eye on this PR and all assumptions that I made.\r\n\r\n## Test plan\r\n\r\n- All tests pass.\r\n- Tested manually in multiple situations.\r\n- No change in behavior without watchman.\r\n- Manually verified the cache file is updated appropriately in a variety of situations.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8153/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8153/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"0dbd0615fb1cc355ca47a1c1fd48555201a68013","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/952202684213c511d59bda440535ca70cde58847/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/952202684213c511d59bda440535ca70cde58847/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=952202684213c511d59bda440535ca70cde58847","patch":"@@ -15,6 +15,8 @@\n \n ### Performance\n \n+- `[jest-haste-map]` Avoid persisting haste map or processing files when not changed ([#8153](https://github.com/facebook/jest/pull/8153))\n+\n ## 24.5.0\n \n ### Features"},{"sha":"06f2d73543ecfbdebeb96ac75b672ead4aeac166","filename":"packages/jest-haste-map/src/crawlers/__tests__/watchman.test.js","status":"modified","additions":21,"deletions":6,"changes":27,"blob_url":"https://github.com/facebook/jest/blob/952202684213c511d59bda440535ca70cde58847/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","raw_url":"https://github.com/facebook/jest/raw/952202684213c511d59bda440535ca70cde58847/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js?ref=952202684213c511d59bda440535ca70cde58847","patch":"@@ -128,7 +128,7 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(({hasteMap, removedFiles}) => {\n+    }).then(({changedFiles, hasteMap, removedFiles}) => {\n       const client = watchman.Client.mock.instances[0];\n       const calls = client.command.mock.calls;\n \n@@ -165,6 +165,8 @@ describe('watchman watch', () => {\n         }),\n       );\n \n+      expect(changedFiles).toEqual(undefined);\n+\n       expect(hasteMap.files).toEqual(mockFiles);\n \n       expect(removedFiles).toEqual(new Map());\n@@ -210,7 +212,8 @@ describe('watchman watch', () => {\n           : null,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(({hasteMap, removedFiles}) => {\n+    }).then(({changedFiles, hasteMap, removedFiles}) => {\n+      expect(changedFiles).toEqual(undefined);\n       expect(hasteMap.files).toEqual(\n         createMap({\n           [path.join(DURIAN_RELATIVE, 'foo.1.js')]: ['', 33, 43, 0, [], null],\n@@ -265,7 +268,7 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(({hasteMap, removedFiles}) => {\n+    }).then(({changedFiles, hasteMap, removedFiles}) => {\n       // The object was reused.\n       expect(hasteMap.files).toBe(mockFiles);\n \n@@ -275,6 +278,12 @@ describe('watchman watch', () => {\n         }),\n       );\n \n+      expect(changedFiles).toEqual(\n+        createMap({\n+          [KIWI_RELATIVE]: ['', 42, 40, 0, [], null],\n+        }),\n+      );\n+\n       expect(hasteMap.files).toEqual(\n         createMap({\n           [KIWI_RELATIVE]: ['', 42, 40, 0, [], null],\n@@ -349,7 +358,7 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(({hasteMap, removedFiles}) => {\n+    }).then(({changedFiles, hasteMap, removedFiles}) => {\n       // The file object was *not* reused.\n       expect(hasteMap.files).not.toBe(mockFiles);\n \n@@ -359,6 +368,8 @@ describe('watchman watch', () => {\n         }),\n       );\n \n+      expect(changedFiles).toEqual(undefined);\n+\n       // strawberry and melon removed from the file list.\n       expect(hasteMap.files).toEqual(\n         createMap({\n@@ -443,14 +454,16 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(({hasteMap, removedFiles}) => {\n+    }).then(({changedFiles, hasteMap, removedFiles}) => {\n       expect(hasteMap.clocks).toEqual(\n         createMap({\n           [FRUITS_RELATIVE]: 'c:fake-clock:3',\n           [VEGETABLES_RELATIVE]: 'c:fake-clock:4',\n         }),\n       );\n \n+      expect(changedFiles).toEqual(undefined);\n+\n       expect(hasteMap.files).toEqual(\n         createMap({\n           [KIWI_RELATIVE]: ['', 42, 52, 0, [], null],\n@@ -506,7 +519,7 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: [...ROOTS, ROOT_MOCK],\n-    }).then(({hasteMap, removedFiles}) => {\n+    }).then(({changedFiles, hasteMap, removedFiles}) => {\n       const client = watchman.Client.mock.instances[0];\n       const calls = client.command.mock.calls;\n \n@@ -538,6 +551,8 @@ describe('watchman watch', () => {\n         }),\n       );\n \n+      expect(changedFiles).toEqual(new Map());\n+\n       expect(hasteMap.files).toEqual(new Map());\n \n       expect(removedFiles).toEqual(new Map());"},{"sha":"c6d6b66766d9cb484cc28400bc61770ab1656a85","filename":"packages/jest-haste-map/src/crawlers/watchman.ts","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/952202684213c511d59bda440535ca70cde58847/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts","raw_url":"https://github.com/facebook/jest/raw/952202684213c511d59bda440535ca70cde58847/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts?ref=952202684213c511d59bda440535ca70cde58847","patch":"@@ -33,6 +33,7 @@ function WatchmanError(error: Error): Error {\n export = async function watchmanCrawl(\n   options: CrawlerOptions,\n ): Promise<{\n+  changedFiles?: FileData;\n   removedFiles: FileData;\n   hasteMap: InternalHasteMap;\n }> {\n@@ -148,6 +149,7 @@ export = async function watchmanCrawl(\n \n   let files = data.files;\n   let removedFiles = new Map();\n+  const changedFiles = new Map();\n   let watchmanFiles: Map<string, any>;\n   let isFresh = false;\n   try {\n@@ -243,17 +245,20 @@ export = async function watchmanCrawl(\n                 absoluteVirtualFilePath,\n               );\n               files.set(relativeVirtualFilePath, nextData);\n+              changedFiles.set(relativeVirtualFilePath, nextData);\n             }\n           }\n         } else {\n           files.set(relativeFilePath, nextData);\n+          changedFiles.set(relativeFilePath, nextData);\n         }\n       }\n     }\n   }\n \n   data.files = files;\n   return {\n+    changedFiles: isFresh ? undefined : changedFiles,\n     hasteMap: data,\n     removedFiles,\n   };"},{"sha":"d21c63e3c251ed2d6fde65ff465fdd0900e58f2d","filename":"packages/jest-haste-map/src/index.ts","status":"modified","additions":74,"deletions":45,"changes":119,"blob_url":"https://github.com/facebook/jest/blob/952202684213c511d59bda440535ca70cde58847/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/952202684213c511d59bda440535ca70cde58847/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.ts?ref=952202684213c511d59bda440535ca70cde58847","patch":"@@ -339,30 +339,43 @@ class HasteMap extends EventEmitter {\n \n   build(): Promise<InternalHasteMapObject> {\n     if (!this._buildPromise) {\n-      this._buildPromise = this._buildFileMap()\n-        .then(data => this._buildHasteMap(data))\n-        .then(hasteMap => {\n+      this._buildPromise = (async () => {\n+        const data = await this._buildFileMap();\n+\n+        // Persist when we don't know if files changed (changedFiles undefined)\n+        // or when we know a file was changed or deleted.\n+        let hasteMap: InternalHasteMap;\n+        if (\n+          data.changedFiles === undefined ||\n+          data.changedFiles.size > 0 ||\n+          data.removedFiles.size > 0\n+        ) {\n+          hasteMap = await this._buildHasteMap(data);\n           this._persist(hasteMap);\n+        } else {\n+          hasteMap = data.hasteMap;\n+        }\n \n-          const rootDir = this._options.rootDir;\n-          const hasteFS = new HasteFS({\n-            files: hasteMap.files,\n-            rootDir,\n-          });\n-          const moduleMap = new HasteModuleMap({\n-            duplicates: hasteMap.duplicates,\n-            map: hasteMap.map,\n-            mocks: hasteMap.mocks,\n-            rootDir,\n-          });\n-          const __hasteMapForTest =\n-            (process.env.NODE_ENV === 'test' && hasteMap) || null;\n-          return this._watch(hasteMap).then(() => ({\n-            __hasteMapForTest,\n-            hasteFS,\n-            moduleMap,\n-          }));\n+        const rootDir = this._options.rootDir;\n+        const hasteFS = new HasteFS({\n+          files: hasteMap.files,\n+          rootDir,\n+        });\n+        const moduleMap = new HasteModuleMap({\n+          duplicates: hasteMap.duplicates,\n+          map: hasteMap.map,\n+          mocks: hasteMap.mocks,\n+          rootDir,\n         });\n+        const __hasteMapForTest =\n+          (process.env.NODE_ENV === 'test' && hasteMap) || null;\n+        await this._watch(hasteMap);\n+        return {\n+          __hasteMapForTest,\n+          hasteFS,\n+          moduleMap,\n+        };\n+      })();\n     }\n     return this._buildPromise;\n   }\n@@ -395,16 +408,19 @@ class HasteMap extends EventEmitter {\n   /**\n    * 2. crawl the file system.\n    */\n-  private _buildFileMap(): Promise<{\n+  private async _buildFileMap(): Promise<{\n     removedFiles: FileData;\n+    changedFiles?: FileData;\n     hasteMap: InternalHasteMap;\n   }> {\n-    const read = this._options.resetCache ? this._createEmptyMap : this.read;\n-\n-    return Promise.resolve()\n-      .then(() => read.call(this))\n-      .catch(() => this._createEmptyMap())\n-      .then(hasteMap => this._crawl(hasteMap));\n+    let hasteMap: InternalHasteMap;\n+    try {\n+      const read = this._options.resetCache ? this._createEmptyMap : this.read;\n+      hasteMap = await read.call(this);\n+    } catch {\n+      hasteMap = this._createEmptyMap();\n+    }\n+    return this._crawl(hasteMap);\n   }\n \n   /**\n@@ -618,20 +634,34 @@ class HasteMap extends EventEmitter {\n       .then(workerReply, workerError);\n   }\n \n-  private _buildHasteMap(data: {\n+  private async _buildHasteMap(data: {\n     removedFiles: FileData;\n+    changedFiles?: FileData;\n     hasteMap: InternalHasteMap;\n   }): Promise<InternalHasteMap> {\n-    const {removedFiles, hasteMap} = data;\n-    const map = new Map();\n-    const mocks = new Map();\n-    const promises = [];\n+    const {removedFiles, changedFiles, hasteMap} = data;\n+\n+    // If any files were removed or we did not track what files changed, process\n+    // every file looking for changes. Otherwise, process only changed files.\n+    let map: ModuleMapData;\n+    let mocks: MockData;\n+    let filesToProcess: FileData;\n+    if (changedFiles === undefined || removedFiles.size) {\n+      map = new Map();\n+      mocks = new Map();\n+      filesToProcess = hasteMap.files;\n+    } else {\n+      map = hasteMap.map;\n+      mocks = hasteMap.mocks;\n+      filesToProcess = changedFiles;\n+    }\n \n     for (const [relativeFilePath, fileMetadata] of removedFiles) {\n       this._recoverDuplicates(hasteMap, relativeFilePath, fileMetadata[H.ID]);\n     }\n \n-    for (const relativeFilePath of hasteMap.files.keys()) {\n+    const promises = [];\n+    for (const relativeFilePath of filesToProcess.keys()) {\n       if (\n         this._options.skipPackageJson &&\n         relativeFilePath.endsWith(PACKAGE_JSON)\n@@ -649,17 +679,16 @@ class HasteMap extends EventEmitter {\n       }\n     }\n \n-    return Promise.all(promises)\n-      .then(() => {\n-        this._cleanup();\n-        hasteMap.map = map;\n-        hasteMap.mocks = mocks;\n-        return hasteMap;\n-      })\n-      .catch(error => {\n-        this._cleanup();\n-        return Promise.reject(error);\n-      });\n+    try {\n+      await Promise.all(promises);\n+      this._cleanup();\n+      hasteMap.map = map;\n+      hasteMap.mocks = mocks;\n+      return hasteMap;\n+    } catch (error) {\n+      this._cleanup();\n+      throw error;\n+    }\n   }\n \n   private _cleanup() {"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8448","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8448/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8448/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8448/events","html_url":"https://github.com/facebook/jest/pull/8448","id":442411795,"node_id":"MDExOlB1bGxSZXF1ZXN0Mjc3NTMxMzI0","number":8448,"title":"expect: Highlight substring differences when matcher fails, part 1","user":{"login":"pedrottimark","id":11862657,"node_id":"MDQ6VXNlcjExODYyNjU3","avatar_url":"https://avatars.githubusercontent.com/u/11862657?v=4","gravatar_id":"","url":"https://api.github.com/users/pedrottimark","html_url":"https://github.com/pedrottimark","followers_url":"https://api.github.com/users/pedrottimark/followers","following_url":"https://api.github.com/users/pedrottimark/following{/other_user}","gists_url":"https://api.github.com/users/pedrottimark/gists{/gist_id}","starred_url":"https://api.github.com/users/pedrottimark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pedrottimark/subscriptions","organizations_url":"https://api.github.com/users/pedrottimark/orgs","repos_url":"https://api.github.com/users/pedrottimark/repos","events_url":"https://api.github.com/users/pedrottimark/events{/privacy}","received_events_url":"https://api.github.com/users/pedrottimark/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":18,"created_at":"2019-05-09T20:11:15Z","updated_at":"2021-05-11T18:13:25Z","closed_at":"2019-05-27T11:50:00Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8448","html_url":"https://github.com/facebook/jest/pull/8448","diff_url":"https://github.com/facebook/jest/pull/8448.diff","patch_url":"https://github.com/facebook/jest/pull/8448.patch","merged_at":"2019-05-27T11:50:00Z"},"body":"## Summary\r\n\r\nFixes #6881 although space and no-break space still look the same\r\n\r\nIf positive assertion fails with **one-line** strings for both expected and received:\r\n\r\nThen if character difference with “semantic cleanup” has **any common** substring:\r\n\r\nDisplay changes similar to Changed Files on GitHub:\r\n\r\n* Expected: inverse green for deleted characters\r\n* Received: inverse red for inserted characters\r\n\r\nElse if **no common** substring, display without any inverse colors\r\n\r\n**Build**:\r\n\r\nEDIT: The following list is generally but not specifically true, because `printDiffOrStringify` moved to `jest-matcher-utils` package\r\n\r\n* `packages/expect/build-es5/index.js` is about 1M bytes, increased < 40K bytes\r\n* although I added `diff-sequences` dependency, it was already in `build-es5` bundle\r\n* added to `expect/tsconfig.json` see https://github.com/facebook/jest/pull/8448#issuecomment-491610188\r\n* ~~review of `packages/expect/src/cleanupSemantic.d.ts` is especially welcome~~\r\n* ~~see https://github.com/facebook/jest/pull/8448#issuecomment-491050415 about `packages/expect/build/cleanupSemantic.d.js`~~\r\n\r\n**License**:\r\n\r\nDoes anyone know if I have correctly handled code with Apache License, Version 2.0?\r\n\r\n* added comment describing changes to `cleanupSemantic.js`\r\n* added file to `.eslintignore` and `.prettierignore`\r\n* added file path as exception to `scripts/checkCopyrightHeaders.js`\r\n\r\n**Residue**:\r\n\r\n* Decide how to display results for **multi-line** strings (especially deleted or inserted newlines)\r\n* Discover whether long strings cause **performance** risk as had been for many lines\r\n* Apply to more changed strings (for example, property values) in future data-driven diff\r\n* Adapt for `toThrow(object)` which does not call the same helper function\r\n* Explore how to display results of failed **substring match** for `toContain`, `toMatch`, or `toThrow` [EDIT: and found its effectiveness to be disappointingly hit or miss]\r\n\r\n## Test plan\r\n\r\nEDIT: Updated a distantly related snapshot test, see see https://github.com/facebook/jest/pull/8448#issuecomment-495775132\r\n\r\nExisting tests pass, because they have no common substring with “semantic cleanup”\r\n\r\nAdded 1 snapshot each:\r\n\r\n* `toBe` and then added a second test for empty string, see https://github.com/facebook/jest/pull/8448#issuecomment-491844721\r\n* `toEqual`\r\n* `toHaveProperty(path, value)`\r\n* `toStrictEqual`\r\n\r\nSee also pictures in following comment","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8448/reactions","total_count":3,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":2,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8448/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"d25c116b85375f19f3820ab6f206335302bd9896","filename":".eslintignore","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/.eslintignore","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/.eslintignore","contents_url":"https://api.github.com/repos/facebook/jest/contents/.eslintignore?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -4,6 +4,7 @@ bin/\n flow-typed/**\n packages/*/build/**\n packages/*/build-es5/**\n+packages/jest-matcher-utils/src/cleanupSemantic.ts\n website/blog\n website/build\n website/node_modules"},{"sha":"9b259cd268a90be90af3f0081b18518fa558c95a","filename":".prettierignore","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/.prettierignore","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/.prettierignore","contents_url":"https://api.github.com/repos/facebook/jest/contents/.prettierignore?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -1,3 +1,4 @@\n fixtures/failing-jsons/\n+packages/jest-matcher-utils/src/cleanupSemantic.ts\n packages/jest-config/src/__tests__/jest-preset.json\n packages/pretty-format/perf/world.geo.json"},{"sha":"525aadc09ded1d58827f8c0d0074e9b3aa0a544c","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -2,6 +2,7 @@\n \n ### Features\n \n+- `[expect]` Highlight substring differences when matcher fails, part 1 ([#8448](https://github.com/facebook/jest/pull/8448))\n - `[jest-cli]` Improve chai support (with detailed output, to match jest exceptions) ([#8454](https://github.com/facebook/jest/pull/8454))\n \n ### Fixes"},{"sha":"2de490df82a351be3df337515e9e500c8e8b8295","filename":"packages/expect/src/__tests__/__snapshots__/matchers.test.js.snap","status":"modified","additions":39,"deletions":9,"changes":48,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fexpect%2Fsrc%2F__tests__%2F__snapshots__%2Fmatchers.test.js.snap","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fexpect%2Fsrc%2F__tests__%2F__snapshots__%2Fmatchers.test.js.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fexpect%2Fsrc%2F__tests__%2F__snapshots__%2Fmatchers.test.js.snap?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -278,6 +278,13 @@ exports[`.toBe() fails for 'undefined' with '.not' 1`] = `\n Expected: not <green>undefined</>\"\n `;\n \n+exports[`.toBe() fails for: \"\" and \"compare one-line string to empty string\" 1`] = `\n+\"<dim>expect(</><red>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>\n+\n+Expected: <green>\\\\\"compare one-line string to empty string\\\\\"</>\n+Received: <red>\\\\\"\\\\\"</>\"\n+`;\n+\n exports[`.toBe() fails for: \"abc\" and \"cde\" 1`] = `\n \"<dim>expect(</><red>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>\n \n@@ -303,6 +310,13 @@ string\" 1`] = `\n <dim>  string</>\"\n `;\n \n+exports[`.toBe() fails for: \"painless JavaScript testing\" and \"delightful JavaScript testing\" 1`] = `\n+\"<dim>expect(</><red>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>\n+\n+Expected: <green>\\\\\"<inverse>delightful</> JavaScript testing\\\\\"</>\n+Received: <red>\\\\\"<inverse>painless</> JavaScript testing\\\\\"</>\"\n+`;\n+\n exports[`.toBe() fails for: \"with \n trailing space\" and \"without trailing space\" 1`] = `\n \"<dim>expect(</><red>received</><dim>).</>toBe<dim>(</><green>expected</><dim>) // Object.is equality</>\n@@ -1922,6 +1936,13 @@ exports[`.toContain(), .toContainEqual() error cases for toContainEqual 1`] = `\n Received has value: <red>null</>\"\n `;\n \n+exports[`.toEqual() {pass: false} expect(\"1 234,57 $\").toEqual(\"1 234,57 $\") 1`] = `\n+\"<dim>expect(</><red>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>\n+\n+Expected: <green>\\\\\"1<inverse> </>234,57<inverse> </>$\\\\\"</>\n+Received: <red>\\\\\"1<inverse> </>234,57<inverse> </>$\\\\\"</>\"\n+`;\n+\n exports[`.toEqual() {pass: false} expect(\"Eve\").toEqual({\"asymmetricMatch\": [Function asymmetricMatch]}) 1`] = `\n \"<dim>expect(</><red>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>\n \n@@ -1985,15 +2006,8 @@ exports[`.toEqual() {pass: false} expect([1]).toEqual([2]) 1`] = `\n exports[`.toEqual() {pass: false} expect({\"a\": 1, \"b\": 2}).toEqual(ObjectContaining {\"a\": 2}) 1`] = `\n \"<dim>expect(</><red>received</><dim>).</>toEqual<dim>(</><green>expected</><dim>) // deep equality</>\n \n-<green>- Expected</>\n-<red>+ Received</>\n-\n-<green>- ObjectContaining {</>\n-<green>-   \\\\\"a\\\\\": 2,</>\n-<red>+ Object {</>\n-<red>+   \\\\\"a\\\\\": 1,</>\n-<red>+   \\\\\"b\\\\\": 2,</>\n-<dim>  }</>\"\n+Expected: <green>ObjectContaining {\\\\\"a\\\\\": 2}</>\n+Received: <red>{\\\\\"a\\\\\": 1, \\\\\"b\\\\\": 2}</>\"\n `;\n \n exports[`.toEqual() {pass: false} expect({\"a\": 1}).toEqual({\"a\": 2}) 1`] = `\n@@ -3057,6 +3071,15 @@ Expected value: <green>2</>\n Received value: <red>1</>\"\n `;\n \n+exports[`.toHaveProperty() {pass: false} expect({\"children\": [\"\\\\\"That cartoon\\\\\"\"], \"props\": null, \"type\": \"p\"}).toHaveProperty('children,0', \"\\\\\"That cat cartoon\\\\\"\") 1`] = `\n+\"<dim>expect(</><red>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>, </><green>value</><dim>)</>\n+\n+Expected path: <green>[\\\\\"children\\\\\", 0]</>\n+\n+Expected value: <green>\\\\\"\\\\\\\\\\\\\"That <inverse>cat </>cartoon\\\\\\\\\\\\\"\\\\\"</>\n+Received value: <red>\\\\\"\\\\\\\\\\\\\"That cartoon\\\\\\\\\\\\\"\\\\\"</>\"\n+`;\n+\n exports[`.toHaveProperty() {pass: false} expect({\"key\": 1}).toHaveProperty('not') 1`] = `\n \"<dim>expect(</><red>received</><dim>).</>toHaveProperty<dim>(</><green>path</><dim>)</>\n \n@@ -3497,6 +3520,13 @@ Expected substring: <green>\\\\\"foo\\\\\"</>\n Received string:    <red>\\\\\"bar\\\\\"</>\"\n `;\n \n+exports[`.toStrictEqual() displays substring diff 1`] = `\n+\"<dim>expect(</><red>received</><dim>).</>toStrictEqual<dim>(</><green>expected</><dim>) // deep equality</>\n+\n+Expected: <green>\\\\\"<inverse>Another caveat is that</> Jest will not typecheck your tests.\\\\\"</>\n+Received: <red>\\\\\"<inverse>Because TypeScript support in Babel is just transpilation,</> Jest will not type<inverse>-</>check your tests<inverse> as they run</>.\\\\\"</>\"\n+`;\n+\n exports[`.toStrictEqual() matches the expected snapshot when it fails 1`] = `\n \"<dim>expect(</><red>received</><dim>).</>toStrictEqual<dim>(</><green>expected</><dim>) // deep equality</>\n "},{"sha":"de742ae50bcf08072d2da74caec96abd34d049c3","filename":"packages/expect/src/__tests__/matchers.test.js","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fexpect%2Fsrc%2F__tests__%2Fmatchers.test.js","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fexpect%2Fsrc%2F__tests__%2Fmatchers.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fexpect%2Fsrc%2F__tests__%2Fmatchers.test.js?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -215,6 +215,8 @@ describe('.toBe()', () => {\n     [Symbol('received'), Symbol('expected')],\n     [new Error('received'), new Error('expected')],\n     ['abc', 'cde'],\n+    ['painless JavaScript testing', 'delightful JavaScript testing'],\n+    ['', 'compare one-line string to empty string'],\n     ['with \\ntrailing space', 'without trailing space'],\n     ['four\\n4\\nline\\nstring', '3\\nline\\nstring'],\n     [[], []],\n@@ -318,6 +320,16 @@ describe('.toStrictEqual()', () => {\n     ).toThrowErrorMatchingSnapshot();\n   });\n \n+  it('displays substring diff', () => {\n+    const expected =\n+      'Another caveat is that Jest will not typecheck your tests.';\n+    const received =\n+      'Because TypeScript support in Babel is just transpilation, Jest will not type-check your tests as they run.';\n+    expect(() =>\n+      jestExpect(received).toStrictEqual(expected),\n+    ).toThrowErrorMatchingSnapshot();\n+  });\n+\n   it('does not pass for different types', () => {\n     expect({\n       test: new TestClassA(1, 2),\n@@ -358,6 +370,7 @@ describe('.toEqual()', () => {\n     [{a: 1}, {a: 2}],\n     [{a: 5}, {b: 6}],\n     ['banana', 'apple'],\n+    ['1\\u{00A0}234,57\\u{00A0}$', '1 234,57 $'], // issues/6881\n     [null, undefined],\n     [[1], [2]],\n     [[1, 2], [2, 1]],\n@@ -1348,6 +1361,14 @@ describe('.toHaveProperty()', () => {\n   const memoized = function() {};\n   memoized.memo = [];\n \n+  const receivedDiff = {\n+    children: ['\"That cartoon\"'],\n+    props: null,\n+    type: 'p',\n+  };\n+  const pathDiff = ['children', 0];\n+  const valueDiff = '\"That cat cartoon\"';\n+\n   [\n     [{a: {b: {c: {d: 1}}}}, 'a.b.c.d', 1],\n     [{a: {b: {c: {d: 1}}}}, ['a', 'b', 'c', 'd'], 1],\n@@ -1384,6 +1405,7 @@ describe('.toHaveProperty()', () => {\n     [{a: {b: {c: {d: 1}}}}, 'a.b.c.d', 2],\n     [{'a.b.c.d': 1}, 'a.b.c.d', 2],\n     [{'a.b.c.d': 1}, ['a.b.c.d'], 2],\n+    [receivedDiff, pathDiff, valueDiff],\n     [{a: {b: {c: {d: 1}}}}, ['a', 'b', 'c', 'd'], 2],\n     [{a: {b: {c: {}}}}, 'a.b.c.d', 1],\n     [{a: 1}, 'a.b.c.d', 5],"},{"sha":"52a8c9fe7e4feb1372956528a2e49c75a0a48e36","filename":"packages/expect/src/matchers.ts","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fexpect%2Fsrc%2Fmatchers.ts","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fexpect%2Fsrc%2Fmatchers.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fexpect%2Fsrc%2Fmatchers.ts?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -18,6 +18,7 @@ import {\n   getLabelPrinter,\n   matcherErrorMessage,\n   matcherHint,\n+  printDiffOrStringify,\n   printReceived,\n   printExpected,\n   printWithType,\n@@ -26,7 +27,6 @@ import {\n } from 'jest-matcher-utils';\n import {MatchersObject, MatcherState} from './types';\n import {\n-  printDiffOrStringify,\n   printExpectedConstructorName,\n   printExpectedConstructorNameNot,\n   printReceivedArrayContainExpectedItem,\n@@ -51,6 +51,9 @@ const RECEIVED_LABEL = 'Received';\n const EXPECTED_VALUE_LABEL = 'Expected value';\n const RECEIVED_VALUE_LABEL = 'Received value';\n \n+// The optional property of matcher context is true if undefined.\n+const isExpand = (expand?: boolean): boolean => expand !== false;\n+\n const toStrictEqualTesters = [\n   iterableEquality,\n   typeEquality,\n@@ -107,7 +110,7 @@ const matchers: MatchersObject = {\n               received,\n               EXPECTED_LABEL,\n               RECEIVED_LABEL,\n-              this.expand,\n+              isExpand(this.expand),\n             )\n           );\n         };\n@@ -577,7 +580,7 @@ const matchers: MatchersObject = {\n             received,\n             EXPECTED_LABEL,\n             RECEIVED_LABEL,\n-            this.expand,\n+            isExpand(this.expand),\n           );\n \n     // Passing the actual and expected objects so that a custom reporter\n@@ -751,7 +754,7 @@ const matchers: MatchersObject = {\n                 receivedValue,\n                 EXPECTED_VALUE_LABEL,\n                 RECEIVED_VALUE_LABEL,\n-                this.expand,\n+                isExpand(this.expand),\n               )\n             : `Received path: ${printReceived(\n                 expectedPathType === 'array' || receivedPath.length === 0\n@@ -886,7 +889,7 @@ const matchers: MatchersObject = {\n             getObjectSubset(received, expected),\n             EXPECTED_LABEL,\n             RECEIVED_LABEL,\n-            this.expand,\n+            isExpand(this.expand),\n           );\n \n     return {message, pass};\n@@ -918,7 +921,7 @@ const matchers: MatchersObject = {\n             received,\n             EXPECTED_LABEL,\n             RECEIVED_LABEL,\n-            this.expand,\n+            isExpand(this.expand),\n           );\n \n     // Passing the actual and expected objects so that a custom reporter"},{"sha":"aa03601398d8f6bde895f75b1f350bcb7df8bbce","filename":"packages/expect/src/print.ts","status":"modified","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fexpect%2Fsrc%2Fprint.ts","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fexpect%2Fsrc%2Fprint.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fexpect%2Fsrc%2Fprint.ts?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -6,18 +6,13 @@\n  *\n  */\n \n-import getType, {isPrimitive} from 'jest-get-type';\n import {\n   EXPECTED_COLOR,\n   INVERTED_COLOR,\n   RECEIVED_COLOR,\n-  diff,\n-  getLabelPrinter,\n-  printExpected,\n   printReceived,\n   stringify,\n } from 'jest-matcher-utils';\n-import {isOneline} from './utils';\n \n // Format substring but do not enclose in double quote marks.\n // The replacement is compatible with pretty-format package.\n@@ -66,74 +61,6 @@ export const printReceivedArrayContainExpectedItem = (\n       ']',\n   );\n \n-const shouldPrintDiff = (expected: unknown, received: unknown): boolean => {\n-  const expectedType = getType(expected);\n-  const receivedType = getType(received);\n-\n-  if (expectedType !== receivedType) {\n-    return false;\n-  }\n-\n-  if (isPrimitive(expected)) {\n-    // Print diff only if both strings have more than one line.\n-    return expectedType === 'string' && !isOneline(expected, received);\n-  }\n-\n-  if (\n-    expectedType === 'date' ||\n-    expectedType === 'function' ||\n-    expectedType === 'regexp'\n-  ) {\n-    return false;\n-  }\n-\n-  if (expected instanceof Error && received instanceof Error) {\n-    return false;\n-  }\n-\n-  return true;\n-};\n-\n-export const printDiffOrStringify = (\n-  expected: unknown,\n-  received: unknown,\n-  expectedLabel: string, // include colon and one or more spaces,\n-  receivedLabel: string, // same as returned by getLabelPrinter\n-  expand?: boolean, // diff option: true if `--expand` CLI option\n-): string => {\n-  // Cannot use same serialization as shortcut to avoid diff,\n-  // because stringify (that is, pretty-format with min option)\n-  // omits constructor name for array or object, too bad so sad :(\n-  const difference = shouldPrintDiff(expected, received)\n-    ? diff(expected, received, {\n-        aAnnotation: expectedLabel,\n-        bAnnotation: receivedLabel,\n-        expand,\n-      }) // string | null\n-    : null;\n-\n-  // Cannot reuse value of stringify(received) in report string,\n-  // because printReceived does inverse highlight space at end of line,\n-  // but RECEIVED_COLOR does not (it refers to a plain chalk method).\n-  if (\n-    typeof difference === 'string' &&\n-    difference.includes('- ' + expectedLabel) &&\n-    difference.includes('+ ' + receivedLabel)\n-  ) {\n-    return difference;\n-  }\n-\n-  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n-  return (\n-    `${printLabel(expectedLabel)}${printExpected(expected)}\\n` +\n-    `${printLabel(receivedLabel)}${\n-      stringify(expected) === stringify(received)\n-        ? 'serializes to the same string'\n-        : printReceived(received)\n-    }`\n-  );\n-};\n-\n export const printExpectedConstructorName = (\n   label: string,\n   expected: Function,"},{"sha":"66d758341438d24da8267bcc62cefdb5e9eb23cc","filename":"packages/jest-matcher-utils/package.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matcher-utils%2Fpackage.json?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -14,6 +14,7 @@\n   \"main\": \"build/index.js\",\n   \"dependencies\": {\n     \"chalk\": \"^2.0.1\",\n+    \"diff-sequences\": \"^24.3.0\",\n     \"jest-diff\": \"^24.8.0\",\n     \"jest-get-type\": \"^24.8.0\",\n     \"pretty-format\": \"^24.8.0\""},{"sha":"0df74e0bc895f9a79e06effcc04892848511d945","filename":"packages/jest-matcher-utils/src/cleanupSemantic.ts","status":"added","additions":556,"deletions":0,"changes":556,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fsrc%2FcleanupSemantic.ts","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fsrc%2FcleanupSemantic.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matcher-utils%2Fsrc%2FcleanupSemantic.ts?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -0,0 +1,556 @@\n+/**\n+ * Diff Match and Patch\n+ * Copyright 2018 The diff-match-patch Authors.\n+ * https://github.com/google/diff-match-patch\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * @fileoverview Computes the difference between two texts to create a patch.\n+ * Applies the patch onto another text, allowing for errors.\n+ * @author fraser@google.com (Neil Fraser)\n+ */\n+\n+/**\n+ * CHANGES by pedrottimark to diff_match_patch_uncompressed.ts file:\n+ *\n+ * 1. Delete anything not needed to use diff_cleanupSemantic method\n+ * 2. Convert from prototype properties to var declarations\n+ * 3. Convert Diff to class from constructor and prototype\n+ * 4. Add type annotations for arguments and return values\n+ * 5. Add exports\n+ */\n+\n+/**\n+ * The data structure representing a diff is an array of tuples:\n+ * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n+ * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n+ */\n+var DIFF_DELETE = -1;\n+var DIFF_INSERT = 1;\n+var DIFF_EQUAL = 0;\n+\n+/**\n+ * Class representing one diff tuple.\n+ * Attempts to look like a two-element array (which is what this used to be).\n+ * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n+ * @param {string} text Text to be deleted, inserted, or retained.\n+ * @constructor\n+ */\n+class Diff {\n+  0: number;\n+  1: string;\n+\n+  constructor(op: number, text: string) {\n+    this[0] = op;\n+    this[1] = text;\n+  }\n+}\n+\n+\n+/**\n+ * Determine the common prefix of two strings.\n+ * @param {string} text1 First string.\n+ * @param {string} text2 Second string.\n+ * @return {number} The number of characters common to the start of each\n+ *     string.\n+ */\n+var diff_commonPrefix = function(text1: string, text2: string): number {\n+  // Quick check for common null cases.\n+  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n+    return 0;\n+  }\n+  // Binary search.\n+  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n+  var pointermin = 0;\n+  var pointermax = Math.min(text1.length, text2.length);\n+  var pointermid = pointermax;\n+  var pointerstart = 0;\n+  while (pointermin < pointermid) {\n+    if (text1.substring(pointerstart, pointermid) ==\n+        text2.substring(pointerstart, pointermid)) {\n+      pointermin = pointermid;\n+      pointerstart = pointermin;\n+    } else {\n+      pointermax = pointermid;\n+    }\n+    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n+  }\n+  return pointermid;\n+};\n+\n+\n+/**\n+ * Determine the common suffix of two strings.\n+ * @param {string} text1 First string.\n+ * @param {string} text2 Second string.\n+ * @return {number} The number of characters common to the end of each string.\n+ */\n+var diff_commonSuffix = function(text1: string, text2: string): number {\n+  // Quick check for common null cases.\n+  if (!text1 || !text2 ||\n+      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n+    return 0;\n+  }\n+  // Binary search.\n+  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n+  var pointermin = 0;\n+  var pointermax = Math.min(text1.length, text2.length);\n+  var pointermid = pointermax;\n+  var pointerend = 0;\n+  while (pointermin < pointermid) {\n+    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n+        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n+      pointermin = pointermid;\n+      pointerend = pointermin;\n+    } else {\n+      pointermax = pointermid;\n+    }\n+    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n+  }\n+  return pointermid;\n+};\n+\n+\n+/**\n+ * Determine if the suffix of one string is the prefix of another.\n+ * @param {string} text1 First string.\n+ * @param {string} text2 Second string.\n+ * @return {number} The number of characters common to the end of the first\n+ *     string and the start of the second string.\n+ * @private\n+ */\n+var diff_commonOverlap_ = function(text1: string, text2: string): number {\n+  // Cache the text lengths to prevent multiple calls.\n+  var text1_length = text1.length;\n+  var text2_length = text2.length;\n+  // Eliminate the null case.\n+  if (text1_length == 0 || text2_length == 0) {\n+    return 0;\n+  }\n+  // Truncate the longer string.\n+  if (text1_length > text2_length) {\n+    text1 = text1.substring(text1_length - text2_length);\n+  } else if (text1_length < text2_length) {\n+    text2 = text2.substring(0, text1_length);\n+  }\n+  var text_length = Math.min(text1_length, text2_length);\n+  // Quick check for the worst case.\n+  if (text1 == text2) {\n+    return text_length;\n+  }\n+\n+  // Start by looking for a single character match\n+  // and increase length until no match is found.\n+  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n+  var best = 0;\n+  var length = 1;\n+  while (true) {\n+    var pattern = text1.substring(text_length - length);\n+    var found = text2.indexOf(pattern);\n+    if (found == -1) {\n+      return best;\n+    }\n+    length += found;\n+    if (found == 0 || text1.substring(text_length - length) ==\n+        text2.substring(0, length)) {\n+      best = length;\n+      length++;\n+    }\n+  }\n+};\n+\n+\n+/**\n+ * Reduce the number of edits by eliminating semantically trivial equalities.\n+ * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n+ */\n+ var diff_cleanupSemantic = function(diffs: Array<Diff>) {\n+  var changes = false;\n+  var equalities = [];  // Stack of indices where equalities are found.\n+  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n+  /** @type {?string} */\n+  var lastEquality = null;\n+  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n+  var pointer = 0;  // Index of current position.\n+  // Number of characters that changed prior to the equality.\n+  var length_insertions1 = 0;\n+  var length_deletions1 = 0;\n+  // Number of characters that changed after the equality.\n+  var length_insertions2 = 0;\n+  var length_deletions2 = 0;\n+  while (pointer < diffs.length) {\n+    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n+      equalities[equalitiesLength++] = pointer;\n+      length_insertions1 = length_insertions2;\n+      length_deletions1 = length_deletions2;\n+      length_insertions2 = 0;\n+      length_deletions2 = 0;\n+      lastEquality = diffs[pointer][1];\n+    } else {  // An insertion or deletion.\n+      if (diffs[pointer][0] == DIFF_INSERT) {\n+        length_insertions2 += diffs[pointer][1].length;\n+      } else {\n+        length_deletions2 += diffs[pointer][1].length;\n+      }\n+      // Eliminate an equality that is smaller or equal to the edits on both\n+      // sides of it.\n+      if (lastEquality && (lastEquality.length <=\n+          Math.max(length_insertions1, length_deletions1)) &&\n+          (lastEquality.length <= Math.max(length_insertions2,\n+                                           length_deletions2))) {\n+        // Duplicate record.\n+        diffs.splice(equalities[equalitiesLength - 1], 0,\n+                     new Diff(DIFF_DELETE, lastEquality));\n+        // Change second copy to insert.\n+        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n+        // Throw away the equality we just deleted.\n+        equalitiesLength--;\n+        // Throw away the previous equality (it needs to be reevaluated).\n+        equalitiesLength--;\n+        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n+        length_insertions1 = 0;  // Reset the counters.\n+        length_deletions1 = 0;\n+        length_insertions2 = 0;\n+        length_deletions2 = 0;\n+        lastEquality = null;\n+        changes = true;\n+      }\n+    }\n+    pointer++;\n+  }\n+\n+  // Normalize the diff.\n+  if (changes) {\n+    diff_cleanupMerge(diffs);\n+  }\n+  diff_cleanupSemanticLossless(diffs);\n+\n+  // Find any overlaps between deletions and insertions.\n+  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n+  //   -> <del>abc</del>xxx<ins>def</ins>\n+  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n+  //   -> <ins>def</ins>xxx<del>abc</del>\n+  // Only extract an overlap if it is as big as the edit ahead or behind it.\n+  pointer = 1;\n+  while (pointer < diffs.length) {\n+    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n+        diffs[pointer][0] == DIFF_INSERT) {\n+      var deletion = diffs[pointer - 1][1];\n+      var insertion = diffs[pointer][1];\n+      var overlap_length1 = diff_commonOverlap_(deletion, insertion);\n+      var overlap_length2 = diff_commonOverlap_(insertion, deletion);\n+      if (overlap_length1 >= overlap_length2) {\n+        if (overlap_length1 >= deletion.length / 2 ||\n+            overlap_length1 >= insertion.length / 2) {\n+          // Overlap found.  Insert an equality and trim the surrounding edits.\n+          diffs.splice(pointer, 0, new Diff(DIFF_EQUAL,\n+              insertion.substring(0, overlap_length1)));\n+          diffs[pointer - 1][1] =\n+              deletion.substring(0, deletion.length - overlap_length1);\n+          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n+          pointer++;\n+        }\n+      } else {\n+        if (overlap_length2 >= deletion.length / 2 ||\n+            overlap_length2 >= insertion.length / 2) {\n+          // Reverse overlap found.\n+          // Insert an equality and swap and trim the surrounding edits.\n+          diffs.splice(pointer, 0, new Diff(DIFF_EQUAL,\n+              deletion.substring(0, overlap_length2)));\n+          diffs[pointer - 1][0] = DIFF_INSERT;\n+          diffs[pointer - 1][1] =\n+              insertion.substring(0, insertion.length - overlap_length2);\n+          diffs[pointer + 1][0] = DIFF_DELETE;\n+          diffs[pointer + 1][1] =\n+              deletion.substring(overlap_length2);\n+          pointer++;\n+        }\n+      }\n+      pointer++;\n+    }\n+    pointer++;\n+  }\n+};\n+\n+\n+/**\n+ * Look for single edits surrounded on both sides by equalities\n+ * which can be shifted sideways to align the edit to a word boundary.\n+ * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n+ * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n+ */\n+var diff_cleanupSemanticLossless = function(diffs: Array<Diff>) {\n+  /**\n+   * Given two strings, compute a score representing whether the internal\n+   * boundary falls on logical boundaries.\n+   * Scores range from 6 (best) to 0 (worst).\n+   * Closure, but does not reference any external variables.\n+   * @param {string} one First string.\n+   * @param {string} two Second string.\n+   * @return {number} The score.\n+   * @private\n+   */\n+  function diff_cleanupSemanticScore_(one: string, two: string): number {\n+    if (!one || !two) {\n+      // Edges are the best.\n+      return 6;\n+    }\n+\n+    // Each port of this function behaves slightly differently due to\n+    // subtle differences in each language's definition of things like\n+    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n+    // the choice has been made to use each language's native features\n+    // rather than force total conformity.\n+    var char1 = one.charAt(one.length - 1);\n+    var char2 = two.charAt(0);\n+    var nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex_);\n+    var nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex_);\n+    var whitespace1 = nonAlphaNumeric1 &&\n+        char1.match(whitespaceRegex_);\n+    var whitespace2 = nonAlphaNumeric2 &&\n+        char2.match(whitespaceRegex_);\n+    var lineBreak1 = whitespace1 &&\n+        char1.match(linebreakRegex_);\n+    var lineBreak2 = whitespace2 &&\n+        char2.match(linebreakRegex_);\n+    var blankLine1 = lineBreak1 &&\n+        one.match(blanklineEndRegex_);\n+    var blankLine2 = lineBreak2 &&\n+        two.match(blanklineStartRegex_);\n+\n+    if (blankLine1 || blankLine2) {\n+      // Five points for blank lines.\n+      return 5;\n+    } else if (lineBreak1 || lineBreak2) {\n+      // Four points for line breaks.\n+      return 4;\n+    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n+      // Three points for end of sentences.\n+      return 3;\n+    } else if (whitespace1 || whitespace2) {\n+      // Two points for whitespace.\n+      return 2;\n+    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n+      // One point for non-alphanumeric.\n+      return 1;\n+    }\n+    return 0;\n+  }\n+\n+  var pointer = 1;\n+  // Intentionally ignore the first and last element (don't need checking).\n+  while (pointer < diffs.length - 1) {\n+    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n+        diffs[pointer + 1][0] == DIFF_EQUAL) {\n+      // This is a single edit surrounded by equalities.\n+      var equality1 = diffs[pointer - 1][1];\n+      var edit = diffs[pointer][1];\n+      var equality2 = diffs[pointer + 1][1];\n+\n+      // First, shift the edit as far left as possible.\n+      var commonOffset = diff_commonSuffix(equality1, edit);\n+      if (commonOffset) {\n+        var commonString = edit.substring(edit.length - commonOffset);\n+        equality1 = equality1.substring(0, equality1.length - commonOffset);\n+        edit = commonString + edit.substring(0, edit.length - commonOffset);\n+        equality2 = commonString + equality2;\n+      }\n+\n+      // Second, step character by character right, looking for the best fit.\n+      var bestEquality1 = equality1;\n+      var bestEdit = edit;\n+      var bestEquality2 = equality2;\n+      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n+          diff_cleanupSemanticScore_(edit, equality2);\n+      while (edit.charAt(0) === equality2.charAt(0)) {\n+        equality1 += edit.charAt(0);\n+        edit = edit.substring(1) + equality2.charAt(0);\n+        equality2 = equality2.substring(1);\n+        var score = diff_cleanupSemanticScore_(equality1, edit) +\n+            diff_cleanupSemanticScore_(edit, equality2);\n+        // The >= encourages trailing rather than leading whitespace on edits.\n+        if (score >= bestScore) {\n+          bestScore = score;\n+          bestEquality1 = equality1;\n+          bestEdit = edit;\n+          bestEquality2 = equality2;\n+        }\n+      }\n+\n+      if (diffs[pointer - 1][1] != bestEquality1) {\n+        // We have an improvement, save it back to the diff.\n+        if (bestEquality1) {\n+          diffs[pointer - 1][1] = bestEquality1;\n+        } else {\n+          diffs.splice(pointer - 1, 1);\n+          pointer--;\n+        }\n+        diffs[pointer][1] = bestEdit;\n+        if (bestEquality2) {\n+          diffs[pointer + 1][1] = bestEquality2;\n+        } else {\n+          diffs.splice(pointer + 1, 1);\n+          pointer--;\n+        }\n+      }\n+    }\n+    pointer++;\n+  }\n+};\n+\n+\n+// Define some regex patterns for matching boundaries.\n+var nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\n+var whitespaceRegex_ = /\\s/;\n+var linebreakRegex_ = /[\\r\\n]/;\n+var blanklineEndRegex_ = /\\n\\r?\\n$/;\n+var blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n+\n+\n+/**\n+ * Reorder and merge like edit sections.  Merge equalities.\n+ * Any edit section can move as long as it doesn't cross an equality.\n+ * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n+ */\n+var diff_cleanupMerge = function(diffs: Array<Diff>) {\n+  // Add a dummy entry at the end.\n+  diffs.push(new Diff(DIFF_EQUAL, ''));\n+  var pointer = 0;\n+  var count_delete = 0;\n+  var count_insert = 0;\n+  var text_delete = '';\n+  var text_insert = '';\n+  var commonlength;\n+  while (pointer < diffs.length) {\n+    switch (diffs[pointer][0]) {\n+      case DIFF_INSERT:\n+        count_insert++;\n+        text_insert += diffs[pointer][1];\n+        pointer++;\n+        break;\n+      case DIFF_DELETE:\n+        count_delete++;\n+        text_delete += diffs[pointer][1];\n+        pointer++;\n+        break;\n+      case DIFF_EQUAL:\n+        // Upon reaching an equality, check for prior redundancies.\n+        if (count_delete + count_insert > 1) {\n+          if (count_delete !== 0 && count_insert !== 0) {\n+            // Factor out any common prefixies.\n+            commonlength = diff_commonPrefix(text_insert, text_delete);\n+            if (commonlength !== 0) {\n+              if ((pointer - count_delete - count_insert) > 0 &&\n+                  diffs[pointer - count_delete - count_insert - 1][0] ==\n+                  DIFF_EQUAL) {\n+                diffs[pointer - count_delete - count_insert - 1][1] +=\n+                    text_insert.substring(0, commonlength);\n+              } else {\n+                diffs.splice(0, 0, new Diff(DIFF_EQUAL,\n+                    text_insert.substring(0, commonlength)));\n+                pointer++;\n+              }\n+              text_insert = text_insert.substring(commonlength);\n+              text_delete = text_delete.substring(commonlength);\n+            }\n+            // Factor out any common suffixies.\n+            commonlength = diff_commonSuffix(text_insert, text_delete);\n+            if (commonlength !== 0) {\n+              diffs[pointer][1] = text_insert.substring(text_insert.length -\n+                  commonlength) + diffs[pointer][1];\n+              text_insert = text_insert.substring(0, text_insert.length -\n+                  commonlength);\n+              text_delete = text_delete.substring(0, text_delete.length -\n+                  commonlength);\n+            }\n+          }\n+          // Delete the offending records and add the merged ones.\n+          pointer -= count_delete + count_insert;\n+          diffs.splice(pointer, count_delete + count_insert);\n+          if (text_delete.length) {\n+            diffs.splice(pointer, 0,\n+                new Diff(DIFF_DELETE, text_delete));\n+            pointer++;\n+          }\n+          if (text_insert.length) {\n+            diffs.splice(pointer, 0,\n+                new Diff(DIFF_INSERT, text_insert));\n+            pointer++;\n+          }\n+          pointer++;\n+        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n+          // Merge this equality with the previous one.\n+          diffs[pointer - 1][1] += diffs[pointer][1];\n+          diffs.splice(pointer, 1);\n+        } else {\n+          pointer++;\n+        }\n+        count_insert = 0;\n+        count_delete = 0;\n+        text_delete = '';\n+        text_insert = '';\n+        break;\n+    }\n+  }\n+  if (diffs[diffs.length - 1][1] === '') {\n+    diffs.pop();  // Remove the dummy entry at the end.\n+  }\n+\n+  // Second pass: look for single edits surrounded on both sides by equalities\n+  // which can be shifted sideways to eliminate an equality.\n+  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n+  var changes = false;\n+  pointer = 1;\n+  // Intentionally ignore the first and last element (don't need checking).\n+  while (pointer < diffs.length - 1) {\n+    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n+        diffs[pointer + 1][0] == DIFF_EQUAL) {\n+      // This is a single edit surrounded by equalities.\n+      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n+          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n+        // Shift the edit over the previous equality.\n+        diffs[pointer][1] = diffs[pointer - 1][1] +\n+            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n+                                        diffs[pointer - 1][1].length);\n+        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n+        diffs.splice(pointer - 1, 1);\n+        changes = true;\n+      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n+          diffs[pointer + 1][1]) {\n+        // Shift the edit over the next equality.\n+        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n+        diffs[pointer][1] =\n+            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n+            diffs[pointer + 1][1];\n+        diffs.splice(pointer + 1, 1);\n+        changes = true;\n+      }\n+    }\n+    pointer++;\n+  }\n+  // If shifts were made, the diff needs reordering and another shift sweep.\n+  if (changes) {\n+    diff_cleanupMerge(diffs);\n+  }\n+};\n+\n+\n+export {\n+  Diff,\n+  DIFF_EQUAL,\n+  DIFF_DELETE,\n+  DIFF_INSERT,\n+  diff_cleanupSemantic as cleanupSemantic,\n+};"},{"sha":"6df165de718a851a7d0b1f522e00852b3d269c9b","filename":"packages/jest-matcher-utils/src/diffStrings.ts","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fsrc%2FdiffStrings.ts","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fsrc%2FdiffStrings.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matcher-utils%2Fsrc%2FdiffStrings.ts?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+import diffSequences from 'diff-sequences';\n+\n+import {\n+  cleanupSemantic,\n+  Diff,\n+  DIFF_EQUAL,\n+  DIFF_DELETE,\n+  DIFF_INSERT,\n+} from './cleanupSemantic';\n+\n+const diffStrings = (a: string, b: string): Array<Diff> | null => {\n+  const isCommon = (aIndex: number, bIndex: number) => a[aIndex] === b[bIndex];\n+\n+  let aIndex = 0;\n+  let bIndex = 0;\n+  const diffs: Array<Diff> = [];\n+\n+  const foundSubsequence = (\n+    nCommon: number,\n+    aCommon: number,\n+    bCommon: number,\n+  ) => {\n+    if (aIndex !== aCommon) {\n+      diffs.push(new Diff(DIFF_DELETE, a.slice(aIndex, aCommon)));\n+    }\n+    if (bIndex !== bCommon) {\n+      diffs.push(new Diff(DIFF_INSERT, b.slice(bIndex, bCommon)));\n+    }\n+\n+    aIndex = aCommon + nCommon; // number of characters compared in a\n+    bIndex = bCommon + nCommon; // number of characters compared in b\n+    diffs.push(new Diff(DIFF_EQUAL, b.slice(bCommon, bIndex)));\n+  };\n+\n+  diffSequences(a.length, b.length, isCommon, foundSubsequence);\n+\n+  // After the last common subsequence, push remaining change items.\n+  if (aIndex !== a.length) {\n+    diffs.push(new Diff(DIFF_DELETE, a.slice(aIndex)));\n+  }\n+  if (bIndex !== b.length) {\n+    diffs.push(new Diff(DIFF_INSERT, b.slice(bIndex)));\n+  }\n+\n+  cleanupSemantic(diffs);\n+\n+  // Assume it has a change string, but does it have a common string?\n+  return diffs.some(diff => diff[0] === DIFF_EQUAL) ? diffs : null;\n+};\n+\n+export default diffStrings;"},{"sha":"ee0b59edc999bf1ebf2e366c35a53786bdb66ffd","filename":"packages/jest-matcher-utils/src/index.ts","status":"modified","additions":115,"deletions":1,"changes":116,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matcher-utils%2Fsrc%2Findex.ts?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -7,8 +7,16 @@\n \n import chalk from 'chalk';\n import jestDiff, {DiffOptions} from 'jest-diff';\n-import getType from 'jest-get-type';\n+import getType, {isPrimitive} from 'jest-get-type';\n import prettyFormat from 'pretty-format';\n+\n+import diffStrings from './diffStrings';\n+import {\n+  MULTILINE_REGEXP,\n+  getExpectedString,\n+  getReceivedString,\n+} from './printDiff';\n+\n const {\n   AsymmetricMatcher,\n   DOMCollection,\n@@ -198,6 +206,112 @@ export const ensureExpectedIsNonNegativeInteger = (\n   }\n };\n \n+const isDiffable = (expected: unknown, received: unknown): boolean => {\n+  const expectedType = getType(expected);\n+  const receivedType = getType(received);\n+\n+  if (expectedType !== receivedType) {\n+    return false;\n+  }\n+\n+  if (isPrimitive(expected)) {\n+    // Print diff only if both strings have more than one line.\n+    return (\n+      typeof expected === 'string' &&\n+      typeof received === 'string' &&\n+      MULTILINE_REGEXP.test(expected) &&\n+      MULTILINE_REGEXP.test(received)\n+    );\n+  }\n+\n+  if (\n+    expectedType === 'date' ||\n+    expectedType === 'function' ||\n+    expectedType === 'regexp'\n+  ) {\n+    return false;\n+  }\n+\n+  if (expected instanceof Error && received instanceof Error) {\n+    return false;\n+  }\n+\n+  if (\n+    expectedType === 'object' &&\n+    typeof (expected as any).asymmetricMatch === 'function'\n+  ) {\n+    return false;\n+  }\n+\n+  if (\n+    receivedType === 'object' &&\n+    typeof (received as any).asymmetricMatch === 'function'\n+  ) {\n+    return false;\n+  }\n+\n+  return true;\n+};\n+\n+export const printDiffOrStringify = (\n+  expected: unknown,\n+  received: unknown,\n+  expectedLabel: string,\n+  receivedLabel: string,\n+  expand: boolean, // CLI options: true if `--expand` or false if `--no-expand`\n+): string => {\n+  const printLabel = getLabelPrinter(expectedLabel, receivedLabel);\n+\n+  if (\n+    typeof expected === 'string' &&\n+    typeof received === 'string' &&\n+    expected.length !== 0 &&\n+    received.length !== 0 &&\n+    !MULTILINE_REGEXP.test(expected) &&\n+    !MULTILINE_REGEXP.test(received)\n+  ) {\n+    const diffs = diffStrings(expected, received);\n+\n+    if (Array.isArray(diffs)) {\n+      const expectedLine =\n+        printLabel(expectedLabel) + printExpected(getExpectedString(diffs));\n+      const receivedLine =\n+        printLabel(receivedLabel) + printReceived(getReceivedString(diffs));\n+\n+      return expectedLine + '\\n' + receivedLine;\n+    }\n+  } else if (isDiffable(expected, received)) {\n+    // Cannot use same serialization as shortcut to avoid diff,\n+    // because stringify (that is, pretty-format with min option)\n+    // omits constructor name for array or object, too bad so sad :(\n+    const difference = jestDiff(expected, received, {\n+      aAnnotation: expectedLabel,\n+      bAnnotation: receivedLabel,\n+      expand,\n+    });\n+\n+    if (\n+      typeof difference === 'string' &&\n+      difference.includes('- ' + expectedLabel) &&\n+      difference.includes('+ ' + receivedLabel)\n+    ) {\n+      return difference;\n+    }\n+  }\n+\n+  // Cannot reuse value of stringify(received) in report string,\n+  // because printReceived does inverse highlight space at end of line,\n+  // but RECEIVED_COLOR does not (it refers to a plain chalk method).\n+  return (\n+    `${printLabel(expectedLabel)}${printExpected(expected)}\\n` +\n+    `${printLabel(receivedLabel)}${\n+      stringify(expected) === stringify(received)\n+        ? 'serializes to the same string'\n+        : printReceived(received)\n+    }`\n+  );\n+};\n+\n // Sometimes, e.g. when comparing two numbers, the output from jest-diff\n // does not contain more information than the `Expected:` / `Received:` already gives.\n // In those cases, we do not print a diff to make the output shorter and not redundant."},{"sha":"6866d8513f8089d5c54168ae72951067f294dc94","filename":"packages/jest-matcher-utils/src/printDiff.ts","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fsrc%2FprintDiff.ts","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Fsrc%2FprintDiff.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matcher-utils%2Fsrc%2FprintDiff.ts?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+import {Diff, DIFF_EQUAL, DIFF_DELETE, DIFF_INSERT} from './cleanupSemantic';\n+import {INVERTED_COLOR} from './index';\n+\n+export const getDiffString = (diffs: Array<Diff>, op: number): string => {\n+  const hasEqual = diffs.some(\n+    diff => diff[0] === DIFF_EQUAL && diff[1].length !== 0,\n+  );\n+\n+  return diffs.reduce(\n+    (reduced: string, diff: Diff): string =>\n+      reduced +\n+      (diff[0] === DIFF_EQUAL\n+        ? diff[1]\n+        : diff[0] !== op\n+        ? ''\n+        : hasEqual\n+        ? INVERTED_COLOR(diff[1])\n+        : diff[1]),\n+    '',\n+  );\n+};\n+\n+export const getExpectedString = (diffs: Array<Diff>): string =>\n+  getDiffString(diffs, DIFF_DELETE);\n+\n+export const getReceivedString = (diffs: Array<Diff>): string =>\n+  getDiffString(diffs, DIFF_INSERT);\n+\n+export const MULTILINE_REGEXP = /\\n/;"},{"sha":"8210e0546badbc291c775b0817f8cc8718a7ce08","filename":"packages/jest-matcher-utils/tsconfig.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Ftsconfig.json","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/packages%2Fjest-matcher-utils%2Ftsconfig.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matcher-utils%2Ftsconfig.json?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -5,6 +5,7 @@\n     \"outDir\": \"build\"\n   },\n   \"references\": [\n+    {\"path\": \"../diff-sequences\"},\n     {\"path\": \"../jest-diff\"},\n     {\"path\": \"../jest-get-type\"},\n     {\"path\": \"../pretty-format\"}"},{"sha":"17587bb26337d88e6607c674f9649b322b2a7e32","filename":"scripts/checkCopyrightHeaders.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/95d6d5593c5f88027759ce3ce9e247211878a0da/scripts%2FcheckCopyrightHeaders.js","raw_url":"https://github.com/facebook/jest/raw/95d6d5593c5f88027759ce3ce9e247211878a0da/scripts%2FcheckCopyrightHeaders.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/scripts%2FcheckCopyrightHeaders.js?ref=95d6d5593c5f88027759ce3ce9e247211878a0da","patch":"@@ -101,6 +101,7 @@ const CUSTOM_IGNORED_PATTERNS = [\n   '^flow-typed/.*',\n   '^packages/expect/src/jasmineUtils\\\\.ts$',\n   '^packages/jest-config/src/vendor/jsonlint\\\\.js$',\n+  '^packages/jest-matcher-utils/src/cleanupSemantic\\\\.ts$',\n ].map(createRegExp);\n \n const IGNORED_PATTERNS = ["}]},{"url":"https://api.github.com/repos/facebook/jest/issues/10902","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/10902/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/10902/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/10902/events","html_url":"https://github.com/facebook/jest/pull/10902","id":755397244,"node_id":"MDExOlB1bGxSZXF1ZXN0NTMxMTE0ODc0","number":10902,"title":"Add in-order scheduling policy","user":{"login":"MichaReiser","id":1203881,"node_id":"MDQ6VXNlcjEyMDM4ODE=","avatar_url":"https://avatars.githubusercontent.com/u/1203881?v=4","gravatar_id":"","url":"https://api.github.com/users/MichaReiser","html_url":"https://github.com/MichaReiser","followers_url":"https://api.github.com/users/MichaReiser/followers","following_url":"https://api.github.com/users/MichaReiser/following{/other_user}","gists_url":"https://api.github.com/users/MichaReiser/gists{/gist_id}","starred_url":"https://api.github.com/users/MichaReiser/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/MichaReiser/subscriptions","organizations_url":"https://api.github.com/users/MichaReiser/orgs","repos_url":"https://api.github.com/users/MichaReiser/repos","events_url":"https://api.github.com/users/MichaReiser/events{/privacy}","received_events_url":"https://api.github.com/users/MichaReiser/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":{"login":"cpojer","id":13352,"node_id":"MDQ6VXNlcjEzMzUy","avatar_url":"https://avatars.githubusercontent.com/u/13352?v=4","gravatar_id":"","url":"https://api.github.com/users/cpojer","html_url":"https://github.com/cpojer","followers_url":"https://api.github.com/users/cpojer/followers","following_url":"https://api.github.com/users/cpojer/following{/other_user}","gists_url":"https://api.github.com/users/cpojer/gists{/gist_id}","starred_url":"https://api.github.com/users/cpojer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpojer/subscriptions","organizations_url":"https://api.github.com/users/cpojer/orgs","repos_url":"https://api.github.com/users/cpojer/repos","events_url":"https://api.github.com/users/cpojer/events{/privacy}","received_events_url":"https://api.github.com/users/cpojer/received_events","type":"User","site_admin":false},"assignees":[{"login":"cpojer","id":13352,"node_id":"MDQ6VXNlcjEzMzUy","avatar_url":"https://avatars.githubusercontent.com/u/13352?v=4","gravatar_id":"","url":"https://api.github.com/users/cpojer","html_url":"https://github.com/cpojer","followers_url":"https://api.github.com/users/cpojer/followers","following_url":"https://api.github.com/users/cpojer/following{/other_user}","gists_url":"https://api.github.com/users/cpojer/gists{/gist_id}","starred_url":"https://api.github.com/users/cpojer/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/cpojer/subscriptions","organizations_url":"https://api.github.com/users/cpojer/orgs","repos_url":"https://api.github.com/users/cpojer/repos","events_url":"https://api.github.com/users/cpojer/events{/privacy}","received_events_url":"https://api.github.com/users/cpojer/received_events","type":"User","site_admin":false}],"milestone":null,"comments":8,"created_at":"2020-12-02T15:56:13Z","updated_at":"2021-05-10T22:07:11Z","closed_at":"2021-01-11T16:21:35Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/10902","html_url":"https://github.com/facebook/jest/pull/10902","diff_url":"https://github.com/facebook/jest/pull/10902.diff","patch_url":"https://github.com/facebook/jest/pull/10902.patch","merged_at":"2021-01-11T16:21:35Z"},"body":"## Summary\r\n\r\nThe jest worker implementation today uses round robin to load balance the work across workers if sticky workers aren't used.   \r\n\r\nThis is problematic if the result from the worker is in the critical path to create more work that can be scheduled on the threadpool. Metro, for example, uses the workers to transform the JavaScript files and extract its dependencies and then schedules the transformation of the dependencies. It's, therefore, critical that the first few  files are transformed as quick as possible to build up a queue with enough work to use all workers.\r\n\r\nThe problem with the use of round robin is that jest assigns each task to a new worker of which each pays the cost of requiring modules (if inline-requires are used) and JITing the hot paths which, in the case of Metro, is a serious overhead\r\nof a couple of seconds.\r\n\r\nThis diff adds the `in-order` scheduling policy and makes it configurable for clients (keeping round robin as the default). The first come policy assigns the task to the first free worker (starting with worker 0) or puts it in the queue of each worker to be picked up by the first available worker. \r\n\r\nWhy call it `workerSchedulingPolicy` and not just `schedulingPolicy`. My motivation is to make it clear that it does not affect the order in which tasks are scheduled, e.g. fifo vs lifo or a priority queue. A `taskSchedulingPolicy` might be something we want to add in the future. \r\n\r\nI tested this new scheduling with Metro:\r\n\r\n- transforming 2 changed files (B is a dependency of A):\r\n  Performance improved from 12.7s to 10.8s which is almost 2 seconds.\r\n  Main reason: Only one worker had to pay for the initialization cost\r\n- Full rebuild: No significant difference either way\r\n\r\n**Outdated**\r\nThe round robin implementation was added in #4921 by @mjesun but unfortunately without an in-detail explanation why it's superior. My understanding is that jest-worker is different from e.g. cluster that jest-worker knows how busy each worker is. A worker is either busy or idle. However, it then doesn't make a difference if all the work is performed by one worker or by different workers (assuming all are hot) as long as it uses the highest possible concurrency. This isn't true if sticky workers are used because they can then make use of  caches but sticky workers aren't affected by this change\r\n\r\n## Test plan\r\n\r\n### Empty\r\n\r\n**Round Robin**\r\n\r\n```\r\n---------------------------------------------------------------------------\r\ntotal worker-farm: { wFGT: 83718, wFPT: 83229 }\r\ntotal jest-worker: { jWGT: 29023, jWPT: 27983 }\r\n---------------------------------------------------------------------------\r\n% improvement over 100000 calls (global time): 65.33242552378222\r\n% improvement over 100000 calls (processing time): 66.3783056386596\r\n```\r\n\r\n**In Order**\r\n\r\n```\r\ntotal worker-farm: { wFGT: 83830, wFPT: 83278 }\r\ntotal jest-worker: { jWGT: 29008, jWPT: 27962 }\r\n---------------------------------------------------------------------------\r\n% improvement over 100000 calls (global time): 65.39663604914708\r\n% improvement over 100000 calls (processing time): 66.42330507456951\r\n```\r\n\r\n\r\n### Load\r\n\r\n**Round Robin**\r\n\r\n```\r\n\r\n---------------------------------------------------------------------------\r\ntotal worker-farm: { wFGT: 97859, wFPT: 97345 }\r\ntotal jest-worker: { jWGT: 57297, jWPT: 56187 }\r\n---------------------------------------------------------------------------\r\n% improvement over 100000 calls (global time): 41.44943234653941\r\n% improvement over 100000 calls (processing time): 42.280548564384404\r\n```\r\n\r\n**In Order**\r\n\r\n```\r\ntotal worker-farm: { wFGT: 97806, wFPT: 97286 }\r\ntotal jest-worker: { jWGT: 56403, jWPT: 55332 }\r\n---------------------------------------------------------------------------\r\n% improvement over 100000 calls (global time): 42.33175878780443\r\n% improvement over 100000 calls (processing time): 43.12439611043727\r\n```","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/10902/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/10902/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"e85e506401f6015a948e19f3a371fd026c62ed74","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/111abcdbb67755f721ce3335218a98f98604b58c/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/111abcdbb67755f721ce3335218a98f98604b58c/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=111abcdbb67755f721ce3335218a98f98604b58c","patch":"@@ -19,6 +19,7 @@\n - `[jest-runtime, jest-transform]` share `cacheFS` between runtime and transformer ([#10901](https://github.com/facebook/jest/pull/10901))\n - `[jest-transform]` Pass config options defined in Jest's config to transformer's `process` and `getCacheKey` functions ([#10926](https://github.com/facebook/jest/pull/10926))\n - `[jest-worker]` Add support for custom task queues and adds a `PriorityQueue` implementation. ([#10921](https://github.com/facebook/jest/pull/10921))\n+- `[jest-worker]` Add in-order scheduling policy to jest worker ([10902](https://github.com/facebook/jest/pull/10902))\n \n ### Fixes\n "},{"sha":"d89d936b368e068fea352ed8152acb0f3a7160fd","filename":"packages/jest-worker/README.md","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/facebook/jest/blob/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2FREADME.md","raw_url":"https://github.com/facebook/jest/raw/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2FREADME.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2FREADME.md?ref=111abcdbb67755f721ce3335218a98f98604b58c","patch":"@@ -91,6 +91,15 @@ Provide a custom worker pool to be used for spawning child processes. By default\n \n `jest-worker` will automatically detect if `worker_threads` are available, but will not use them unless passed `enableWorkerThreads: true`.\n \n+### `workerSchedulingPolicy: 'round-robin' | 'in-order'` (optional)\n+\n+Specifies the policy how tasks are assigned to workers if multiple workers are _idle_:\n+\n+- `round-robin` (default): The task will be sequentially distributed onto the workers. The first task is assigned to the worker 1, the second to the worker 2, to ensure that the work is distributed across workers.\n+- `in-order`: The task will be assigned to the first free worker starting with worker 1 and only assign the work to worker 2 if the worker 1 is busy.\n+\n+Tasks are always assigned to the first free worker as soon as tasks start to queue up. The scheduling policy does not define the task scheduling which is always first-in, first-out.\n+\n ### `taskQueue`: TaskQueue` (optional)\n \n The task queue defines in which order tasks (method calls) are processed by the workers. `jest-worker` ships with a `FifoQueue` and `PriorityQueue`:"},{"sha":"c87897a78d1a0574c395456a5131850f5edc0a78","filename":"packages/jest-worker/src/Farm.ts","status":"modified","additions":29,"deletions":17,"changes":46,"blob_url":"https://github.com/facebook/jest/blob/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2FFarm.ts","raw_url":"https://github.com/facebook/jest/raw/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2FFarm.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2FFarm.ts?ref=111abcdbb67755f721ce3335218a98f98604b58c","patch":"@@ -22,28 +22,29 @@ import {\n } from './types';\n \n export default class Farm {\n-  private _computeWorkerKey: FarmOptions['computeWorkerKey'];\n-  private _cacheKeys: Record<string, WorkerInterface>;\n-  private _callback: Function;\n-  private _locks: Array<boolean>;\n-  private _numOfWorkers: number;\n-  private _offset: number;\n-  private _taskQueue: TaskQueue;\n+  private readonly _computeWorkerKey: FarmOptions['computeWorkerKey'];\n+  private readonly _workerSchedulingPolicy: NonNullable<\n+    FarmOptions['workerSchedulingPolicy']\n+  >;\n+  private readonly _cacheKeys: Record<string, WorkerInterface> = Object.create(\n+    null,\n+  );\n+  private readonly _locks: Array<boolean> = [];\n+  private _offset = 0;\n+  private readonly _taskQueue: TaskQueue;\n \n   constructor(\n-    numOfWorkers: number,\n-    callback: Function,\n+    private _numOfWorkers: number,\n+    private _callback: Function,\n     options: {\n       computeWorkerKey?: FarmOptions['computeWorkerKey'];\n+      workerSchedulingPolicy?: FarmOptions['workerSchedulingPolicy'];\n       taskQueue?: TaskQueue;\n     } = {},\n   ) {\n-    this._cacheKeys = Object.create(null);\n-    this._callback = callback;\n-    this._locks = [];\n-    this._numOfWorkers = numOfWorkers;\n-    this._offset = 0;\n     this._computeWorkerKey = options.computeWorkerKey;\n+    this._workerSchedulingPolicy =\n+      options.workerSchedulingPolicy ?? 'round-robin';\n     this._taskQueue = options.taskQueue ?? new FifoQueue();\n   }\n \n@@ -147,19 +148,30 @@ export default class Farm {\n   private _push(task: QueueChildMessage): Farm {\n     this._taskQueue.enqueue(task);\n \n+    const offset = this._getNextWorkerOffset();\n     for (let i = 0; i < this._numOfWorkers; i++) {\n-      this._process((this._offset + i) % this._numOfWorkers);\n+      this._process((offset + i) % this._numOfWorkers);\n \n       if (task.request[1]) {\n         break;\n       }\n     }\n \n-    this._offset++;\n-\n     return this;\n   }\n \n+  // Typescript ensures that the switch statement is exhaustive.\n+  // Adding an explicit return at the end would disable the exhaustive check void.\n+  // eslint-disable-next-line consistent-return\n+  private _getNextWorkerOffset(): number {\n+    switch (this._workerSchedulingPolicy) {\n+      case 'in-order':\n+        return 0;\n+      case 'round-robin':\n+        return this._offset++;\n+    }\n+  }\n+\n   private _lock(workerId: number): void {\n     this._locks[workerId] = true;\n   }"},{"sha":"50fffc721e17cd6bbd8d54380e03d8560348a752","filename":"packages/jest-worker/src/__tests__/process-integration.test.js","status":"modified","additions":29,"deletions":1,"changes":30,"blob_url":"https://github.com/facebook/jest/blob/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fprocess-integration.test.js","raw_url":"https://github.com/facebook/jest/raw/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fprocess-integration.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fprocess-integration.test.js?ref=111abcdbb67755f721ce3335218a98f98604b58c","patch":"@@ -83,17 +83,45 @@ describe('Jest Worker Integration', () => {\n \n     // The first call will go to the first child process.\n     const promise0 = farm.foo('param-0');\n-\n     assertCallsToChild(0, ['foo', 'param-0']);\n     replySuccess(0, 'worker-0');\n     expect(await promise0).toBe('worker-0');\n \n     // The second call will go to the second child process.\n     const promise1 = farm.foo(1);\n+    assertCallsToChild(1, ['foo', 1]);\n+    replySuccess(1, 'worker-1');\n+    expect(await promise1).toBe('worker-1');\n+  });\n+\n+  it('schedules the task on the first available child processes if the scheduling policy is in-order', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+      workerSchedulingPolicy: 'in-order',\n+    });\n \n+    // The first call will go to the first child process.\n+    const promise0 = farm.foo('param-0');\n+    assertCallsToChild(0, ['foo', 'param-0']);\n+\n+    // The second call will go to the second child process.\n+    const promise1 = farm.foo(1);\n+\n+    // The first task on worker 0 completes\n+    replySuccess(0, 'worker-0');\n+    expect(await promise0).toBe('worker-0');\n+\n+    // The second task on worker 1 completes\n     assertCallsToChild(1, ['foo', 1]);\n     replySuccess(1, 'worker-1');\n     expect(await promise1).toBe('worker-1');\n+\n+    // The third call will go to the first child process\n+    const promise2 = farm.foo('param-2');\n+    assertCallsToChild(0, ['foo', 'param-0'], ['foo', 'param-2']);\n+    replySuccess(0, 'worker-0');\n+    expect(await promise2).toBe('worker-0');\n   });\n \n   it('distributes concurrent calls across child processes', async () => {"},{"sha":"537dcb2d17627f540bef347d90398cd5f7d621d0","filename":"packages/jest-worker/src/__tests__/thread-integration.test.js","status":"modified","additions":50,"deletions":1,"changes":51,"blob_url":"https://github.com/facebook/jest/blob/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fthread-integration.test.js","raw_url":"https://github.com/facebook/jest/raw/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fthread-integration.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__tests__%2Fthread-integration.test.js?ref=111abcdbb67755f721ce3335218a98f98604b58c","patch":"@@ -86,14 +86,63 @@ describe('Jest Worker Process Integration', () => {\n \n     // The first call will go to the first child process.\n     const promise0 = farm.foo('param-0');\n-\n     assertCallsToChild(0, ['foo', 'param-0']);\n     replySuccess(0, 'worker-0');\n     expect(await promise0).toBe('worker-0');\n \n+    // The second call will go to the second child process.\n+    const promise1 = farm.foo(1);\n+    assertCallsToChild(1, ['foo', 1]);\n+    replySuccess(1, 'worker-1');\n+    expect(await promise1).toBe('worker-1');\n+  });\n+\n+  it('schedules the task on the first available child processes if the scheduling policy is in-order', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      enableWorkerThreads: true,\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+      workerSchedulingPolicy: 'in-order',\n+    });\n+\n+    // The first call will go to the first child process.\n+    const promise0 = farm.foo('param-0');\n+    assertCallsToChild(0, ['foo', 'param-0']);\n+\n     // The second call will go to the second child process.\n     const promise1 = farm.foo(1);\n \n+    // The first task on worker 0 completes\n+    replySuccess(0, 'worker-0');\n+    expect(await promise0).toBe('worker-0');\n+\n+    // The second task on worker 1 completes\n+    assertCallsToChild(1, ['foo', 1]);\n+    replySuccess(1, 'worker-1');\n+    expect(await promise1).toBe('worker-1');\n+\n+    // The third call will go to the first child process\n+    const promise2 = farm.foo('param-2');\n+    assertCallsToChild(0, ['foo', 'param-0'], ['foo', 'param-2']);\n+    replySuccess(0, 'worker-0');\n+    expect(await promise2).toBe('worker-0');\n+  });\n+\n+  it('schedules the task on the first available child processes', async () => {\n+    const farm = new Farm('/tmp/baz.js', {\n+      enableWorkerThreads: true,\n+      exposedMethods: ['foo', 'bar'],\n+      numWorkers: 4,\n+    });\n+\n+    // The first call will go to the first child process.\n+    const promise0 = farm.foo('param-0');\n+    assertCallsToChild(0, ['foo', 'param-0']);\n+    replySuccess(0, 'worker-0');\n+    expect(await promise0).toBe('worker-0');\n+\n+    // The second call will go to the second child process.\n+    const promise1 = farm.foo(1);\n     assertCallsToChild(1, ['foo', 1]);\n     replySuccess(1, 'worker-1');\n     expect(await promise1).toBe('worker-1');"},{"sha":"50be5683dfba775dbd4407d55c87ab2a28855ff6","filename":"packages/jest-worker/src/index.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Findex.ts?ref=111abcdbb67755f721ce3335218a98f98604b58c","patch":"@@ -105,6 +105,7 @@ export class Worker {\n       {\n         computeWorkerKey: this._options.computeWorkerKey,\n         taskQueue: this._options.taskQueue,\n+        workerSchedulingPolicy: this._options.workerSchedulingPolicy,\n       },\n     );\n "},{"sha":"7211d3d93993f0e86979ad224f5f374b303666ec","filename":"packages/jest-worker/src/types.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2Ftypes.ts","raw_url":"https://github.com/facebook/jest/raw/111abcdbb67755f721ce3335218a98f98604b58c/packages%2Fjest-worker%2Fsrc%2Ftypes.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Ftypes.ts?ref=111abcdbb67755f721ce3335218a98f98604b58c","patch":"@@ -96,6 +96,7 @@ export type FarmOptions = {\n   computeWorkerKey?: (method: string, ...args: Array<unknown>) => string | null;\n   exposedMethods?: ReadonlyArray<string>;\n   forkOptions?: ForkOptions;\n+  workerSchedulingPolicy?: 'round-robin' | 'in-order';\n   resourceLimits?: ResourceLimits;\n   setupArgs?: Array<unknown>;\n   maxRetries?: number;"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/10131","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/10131/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/10131/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/10131/events","html_url":"https://github.com/facebook/jest/pull/10131","id":631605634,"node_id":"MDExOlB1bGxSZXF1ZXN0NDI4NDYwODM4","number":10131,"title":"Improve Jest startup time and test runtime, particularly when running with coverage, by caching micromatch and avoiding recreating RegExp instances","user":{"login":"lencioni","id":195534,"node_id":"MDQ6VXNlcjE5NTUzNA==","avatar_url":"https://avatars.githubusercontent.com/u/195534?v=4","gravatar_id":"","url":"https://api.github.com/users/lencioni","html_url":"https://github.com/lencioni","followers_url":"https://api.github.com/users/lencioni/followers","following_url":"https://api.github.com/users/lencioni/following{/other_user}","gists_url":"https://api.github.com/users/lencioni/gists{/gist_id}","starred_url":"https://api.github.com/users/lencioni/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lencioni/subscriptions","organizations_url":"https://api.github.com/users/lencioni/orgs","repos_url":"https://api.github.com/users/lencioni/repos","events_url":"https://api.github.com/users/lencioni/events{/privacy}","received_events_url":"https://api.github.com/users/lencioni/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2020-06-05T13:48:01Z","updated_at":"2021-05-11T06:06:31Z","closed_at":"2020-06-23T11:10:13Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/10131","html_url":"https://github.com/facebook/jest/pull/10131","diff_url":"https://github.com/facebook/jest/pull/10131.diff","patch_url":"https://github.com/facebook/jest/pull/10131.patch","merged_at":"2020-06-23T11:10:12Z"},"body":"I was profiling some Jest runs at Airbnb and noticed that on my\r\nMacBook Pro, we can spend over 2 seconds at Jest startup time in\r\nSearchSource getTestPaths. I believe that this will grow as the size\r\nof the codebase increases.\r\n\r\nLooking at the call stacks, it appears to be calling micromatch\r\nrepeatedly, which calls picomatch, which builds a regex out of the\r\nglobs. It seems that the parsing and regex building also triggers the\r\ngarbage collector frequently.\r\n\r\nUpon testing, I noticed that the globs don't actually change between\r\nthese calls, so we can save a bunch of work by making a micromatch\r\nmatcher and reusing that function for all of the paths.\r\n\r\nmicromatch has some logic internally to handle lists of globs that\r\nmay include negated globs. A naive approach of just checking if it\r\nmatched any of the globs won't capture that, so I copied and\r\nsimplified the logic from within micromatch.\r\n\r\nhttps://github.com/micromatch/micromatch/blob/fe4858b0/index.js#L27-L77\r\n\r\nIn my profiling of this change locally, this brings down the time of\r\nstartRun from about 2000ms to about 200ms.\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/195534/83883496-26757e80-a709-11ea-8521-2a71d27ca709.png)\r\n\r\nBefore, zoomed in:\r\n![image](https://user-images.githubusercontent.com/195534/83971126-26a78280-a89f-11ea-889e-80e925878e43.png)\r\n\r\n\r\nAfter:\r\n\r\n![image](https://user-images.githubusercontent.com/195534/83883541-37be8b00-a709-11ea-9ee6-f6fdccced6fd.png)\r\n\r\n---\r\n\r\n**Avoid recreating RegExp instances in regexToMatcher**\r\n\r\nAfter optimizing globsToMatcher, I noticed that there was still a\r\nlot of unnecessary overhead at Jest startup time spent recreating\r\nthe same RegExp instances repeatedly. Thankfully, we can be a little\r\nsmarter about this and create them all ahead of time and just reuse\r\nthem.\r\n\r\nOn top of my globsToMatcher optimization, this brings the speed of\r\nthe ArrayMap in startRun down from about 160ms to about 7ms.\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/195534/84039093-5ff6f580-a966-11ea-8eab-282994c45dd5.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/195534/84039144-72712f00-a966-11ea-9f1f-b4d5e6a97acd.png)\r\n\r\n---\r\n\r\n**Optimize micromatch and RegExps in shouldInstrument**\r\n\r\nI've been profiling running Jest with code coverage at Airbnb, and\r\nnoticed that shouldInstrument is called often and is fairly\r\nexpensive. It also seems to call micromatch and `new RegExp`\r\nrepeatedly, both of which can be optimized by caching the work to\r\nconvert globs and strings into matchers and regexes.\r\n\r\nI profiled this change by running a set of 27 fairly simple tests.\r\nBefore this change, about 6-7 seconds was spent in shouldInstrument.\r\nAfter this change, only 400-500 ms is spent there. I would expect\r\nthis delta to increase along with the number of tests and size of\r\ntheir dependency graphs.\r\n\r\nA typical shouldInstrument call before this change:\r\n![image](https://user-images.githubusercontent.com/195534/84052508-48276d80-a976-11ea-8d6b-a8930d5a9e45.png)\r\n\r\nA typical shouldInstrument call after this change (most are actually too fast to even show up in the profiler now):\r\n![image](https://user-images.githubusercontent.com/195534/84052571-60978800-a976-11ea-800d-caf7d58d76fe.png)\r\n\r\n---\r\n\r\nI was profiling some Jest runs at Airbnb and noticed that on my\r\nMacBook Pro, we can spend over 30 seconds after running Jest with code\r\ncoverage as the coverage reporter adds all of the untested files. I\r\nbelieve that this will grow as the size of the codebase increases.\r\n\r\nLooking at the call stacks, it appears to be calling micromatch\r\nrepeatedly, which calls picomatch, which builds a regex out of the\r\nglobs. It seems that the parsing and regex building also triggers the\r\ngarbage collector frequently.\r\n\r\nSince this is in a tight loop and the globs won't change between\r\nchecks, we can greatly improve the performance here by using\r\nmicromatch.matcher.\r\n\r\nThis optimization reduces the block of time here from about 30s to\r\nabout 10s. The aggregated total time of coverage reporter's\r\nonRunComplete goes from 23s to 600ms.\r\n\r\nBefore:\r\n\r\n![image](https://user-images.githubusercontent.com/195534/83884747-fc24c080-a70a-11ea-8440-2c658b3dcce4.png)\r\n\r\nBefore, zoomed in:\r\n![image](https://user-images.githubusercontent.com/195534/84053653-d819e700-a977-11ea-9597-4b650f4c26cb.png)\r\n\r\n\r\n\r\nAfter:\r\n\r\n![image](https://user-images.githubusercontent.com/195534/83884781-08108280-a70b-11ea-9d63-5329fe726d31.png)\r\n\r\nAfter, zoomed in:\r\n![image](https://user-images.githubusercontent.com/195534/84053716-f08a0180-a977-11ea-8dee-167ddef18ff0.png)\r\n\r\n\r\n<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md in the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\nMotivation: Improve slow Jest startup and runtime speed, particularly when running with coverage\r\n\r\n## Test plan\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->\r\n\r\nI ran jest in the Airbnb frontend monorepo with and without coverage options, with a path argument.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/10131/reactions","total_count":29,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":14,"rocket":15,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/10131/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"c5bc375a45fccf948ca453686f4ed0461f444be3","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/03c800467f7d73e979809cda9deae8e10522cbea/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/03c800467f7d73e979809cda9deae8e10522cbea/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=03c800467f7d73e979809cda9deae8e10522cbea","patch":"@@ -22,6 +22,8 @@\n \n ### Performance\n \n+- `[jest-core, jest-transform, jest-haste-map]` Improve Jest startup time and test runtime, particularly when running with coverage, by caching micromatch and avoiding recreating RegExp instances ([#10131](https://github.com/facebook/jest/pull/10131))\n+\n ## 26.0.1\n \n ### Fixes"},{"sha":"333d8539f3144fbfc0c87b04f812df76f0885d8e","filename":"packages/jest-core/src/SearchSource.ts","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/facebook/jest/blob/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-core%2Fsrc%2FSearchSource.ts","raw_url":"https://github.com/facebook/jest/raw/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-core%2Fsrc%2FSearchSource.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-core%2Fsrc%2FSearchSource.ts?ref=03c800467f7d73e979809cda9deae8e10522cbea","patch":"@@ -16,7 +16,7 @@ import DependencyResolver = require('jest-resolve-dependencies');\n import {escapePathForRegex} from 'jest-regex-util';\n import {replaceRootDirInPath} from 'jest-config';\n import {buildSnapshotResolver} from 'jest-snapshot';\n-import {replacePathSepForGlob, testPathPatternToRegExp} from 'jest-util';\n+import {globsToMatcher, testPathPatternToRegExp} from 'jest-util';\n import type {Filter, Stats, TestPathCases} from './types';\n \n export type SearchResult = {\n@@ -37,12 +37,19 @@ export type TestSelectionConfig = {\n   watch?: boolean;\n };\n \n-const globsToMatcher = (globs: Array<Config.Glob>) => (path: Config.Path) =>\n-  micromatch([replacePathSepForGlob(path)], globs, {dot: true}).length > 0;\n+const regexToMatcher = (testRegex: Config.ProjectConfig['testRegex']) => {\n+  const regexes = testRegex.map(testRegex => new RegExp(testRegex));\n \n-const regexToMatcher = (testRegex: Config.ProjectConfig['testRegex']) => (\n-  path: Config.Path,\n-) => testRegex.some(testRegex => new RegExp(testRegex).test(path));\n+  return (path: Config.Path) =>\n+    regexes.some(regex => {\n+      const result = regex.test(path);\n+\n+      // prevent stateful regexes from breaking, just in case\n+      regex.lastIndex = 0;\n+\n+      return result;\n+    });\n+};\n \n const toTests = (context: Context, tests: Array<Config.Path>) =>\n   tests.map(path => ({"},{"sha":"5bb1deedc2639fee5b531b3491b8f64805ff6eb7","filename":"packages/jest-core/src/__tests__/SearchSource.test.ts","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/facebook/jest/blob/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-core%2Fsrc%2F__tests__%2FSearchSource.test.ts","raw_url":"https://github.com/facebook/jest/raw/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-core%2Fsrc%2F__tests__%2FSearchSource.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-core%2Fsrc%2F__tests__%2FSearchSource.test.ts?ref=03c800467f7d73e979809cda9deae8e10522cbea","patch":"@@ -206,6 +206,34 @@ describe('SearchSource', () => {\n       });\n     });\n \n+    it('finds tests matching a JS with overriding glob patterns', () => {\n+      const {options: config} = normalize(\n+        {\n+          moduleFileExtensions: ['js', 'jsx'],\n+          name,\n+          rootDir,\n+          testMatch: [\n+            '**/*.js?(x)',\n+            '!**/test.js?(x)',\n+            '**/test.js',\n+            '!**/test.js',\n+          ],\n+          testRegex: '',\n+        },\n+        {} as Config.Argv,\n+      );\n+\n+      return findMatchingTests(config).then(data => {\n+        const relPaths = toPaths(data.tests).map(absPath =>\n+          path.relative(rootDir, absPath),\n+        );\n+        expect(relPaths.sort()).toEqual([\n+          path.normalize('module.jsx'),\n+          path.normalize('no_tests.js'),\n+        ]);\n+      });\n+    });\n+\n     it('finds tests with default file extensions using testRegex', () => {\n       const {options: config} = normalize(\n         {"},{"sha":"bdad6f292a8294bbaaa5cde202db535a32db9ad3","filename":"packages/jest-haste-map/src/HasteFS.ts","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/facebook/jest/blob/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-haste-map%2Fsrc%2FHasteFS.ts","raw_url":"https://github.com/facebook/jest/raw/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-haste-map%2Fsrc%2FHasteFS.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2FHasteFS.ts?ref=03c800467f7d73e979809cda9deae8e10522cbea","patch":"@@ -5,8 +5,7 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-import micromatch = require('micromatch');\n-import {replacePathSepForGlob} from 'jest-util';\n+import {globsToMatcher, replacePathSepForGlob} from 'jest-util';\n import type {Config} from '@jest/types';\n import type {FileData} from './types';\n import * as fastPath from './lib/fast_path';\n@@ -84,9 +83,11 @@ export default class HasteFS {\n     root: Config.Path | null,\n   ): Set<Config.Path> {\n     const files = new Set<string>();\n+    const matcher = globsToMatcher(globs);\n+\n     for (const file of this.getAbsoluteFileIterator()) {\n       const filePath = root ? fastPath.relative(root, file) : file;\n-      if (micromatch([replacePathSepForGlob(filePath)], globs).length > 0) {\n+      if (matcher(replacePathSepForGlob(filePath))) {\n         files.add(file);\n       }\n     }"},{"sha":"8b729ace3afb9294e8222bbe58ac85542fbcbe64","filename":"packages/jest-transform/src/shouldInstrument.ts","status":"modified","additions":22,"deletions":9,"changes":31,"blob_url":"https://github.com/facebook/jest/blob/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-transform%2Fsrc%2FshouldInstrument.ts","raw_url":"https://github.com/facebook/jest/raw/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-transform%2Fsrc%2FshouldInstrument.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-transform%2Fsrc%2FshouldInstrument.ts?ref=03c800467f7d73e979809cda9deae8e10522cbea","patch":"@@ -8,14 +8,28 @@\n import * as path from 'path';\n import type {Config} from '@jest/types';\n import {escapePathForRegex} from 'jest-regex-util';\n-import {replacePathSepForGlob} from 'jest-util';\n+import {globsToMatcher, replacePathSepForGlob} from 'jest-util';\n import micromatch = require('micromatch');\n import type {ShouldInstrumentOptions} from './types';\n \n const MOCKS_PATTERN = new RegExp(\n   escapePathForRegex(path.sep + '__mocks__' + path.sep),\n );\n \n+const cachedRegexes = new Map<string, RegExp>();\n+const getRegex = (regexStr: string) => {\n+  if (!cachedRegexes.has(regexStr)) {\n+    cachedRegexes.set(regexStr, new RegExp(regexStr));\n+  }\n+\n+  const regex = cachedRegexes.get(regexStr)!;\n+\n+  // prevent stateful regexes from breaking, just in case\n+  regex.lastIndex = 0;\n+\n+  return regex;\n+};\n+\n export default function shouldInstrument(\n   filename: Config.Path,\n   options: ShouldInstrumentOptions,\n@@ -33,15 +47,15 @@ export default function shouldInstrument(\n   }\n \n   if (\n-    !config.testPathIgnorePatterns.some(pattern => !!filename.match(pattern))\n+    !config.testPathIgnorePatterns.some(pattern =>\n+      getRegex(pattern).test(filename),\n+    )\n   ) {\n     if (config.testRegex.some(regex => new RegExp(regex).test(filename))) {\n       return false;\n     }\n \n-    if (\n-      micromatch([replacePathSepForGlob(filename)], config.testMatch).length\n-    ) {\n+    if (globsToMatcher(config.testMatch)(replacePathSepForGlob(filename))) {\n       return false;\n     }\n   }\n@@ -59,10 +73,9 @@ export default function shouldInstrument(\n     // still cover if `only` is specified\n     !options.collectCoverageOnlyFrom &&\n     options.collectCoverageFrom.length &&\n-    micromatch(\n-      [replacePathSepForGlob(path.relative(config.rootDir, filename))],\n-      options.collectCoverageFrom,\n-    ).length === 0\n+    !globsToMatcher(options.collectCoverageFrom)(\n+      replacePathSepForGlob(path.relative(config.rootDir, filename)),\n+    )\n   ) {\n     return false;\n   }"},{"sha":"dc891b89a98d8c1d66b2d7dd9a6aeae9dbec7c0e","filename":"packages/jest-util/package.json","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-util%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-util%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fpackage.json?ref=03c800467f7d73e979809cda9deae8e10522cbea","patch":"@@ -14,11 +14,13 @@\n     \"chalk\": \"^4.0.0\",\n     \"graceful-fs\": \"^4.2.4\",\n     \"is-ci\": \"^2.0.0\",\n-    \"make-dir\": \"^3.0.0\"\n+    \"make-dir\": \"^3.0.0\",\n+    \"micromatch\": \"^4.0.2\"\n   },\n   \"devDependencies\": {\n     \"@types/graceful-fs\": \"^4.1.2\",\n     \"@types/is-ci\": \"^2.0.0\",\n+    \"@types/micromatch\": \"^4.0.0\",\n     \"@types/node\": \"*\"\n   },\n   \"engines\": {"},{"sha":"f676d7ae0360a390be987af4860839dbab4ff3e0","filename":"packages/jest-util/src/__tests__/globsToMatcher.test.ts","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/facebook/jest/blob/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-util%2Fsrc%2F__tests__%2FglobsToMatcher.test.ts","raw_url":"https://github.com/facebook/jest/raw/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-util%2Fsrc%2F__tests__%2FglobsToMatcher.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fsrc%2F__tests__%2FglobsToMatcher.test.ts?ref=03c800467f7d73e979809cda9deae8e10522cbea","patch":"@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+import micromatch = require('micromatch');\n+import globsToMatcher from '../globsToMatcher';\n+\n+it('works like micromatch with only positive globs', () => {\n+  const globs = ['**/*.test.js', '**/*.test.jsx'];\n+  const matcher = globsToMatcher(globs);\n+\n+  expect(matcher('some-module.js')).toBe(\n+    micromatch(['some-module.js'], globs).length > 0,\n+  );\n+\n+  expect(matcher('some-module.test.js')).toBe(\n+    micromatch(['some-module.test.js'], globs).length > 0,\n+  );\n+});\n+\n+it('works like micromatch with a mix of overlapping positive and negative globs', () => {\n+  const globs = ['**/*.js', '!**/*.test.js', '**/*.test.js'];\n+  const matcher = globsToMatcher(globs);\n+\n+  expect(matcher('some-module.js')).toBe(\n+    micromatch(['some-module.js'], globs).length > 0,\n+  );\n+\n+  expect(matcher('some-module.test.js')).toBe(\n+    micromatch(['some-module.test.js'], globs).length > 0,\n+  );\n+\n+  const globs2 = ['**/*.js', '!**/*.test.js', '**/*.test.js', '!**/*.test.js'];\n+  const matcher2 = globsToMatcher(globs2);\n+\n+  expect(matcher2('some-module.js')).toBe(\n+    micromatch(['some-module.js'], globs2).length > 0,\n+  );\n+\n+  expect(matcher2('some-module.test.js')).toBe(\n+    micromatch(['some-module.test.js'], globs2).length > 0,\n+  );\n+});\n+\n+it('works like micromatch with only negative globs', () => {\n+  const globs = ['!**/*.test.js', '!**/*.test.jsx'];\n+  const matcher = globsToMatcher(globs);\n+\n+  expect(matcher('some-module.js')).toBe(\n+    micromatch(['some-module.js'], globs).length > 0,\n+  );\n+\n+  expect(matcher('some-module.test.js')).toBe(\n+    micromatch(['some-module.test.js'], globs).length > 0,\n+  );\n+});\n+\n+it('works like micromatch with empty globs', () => {\n+  const globs = [];\n+  const matcher = globsToMatcher(globs);\n+\n+  expect(matcher('some-module.js')).toBe(\n+    micromatch(['some-module.js'], globs).length > 0,\n+  );\n+\n+  expect(matcher('some-module.test.js')).toBe(\n+    micromatch(['some-module.test.js'], globs).length > 0,\n+  );\n+});"},{"sha":"e100d42cfcbf5dea9f3736dcf4683fd335afc5c7","filename":"packages/jest-util/src/globsToMatcher.ts","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/facebook/jest/blob/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-util%2Fsrc%2FglobsToMatcher.ts","raw_url":"https://github.com/facebook/jest/raw/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-util%2Fsrc%2FglobsToMatcher.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fsrc%2FglobsToMatcher.ts?ref=03c800467f7d73e979809cda9deae8e10522cbea","patch":"@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+\n+import micromatch = require('micromatch');\n+import type {Config} from '@jest/types';\n+import replacePathSepForGlob from './replacePathSepForGlob';\n+\n+const globsToMatchersMap = new Map<\n+  string,\n+  {\n+    isMatch: (str: string) => boolean;\n+    negated: boolean;\n+  }\n+>();\n+\n+const micromatchOptions = {dot: true};\n+\n+/**\n+ * Converts a list of globs into a function that matches a path against the\n+ * globs.\n+ *\n+ * Every time micromatch is called, it will parse the glob strings and turn\n+ * them into regexp instances. Instead of calling micromatch repeatedly with\n+ * the same globs, we can use this function which will build the micromatch\n+ * matchers ahead of time and then have an optimized path for determining\n+ * whether an individual path matches.\n+ *\n+ * This function is intended to match the behavior of `micromatch()`.\n+ *\n+ * @example\n+ * const isMatch = globsToMatcher(['*.js', '!*.test.js']);\n+ * isMatch('pizza.js'); // true\n+ * isMatch('pizza.test.js'); // false\n+ */\n+export default function globsToMatcher(\n+  globs: Array<Config.Glob>,\n+): (path: Config.Path) => boolean {\n+  if (globs.length === 0) {\n+    // Since there were no globs given, we can simply have a fast path here and\n+    // return with a very simple function.\n+    return (_: Config.Path): boolean => false;\n+  }\n+\n+  const matchers = globs.map(glob => {\n+    if (!globsToMatchersMap.has(glob)) {\n+      // Matchers that are negated have different behavior than matchers that\n+      // are not negated, so we need to store this information ahead of time.\n+      const {negated} = micromatch.scan(glob, micromatchOptions);\n+\n+      const matcher = {\n+        isMatch: micromatch.matcher(glob, micromatchOptions),\n+        negated,\n+      };\n+\n+      globsToMatchersMap.set(glob, matcher);\n+    }\n+\n+    return globsToMatchersMap.get(glob)!;\n+  });\n+\n+  return (path: Config.Path): boolean => {\n+    const replacedPath = replacePathSepForGlob(path);\n+    let kept = undefined;\n+    let negatives = 0;\n+\n+    for (let i = 0; i < matchers.length; i++) {\n+      const {isMatch, negated} = matchers[i];\n+\n+      if (negated) {\n+        negatives++;\n+      }\n+\n+      const matched = isMatch(replacedPath);\n+\n+      if (!matched && negated) {\n+        // The path was not matched, and the matcher is a negated matcher, so we\n+        // want to omit the path. This means that the negative matcher is\n+        // filtering the path out.\n+        kept = false;\n+      } else if (matched && !negated) {\n+        // The path was matched, and the matcher is not a negated matcher, so we\n+        // want to keep the path.\n+        kept = true;\n+      }\n+    }\n+\n+    // If all of the globs were negative globs, then we want to include the path\n+    // as long as it was not explicitly not kept. Otherwise only include\n+    // the path if it was kept. This allows sets of globs that are all negated\n+    // to allow some paths to be matched, while sets of globs that are mixed\n+    // negated and non-negated to cause the negated matchers to only omit paths\n+    // and not keep them.\n+    return negatives === matchers.length ? kept !== false : !!kept;\n+  };\n+}"},{"sha":"40d200b1930d6c81f5938d5faae56fde2eec00d2","filename":"packages/jest-util/src/index.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-util%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/03c800467f7d73e979809cda9deae8e10522cbea/packages%2Fjest-util%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-util%2Fsrc%2Findex.ts?ref=03c800467f7d73e979809cda9deae8e10522cbea","patch":"@@ -18,6 +18,7 @@ export {default as convertDescriptorToString} from './convertDescriptorToString'\n import * as specialChars from './specialChars';\n export {default as replacePathSepForGlob} from './replacePathSepForGlob';\n export {default as testPathPatternToRegExp} from './testPathPatternToRegExp';\n+export {default as globsToMatcher} from './globsToMatcher';\n import * as preRunMessage from './preRunMessage';\n export {default as pluralize} from './pluralize';\n export {default as formatTime} from './formatTime';"}]}]