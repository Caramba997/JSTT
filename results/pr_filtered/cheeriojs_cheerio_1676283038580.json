[{"url":"https://api.github.com/repos/cheeriojs/cheerio/issues/1232","repository_url":"https://api.github.com/repos/cheeriojs/cheerio","labels_url":"https://api.github.com/repos/cheeriojs/cheerio/issues/1232/labels{/name}","comments_url":"https://api.github.com/repos/cheeriojs/cheerio/issues/1232/comments","events_url":"https://api.github.com/repos/cheeriojs/cheerio/issues/1232/events","html_url":"https://github.com/cheeriojs/cheerio/pull/1232","id":367898932,"node_id":"MDExOlB1bGxSZXF1ZXN0MjIxMjAxNDM2","number":1232,"title":"Refactor internals to designate deprecated API","user":{"login":"jugglinmike","id":677252,"node_id":"MDQ6VXNlcjY3NzI1Mg==","avatar_url":"https://avatars.githubusercontent.com/u/677252?v=4","gravatar_id":"","url":"https://api.github.com/users/jugglinmike","html_url":"https://github.com/jugglinmike","followers_url":"https://api.github.com/users/jugglinmike/followers","following_url":"https://api.github.com/users/jugglinmike/following{/other_user}","gists_url":"https://api.github.com/users/jugglinmike/gists{/gist_id}","starred_url":"https://api.github.com/users/jugglinmike/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jugglinmike/subscriptions","organizations_url":"https://api.github.com/users/jugglinmike/orgs","repos_url":"https://api.github.com/users/jugglinmike/repos","events_url":"https://api.github.com/users/jugglinmike/events{/privacy}","received_events_url":"https://api.github.com/users/jugglinmike/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2018-10-08T18:12:32Z","updated_at":"2018-10-21T04:19:37Z","closed_at":"2018-10-14T01:05:53Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/cheeriojs/cheerio/pulls/1232","html_url":"https://github.com/cheeriojs/cheerio/pull/1232","diff_url":"https://github.com/cheeriojs/cheerio/pull/1232.diff","patch_url":"https://github.com/cheeriojs/cheerio/pull/1232.patch","merged_at":"2018-10-14T01:05:53Z"},"body":"Hey @fb55!\r\n\r\nTaking your call to action for 1.0, here's the change set I had in mind for [\"step 3\" in gh-1122](https://github.com/cheeriojs/cheerio/issues/1122#issuecomment-383343689). It's a little larger than I anticipated back in April because while writing it, I found a couple more APIs that we should test (despite their need for removal): `cheerio.root` and `cheerio.contains`.\r\n\r\nI'm hoping that with this in place, we should be able to generate documentation that fully captures all the deprecations we're making. It'll be my pleasure to follow up with the documentation generation process.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/cheeriojs/cheerio/issues/1232/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/cheeriojs/cheerio/issues/1232/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"0497e7ac6410e9f83b64d95b3e798dd176124103","filename":"lib/cheerio.js","status":"modified","additions":50,"deletions":2,"changes":52,"blob_url":"https://github.com/cheeriojs/cheerio/blob/21894ebe0aeb7cd3bf37713f558a30b29e04b561/lib%2Fcheerio.js","raw_url":"https://github.com/cheeriojs/cheerio/raw/21894ebe0aeb7cd3bf37713f558a30b29e04b561/lib%2Fcheerio.js","contents_url":"https://api.github.com/repos/cheeriojs/cheerio/contents/lib%2Fcheerio.js?ref=21894ebe0aeb7cd3bf37713f558a30b29e04b561","patch":"@@ -4,6 +4,7 @@\n */\n \n var parse = require('./parse'),\n+    staticMethods = require('./static'),\n     defaultOptions = require('./options').default,\n     flattenOptions = require('./options').flatten,\n     isHtml = require('./utils').isHtml,\n@@ -101,10 +102,57 @@ var Cheerio = (module.exports = function(selector, context, root, options) {\n   return context.find(selector);\n });\n \n+Cheerio.load = staticMethods.load;\n+Cheerio.html = staticMethods.html;\n+Cheerio.text = staticMethods.text;\n+Cheerio.xml = staticMethods.xml;\n+\n+/**\n+ * In order to promote consistency with the jQuery library, users are\n+ * encouraged to instead use the static method of the same name. For example:\n+ *\n+ *     var $ = cheerio.load('<div><p></p></div>');\n+ *     $.contains($('div').get(0), $('p').get(0)); // true\n+ *     $.contains($('p').get(0), $('div').get(0)); // false\n+ *\n+ * @deprecated\n+ */\n+Cheerio.contains = staticMethods.contains;\n+\n+/**\n+ * In order to promote consistency with the jQuery library, users are\n+ * encouraged to instead use the static method of the same name. For example:\n+ *\n+ *     var $ = cheerio.load('');\n+ *     $.merge([1, 2], [3, 4]) // [1, 2, 3, 4]\n+ *\n+ * @deprecated\n+ */\n+Cheerio.merge = staticMethods.merge;\n+\n /**\n- * Mix in `static`\n+ * In order to promote consistency with the jQuery library, users are\n+ * encouraged to instead use the static method of the same name as it is\n+ * defined on the \"loaded\" Cheerio factory function. For example:\n+ *\n+ *     var $ = cheerio.load('');\n+ *     $.parseHTML('<b>markup</b>');\n+ *\n+ * @deprecated\n+ */\n+Cheerio.parseHTML = staticMethods.parseHTML;\n+\n+/**\n+ * Users seeking to access the top-level element of a parsed document should\n+ * instead use the `root` static method of a \"loaded\" Cheerio function. For\n+ * example:\n+ *\n+ *     var $ = cheerio.load('');\n+ *     $.root();\n+ *\n+ * @deprecated\n  */\n-_.extend(Cheerio, require('./static'));\n+Cheerio.root = staticMethods.root;\n \n /*\n  * Set a signature of the object"},{"sha":"907664a50c630372e750536f4e7196d4f05348e1","filename":"test/api/deprecated.js","status":"added","additions":315,"deletions":0,"changes":315,"blob_url":"https://github.com/cheeriojs/cheerio/blob/21894ebe0aeb7cd3bf37713f558a30b29e04b561/test%2Fapi%2Fdeprecated.js","raw_url":"https://github.com/cheeriojs/cheerio/raw/21894ebe0aeb7cd3bf37713f558a30b29e04b561/test%2Fapi%2Fdeprecated.js","contents_url":"https://api.github.com/repos/cheeriojs/cheerio/contents/test%2Fapi%2Fdeprecated.js?ref=21894ebe0aeb7cd3bf37713f558a30b29e04b561","patch":"@@ -0,0 +1,315 @@\n+/**\n+ * This file includes tests for deprecated APIs. The methods are expected to be\n+ * removed in the next major release of Cheerio, but their stability should be\n+ * maintained until that time.\n+ */\n+var expect = require('expect.js'),\n+    fixtures = require('../fixtures'),\n+    cheerio = require('../..');\n+\n+describe('deprecated APIs', function() {\n+  /**\n+   * The `.parseHTML` method exported by the Cheerio module is deprecated.\n+   *\n+   * In order to promote consistency with the jQuery library, users are\n+   * encouraged to instead use the static method of the same name as it is\n+   * defined on the \"loaded\" Cheerio factory function. For example:\n+   *\n+   *     var $ = cheerio.load('');\n+   *     $.parseHTML('<b>markup</b>');\n+   */\n+  describe('cheerio module', function() {\n+    describe('.parseHTML', function() {\n+      it('(html) : should preserve content', function() {\n+        var html = '<div>test div</div>';\n+        expect(cheerio(cheerio.parseHTML(html)[0]).html()).to.equal('test div');\n+      });\n+    });\n+\n+    /**\n+     * The `.merge` method exported by the Cheerio module is deprecated.\n+     *\n+     * In order to promote consistency with the jQuery library, users are\n+     * encouraged to instead use the static method of the same name. For example:\n+     *\n+     *     var $ = cheerio.load('');\n+     *     $.merge([1, 2], [3, 4]) // [1, 2, 3, 4]\n+     */\n+    describe('.merge', function() {\n+      var arr1, arr2;\n+      beforeEach(function() {\n+        arr1 = [1, 2, 3];\n+        arr2 = [4, 5, 6];\n+      });\n+\n+      it('should be a function', function() {\n+        expect(typeof cheerio.merge).to.equal('function');\n+      });\n+\n+      it('(arraylike, arraylike) : should return an array', function() {\n+        var ret = cheerio.merge(arr1, arr2);\n+        expect(typeof ret).to.equal('object');\n+        expect(ret instanceof Array).to.be.ok();\n+      });\n+\n+      it('(arraylike, arraylike) : should modify the first array', function() {\n+        cheerio.merge(arr1, arr2);\n+        expect(arr1).to.have.length(6);\n+      });\n+\n+      it('(arraylike, arraylike) : should not modify the second array', function() {\n+        cheerio.merge(arr1, arr2);\n+        expect(arr2).to.have.length(3);\n+      });\n+\n+      it('(arraylike, arraylike) : should handle objects that arent arrays, but are arraylike', function() {\n+        arr1 = {};\n+        arr2 = {};\n+        arr1.length = 3;\n+        arr1[0] = 'a';\n+        arr1[1] = 'b';\n+        arr1[2] = 'c';\n+        arr2.length = 3;\n+        arr2[0] = 'd';\n+        arr2[1] = 'e';\n+        arr2[2] = 'f';\n+        cheerio.merge(arr1, arr2);\n+        expect(arr1).to.have.length(6);\n+        expect(arr1[3]).to.equal('d');\n+        expect(arr1[4]).to.equal('e');\n+        expect(arr1[5]).to.equal('f');\n+        expect(arr2).to.have.length(3);\n+      });\n+\n+      it('(?, ?) : should gracefully reject invalid inputs', function() {\n+        var ret = cheerio.merge([4], 3);\n+        expect(ret).to.not.be.ok();\n+        ret = cheerio.merge({}, {});\n+        expect(ret).to.not.be.ok();\n+        ret = cheerio.merge([], {});\n+        expect(ret).to.not.be.ok();\n+        ret = cheerio.merge({}, []);\n+        expect(ret).to.not.be.ok();\n+        var fakeArray1 = { length: 3 };\n+        fakeArray1[0] = 'a';\n+        fakeArray1[1] = 'b';\n+        fakeArray1[3] = 'd';\n+        ret = cheerio.merge(fakeArray1, []);\n+        expect(ret).to.not.be.ok();\n+        ret = cheerio.merge([], fakeArray1);\n+        expect(ret).to.not.be.ok();\n+        fakeArray1 = {};\n+        fakeArray1.length = '7';\n+        ret = cheerio.merge(fakeArray1, []);\n+        expect(ret).to.not.be.ok();\n+        fakeArray1.length = -1;\n+        ret = cheerio.merge(fakeArray1, []);\n+        expect(ret).to.not.be.ok();\n+      });\n+\n+      it('(?, ?) : should no-op on invalid inputs', function() {\n+        var fakeArray1 = { length: 3 };\n+        fakeArray1[0] = 'a';\n+        fakeArray1[1] = 'b';\n+        fakeArray1[3] = 'd';\n+        cheerio.merge(fakeArray1, []);\n+        expect(fakeArray1).to.have.length(3);\n+        expect(fakeArray1[0]).to.equal('a');\n+        expect(fakeArray1[1]).to.equal('b');\n+        expect(fakeArray1[3]).to.equal('d');\n+        cheerio.merge([], fakeArray1);\n+        expect(fakeArray1).to.have.length(3);\n+        expect(fakeArray1[0]).to.equal('a');\n+        expect(fakeArray1[1]).to.equal('b');\n+        expect(fakeArray1[3]).to.equal('d');\n+      });\n+    });\n+\n+    /**\n+     * The `.contains` method exported by the Cheerio module is deprecated.\n+     *\n+     * In order to promote consistency with the jQuery library, users are\n+     * encouraged to instead use the static method of the same name. For example:\n+     *\n+     *     var $ = cheerio.load('<div><p></p></div>');\n+     *     $.contains($('div').get(0), $('p').get(0)); // true\n+     *     $.contains($('p').get(0), $('div').get(0)); // false\n+     */\n+    describe('.contains', function() {\n+      var $;\n+\n+      beforeEach(function() {\n+        $ = cheerio.load(fixtures.food);\n+      });\n+\n+      it('(container, contained) : should correctly detect the provided element', function() {\n+        var $food = $('#food');\n+        var $fruits = $('#fruits');\n+        var $apple = $('.apple');\n+\n+        expect(cheerio.contains($food[0], $fruits[0])).to.equal(true);\n+        expect(cheerio.contains($food[0], $apple[0])).to.equal(true);\n+      });\n+\n+      it('(container, other) : should not detect elements that are not contained', function() {\n+        var $fruits = $('#fruits');\n+        var $vegetables = $('#vegetables');\n+        var $apple = $('.apple');\n+\n+        expect(cheerio.contains($vegetables[0], $apple[0])).to.equal(false);\n+        expect(cheerio.contains($fruits[0], $vegetables[0])).to.equal(false);\n+        expect(cheerio.contains($vegetables[0], $fruits[0])).to.equal(false);\n+        expect(cheerio.contains($fruits[0], $fruits[0])).to.equal(false);\n+        expect(cheerio.contains($vegetables[0], $vegetables[0])).to.equal(\n+          false\n+        );\n+      });\n+    });\n+\n+    /**\n+     * The `.root` method exported by the Cheerio module is deprecated.\n+     *\n+     * Users seeking to access the top-level element of a parsed document should\n+     * instead use the `root` static method of a \"loaded\" Cheerio function. For\n+     * example:\n+     *\n+     *     var $ = cheerio.load('');\n+     *     $.root();\n+     */\n+    describe('.root', function() {\n+      it('returns an empty selection', function() {\n+        var $empty = cheerio.root();\n+        expect($empty).to.have.length(0);\n+      });\n+    });\n+  });\n+\n+  describe('Cheerio function', function() {\n+    /**\n+     * The `.load` static method defined on the \"loaded\" Cheerio factory\n+     * function is deprecated. Users are encouraged to instead use the `load`\n+     * function exported by the Cheerio module. For example:\n+     *\n+     *     var $ = cheerio.load('<h1>Hello, <span>world</span>.</h1>');\n+     */\n+    it('.load', function() {\n+      var $1 = cheerio.load(fixtures.fruits);\n+      var $2 = $1.load('<div><p>Some <a>text</a>.</p></div>');\n+\n+      expect($2('a')).to.have.length(1);\n+    });\n+\n+    /**\n+     * The `.html` static method defined on the \"loaded\" Cheerio factory function\n+     * is deprecated.\n+     *\n+     * In order to promote consistency with the jQuery library, users are\n+     * encouraged to instead use the instance method of the same name. For\n+     * example:\n+     *\n+     *     var $ = cheerio.load('<h1>Hello, <span>world</span>.</h1>');\n+     *     $('h1').html(); // '<h1>Hello, <span>world</span>.'\n+     *\n+     * To render the markup of an entire document, invoke the `html` function\n+     * exported by the Cheerio module with a \"root\" selection, e.g.\n+     *\n+     *     cheerio.html($.root()); // '<html><head></head><body><h1>Hello, <span>world</span>.</h1></body></html>'\n+     */\n+    describe('.html - deprecated API', function() {\n+      it('() : of empty cheerio object should return null', function() {\n+        // Note: the direct invocation of the Cheerio constructor function is\n+        // also deprecated.\n+        var $ = cheerio();\n+        expect($.html()).to.be(null);\n+      });\n+\n+      it('(selector) : should return the outerHTML of the selected element', function() {\n+        var $ = cheerio.load(fixtures.fruits);\n+        expect($.html('.pear')).to.equal('<li class=\"pear\">Pear</li>');\n+      });\n+    });\n+\n+    /**\n+     * The `.xml` static method defined on the \"loaded\" Cheerio factory function\n+     * is deprecated. Users are encouraged to instead use the `xml` function\n+     * exported by the Cheerio module. For example:\n+     *\n+     *     cheerio.xml($.root());\n+     */\n+    describe('.xml  - deprecated API', function() {\n+      it('() :  renders XML', function() {\n+        var $ = cheerio.load('<foo></foo>', { xmlMode: true });\n+        expect($.xml()).to.equal('<foo/>');\n+      });\n+    });\n+\n+    /**\n+     * The `.text` static method defined on the \"loaded\" Cheerio factory function\n+     * is deprecated.\n+     *\n+     * In order to promote consistency with the jQuery library, users are\n+     * encouraged to instead use the instance method of the same name. For\n+     * example:\n+     *\n+     *     var $ = cheerio.load('<h1>Hello, <span>world</span>.</h1>');\n+     *     $('h1').text(); // 'Hello, world.'\n+     *\n+     * To render the text content of an entire document, invoke the `text`\n+     * function exported by the Cheerio module with a \"root\" selection, e.g.\n+     *\n+     *     cheerio.text($.root()); // 'Hello, world.'\n+     */\n+    describe('.text  - deprecated API', function() {\n+      it('(cheerio object) : should return the text contents of the specified elements', function() {\n+        var $ = cheerio.load('<a>This is <em>content</em>.</a>');\n+        expect($.text($('a'))).to.equal('This is content.');\n+      });\n+\n+      it('(cheerio object) : should omit comment nodes', function() {\n+        var $ = cheerio.load(\n+          '<a>This is <!-- a comment --> not a comment.</a>'\n+        );\n+        expect($.text($('a'))).to.equal('This is  not a comment.');\n+      });\n+\n+      it('(cheerio object) : should include text contents of children recursively', function() {\n+        var $ = cheerio.load(\n+          '<a>This is <div>a child with <span>another child and <!-- a comment --> not a comment</span> followed by <em>one last child</em> and some final</div> text.</a>'\n+        );\n+        expect($.text($('a'))).to.equal(\n+          'This is a child with another child and  not a comment followed by one last child and some final text.'\n+        );\n+      });\n+\n+      it('() : should return the rendered text content of the root', function() {\n+        var $ = cheerio.load(\n+          '<a>This is <div>a child with <span>another child and <!-- a comment --> not a comment</span> followed by <em>one last child</em> and some final</div> text.</a>'\n+        );\n+        expect($.text()).to.equal(\n+          'This is a child with another child and  not a comment followed by one last child and some final text.'\n+        );\n+      });\n+\n+      it('(cheerio object) : should omit script tags', function() {\n+        var $ = cheerio.load('<script>console.log(\"test\")</script>');\n+        expect($.text()).to.equal('');\n+      });\n+\n+      it('(cheerio object) : should omit style tags', function() {\n+        var $ = cheerio.load(\n+          '<style type=\"text/css\">.cf-hidden { display: none; } .cf-invisible { visibility: hidden; }</style>'\n+        );\n+        expect($.text()).to.equal('');\n+      });\n+\n+      it('(cheerio object) : should include text contents of children omiting style and script tags', function() {\n+        var $ = cheerio.load(\n+          '<body>Welcome <div>Hello, testing text function,<script>console.log(\"hello\")</script></div><style type=\"text/css\">.cf-hidden { display: none; }</style>End of messege</body>'\n+        );\n+        expect($.text()).to.equal(\n+          'Welcome Hello, testing text function,End of messege'\n+        );\n+      });\n+    });\n+  });\n+});"},{"sha":"abecb7011fc232cd61a51c9342525198a692ec29","filename":"test/api/utils.js","status":"modified","additions":89,"deletions":14,"changes":103,"blob_url":"https://github.com/cheeriojs/cheerio/blob/21894ebe0aeb7cd3bf37713f558a30b29e04b561/test%2Fapi%2Futils.js","raw_url":"https://github.com/cheeriojs/cheerio/raw/21894ebe0aeb7cd3bf37713f558a30b29e04b561/test%2Fapi%2Futils.js","contents_url":"https://api.github.com/repos/cheeriojs/cheerio/contents/test%2Fapi%2Futils.js?ref=21894ebe0aeb7cd3bf37713f558a30b29e04b561","patch":"@@ -225,20 +225,95 @@ describe('cheerio', function() {\n     });\n   });\n \n-  /**\n-   * The `.parseHTML` method exported by the Cheerio module is deprecated.\n-   *\n-   * In order to promote consistency with the jQuery library, users are\n-   * encouraged to instead use the static method of the same name as it is\n-   * defined on the \"loaded\" Cheerio factory function. For example:\n-   *\n-   *     var $ = cheerio.load('');\n-   *     $.parseHTML('<b>markup</b>');\n-   */\n-  describe('.parseHTML - deprecated API', function() {\n-    it('(html) : should preserve content', function() {\n-      var html = '<div>test div</div>';\n-      expect(cheerio(cheerio.parseHTML(html)[0]).html()).to.equal('test div');\n+  describe('.merge', function() {\n+    var $ = cheerio.load('');\n+    var arr1, arr2;\n+\n+    beforeEach(function() {\n+      arr1 = [1, 2, 3];\n+      arr2 = [4, 5, 6];\n+    });\n+\n+    it('should be a function', function() {\n+      expect(typeof $.merge).to.equal('function');\n+    });\n+\n+    it('(arraylike, arraylike) : should return an array', function() {\n+      var ret = $.merge(arr1, arr2);\n+      expect(typeof ret).to.equal('object');\n+      expect(ret instanceof Array).to.be.ok();\n+    });\n+\n+    it('(arraylike, arraylike) : should modify the first array', function() {\n+      $.merge(arr1, arr2);\n+      expect(arr1).to.have.length(6);\n+    });\n+\n+    it('(arraylike, arraylike) : should not modify the second array', function() {\n+      $.merge(arr1, arr2);\n+      expect(arr2).to.have.length(3);\n+    });\n+\n+    it('(arraylike, arraylike) : should handle objects that arent arrays, but are arraylike', function() {\n+      arr1 = {};\n+      arr2 = {};\n+      arr1.length = 3;\n+      arr1[0] = 'a';\n+      arr1[1] = 'b';\n+      arr1[2] = 'c';\n+      arr2.length = 3;\n+      arr2[0] = 'd';\n+      arr2[1] = 'e';\n+      arr2[2] = 'f';\n+      $.merge(arr1, arr2);\n+      expect(arr1).to.have.length(6);\n+      expect(arr1[3]).to.equal('d');\n+      expect(arr1[4]).to.equal('e');\n+      expect(arr1[5]).to.equal('f');\n+      expect(arr2).to.have.length(3);\n+    });\n+\n+    it('(?, ?) : should gracefully reject invalid inputs', function() {\n+      var ret = $.merge([4], 3);\n+      expect(ret).to.not.be.ok();\n+      ret = $.merge({}, {});\n+      expect(ret).to.not.be.ok();\n+      ret = $.merge([], {});\n+      expect(ret).to.not.be.ok();\n+      ret = $.merge({}, []);\n+      expect(ret).to.not.be.ok();\n+      var fakeArray1 = { length: 3 };\n+      fakeArray1[0] = 'a';\n+      fakeArray1[1] = 'b';\n+      fakeArray1[3] = 'd';\n+      ret = $.merge(fakeArray1, []);\n+      expect(ret).to.not.be.ok();\n+      ret = $.merge([], fakeArray1);\n+      expect(ret).to.not.be.ok();\n+      fakeArray1 = {};\n+      fakeArray1.length = '7';\n+      ret = $.merge(fakeArray1, []);\n+      expect(ret).to.not.be.ok();\n+      fakeArray1.length = -1;\n+      ret = $.merge(fakeArray1, []);\n+      expect(ret).to.not.be.ok();\n+    });\n+\n+    it('(?, ?) : should no-op on invalid inputs', function() {\n+      var fakeArray1 = { length: 3 };\n+      fakeArray1[0] = 'a';\n+      fakeArray1[1] = 'b';\n+      fakeArray1[3] = 'd';\n+      $.merge(fakeArray1, []);\n+      expect(fakeArray1).to.have.length(3);\n+      expect(fakeArray1[0]).to.equal('a');\n+      expect(fakeArray1[1]).to.equal('b');\n+      expect(fakeArray1[3]).to.equal('d');\n+      $.merge([], fakeArray1);\n+      expect(fakeArray1).to.have.length(3);\n+      expect(fakeArray1[0]).to.equal('a');\n+      expect(fakeArray1[1]).to.equal('b');\n+      expect(fakeArray1[3]).to.equal('d');\n     });\n   });\n "},{"sha":"a4a0554123fb409fe79bb56010d24765075b0ceb","filename":"test/cheerio.js","status":"modified","additions":0,"deletions":215,"changes":215,"blob_url":"https://github.com/cheeriojs/cheerio/blob/21894ebe0aeb7cd3bf37713f558a30b29e04b561/test%2Fcheerio.js","raw_url":"https://github.com/cheeriojs/cheerio/raw/21894ebe0aeb7cd3bf37713f558a30b29e04b561/test%2Fcheerio.js","contents_url":"https://api.github.com/repos/cheeriojs/cheerio/contents/test%2Fcheerio.js?ref=21894ebe0aeb7cd3bf37713f558a30b29e04b561","patch":"@@ -240,207 +240,6 @@ describe('cheerio', function() {\n     expect(typeof $elem.text()).to.equal('string');\n   });\n \n-  describe('.merge', function() {\n-    var arr1, arr2;\n-    beforeEach(function() {\n-      arr1 = [1, 2, 3];\n-      arr2 = [4, 5, 6];\n-    });\n-\n-    it('should be a function', function() {\n-      expect(typeof cheerio.merge).to.equal('function');\n-    });\n-\n-    it('(arraylike, arraylike) : should return an array', function() {\n-      var ret = cheerio.merge(arr1, arr2);\n-      expect(typeof ret).to.equal('object');\n-      expect(ret instanceof Array).to.be.ok();\n-    });\n-\n-    it('(arraylike, arraylike) : should modify the first array', function() {\n-      cheerio.merge(arr1, arr2);\n-      expect(arr1).to.have.length(6);\n-    });\n-\n-    it('(arraylike, arraylike) : should not modify the second array', function() {\n-      cheerio.merge(arr1, arr2);\n-      expect(arr2).to.have.length(3);\n-    });\n-\n-    it('(arraylike, arraylike) : should handle objects that arent arrays, but are arraylike', function() {\n-      arr1 = {};\n-      arr2 = {};\n-      arr1.length = 3;\n-      arr1[0] = 'a';\n-      arr1[1] = 'b';\n-      arr1[2] = 'c';\n-      arr2.length = 3;\n-      arr2[0] = 'd';\n-      arr2[1] = 'e';\n-      arr2[2] = 'f';\n-      cheerio.merge(arr1, arr2);\n-      expect(arr1).to.have.length(6);\n-      expect(arr1[3]).to.equal('d');\n-      expect(arr1[4]).to.equal('e');\n-      expect(arr1[5]).to.equal('f');\n-      expect(arr2).to.have.length(3);\n-    });\n-\n-    it('(?, ?) : should gracefully reject invalid inputs', function() {\n-      var ret = cheerio.merge([4], 3);\n-      expect(ret).to.not.be.ok();\n-      ret = cheerio.merge({}, {});\n-      expect(ret).to.not.be.ok();\n-      ret = cheerio.merge([], {});\n-      expect(ret).to.not.be.ok();\n-      ret = cheerio.merge({}, []);\n-      expect(ret).to.not.be.ok();\n-      var fakeArray1 = { length: 3 };\n-      fakeArray1[0] = 'a';\n-      fakeArray1[1] = 'b';\n-      fakeArray1[3] = 'd';\n-      ret = cheerio.merge(fakeArray1, []);\n-      expect(ret).to.not.be.ok();\n-      ret = cheerio.merge([], fakeArray1);\n-      expect(ret).to.not.be.ok();\n-      fakeArray1 = {};\n-      fakeArray1.length = '7';\n-      ret = cheerio.merge(fakeArray1, []);\n-      expect(ret).to.not.be.ok();\n-      fakeArray1.length = -1;\n-      ret = cheerio.merge(fakeArray1, []);\n-      expect(ret).to.not.be.ok();\n-    });\n-\n-    it('(?, ?) : should no-op on invalid inputs', function() {\n-      var fakeArray1 = { length: 3 };\n-      fakeArray1[0] = 'a';\n-      fakeArray1[1] = 'b';\n-      fakeArray1[3] = 'd';\n-      cheerio.merge(fakeArray1, []);\n-      expect(fakeArray1).to.have.length(3);\n-      expect(fakeArray1[0]).to.equal('a');\n-      expect(fakeArray1[1]).to.equal('b');\n-      expect(fakeArray1[3]).to.equal('d');\n-      cheerio.merge([], fakeArray1);\n-      expect(fakeArray1).to.have.length(3);\n-      expect(fakeArray1[0]).to.equal('a');\n-      expect(fakeArray1[1]).to.equal('b');\n-      expect(fakeArray1[3]).to.equal('d');\n-    });\n-  });\n-\n-  /**\n-   * The `.html` static method defined on the \"loaded\" Cheerio factory function\n-   * is deprecated.\n-   *\n-   * In order to promote consistency with the jQuery library, users are\n-   * encouraged to instead use the instance method of the same name. For\n-   * example:\n-   *\n-   *     var $ = cheerio.load('<h1>Hello, <span>world</span>.</h1>');\n-   *     $('h1').text(); // '<h1>Hello, <span>world</span>.'\n-   *\n-   * To render the markup of an entire document, invoke the `html` function\n-   * exported by the Cheerio module with a \"root\" selection, e.g.\n-   *\n-   *     cheerio.html($.root()); // '<html><head></head><body><h1>Hello, <span>world</span>.</h1></body></html>'\n-   */\n-  describe('.html - deprecated API', function() {\n-    it('() : of empty cheerio object should return null', function() {\n-      // Note: the direct invocation of the Cheerio constructor function is\n-      // also deprecated.\n-      var $ = cheerio();\n-      expect($.html()).to.be(null);\n-    });\n-\n-    it('(selector) : should return the outerHTML of the selected element', function() {\n-      var $ = cheerio.load(fixtures.fruits);\n-      expect($.html('.pear')).to.equal('<li class=\"pear\">Pear</li>');\n-    });\n-  });\n-\n-  /**\n-   * The `.xml` static method defined on the \"loaded\" Cheerio factory function\n-   * is deprecated. Users are encouraged to instead use the `xml` function\n-   * exported by the Cheerio module. For example:\n-   *\n-   *     cheerio.xml($.root());\n-   */\n-  describe('.xml  - deprecated API', function() {\n-    it('() :  renders XML', function() {\n-      var $ = cheerio.load('<foo></foo>', { xmlMode: true });\n-      expect($.xml()).to.equal('<foo/>');\n-    });\n-  });\n-\n-  /**\n-   * The `.text` static method defined on the \"loaded\" Cheerio factory function\n-   * is deprecated.\n-   *\n-   * In order to promote consistency with the jQuery library, users are\n-   * encouraged to instead use the instance method of the same name. For\n-   * example:\n-   *\n-   *     var $ = cheerio.load('<h1>Hello, <span>world</span>.</h1>');\n-   *     $('h1').text(); // 'Hello, world.'\n-   *\n-   * To render the text content of an entire document, invoke the `text`\n-   * function exported by the Cheerio module with a \"root\" selection, e.g.\n-   *\n-   *     cheerio.text($.root()); // 'Hello, world.'\n-   */\n-  describe('.text  - deprecated API', function() {\n-    it('(cheerio object) : should return the text contents of the specified elements', function() {\n-      var $ = cheerio.load('<a>This is <em>content</em>.</a>');\n-      expect($.text($('a'))).to.equal('This is content.');\n-    });\n-\n-    it('(cheerio object) : should omit comment nodes', function() {\n-      var $ = cheerio.load('<a>This is <!-- a comment --> not a comment.</a>');\n-      expect($.text($('a'))).to.equal('This is  not a comment.');\n-    });\n-\n-    it('(cheerio object) : should include text contents of children recursively', function() {\n-      var $ = cheerio.load(\n-        '<a>This is <div>a child with <span>another child and <!-- a comment --> not a comment</span> followed by <em>one last child</em> and some final</div> text.</a>'\n-      );\n-      expect($.text($('a'))).to.equal(\n-        'This is a child with another child and  not a comment followed by one last child and some final text.'\n-      );\n-    });\n-\n-    it('() : should return the rendered text content of the root', function() {\n-      var $ = cheerio.load(\n-        '<a>This is <div>a child with <span>another child and <!-- a comment --> not a comment</span> followed by <em>one last child</em> and some final</div> text.</a>'\n-      );\n-      expect($.text()).to.equal(\n-        'This is a child with another child and  not a comment followed by one last child and some final text.'\n-      );\n-    });\n-\n-    it('(cheerio object) : should omit script tags', function() {\n-      var $ = cheerio.load('<script>console.log(\"test\")</script>');\n-      expect($.text()).to.equal('');\n-    });\n-\n-    it('(cheerio object) : should omit style tags', function() {\n-      var $ = cheerio.load(\n-        '<style type=\"text/css\">.cf-hidden { display: none; } .cf-invisible { visibility: hidden; }</style>'\n-      );\n-      expect($.text()).to.equal('');\n-    });\n-\n-    it('(cheerio object) : should include text contents of children omiting style and script tags', function() {\n-      var $ = cheerio.load(\n-        '<body>Welcome <div>Hello, testing text function,<script>console.log(\"hello\")</script></div><style type=\"text/css\">.cf-hidden { display: none; }</style>End of messege</body>'\n-      );\n-      expect($.text()).to.equal(\n-        'Welcome Hello, testing text function,End of messege'\n-      );\n-    });\n-  });\n-\n   describe('.load', function() {\n     it('should generate selections as proper instances', function() {\n       var $ = cheerio.load(fruits);\n@@ -457,20 +256,6 @@ describe('cheerio', function() {\n       expect(lis).to.have.length(3);\n     });\n \n-    /**\n-     * The `.load` static method defined on the \"loaded\" Cheerio factory\n-     * function is deprecated. Users are encouraged to instead use the `load`\n-     * function exported by the Cheerio module. For example:\n-     *\n-     *     var $ = cheerio.load('<h1>Hello, <span>world</span>.</h1>');\n-     */\n-    it('should be available as a static method on the \"loaded\" factory function (deprecated API)', function() {\n-      var $1 = cheerio.load(fruits);\n-      var $2 = $1.load('<div><p>Some <a>text</a>.</p></div>');\n-\n-      expect($2('a')).to.have.length(1);\n-    });\n-\n     it('should allow loading a pre-parsed DOM', function() {\n       var dom = htmlparser2.parseDOM(food),\n           $ = cheerio.load(dom);"}]}]