[{"url":"https://api.github.com/repos/moment/moment/issues/4338","repository_url":"https://api.github.com/repos/moment/moment","labels_url":"https://api.github.com/repos/moment/moment/issues/4338/labels{/name}","comments_url":"https://api.github.com/repos/moment/moment/issues/4338/comments","events_url":"https://api.github.com/repos/moment/moment/issues/4338/events","html_url":"https://github.com/moment/moment/pull/4338","id":278321022,"node_id":"MDExOlB1bGxSZXF1ZXN0MTU1NzU3MTY4","number":4338,"title":"[bugfix] Fix startOf/endOf DST issues while boosting performance","user":{"login":"ashsearle","id":1166814,"node_id":"MDQ6VXNlcjExNjY4MTQ=","avatar_url":"https://avatars.githubusercontent.com/u/1166814?v=4","gravatar_id":"","url":"https://api.github.com/users/ashsearle","html_url":"https://github.com/ashsearle","followers_url":"https://api.github.com/users/ashsearle/followers","following_url":"https://api.github.com/users/ashsearle/following{/other_user}","gists_url":"https://api.github.com/users/ashsearle/gists{/gist_id}","starred_url":"https://api.github.com/users/ashsearle/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ashsearle/subscriptions","organizations_url":"https://api.github.com/users/ashsearle/orgs","repos_url":"https://api.github.com/users/ashsearle/repos","events_url":"https://api.github.com/users/ashsearle/events{/privacy}","received_events_url":"https://api.github.com/users/ashsearle/received_events","type":"User","site_admin":false},"labels":[{"id":313210217,"node_id":"MDU6TGFiZWwzMTMyMTAyMTc=","url":"https://api.github.com/repos/moment/moment/labels/Pending%20Next%20Release","name":"Pending Next Release","color":"009800","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2017-12-01T00:45:33Z","updated_at":"2020-06-05T07:37:45Z","closed_at":"2019-01-19T02:09:46Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/moment/moment/pulls/4338","html_url":"https://github.com/moment/moment/pull/4338","diff_url":"https://github.com/moment/moment/pull/4338.diff","patch_url":"https://github.com/moment/moment/pull/4338.patch","merged_at":"2019-01-19T02:09:45Z"},"body":"These changes to `startOf` and `endOf` fix several DST-related issues:\r\n- avoid using setHours/setMinutes/setSeconds - fixes #1990, fixes #2749, fixes #3580\r\n- use `Date.UTC` / `new Date` for units bigger than hours - fixes #3132, fixes #4152\r\n\r\nAdditionally, the changes supersede these pull requests: #3620, #4164 and #4254 \r\n\r\nBenchmark results\r\n\r\n| Benchmark | moment 2.19.3 | this PR | improvement |\r\n| --- | --- | --- | --- |\r\n| startOf second | 2,598,171 ops/sec ±1.24% | 5,322,216 ops/sec ±1.56% | 2.0x |\r\n| startOf minute | 1,606,046 ops/sec ±0.98% | 7,397,801 ops/sec ±0.92% | 4.6x |\r\n| startOf hour | 1,069,176 ops/sec ±0.96% | 5,015,984 ops/sec ±0.91%   | 4.6x |\r\n| startOf date | 811,815 ops/sec ±1.08% | 1,162,031 ops/sec ±0.89%     | 1.4x |\r\n| startOf day | 827,911 ops/sec ±0.83% | 1,170,806 ops/sec ±1.25%      | 1.4x |\r\n| startOf isoWeek | 274,302 ops/sec ±1.06% | 973,431 ops/sec ±1.09%    | 3.5x |\r\n| startOf week | 298,240 ops/sec ±1.00% | 1,188,010 ops/sec ±0.94%     | 3.9x |\r\n| startOf month | 653,227 ops/sec ±0.85% | 1,447,224 ops/sec ±0.76%    | 2.2x |\r\n| startOf quarter | 381,496 ops/sec ±0.85% | 1,221,562 ops/sec ±0.93%  | 3.2x |\r\n| startOf year | 425,796 ops/sec ±0.98% | 2,047,534 ops/sec ±1.02%     | 4.8x |\r\n| endOf second | 200,544 ops/sec ±0.92% | 5,496,719 ops/sec ±1.00%     | 27.4x |\r\n| endOf minute | 190,097 ops/sec ±1.02% | 6,600,219 ops/sec ±0.94%     | 34.7x |\r\n| endOf hour | 331,129 ops/sec ±0.86% | 4,612,042 ops/sec ±0.88%       | 13.9x |\r\n| endOf date | 249,577 ops/sec ±1.10% | 1,239,091 ops/sec ±0.96%       | 4.9x  |\r\n| endOf day | 251,496 ops/sec ±1.01% | 1,240,042 ops/sec ±1.35%        | 4.9x  |\r\n| endOf isoWeek | 160,238 ops/sec ±1.73% | 917,050 ops/sec ±0.85%      | 5.7x  |\r\n| endOf week | 174,334 ops/sec ±2.02% | 1,216,138 ops/sec ±0.88%       | 6.9x  |\r\n| endOf month | 200,123 ops/sec ±1.24% | 1,480,412 ops/sec ±2.05%      | 7.3x  |\r\n| endOf quarter | 159,346 ops/sec ±0.99% | 1,165,512 ops/sec ±1.02%    | 7.3x  |\r\n| endOf year | 165,736 ops/sec ±1.70% | 2,026,810 ops/sec ±1.67%       | 12.2x |\r\n\r\nAdditionally, fixed one more bug: `moment('0000-02-29')` was created in year 1900 then reverted to year 0.  Unfortunately Feb 29th doesn't exist in 1900, so the moment ended up as `0000-03-01` instead.\r\n\r\nNew tests have been added to `start_end_of.js` that would have failed in earlier releases.","reactions":{"url":"https://api.github.com/repos/moment/moment/issues/4338/reactions","total_count":7,"+1":0,"-1":0,"laugh":0,"hooray":7,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/moment/moment/issues/4338/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"7fabbc05f183b96bbbee3a7dafea6c67dd3d8c2d","filename":"src/lib/create/date-from-array.js","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/moment/moment/blob/6abd6fde48f7136067f77c70d1c4d64195733f23/src%2Flib%2Fcreate%2Fdate-from-array.js","raw_url":"https://github.com/moment/moment/raw/6abd6fde48f7136067f77c70d1c4d64195733f23/src%2Flib%2Fcreate%2Fdate-from-array.js","contents_url":"https://api.github.com/repos/moment/moment/contents/src%2Flib%2Fcreate%2Fdate-from-array.js?ref=6abd6fde48f7136067f77c70d1c4d64195733f23","patch":"@@ -1,21 +1,35 @@\n export function createDate (y, m, d, h, M, s, ms) {\n     // can't just apply() to create a date:\n     // https://stackoverflow.com/q/181348\n-    var date = new Date(y, m, d, h, M, s, ms);\n-\n+    var date;\n     // the date constructor remaps years 0-99 to 1900-1999\n-    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n-        date.setFullYear(y);\n+    if (y < 100 && y >= 0) {\n+        // preserve leap years using a full 400 year cycle, then reset\n+        date = new Date(y + 400, m, d, h, M, s, ms);\n+        if (isFinite(date.getFullYear())) {\n+            date.setFullYear(y);\n+        }\n+    } else {\n+        date = new Date(y, m, d, h, M, s, ms);\n     }\n+\n     return date;\n }\n \n export function createUTCDate (y) {\n-    var date = new Date(Date.UTC.apply(null, arguments));\n-\n+    var date;\n     // the Date.UTC function remaps years 0-99 to 1900-1999\n-    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n-        date.setUTCFullYear(y);\n+    if (y < 100 && y >= 0) {\n+        var args = Array.prototype.slice.call(arguments);\n+        // preserve leap years using a full 400 year cycle, then reset\n+        args[0] = y + 400;\n+        date = new Date(Date.UTC.apply(null, args));\n+        if (isFinite(date.getUTCFullYear())) {\n+            date.setUTCFullYear(y);\n+        }\n+    } else {\n+        date = new Date(Date.UTC.apply(null, arguments));\n     }\n+\n     return date;\n }"},{"sha":"42c19cbc3b7e9597722c277105acebbad41f314e","filename":"src/lib/moment/start-end-of.js","status":"modified","additions":100,"deletions":31,"changes":131,"blob_url":"https://github.com/moment/moment/blob/6abd6fde48f7136067f77c70d1c4d64195733f23/src%2Flib%2Fmoment%2Fstart-end-of.js","raw_url":"https://github.com/moment/moment/raw/6abd6fde48f7136067f77c70d1c4d64195733f23/src%2Flib%2Fmoment%2Fstart-end-of.js","contents_url":"https://api.github.com/repos/moment/moment/contents/src%2Flib%2Fmoment%2Fstart-end-of.js?ref=6abd6fde48f7136067f77c70d1c4d64195733f23","patch":"@@ -1,59 +1,128 @@\n import { normalizeUnits } from '../units/aliases';\n+import { hooks } from '../utils/hooks';\n+\n+var MS_PER_SECOND = 1000;\n+var MS_PER_MINUTE = 60 * MS_PER_SECOND;\n+var MS_PER_HOUR = 60 * MS_PER_MINUTE;\n+var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n+\n+// actual modulo - handles negative numbers (for dates before 1970):\n+function mod(dividend, divisor) {\n+    return (dividend % divisor + divisor) % divisor;\n+}\n+\n+function localStartOfDate(y, m, d) {\n+    // the date constructor remaps years 0-99 to 1900-1999\n+    if (y < 100 && y >= 0) {\n+        // preserve leap years using a full 400 year cycle, then reset\n+        return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n+    } else {\n+        return new Date(y, m, d).valueOf();\n+    }\n+}\n+\n+function utcStartOfDate(y, m, d) {\n+    // Date.UTC remaps years 0-99 to 1900-1999\n+    if (y < 100 && y >= 0) {\n+        // preserve leap years using a full 400 year cycle, then reset\n+        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n+    } else {\n+        return Date.UTC(y, m, d);\n+    }\n+}\n \n export function startOf (units) {\n+    var time;\n     units = normalizeUnits(units);\n-    // the following switch intentionally omits break keywords\n-    // to utilize falling through the cases.\n+    if (units === undefined || units === 'millisecond' || !this.isValid()) {\n+        return this;\n+    }\n+\n+    var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n+\n     switch (units) {\n         case 'year':\n-            this.month(0);\n-            /* falls through */\n+            time = startOfDate(this.year(), 0, 1);\n+            break;\n         case 'quarter':\n+            time = startOfDate(this.year(), this.month() - this.month() % 3, 1);\n+            break;\n         case 'month':\n-            this.date(1);\n-            /* falls through */\n+            time = startOfDate(this.year(), this.month(), 1);\n+            break;\n         case 'week':\n+            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());\n+            break;\n         case 'isoWeek':\n+            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));\n+            break;\n         case 'day':\n         case 'date':\n-            this.hours(0);\n-            /* falls through */\n+            time = startOfDate(this.year(), this.month(), this.date());\n+            break;\n         case 'hour':\n-            this.minutes(0);\n-            /* falls through */\n+            time = this._d.valueOf();\n+            time -= mod(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);\n+            break;\n         case 'minute':\n-            this.seconds(0);\n-            /* falls through */\n+            time = this._d.valueOf();\n+            time -= mod(time, MS_PER_MINUTE);\n+            break;\n         case 'second':\n-            this.milliseconds(0);\n-    }\n-\n-    // weeks are a special case\n-    if (units === 'week') {\n-        this.weekday(0);\n-    }\n-    if (units === 'isoWeek') {\n-        this.isoWeekday(1);\n-    }\n-\n-    // quarters are also special\n-    if (units === 'quarter') {\n-        this.month(Math.floor(this.month() / 3) * 3);\n+            time = this._d.valueOf();\n+            time -= mod(time, MS_PER_SECOND);\n+            break;\n     }\n \n+    this._d.setTime(time);\n+    hooks.updateOffset(this, true);\n     return this;\n }\n \n export function endOf (units) {\n+    var time;\n     units = normalizeUnits(units);\n-    if (units === undefined || units === 'millisecond') {\n+    if (units === undefined || units === 'millisecond' || !this.isValid()) {\n         return this;\n     }\n \n-    // 'date' is an alias for 'day', so it should be considered as such.\n-    if (units === 'date') {\n-        units = 'day';\n+    var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n+\n+    switch (units) {\n+        case 'year':\n+            time = startOfDate(this.year() + 1, 0, 1) - 1;\n+            break;\n+        case 'quarter':\n+            time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;\n+            break;\n+        case 'month':\n+            time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n+            break;\n+        case 'week':\n+            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;\n+            break;\n+        case 'isoWeek':\n+            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;\n+            break;\n+        case 'day':\n+        case 'date':\n+            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n+            break;\n+        case 'hour':\n+            time = this._d.valueOf();\n+            time += MS_PER_HOUR - mod(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;\n+            break;\n+        case 'minute':\n+            time = this._d.valueOf();\n+            time += MS_PER_MINUTE - mod(time, MS_PER_MINUTE) - 1;\n+            break;\n+        case 'second':\n+            time = this._d.valueOf();\n+            time += MS_PER_SECOND - mod(time, MS_PER_SECOND) - 1;\n+            break;\n     }\n \n-    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\n+    this._d.setTime(time);\n+    hooks.updateOffset(this, true);\n+    return this;\n }"},{"sha":"e3db910474d8f276b10fb700d285e9c91e640bc6","filename":"src/test/moment/start_end_of.js","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/moment/moment/blob/6abd6fde48f7136067f77c70d1c4d64195733f23/src%2Ftest%2Fmoment%2Fstart_end_of.js","raw_url":"https://github.com/moment/moment/raw/6abd6fde48f7136067f77c70d1c4d64195733f23/src%2Ftest%2Fmoment%2Fstart_end_of.js","contents_url":"https://api.github.com/repos/moment/moment/contents/src%2Ftest%2Fmoment%2Fstart_end_of.js?ref=6abd6fde48f7136067f77c70d1c4d64195733f23","patch":"@@ -393,3 +393,27 @@ test('endOf millisecond and no-arg', function (assert) {\n     assert.equal(+m, +m.clone().endOf('millisecond'), 'endOf with millisecond argument should change time');\n     assert.equal(+m, +m.clone().endOf('milliseconds'), 'endOf with milliseconds argument should change time');\n });\n+\n+test('startOf for year zero', function (assert) {\n+    var m = moment('0000-02-29T12:34:56.789Z').parseZone();\n+    assert.equal(m.clone().startOf('ms').toISOString(), '0000-02-29T12:34:56.789Z',  'startOf millisecond should preserve year');\n+    assert.equal(m.clone().startOf('s').toISOString(), '0000-02-29T12:34:56.000Z', 'startOf second should preserve year');\n+    assert.equal(m.clone().startOf('m').toISOString(), '0000-02-29T12:34:00.000Z', 'startOf minute should preserve year');\n+    assert.equal(m.clone().startOf('h').toISOString(), '0000-02-29T12:00:00.000Z', 'startOf hour should preserve year');\n+    assert.equal(m.clone().startOf('d').toISOString(), '0000-02-29T00:00:00.000Z', 'startOf day should preserve year');\n+    assert.equal(m.clone().startOf('M').toISOString(), '0000-02-01T00:00:00.000Z', 'startOf month should preserve year');\n+    assert.equal(m.clone().startOf('Q').toISOString(), '0000-01-01T00:00:00.000Z', 'startOf quarter should preserve year');\n+    assert.equal(m.clone().startOf('y').toISOString(), '0000-01-01T00:00:00.000Z', 'startOf year should preserve year');\n+});\n+\n+test('endOf for year zero', function (assert) {\n+    var m = moment('0000-02-29T12:34:56.789Z').parseZone();\n+    assert.equal(m.clone().endOf('ms').toISOString(), '0000-02-29T12:34:56.789Z',  'endOf millisecond should preserve year');\n+    assert.equal(m.clone().endOf('s').toISOString(), '0000-02-29T12:34:56.999Z', 'endOf second should preserve year');\n+    assert.equal(m.clone().endOf('m').toISOString(), '0000-02-29T12:34:59.999Z', 'endOf minute should preserve year');\n+    assert.equal(m.clone().endOf('h').toISOString(), '0000-02-29T12:59:59.999Z', 'endOf hour should preserve year');\n+    assert.equal(m.clone().endOf('d').toISOString(), '0000-02-29T23:59:59.999Z', 'endOf day should preserve year');\n+    assert.equal(m.clone().endOf('M').toISOString(), '0000-02-29T23:59:59.999Z', 'endOf month should preserve year');\n+    assert.equal(m.clone().endOf('Q').toISOString(), '0000-03-31T23:59:59.999Z', 'endOf quarter should preserve year');\n+    assert.equal(m.clone().endOf('y').toISOString(), '0000-12-31T23:59:59.999Z', 'endOf year should preserve year');\n+});"}]}]