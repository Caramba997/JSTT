[{"url":"https://api.github.com/repos/facebook/jest/issues/12688","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/12688/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/12688/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/12688/events","html_url":"https://github.com/facebook/jest/pull/12688","id":1207934837,"node_id":"PR_kwDOAOXXVc42Z6xr","number":12688,"title":"chore: cleanup benchmark scripts","user":{"login":"mrazauskas","id":72159681,"node_id":"MDQ6VXNlcjcyMTU5Njgx","avatar_url":"https://avatars.githubusercontent.com/u/72159681?v=4","gravatar_id":"","url":"https://api.github.com/users/mrazauskas","html_url":"https://github.com/mrazauskas","followers_url":"https://api.github.com/users/mrazauskas/followers","following_url":"https://api.github.com/users/mrazauskas/following{/other_user}","gists_url":"https://api.github.com/users/mrazauskas/gists{/gist_id}","starred_url":"https://api.github.com/users/mrazauskas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrazauskas/subscriptions","organizations_url":"https://api.github.com/users/mrazauskas/orgs","repos_url":"https://api.github.com/users/mrazauskas/repos","events_url":"https://api.github.com/users/mrazauskas/events{/privacy}","received_events_url":"https://api.github.com/users/mrazauskas/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-04-19T08:03:06Z","updated_at":"2022-05-20T00:11:56Z","closed_at":"2022-04-19T10:29:14Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/12688","html_url":"https://github.com/facebook/jest/pull/12688","diff_url":"https://github.com/facebook/jest/pull/12688.diff","patch_url":"https://github.com/facebook/jest/pull/12688.patch","merged_at":"2022-04-19T10:29:14Z"},"body":"## Summary\r\n\r\nFew packages of Jest repo include benchmark scripts. Unfortunately these involve few problems:\r\n\r\n- `diff-sequences` publishes the scripts to NPM;\r\n- `jest-worker` includes them in coverage;\r\n- `pretty-format`s script does not work, because of wrong import.\r\n\r\nI have fixed these issues and moved all the scripts to `__benchmarks__` directories to simplify maintenance (lint rules, npmignore, etc).\r\n\r\n## Test plan\r\n\r\nI tryout out the scripts locally. Lint should pass. ","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/12688/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/12688/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"44d9227dfa97f81e285370fc3af87147865db490","filename":".eslintrc.cjs","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/.eslintrc.cjs","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/.eslintrc.cjs","contents_url":"https://api.github.com/repos/facebook/jest/contents/.eslintrc.cjs?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -237,10 +237,10 @@ module.exports = {\n     },\n     {\n       files: [\n+        'e2e/**',\n         'website/**',\n+        '**/__benchmarks__/**',\n         '**/__tests__/**',\n-        'e2e/**',\n-        '**/pretty-format/perf/**',\n         'packages/jest-types/**/*',\n         '.eslintplugin/**',\n       ],\n@@ -263,6 +263,7 @@ module.exports = {\n     {\n       files: [\n         'scripts/*',\n+        'packages/*/__benchmarks__/test.js',\n         'packages/jest-cli/src/init/index.ts',\n         'packages/jest-repl/src/cli/runtime-cli.ts',\n       ],\n@@ -274,14 +275,10 @@ module.exports = {\n       files: [\n         'e2e/**',\n         'examples/**',\n-        'scripts/*',\n         'website/**',\n         '**/__mocks__/**',\n         '**/__tests__/**',\n         '**/__typetests__/**',\n-        '**/__performance_tests__/**',\n-        'packages/diff-sequences/perf/index.js',\n-        'packages/pretty-format/perf/test.js',\n       ],\n       rules: {\n         '@typescript-eslint/no-unused-vars': 'off',"},{"sha":"0d516049dd16690e807f65d50a31bb0e4ed69438","filename":".prettierignore","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/.prettierignore","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/.prettierignore","contents_url":"https://api.github.com/repos/facebook/jest/contents/.prettierignore?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -9,7 +9,7 @@ coverage\n /packages/*/build\n /packages/*/dist\n /packages/jest-config/src/__tests__/jest-preset.json\n-/packages/pretty-format/perf/world.geo.json\n+/packages/pretty-format/__benchmarks__/world.geo.json\n \n # Breaks tests\n /e2e/coverage-handlebars/greet.hbs"},{"sha":"6084cf82b9d34eb6ae3ea25461aca397a93290f7","filename":"jest.config.mjs","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/jest.config.mjs","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/jest.config.mjs","contents_url":"https://api.github.com/repos/facebook/jest/contents/jest.config.mjs?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -15,7 +15,7 @@ export default {\n     '**/packages/*/**/*.ts',\n     '!**/bin/**',\n     '!**/cli/**',\n-    '!**/perf/**',\n+    '!**/__benchmarks__/**',\n     '!**/__mocks__/**',\n     '!**/__tests__/**',\n     '!**/__typetests__/**',\n@@ -38,6 +38,7 @@ export default {\n   snapshotSerializers: [require.resolve('pretty-format/ConvertAnsi')],\n   testPathIgnorePatterns: [\n     '/__arbitraries__/',\n+    '/__benchmarks__/',\n     '/__typetests__/',\n     '/node_modules/',\n     '/examples/',\n@@ -64,8 +65,6 @@ export default {\n     '/packages/jest-snapshot/src/__tests__/plugins',\n     '/packages/jest-snapshot/src/__tests__/fixtures/',\n     '/packages/jest-validate/src/__tests__/fixtures/',\n-    '/packages/jest-worker/src/__performance_tests__',\n-    '/packages/pretty-format/perf/test.js',\n     '/e2e/__tests__/iterator-to-null-test.ts',\n   ],\n   testTimeout: 70000,"},{"sha":"765fec82eb3f752e923ea75f2f8918e73ecaf8bd","filename":"package.json","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/package.json","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/package.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/package.json?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -106,7 +106,6 @@\n     \"test-types\": \"yarn jest --config jest.config.tsd.mjs\",\n     \"test-ci-partial\": \"yarn test-ci-partial:parallel -i\",\n     \"test-ci-partial:parallel\": \"yarn jest --color --config jest.config.ci.mjs\",\n-    \"test-pretty-format-perf\": \"node packages/pretty-format/perf/test.js\",\n     \"test-leak\": \"yarn jest -i --detectLeaks --color jest-mock jest-diff jest-repl pretty-format\",\n     \"test\": \"yarn lint && yarn jest\",\n     \"verify-old-ts\": \"node ./scripts/verifyOldTs.mjs\","},{"sha":"8dda7de8f4feb2016fc61c38ec82fd07d816942d","filename":"packages/diff-sequences/.npmignore","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fdiff-sequences%2F.npmignore","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fdiff-sequences%2F.npmignore","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fdiff-sequences%2F.npmignore?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -1,5 +1,6 @@\n **/__mocks__/**\n **/__tests__/**\n+__benchmarks__\n __typetests__\n src\n tsconfig.json"},{"sha":"663f25de078fa6e769ac40955b8d0c4df425d4fb","filename":"packages/diff-sequences/__benchmarks__/example.md","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fdiff-sequences%2F__benchmarks__%2Fexample.md","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fdiff-sequences%2F__benchmarks__%2Fexample.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fdiff-sequences%2F__benchmarks__%2Fexample.md?ref=47993cebae2175d453de4925864b9bb8a873c766","previous_filename":"packages/diff-sequences/perf/example.md"},{"sha":"04da41dc99003b9ab4d2f0f466a703c2108e9a37","filename":"packages/diff-sequences/__benchmarks__/test.js","status":"renamed","additions":16,"deletions":8,"changes":24,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fdiff-sequences%2F__benchmarks__%2Ftest.js","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fdiff-sequences%2F__benchmarks__%2Ftest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fdiff-sequences%2F__benchmarks__%2Ftest.js?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -5,19 +5,23 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n-// Make sure to run node with --expose-gc option!\n-\n-// The times are reliable if about 1% relative mean error if you run it:\n+/**\n+ * To start the test, build the repo and run:\n+ *   node --expose-gc test.js\n+ */\n \n-// * immediately after restart\n-// * with 100% battery charge\n-// * not connected to network\n+/**\n+ * The times are reliable if about 1% relative mean error if you run it:\n+ *   - immediately after restart\n+ *   - with 100% battery charge\n+ *   - not connected to network\n+ */\n \n-/* eslint import/no-extraneous-dependencies: \"off\" */\n+'use strict';\n \n const Benchmark = require('benchmark');\n const diffBaseline = require('diff').diffLines;\n-const diffImproved = require('../build/index.js').default;\n+const diffImproved = require('../').default;\n \n const testBaseline = (a, b) => {\n   const benchmark = new Benchmark({\n@@ -163,6 +167,10 @@ const testLength = n => {\n   ); // simulate TDD\n };\n \n+if (!globalThis.gc) {\n+  throw new Error('GC not present, start with: node --expose-gc test.js');\n+}\n+\n writeHeading2();\n \n testLength(20);","previous_filename":"packages/diff-sequences/perf/index.js"},{"sha":"813282810b5babb0d40dd986f750c0dc220d49f0","filename":"packages/diff-sequences/package.json","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fdiff-sequences%2Fpackage.json","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fdiff-sequences%2Fpackage.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fdiff-sequences%2Fpackage.json?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -27,9 +27,6 @@\n     },\n     \"./package.json\": \"./package.json\"\n   },\n-  \"scripts\": {\n-    \"perf\": \"node --expose-gc perf/index.js\"\n-  },\n   \"devDependencies\": {\n     \"benchmark\": \"^2.1.4\",\n     \"diff\": \"^5.0.0\","},{"sha":"8dda7de8f4feb2016fc61c38ec82fd07d816942d","filename":"packages/jest-worker/.npmignore","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F.npmignore","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F.npmignore","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2F.npmignore?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -1,6 +1,6 @@\n **/__mocks__/**\n **/__tests__/**\n-**/__performance_tests__/**\n+__benchmarks__\n __typetests__\n src\n tsconfig.json"},{"sha":"3d72d37844e0248d7e5106049ab684dfb21373b0","filename":"packages/jest-worker/__benchmarks__/test.js","status":"renamed","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F__benchmarks__%2Ftest.js","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F__benchmarks__%2Ftest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2F__benchmarks__%2Ftest.js?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -5,22 +5,25 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n+/**\n+ * To start the test, build the repo and run:\n+ *   node --expose-gc test.js empty 100000\n+ *   node --expose-gc test.js loadTest 10000\n+ */\n+\n 'use strict';\n \n const assert = require('assert');\n const {performance} = require('perf_hooks');\n-// eslint-disable-next-line import/no-extraneous-dependencies\n const workerFarm = require('worker-farm');\n-const JestWorker = require('../../build').Worker;\n+const JestWorker = require('../').Worker;\n \n-// Typical tests: node --expose-gc test.js empty 100000\n-//                node --expose-gc test.js loadTest 10000\n assert(process.argv[2], 'Pass a child method name');\n assert(process.argv[3], 'Pass the number of iterations');\n \n const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n const method = process.argv[2];\n-const calls = +process.argv[3];\n+const calls = Number(process.argv[3]);\n const threads = 6;\n const iterations = 10;\n \n@@ -127,7 +130,7 @@ function profileEnd(x) {\n \n async function main() {\n   if (!globalThis.gc) {\n-    console.warn('GC not present, start with node --expose-gc');\n+    throw new Error('GC not present, start with node --expose-gc');\n   }\n \n   const wFResults = [];","previous_filename":"packages/jest-worker/src/__performance_tests__/test.js"},{"sha":"97b7fc251fbc68b956a28ac7475f3c66c9050196","filename":"packages/jest-worker/__benchmarks__/workers/jest_worker.js","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F__benchmarks__%2Fworkers%2Fjest_worker.js","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F__benchmarks__%2Fworkers%2Fjest_worker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2F__benchmarks__%2Fworkers%2Fjest_worker.js?ref=47993cebae2175d453de4925864b9bb8a873c766","previous_filename":"packages/jest-worker/src/__performance_tests__/workers/jest_worker.js"},{"sha":"c4c7a7bf1f1a3959d7a8d78aff9babb2a5dbaa33","filename":"packages/jest-worker/__benchmarks__/workers/pi.js","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F__benchmarks__%2Fworkers%2Fpi.js","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F__benchmarks__%2Fworkers%2Fpi.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2F__benchmarks__%2Fworkers%2Fpi.js?ref=47993cebae2175d453de4925864b9bb8a873c766","previous_filename":"packages/jest-worker/src/__performance_tests__/workers/pi.js"},{"sha":"9ff29df123c4fa660d84078e4f58a8d890d40431","filename":"packages/jest-worker/__benchmarks__/workers/worker_farm.js","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F__benchmarks__%2Fworkers%2Fworker_farm.js","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2F__benchmarks__%2Fworkers%2Fworker_farm.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2F__benchmarks__%2Fworkers%2Fworker_farm.js?ref=47993cebae2175d453de4925864b9bb8a873c766","previous_filename":"packages/jest-worker/src/__performance_tests__/workers/worker_farm.js"},{"sha":"8f5708f84441b41fc87cf9600005ef0efbfe9a17","filename":"packages/jest-worker/tsconfig.json","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2Ftsconfig.json","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fjest-worker%2Ftsconfig.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Ftsconfig.json?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -5,6 +5,6 @@\n     \"outDir\": \"build\"\n   },\n   \"include\": [\"./src/**/*\"],\n-  \"exclude\": [\"./**/__performance_tests__/**/*\", \"./**/__tests__/**/*\"],\n+  \"exclude\": [\"./**/__tests__/**/*\"],\n   \"references\": [{\"path\": \"../jest-leak-detector\"}]\n }"},{"sha":"8dda7de8f4feb2016fc61c38ec82fd07d816942d","filename":"packages/pretty-format/.npmignore","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fpretty-format%2F.npmignore","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fpretty-format%2F.npmignore","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2F.npmignore?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -1,8 +1,8 @@\n **/__mocks__/**\n **/__tests__/**\n+__benchmarks__\n __typetests__\n src\n-perf\n tsconfig.json\n tsconfig.tsbuildinfo\n api-extractor.json"},{"sha":"e5f8a3ced4078ae173ee0a00a14f254ef4274144","filename":"packages/pretty-format/__benchmarks__/test.js","status":"renamed","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fpretty-format%2F__benchmarks__%2Ftest.js","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fpretty-format%2F__benchmarks__%2Ftest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2F__benchmarks__%2Ftest.js?ref=47993cebae2175d453de4925864b9bb8a873c766","patch":"@@ -5,13 +5,20 @@\n  * LICENSE file in the root directory of this source tree.\n  */\n \n+/**\n+ * To start the test, build the repo and run:\n+ *   node test.js\n+ */\n+\n+'use strict';\n+\n const util = require('util');\n const chalk = require('chalk');\n const React = require('react');\n const ReactTestRenderer = require('react-test-renderer');\n const {formatTime} = require('jest-util');\n-const prettyFormat = require('../build');\n-const ReactTestComponent = require('../build/plugins/ReactTestComponent');\n+const prettyFormat = require('../').format;\n+const {ReactTestComponent} = require('../').plugins;\n const worldGeoJson = require('./world.geo.json');\n \n const NANOSECONDS = 1000000000;","previous_filename":"packages/pretty-format/perf/test.js"},{"sha":"64005ce8da8589cabb54fcdf0a4b61e421dc47fb","filename":"packages/pretty-format/__benchmarks__/world.geo.json","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/facebook/jest/blob/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fpretty-format%2F__benchmarks__%2Fworld.geo.json","raw_url":"https://github.com/facebook/jest/raw/47993cebae2175d453de4925864b9bb8a873c766/packages%2Fpretty-format%2F__benchmarks__%2Fworld.geo.json","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fpretty-format%2F__benchmarks__%2Fworld.geo.json?ref=47993cebae2175d453de4925864b9bb8a873c766","previous_filename":"packages/pretty-format/perf/world.geo.json"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/12320","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/12320/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/12320/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/12320/events","html_url":"https://github.com/facebook/jest/pull/12320","id":1126264407,"node_id":"PR_kwDOAOXXVc4yL12g","number":12320,"title":"perf(haste-map): default to node crawl if watchman is not enabled","user":{"login":"SimenB","id":1404810,"node_id":"MDQ6VXNlcjE0MDQ4MTA=","avatar_url":"https://avatars.githubusercontent.com/u/1404810?v=4","gravatar_id":"","url":"https://api.github.com/users/SimenB","html_url":"https://github.com/SimenB","followers_url":"https://api.github.com/users/SimenB/followers","following_url":"https://api.github.com/users/SimenB/following{/other_user}","gists_url":"https://api.github.com/users/SimenB/gists{/gist_id}","starred_url":"https://api.github.com/users/SimenB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SimenB/subscriptions","organizations_url":"https://api.github.com/users/SimenB/orgs","repos_url":"https://api.github.com/users/SimenB/repos","events_url":"https://api.github.com/users/SimenB/events{/privacy}","received_events_url":"https://api.github.com/users/SimenB/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-07T17:08:06Z","updated_at":"2022-03-12T00:07:26Z","closed_at":"2022-02-09T10:47:55Z","author_association":"COLLABORATOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/12320","html_url":"https://github.com/facebook/jest/pull/12320","diff_url":"https://github.com/facebook/jest/pull/12320.diff","patch_url":"https://github.com/facebook/jest/pull/12320.patch","merged_at":"2022-02-09T10:47:55Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md at the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\nToggling option from #11264.\r\n\r\nOn my machine the node crawl is even faster than watchman for `--list-tests`, while both beat `find` into dust.\r\n\r\nThis branch:\r\n\r\n```sh-session\r\n$  hyperfine 'yarn jest --list-tests' 'yarn jest --list-tests --no-watchman'\r\nBenchmark 1: yarn jest --list-tests\r\n  Time (mean ± σ):      2.921 s ±  0.750 s    [User: 3.143 s, System: 0.549 s]\r\n  Range (min … max):    2.261 s …  4.519 s    10 runs\r\n\r\nBenchmark 2: yarn jest --list-tests --no-watchman\r\n  Time (mean ± σ):      2.197 s ±  0.216 s    [User: 2.367 s, System: 0.414 s]\r\n  Range (min … max):    2.074 s …  2.801 s    10 runs\r\n```\r\n\r\n`main`:\r\n\r\n```sh-session\r\n$ hyperfine 'yarn jest --list-tests --no-watchman'\r\nBenchmark 1: yarn jest --list-tests --no-watchman\r\n  Time (mean ± σ):      3.684 s ±  0.364 s    [User: 2.878 s, System: 1.415 s]\r\n  Range (min … max):    3.225 s …  4.341 s    10 runs\r\n```\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n## Test plan\r\n\r\nGreen CI\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/12320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/12320/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"ecb1380e49f516d4b8dcf10f951184e9a4f3d6bb","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/96331c1dfec14949f63eb8f4c37a65330fb8e5d0/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/96331c1dfec14949f63eb8f4c37a65330fb8e5d0/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=96331c1dfec14949f63eb8f4c37a65330fb8e5d0","patch":"@@ -10,6 +10,8 @@\n \n ### Performance\n \n+- `[jest-haste-map]` [**BREAKING**] Default to `node` crawler over shelling out to `find` if `watchman` is not enabled ([#12320](https://github.com/facebook/jest/pull/12320))\n+\n ## 27.5.1\n \n ### Features"},{"sha":"7a7744fb52d6e0d959f4c815a6bf374468581980","filename":"e2e/__tests__/__snapshots__/showConfig.test.ts.snap","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/96331c1dfec14949f63eb8f4c37a65330fb8e5d0/e2e%2F__tests__%2F__snapshots__%2FshowConfig.test.ts.snap","raw_url":"https://github.com/facebook/jest/raw/96331c1dfec14949f63eb8f4c37a65330fb8e5d0/e2e%2F__tests__%2F__snapshots__%2FshowConfig.test.ts.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2F__snapshots__%2FshowConfig.test.ts.snap?ref=96331c1dfec14949f63eb8f4c37a65330fb8e5d0","patch":"@@ -22,7 +22,7 @@ exports[`--showConfig outputs config info and exits 1`] = `\n       \"haste\": {\n         \"computeSha1\": false,\n         \"enableSymlinks\": false,\n-        \"forceNodeFilesystemAPI\": false,\n+        \"forceNodeFilesystemAPI\": true,\n         \"throwOnModuleCollision\": false\n       },\n       \"injectGlobals\": true,"},{"sha":"251ecebb8996cd835cd3431f2ca36d7c4b3b0c4b","filename":"packages/jest-config/src/Defaults.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/96331c1dfec14949f63eb8f4c37a65330fb8e5d0/packages%2Fjest-config%2Fsrc%2FDefaults.ts","raw_url":"https://github.com/facebook/jest/raw/96331c1dfec14949f63eb8f4c37a65330fb8e5d0/packages%2Fjest-config%2Fsrc%2FDefaults.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FDefaults.ts?ref=96331c1dfec14949f63eb8f4c37a65330fb8e5d0","patch":"@@ -36,7 +36,7 @@ const defaultOptions: Config.DefaultOptions = {\n   haste: {\n     computeSha1: false,\n     enableSymlinks: false,\n-    forceNodeFilesystemAPI: false,\n+    forceNodeFilesystemAPI: true,\n     throwOnModuleCollision: false,\n   },\n   injectGlobals: true,"},{"sha":"8de7fb87c1c7db181f811cdb7de9ca00c49a01d2","filename":"packages/jest-config/src/ValidConfig.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/96331c1dfec14949f63eb8f4c37a65330fb8e5d0/packages%2Fjest-config%2Fsrc%2FValidConfig.ts","raw_url":"https://github.com/facebook/jest/raw/96331c1dfec14949f63eb8f4c37a65330fb8e5d0/packages%2Fjest-config%2Fsrc%2FValidConfig.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FValidConfig.ts?ref=96331c1dfec14949f63eb8f4c37a65330fb8e5d0","patch":"@@ -60,7 +60,7 @@ const initialOptions: Config.InitialOptions = {\n     computeSha1: true,\n     defaultPlatform: 'ios',\n     enableSymlinks: false,\n-    forceNodeFilesystemAPI: false,\n+    forceNodeFilesystemAPI: true,\n     hasteImplModulePath: '<rootDir>/haste_impl.js',\n     hasteMapModulePath: '',\n     platforms: ['ios', 'android'],"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/5793","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/5793/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/5793/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/5793/events","html_url":"https://github.com/facebook/jest/pull/5793","id":305191958,"node_id":"MDExOlB1bGxSZXF1ZXN0MTc0OTgwMjcx","number":5793,"title":"Improve jest-worker (up to 4x)","user":{"login":"mjesun","id":829269,"node_id":"MDQ6VXNlcjgyOTI2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/829269?v=4","gravatar_id":"","url":"https://api.github.com/users/mjesun","html_url":"https://github.com/mjesun","followers_url":"https://api.github.com/users/mjesun/followers","following_url":"https://api.github.com/users/mjesun/following{/other_user}","gists_url":"https://api.github.com/users/mjesun/gists{/gist_id}","starred_url":"https://api.github.com/users/mjesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjesun/subscriptions","organizations_url":"https://api.github.com/users/mjesun/orgs","repos_url":"https://api.github.com/users/mjesun/repos","events_url":"https://api.github.com/users/mjesun/events{/privacy}","received_events_url":"https://api.github.com/users/mjesun/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-14T14:50:56Z","updated_at":"2021-05-12T18:15:28Z","closed_at":"2018-03-14T15:16:17Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/5793","html_url":"https://github.com/facebook/jest/pull/5793","diff_url":"https://github.com/facebook/jest/pull/5793.diff","patch_url":"https://github.com/facebook/jest/pull/5793.patch","merged_at":"2018-03-14T15:16:17Z"},"body":"This PR modifies the way internal worker queues are managed, passing from an array to a linked-list, improving a 10% the current benchmark, and 400% over a new benchmark.\r\n\r\n## How come this wasn't noticed before?\r\n\r\nWhen `jest-worker` was initially benchmarked, it was done by using not so many jobs (~10k), but very heavy in time. While this is the usual approach (few jobs, lots of time per job), sometimes you have the opposite (i.e. lots of jobs, but each of them very fast). _This is actually what `jest-haste-map` does._\r\n\r\nSince the internal queue was an array, re-indexing the queue is a `O(n)` operation, which becomes especially relevant on the second scenario. Switching to a linked list means that all operations for advancing the queue become `O(1)`, no matter its length. This results in massive speed improvements on really long queues.\r\n\r\n## Some benchmarks\r\n\r\nUsing the extended performance test, the `empty` function, called 100,000 times results in:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 11102, processingTime: 11058 }\r\nworker-farm: { globalTime: 9713, processingTime: 9685 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 10790, processingTime: 10762 }\r\nworker-farm: { globalTime: 10453, processingTime: 10432 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 11111, processingTime: 11079 }\r\nworker-farm: { globalTime: 10133, processingTime: 10112 }\r\n---------------------------------------------------------------------------\r\n```\r\n\r\nNow, **with the change**, it results in:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 2634, processingTime: 2594 }\r\nworker-farm: { globalTime: 10165, processingTime: 10141 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 2780, processingTime: 2756 }\r\nworker-farm: { globalTime: 10132, processingTime: 10110 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 2608, processingTime: 2581 }\r\nworker-farm: { globalTime: 10295, processingTime: 10272 }\r\n---------------------------------------------------------------------------\r\n```\r\n## What about the existing metrics?\r\n\r\nThe previous metric (which we initially used for benchmarking, `loadTest` called 10,000 times), has also improved, but only slightly, since that one was already optimized:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 726, processingTime: 690 }\r\nworker-farm: { globalTime: 769, processingTime: 748 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 719, processingTime: 693 }\r\nworker-farm: { globalTime: 784, processingTime: 765 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 703, processingTime: 673 }\r\nworker-farm: { globalTime: 748, processingTime: 731 }\r\n---------------------------------------------------------------------------\r\n```\r\n\r\n## Tests\r\n\r\nI ensured all tests pass, but I also added some slight modifications into the `__performance__tests__` so that you can pass an arbitrary worker method as well as an arbitrary number of iterations. This allowed me to test the other scenario.\r\n\r\n_On a personal note: this is actually WHY algorithms and data structures knowledge IS important for a frontend developer!_ 🙂","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/5793/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/5793/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"5db9938889eb58c7dd74be36d4f598922c4897a6","filename":"packages/jest-worker/src/__performance_tests__/test.js","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Ftest.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -2,10 +2,17 @@\n \n // eslint-disable-next-line import/no-extraneous-dependencies\n const workerFarm = require('worker-farm');\n-import JestWorker from '../../build';\n+const assert = require('assert');\n+const JestWorker = require('../../build').default;\n+\n+// Typical tests: node --expose-gc test.js empty 100000\n+//                node --expose-gc test.js loadTest 10000\n+assert(process.argv[2], 'Pass a child method name');\n+assert(process.argv[3], 'Pass the number of iteratitons');\n \n const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n-const calls = 10000;\n+const method = process.argv[2];\n+const calls = +process.argv[3];\n const threads = 6;\n \n function testWorkerFarm() {\n@@ -35,7 +42,7 @@ function testWorkerFarm() {\n         maxConcurrentWorkers: threads,\n       },\n       require.resolve('./workers/worker_farm'),\n-      ['loadTest'],\n+      [method],\n     );\n \n     // Let all workers come up.\n@@ -45,7 +52,7 @@ function testWorkerFarm() {\n \n     for (let i = 0; i < calls; i++) {\n       const promisified = new Promise((resolve, reject) => {\n-        api.loadTest((err, result) => {\n+        api[method]((err, result) => {\n           if (err) {\n             reject(err);\n           } else {\n@@ -80,7 +87,7 @@ function testJestWorker() {\n     }\n \n     const farm = new JestWorker(require.resolve('./workers/jest_worker'), {\n-      exposedMethods: ['loadTest'],\n+      exposedMethods: [method],\n       forkOptions: {execArgv: []},\n       workers: threads,\n     });\n@@ -94,7 +101,7 @@ function testJestWorker() {\n     const startProcess = Date.now();\n \n     for (let i = 0; i < calls; i++) {\n-      const promisified = farm.loadTest();\n+      const promisified = farm[method]();\n \n       promisified.then(countToFinish);\n     }"},{"sha":"5468ec07aa65a528e557b5509b91bef431a44b52","filename":"packages/jest-worker/src/__performance_tests__/workers/jest_worker.js","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fjest_worker.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -5,3 +5,7 @@ const pi = require('./pi');\n module.exports.loadTest = function() {\n   return pi();\n };\n+\n+module.exports.empty = function() {\n+  // Do nothing.\n+};"},{"sha":"360042c808b034a24fecc8740b50ed33ceafb938","filename":"packages/jest-worker/src/__performance_tests__/workers/worker_farm.js","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2F__performance_tests__%2Fworkers%2Fworker_farm.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -5,3 +5,8 @@ const pi = require('./pi');\n module.exports.loadTest = function(callback) {\n   callback(null, pi());\n };\n+\n+module.exports.empty = function(callback) {\n+  // Do nothing.\n+  callback();\n+};"},{"sha":"cd61fa2d3dc2a8ce6025a6f48577ef2b810e1c29","filename":"packages/jest-worker/src/types.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2Ftypes.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2Ftypes.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Ftypes.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -99,4 +99,5 @@ export type QueueCallback = (?Error, ?any) => void;\n export type QueueChildMessage = {|\n   request: ChildMessage,\n   callback: QueueCallback,\n+  next: ?QueueChildMessage,\n |};"},{"sha":"80562376828b318f90fc4dac4749aeb85d3a57be","filename":"packages/jest-worker/src/worker.js","status":"modified","additions":29,"deletions":16,"changes":45,"blob_url":"https://github.com/facebook/jest/blob/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2Fworker.js","raw_url":"https://github.com/facebook/jest/raw/1df5c91a229c1b25c58678d08461dd8c717e5d2b/packages%2Fjest-worker%2Fsrc%2Fworker.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-worker%2Fsrc%2Fworker.js?ref=1df5c91a229c1b25c58678d08461dd8c717e5d2b","patch":"@@ -48,13 +48,14 @@ import type {\n export default class {\n   _busy: boolean;\n   _child: ChildProcess;\n+  _last: ?QueueChildMessage;\n   _options: WorkerOptions;\n-  _queue: Array<QueueChildMessage>;\n+  _queue: ?QueueChildMessage;\n   _retries: number;\n \n   constructor(options: WorkerOptions) {\n     this._options = options;\n-    this._queue = [];\n+    this._queue = null;\n \n     this._initialize();\n   }\n@@ -68,7 +69,15 @@ export default class {\n   }\n \n   send(request: ChildMessage, callback: QueueCallback) {\n-    this._queue.push({callback, request});\n+    const item = {callback, next: null, request};\n+\n+    if (this._last) {\n+      this._last.next = item;\n+    } else {\n+      this._queue = item;\n+    }\n+\n+    this._last = item;\n     this._process();\n   }\n \n@@ -82,7 +91,7 @@ export default class {\n           env: Object.assign({}, process.env, {\n             JEST_WORKER_ID: this._options.workerId,\n           }),\n-          // suppress --debug / --inspect flags while preserving others (like --harmony)\n+          // Suppress --debug / --inspect flags while preserving others (like --harmony).\n           execArgv: process.execArgv.filter(v => !/^--(debug|inspect)/.test(v)),\n           silent: true,\n         },\n@@ -121,35 +130,39 @@ export default class {\n       return;\n     }\n \n-    const queue = this._queue;\n-    let skip = 0;\n+    let item = this._queue;\n \n     // Calls in the queue might have already been processed by another worker,\n     // so we have to skip them.\n-    while (queue.length > skip && queue[skip].request[1]) {\n-      skip++;\n+    while (item && item.request[1]) {\n+      item = item.next;\n     }\n \n-    // Remove all pieces at once.\n-    queue.splice(0, skip);\n-\n-    if (queue.length) {\n-      const call = queue[0];\n+    this._queue = item;\n \n+    if (item) {\n       // Flag the call as processed, so that other workers know that they don't\n       // have to process it as well.\n-      call.request[1] = true;\n+      item.request[1] = true;\n \n       this._retries = 0;\n       this._busy = true;\n \n       // $FlowFixMe: wrong \"ChildProcess.send\" signature.\n-      this._child.send(call.request);\n+      this._child.send(item.request);\n+    } else {\n+      this._last = item;\n     }\n   }\n \n   _receive(response: any /* Should be ParentMessage */) {\n-    const callback = this._queue[0].callback;\n+    const item = this._queue;\n+\n+    if (!item) {\n+      throw new TypeError('Unexpected response with an empty queue');\n+    }\n+\n+    const callback = item.callback;\n \n     this._busy = false;\n     this._process();"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8237","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8237/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8237/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8237/events","html_url":"https://github.com/facebook/jest/pull/8237","id":426821093,"node_id":"MDExOlB1bGxSZXF1ZXN0MjY1NTg4Nzk5","number":8237,"title":"Unify worker module map transmission w/ small perf benefit.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2019-03-29T05:17:59Z","updated_at":"2021-05-24T00:05:36Z","closed_at":"2019-03-29T21:41:28Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8237","html_url":"https://github.com/facebook/jest/pull/8237","diff_url":"https://github.com/facebook/jest/pull/8237.diff","patch_url":"https://github.com/facebook/jest/pull/8237.patch","merged_at":"2019-03-29T21:41:27Z"},"body":"## Summary\r\n\r\nThis PR unifies the way module maps are passed to the worker. Previously, we did it one way for watch mode and a different way for non-watch mode because our watch mode way was a lot slower.\r\n\r\nI fixed that slowness for watch mode and realized while doing some performance and memory profiling that the watch mode way is now actually faster on a few levels:\r\n1) It's straight-up faster to transmit it to the process because the module map is significantly smaller than the whole haste map you have to deserialize if you get at it via the file.\r\n2) If you load the whole haste map and want to discard half of it, suddenly there is a bunch of stuff that will need to be GC'd in the future. This happens in the worker because it only wants the module map but has to deserialize the whole file.\r\n3) Not requiring the haste map be written to disk at this point opens up further optimizations in the future.\r\n\r\nHere's a benchmark of running `yarn jest packages/expect`, meant to profile starting up some workers and running a couple tests. Each profile was run 10 times after 3 warm ups.\r\n\r\n### master\r\nTime (mean ± σ):      3.902 s ±  0.120 s    [User: 21.570 s, System: 5.105 s]\r\nRange (min … max):    3.682 s …  4.084 s    10 run\r\n\r\n### this branch\r\nTime (mean ± σ):      3.522 s ±  0.175 s    [User: 19.722 s, System: 4.777 s]\r\nRange (min … max):    3.356 s …  3.897 s    10 runs\r\n\r\nIt's faster. It's less code with a unified code path. It opens up more optimizations in the future.\r\n\r\n## Test plan\r\n\r\n1. All tests pass.\r\n2. Benchmarks show better performance in all situations.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8237/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"81f8952cf0d0f4bdecad3951b56425307ac60a9c","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -28,6 +28,7 @@\n - `[jest-resolve]`: Remove internal peer dependencies ([#8215](https://github.com/facebook/jest/pull/8215))\n - `[jest-snapshot]`: Remove internal peer dependencies ([#8215](https://github.com/facebook/jest/pull/8215))\n - `[jest-resolve]` Fix requireActual with moduleNameMapper ([#8210](https://github.com/facebook/jest/pull/8210))\n+- `[jest-haste-map]` Fix haste map duplicate detection in watch mode ([#8237](https://github.com/facebook/jest/pull/8237))\n \n ### Chore & Maintenance\n "},{"sha":"cfc308b970f4055d5340fe9fe49b925f2be6c386","filename":"packages/jest-haste-map/src/ModuleMap.ts","status":"modified","additions":31,"deletions":4,"changes":35,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -12,7 +12,6 @@ import {\n   ModuleMetaData,\n   RawModuleMap,\n   ModuleMapData,\n-  DuplicatesIndex,\n   MockData,\n } from './types';\n \n@@ -25,7 +24,7 @@ const EMPTY_MAP = new Map();\n type ValueType<T> = T extends Map<string, infer V> ? V : never;\n \n export type SerializableModuleMap = {\n-  duplicates: ReadonlyArray<[string, ValueType<DuplicatesIndex>]>;\n+  duplicates: ReadonlyArray<[string, [string, [string, [string, number]]]]>;\n   map: ReadonlyArray<[string, ValueType<ModuleMapData>]>;\n   mocks: ReadonlyArray<[string, ValueType<MockData>]>;\n   rootDir: Config.Path;\n@@ -36,6 +35,30 @@ export default class ModuleMap {\n   private readonly _raw: RawModuleMap;\n   private json: SerializableModuleMap | undefined;\n \n+  private static mapToArrayRecursive(\n+    map: Map<any, any>,\n+  ): Array<[string, unknown]> {\n+    let arr = Array.from(map);\n+    if (arr[0] && arr[0][1] instanceof Map) {\n+      arr = arr.map(\n+        el => [el[0], this.mapToArrayRecursive(el[1])] as [string, unknown],\n+      );\n+    }\n+    return arr;\n+  }\n+\n+  private static mapFromArrayRecursive(\n+    arr: ReadonlyArray<[string, unknown]>,\n+  ): Map<string, unknown> {\n+    if (arr[0] && Array.isArray(arr[1])) {\n+      arr = arr.map(el => [\n+        el[0],\n+        this.mapFromArrayRecursive(el[1] as Array<[string, unknown]>),\n+      ]) as Array<[string, unknown]>;\n+    }\n+    return new Map(arr);\n+  }\n+\n   constructor(raw: RawModuleMap) {\n     this._raw = raw;\n   }\n@@ -87,7 +110,9 @@ export default class ModuleMap {\n   toJSON(): SerializableModuleMap {\n     if (!this.json) {\n       this.json = {\n-        duplicates: Array.from(this._raw.duplicates),\n+        duplicates: ModuleMap.mapToArrayRecursive(\n+          this._raw.duplicates,\n+        ) as SerializableModuleMap['duplicates'],\n         map: Array.from(this._raw.map),\n         mocks: Array.from(this._raw.mocks),\n         rootDir: this._raw.rootDir,\n@@ -98,7 +123,9 @@ export default class ModuleMap {\n \n   static fromJSON(serializableModuleMap: SerializableModuleMap) {\n     return new ModuleMap({\n-      duplicates: new Map(serializableModuleMap.duplicates),\n+      duplicates: ModuleMap.mapFromArrayRecursive(\n+        serializableModuleMap.duplicates,\n+      ) as RawModuleMap['duplicates'],\n       map: new Map(serializableModuleMap.map),\n       mocks: new Map(serializableModuleMap.mocks),\n       rootDir: serializableModuleMap.rootDir,"},{"sha":"99f1425a0c05dd65238d6cd5aa06e6a05ddf0e7b","filename":"packages/jest-runner/src/__tests__/testRunner.test.js","status":"modified","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -65,43 +65,6 @@ test('injects the serializable module map into each worker in watch mode', () =>\n     });\n });\n \n-test('does not inject the serializable module map in serial mode', () => {\n-  const globalConfig = {maxWorkers: 1, watch: false};\n-  const config = {rootDir: '/path/'};\n-  const context = {config};\n-  const runContext = {};\n-\n-  return new TestRunner(globalConfig, runContext)\n-    .runTests(\n-      [{context, path: './file.test.js'}, {context, path: './file2.test.js'}],\n-      new TestWatcher({isWatchMode: globalConfig.watch}),\n-      () => {},\n-      () => {},\n-      () => {},\n-      {serial: false},\n-    )\n-    .then(() => {\n-      expect(mockWorkerFarm.worker.mock.calls).toEqual([\n-        [\n-          {\n-            config,\n-            context: runContext,\n-            globalConfig,\n-            path: './file.test.js',\n-          },\n-        ],\n-        [\n-          {\n-            config,\n-            context: runContext,\n-            globalConfig,\n-            path: './file2.test.js',\n-          },\n-        ],\n-      ]);\n-    });\n-});\n-\n test('assign process.env.JEST_WORKER_ID = 1 when in runInBand mode', () => {\n   const globalConfig = {maxWorkers: 1, watch: false};\n   const config = {rootDir: '/path/'};"},{"sha":"7cfdbc1fc7c7dd9fc1290cd0eda0008c37171d5c","filename":"packages/jest-runner/src/index.ts","status":"modified","additions":12,"deletions":17,"changes":29,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2Findex.ts?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -103,16 +103,13 @@ class TestRunner {\n     onResult: OnTestSuccess,\n     onFailure: OnTestFailure,\n   ) {\n-    let resolvers: Map<string, SerializableResolver> | undefined = undefined;\n-    if (watcher.isWatchMode()) {\n-      resolvers = new Map();\n-      for (const test of tests) {\n-        if (!resolvers.has(test.context.config.name)) {\n-          resolvers.set(test.context.config.name, {\n-            config: test.context.config,\n-            serializableModuleMap: test.context.moduleMap.toJSON(),\n-          });\n-        }\n+    const resolvers: Map<string, SerializableResolver> = new Map();\n+    for (const test of tests) {\n+      if (!resolvers.has(test.context.config.name)) {\n+        resolvers.set(test.context.config.name, {\n+          config: test.context.config,\n+          serializableModuleMap: test.context.moduleMap.toJSON(),\n+        });\n       }\n     }\n \n@@ -121,13 +118,11 @@ class TestRunner {\n       forkOptions: {stdio: 'pipe'},\n       maxRetries: 3,\n       numWorkers: this._globalConfig.maxWorkers,\n-      setupArgs: resolvers\n-        ? [\n-            {\n-              serializableResolvers: Array.from(resolvers.values()),\n-            },\n-          ]\n-        : undefined,\n+      setupArgs: [\n+        {\n+          serializableResolvers: Array.from(resolvers.values()),\n+        },\n+      ],\n     }) as WorkerInterface;\n \n     if (worker.getStdout()) worker.getStdout().pipe(process.stdout);"},{"sha":"a815feb652a38f48b9045af57637a3959b6a8501","filename":"packages/jest-runner/src/testWorker.ts","status":"modified","additions":14,"deletions":24,"changes":38,"blob_url":"https://github.com/facebook/jest/blob/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts","raw_url":"https://github.com/facebook/jest/raw/262eaf56e9b327a4821a4ead3ab6e152e377c59f/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts?ref=262eaf56e9b327a4821a4ead3ab6e152e377c59f","patch":"@@ -8,7 +8,7 @@\n \n import {Config} from '@jest/types';\n import {SerializableError, TestResult} from '@jest/test-result';\n-import HasteMap, {ModuleMap, SerializableModuleMap} from 'jest-haste-map';\n+import HasteMap, {SerializableModuleMap} from 'jest-haste-map';\n import exit from 'exit';\n import {separateMessageFromStack} from 'jest-message-util';\n import Runtime from 'jest-runtime';\n@@ -53,34 +53,24 @@ const formatError = (error: string | ErrorWithCode): SerializableError => {\n };\n \n const resolvers = new Map<string, Resolver>();\n-const getResolver = (config: Config.ProjectConfig, moduleMap?: ModuleMap) => {\n-  const name = config.name;\n-  if (moduleMap || !resolvers.has(name)) {\n-    resolvers.set(\n-      name,\n-      Runtime.createResolver(\n-        config,\n-        moduleMap || Runtime.createHasteMap(config).readModuleMap(),\n-      ),\n-    );\n+const getResolver = (config: Config.ProjectConfig) => {\n+  const resolver = resolvers.get(config.name);\n+  if (!resolver) {\n+    throw new Error('Cannot find resolver for: ' + config.name);\n   }\n-  return resolvers.get(name)!;\n+  return resolver;\n };\n \n-export function setup(setupData?: {\n+export function setup(setupData: {\n   serializableResolvers: Array<SerializableResolver>;\n }) {\n-  // Setup data is only used in watch mode to pass the latest version of all\n-  // module maps that will be used during the test runs. Otherwise, module maps\n-  // are loaded from disk as needed.\n-  if (setupData) {\n-    for (const {\n-      config,\n-      serializableModuleMap,\n-    } of setupData.serializableResolvers) {\n-      const moduleMap = HasteMap.ModuleMap.fromJSON(serializableModuleMap);\n-      getResolver(config, moduleMap);\n-    }\n+  // Module maps that will be needed for the test runs are passed.\n+  for (const {\n+    config,\n+    serializableModuleMap,\n+  } of setupData.serializableResolvers) {\n+    const moduleMap = HasteMap.ModuleMap.fromJSON(serializableModuleMap);\n+    resolvers.set(config.name, Runtime.createResolver(config, moduleMap));\n   }\n }\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8171","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8171/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8171/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8171/events","html_url":"https://github.com/facebook/jest/pull/8171","id":423138845,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYyNzc1MjM0","number":8171,"title":"Optimize haste map data structure for serialization/deserialization.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2019-03-20T09:06:11Z","updated_at":"2021-05-11T21:07:02Z","closed_at":"2019-03-20T23:02:32Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8171","html_url":"https://github.com/facebook/jest/pull/8171","diff_url":"https://github.com/facebook/jest/pull/8171.diff","patch_url":"https://github.com/facebook/jest/pull/8171.patch","merged_at":"2019-03-20T23:02:32Z"},"body":"## Summary\r\n\r\nThis simple PR is the result of a ridiculous number of attempts to specifically optimize the serialization and deserialization of the haste map followed by a simple realization: creating arrays is expensive. :)\r\n\r\nCurrently, we store each file's dependencies as an expensive array. However, we don't typically access many file dependencies, so it's not time well-spent.\r\n\r\nI've modified the data structure to store the file dependencies as a much cheaper string (tab separated) that is deserialized to an array on-demand. No change to the public interface, but now we're not doing any unnecessary work.\r\n\r\nI profiled both the full Jest run time and the read/persist time to ensure I had a clear view into the characteristics of this change. It's somewhere in the neighborhood of a 10%~ startup time improvement at FB, which is significant.\r\n\r\nBenchmarking against a generated benchmark hash map of 300,000 files:\r\n\r\nbefore--\r\nread: 2,291ms\r\npersist: 2,413ms\r\ntotal: 4,704ms\r\n\r\nafter--\r\nread: 1,852ms\r\npersist: 1,539ms\r\ntotal: 3,391ms\r\n\r\ndelta: 1,313ms\r\n\r\n## Test plan\r\n\r\n- Updated tests\r\n- All tests pass\r\n- Manually benchmarked\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8171/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8171/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"f5034aa7c6dc6bf68a71a4bc32287fbbcff6a308","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -27,6 +27,7 @@\n \n ### Performance\n \n+- `[jest-haste-map]` Optimize haste map data structure for serialization/deserialization ([#8171](https://github.com/facebook/jest/pull/8171))\n - `[jest-haste-map]` Avoid persisting haste map or processing files when not changed ([#8153](https://github.com/facebook/jest/pull/8153))\n \n ## 24.5.0"},{"sha":"0007da2d6ae9751657ebeeed5c13ae755b3d7c09","filename":"packages/jest-haste-map/src/HasteFS.ts","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2FHasteFS.ts","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2FHasteFS.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2FHasteFS.ts?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -33,7 +33,14 @@ export default class HasteFS {\n \n   getDependencies(file: Config.Path): Array<string> | null {\n     const fileMetadata = this._getFileData(file);\n-    return (fileMetadata && fileMetadata[H.DEPENDENCIES]) || null;\n+\n+    if (fileMetadata) {\n+      return fileMetadata[H.DEPENDENCIES]\n+        ? fileMetadata[H.DEPENDENCIES].split(H.DEPENDENCY_DELIM)\n+        : [];\n+    } else {\n+      return null;\n+    }\n   }\n \n   getSha1(file: Config.Path): string | null {"},{"sha":"a24f9c3bddbf4c095907e3221a2c3c6ebf1cc56d","filename":"packages/jest-haste-map/src/__tests__/index.test.js","status":"modified","additions":25,"deletions":39,"changes":64,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -340,28 +340,28 @@ describe('HasteMap', () => {\n \n       expect(data.files).toEqual(\n         createMap({\n-          'fruits/Banana.js': ['Banana', 32, 42, 1, ['Strawberry'], null],\n-          'fruits/Pear.js': ['Pear', 32, 42, 1, ['Banana', 'Strawberry'], null],\n-          'fruits/Strawberry.js': ['Strawberry', 32, 42, 1, [], null],\n-          'fruits/__mocks__/Pear.js': ['', 32, 42, 1, ['Melon'], null],\n+          'fruits/Banana.js': ['Banana', 32, 42, 1, 'Strawberry', null],\n+          'fruits/Pear.js': ['Pear', 32, 42, 1, 'Banana\\0Strawberry', null],\n+          'fruits/Strawberry.js': ['Strawberry', 32, 42, 1, '', null],\n+          'fruits/__mocks__/Pear.js': ['', 32, 42, 1, 'Melon', null],\n           // node modules\n           'fruits/node_modules/fbjs/lib/flatMap.js': [\n             'flatMap',\n             32,\n             42,\n             1,\n-            [],\n+            '',\n             null,\n           ],\n           'fruits/node_modules/react/React.js': [\n             'React',\n             32,\n             42,\n             1,\n-            ['Component'],\n+            'Component',\n             null,\n           ],\n-          'vegetables/Melon.js': ['Melon', 32, 42, 1, [], null],\n+          'vegetables/Melon.js': ['Melon', 32, 42, 1, '', null],\n         }),\n       );\n \n@@ -410,18 +410,11 @@ describe('HasteMap', () => {\n \n           // The node crawler returns \"null\" for the SHA-1.\n           data.files = createMap({\n-            'fruits/Banana.js': ['Banana', 32, 42, 0, ['Strawberry'], null],\n-            'fruits/Pear.js': [\n-              'Pear',\n-              32,\n-              42,\n-              0,\n-              ['Banana', 'Strawberry'],\n-              null,\n-            ],\n-            'fruits/Strawberry.js': ['Strawberry', 32, 42, 0, [], null],\n-            'fruits/__mocks__/Pear.js': ['', 32, 42, 0, ['Melon'], null],\n-            'vegetables/Melon.js': ['Melon', 32, 42, 0, [], null],\n+            'fruits/Banana.js': ['Banana', 32, 42, 0, 'Strawberry', null],\n+            'fruits/Pear.js': ['Pear', 32, 42, 0, 'Banana\\0Strawberry', null],\n+            'fruits/Strawberry.js': ['Strawberry', 32, 42, 0, '', null],\n+            'fruits/__mocks__/Pear.js': ['', 32, 42, 0, 'Melon', null],\n+            'vegetables/Melon.js': ['Melon', 32, 42, 0, '', null],\n           });\n \n           return Promise.resolve({\n@@ -446,39 +439,39 @@ describe('HasteMap', () => {\n               32,\n               42,\n               1,\n-              ['Strawberry'],\n+              'Strawberry',\n               '7772b628e422e8cf59c526be4bb9f44c0898e3d1',\n             ],\n             'fruits/Pear.js': [\n               'Pear',\n               32,\n               42,\n               1,\n-              ['Banana', 'Strawberry'],\n+              'Banana\\0Strawberry',\n               '89d0c2cc11dcc5e1df50b8af04ab1b597acfba2f',\n             ],\n             'fruits/Strawberry.js': [\n               'Strawberry',\n               32,\n               42,\n               1,\n-              [],\n+              '',\n               'e8aa38e232b3795f062f1d777731d9240c0f8c25',\n             ],\n             'fruits/__mocks__/Pear.js': [\n               '',\n               32,\n               42,\n               1,\n-              ['Melon'],\n+              'Melon',\n               '8d40afbb6e2dc78e1ba383b6d02cafad35cceef2',\n             ],\n             'vegetables/Melon.js': [\n               'Melon',\n               32,\n               42,\n               1,\n-              [],\n+              '',\n               'f16ccf6f2334ceff2ddb47628a2c5f2d748198ca',\n             ],\n           }),\n@@ -626,18 +619,18 @@ describe('HasteMap', () => {\n               32,\n               42,\n               1,\n-              ['Blackberry'],\n+              'Blackberry',\n               null,\n             ],\n             'fruits/Strawberry.ios.js': [\n               'Strawberry',\n               32,\n               42,\n               1,\n-              ['Raspberry'],\n+              'Raspberry',\n               null,\n             ],\n-            'fruits/Strawberry.js': ['Strawberry', 32, 42, 1, ['Banana'], null],\n+            'fruits/Strawberry.js': ['Strawberry', 32, 42, 1, 'Banana', null],\n           }),\n         );\n \n@@ -724,14 +717,7 @@ describe('HasteMap', () => {\n             expect(useBuitinsInContext(data.clocks)).toEqual(mockClocks);\n \n             const files = new Map(initialData.files);\n-            files.set('fruits/Banana.js', [\n-              'Banana',\n-              32,\n-              42,\n-              1,\n-              ['Kiwi'],\n-              null,\n-            ]);\n+            files.set('fruits/Banana.js', ['Banana', 32, 42, 1, 'Kiwi', null]);\n \n             expect(useBuitinsInContext(data.files)).toEqual(files);\n \n@@ -1086,7 +1072,7 @@ describe('HasteMap', () => {\n     node.mockImplementation(options => {\n       const {data} = options;\n       data.files = createMap({\n-        'fruits/Banana.js': ['', 32, 42, 0, [], null],\n+        'fruits/Banana.js': ['', 32, 42, 0, '', null],\n       });\n       return Promise.resolve({\n         hasteMap: data,\n@@ -1102,7 +1088,7 @@ describe('HasteMap', () => {\n \n         expect(data.files).toEqual(\n           createMap({\n-            'fruits/Banana.js': ['Banana', 32, 42, 1, ['Strawberry'], null],\n+            'fruits/Banana.js': ['Banana', 32, 42, 1, 'Strawberry', null],\n           }),\n         );\n \n@@ -1120,7 +1106,7 @@ describe('HasteMap', () => {\n     node.mockImplementation(options => {\n       const {data} = options;\n       data.files = createMap({\n-        'fruits/Banana.js': ['', 32, 42, 0, [], null],\n+        'fruits/Banana.js': ['', 32, 42, 0, '', null],\n       });\n       return Promise.resolve({\n         hasteMap: data,\n@@ -1136,7 +1122,7 @@ describe('HasteMap', () => {\n \n         expect(data.files).toEqual(\n           createMap({\n-            'fruits/Banana.js': ['Banana', 32, 42, 1, ['Strawberry'], null],\n+            'fruits/Banana.js': ['Banana', 32, 42, 1, 'Strawberry', null],\n           }),\n         );\n       });"},{"sha":"ae949fe3cfd23d6682a4d0abd28ed898fb843011","filename":"packages/jest-haste-map/src/constants.ts","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fconstants.ts","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fconstants.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fconstants.ts?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -18,6 +18,9 @@\n import {HType} from './types';\n \n const constants: HType = {\n+  /* dependency serialization */\n+  DEPENDENCY_DELIM: '\\0',\n+\n   /* file map attributes */\n   ID: 0,\n   MTIME: 1,"},{"sha":"69d3c3d6ca7344d9b342c99c92596a427ba975be","filename":"packages/jest-haste-map/src/crawlers/__tests__/node.test.js","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -133,9 +133,9 @@ describe('node crawler', () => {\n \n       expect(hasteMap.files).toEqual(\n         createMap({\n-          'fruits/strawberry.js': ['', 32, 42, 0, [], null],\n-          'fruits/tomato.js': ['', 33, 42, 0, [], null],\n-          'vegetables/melon.json': ['', 34, 42, 0, [], null],\n+          'fruits/strawberry.js': ['', 32, 42, 0, '', null],\n+          'fruits/tomato.js': ['', 33, 42, 0, '', null],\n+          'vegetables/melon.json': ['', 34, 42, 0, '', null],\n         }),\n       );\n \n@@ -151,9 +151,9 @@ describe('node crawler', () => {\n     nodeCrawl = require('../node');\n \n     // In this test sample, strawberry is changed and tomato is unchanged\n-    const tomato = ['', 33, 42, 1, [], null];\n+    const tomato = ['', 33, 42, 1, '', null];\n     const files = createMap({\n-      'fruits/strawberry.js': ['', 30, 40, 1, [], null],\n+      'fruits/strawberry.js': ['', 30, 40, 1, '', null],\n       'fruits/tomato.js': tomato,\n     });\n \n@@ -166,7 +166,7 @@ describe('node crawler', () => {\n     }).then(({hasteMap, removedFiles}) => {\n       expect(hasteMap.files).toEqual(\n         createMap({\n-          'fruits/strawberry.js': ['', 32, 42, 0, [], null],\n+          'fruits/strawberry.js': ['', 32, 42, 0, '', null],\n           'fruits/tomato.js': tomato,\n         }),\n       );\n@@ -186,9 +186,9 @@ describe('node crawler', () => {\n     // In this test sample, previouslyExisted was present before and will not be\n     // when crawling this directory.\n     const files = createMap({\n-      'fruits/previouslyExisted.js': ['', 30, 40, 1, [], null],\n-      'fruits/strawberry.js': ['', 33, 42, 0, [], null],\n-      'fruits/tomato.js': ['', 32, 42, 0, [], null],\n+      'fruits/previouslyExisted.js': ['', 30, 40, 1, '', null],\n+      'fruits/strawberry.js': ['', 33, 42, 0, '', null],\n+      'fruits/tomato.js': ['', 32, 42, 0, '', null],\n     });\n \n     return nodeCrawl({\n@@ -200,13 +200,13 @@ describe('node crawler', () => {\n     }).then(({hasteMap, removedFiles}) => {\n       expect(hasteMap.files).toEqual(\n         createMap({\n-          'fruits/strawberry.js': ['', 32, 42, 0, [], null],\n-          'fruits/tomato.js': ['', 33, 42, 0, [], null],\n+          'fruits/strawberry.js': ['', 32, 42, 0, '', null],\n+          'fruits/tomato.js': ['', 33, 42, 0, '', null],\n         }),\n       );\n       expect(removedFiles).toEqual(\n         createMap({\n-          'fruits/previouslyExisted.js': ['', 30, 40, 1, [], null],\n+          'fruits/previouslyExisted.js': ['', 30, 40, 1, '', null],\n         }),\n       );\n     });\n@@ -228,8 +228,8 @@ describe('node crawler', () => {\n     }).then(({hasteMap, removedFiles}) => {\n       expect(hasteMap.files).toEqual(\n         createMap({\n-          'fruits/directory/strawberry.js': ['', 33, 42, 0, [], null],\n-          'fruits/tomato.js': ['', 32, 42, 0, [], null],\n+          'fruits/directory/strawberry.js': ['', 33, 42, 0, '', null],\n+          'fruits/tomato.js': ['', 32, 42, 0, '', null],\n         }),\n       );\n       expect(removedFiles).toEqual(new Map());\n@@ -252,8 +252,8 @@ describe('node crawler', () => {\n     }).then(({hasteMap, removedFiles}) => {\n       expect(hasteMap.files).toEqual(\n         createMap({\n-          'fruits/directory/strawberry.js': ['', 33, 42, 0, [], null],\n-          'fruits/tomato.js': ['', 32, 42, 0, [], null],\n+          'fruits/directory/strawberry.js': ['', 33, 42, 0, '', null],\n+          'fruits/tomato.js': ['', 32, 42, 0, '', null],\n         }),\n       );\n       expect(removedFiles).toEqual(new Map());"},{"sha":"f72dc3fc5acbeb3f817d39aa487b100f7b293872","filename":"packages/jest-haste-map/src/crawlers/__tests__/watchman.test.js","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -108,9 +108,9 @@ describe('watchman watch', () => {\n     };\n \n     mockFiles = createMap({\n-      [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n-      [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n-      [TOMATO_RELATIVE]: ['', 31, 41, 0, [], null],\n+      [MELON_RELATIVE]: ['', 33, 43, 0, '', null],\n+      [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, '', null],\n+      [TOMATO_RELATIVE]: ['', 31, 41, 0, '', null],\n     });\n   });\n \n@@ -216,8 +216,8 @@ describe('watchman watch', () => {\n       expect(changedFiles).toEqual(undefined);\n       expect(hasteMap.files).toEqual(\n         createMap({\n-          [path.join(DURIAN_RELATIVE, 'foo.1.js')]: ['', 33, 43, 0, [], null],\n-          [path.join(DURIAN_RELATIVE, 'foo.2.js')]: ['', 33, 43, 0, [], null],\n+          [path.join(DURIAN_RELATIVE, 'foo.1.js')]: ['', 33, 43, 0, '', null],\n+          [path.join(DURIAN_RELATIVE, 'foo.2.js')]: ['', 33, 43, 0, '', null],\n         }),\n       );\n       expect(removedFiles).toEqual(new Map());\n@@ -280,21 +280,21 @@ describe('watchman watch', () => {\n \n       expect(changedFiles).toEqual(\n         createMap({\n-          [KIWI_RELATIVE]: ['', 42, 40, 0, [], null],\n+          [KIWI_RELATIVE]: ['', 42, 40, 0, '', null],\n         }),\n       );\n \n       expect(hasteMap.files).toEqual(\n         createMap({\n-          [KIWI_RELATIVE]: ['', 42, 40, 0, [], null],\n-          [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n-          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n+          [KIWI_RELATIVE]: ['', 42, 40, 0, '', null],\n+          [MELON_RELATIVE]: ['', 33, 43, 0, '', null],\n+          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, '', null],\n         }),\n       );\n \n       expect(removedFiles).toEqual(\n         createMap({\n-          [TOMATO_RELATIVE]: ['', 31, 41, 0, [], null],\n+          [TOMATO_RELATIVE]: ['', 31, 41, 0, '', null],\n         }),\n       );\n     });\n@@ -374,7 +374,7 @@ describe('watchman watch', () => {\n       expect(hasteMap.files).toEqual(\n         createMap({\n           [BANANA_RELATIVE]: mockBananaMetadata,\n-          [KIWI_RELATIVE]: ['', 42, 52, 0, [], null],\n+          [KIWI_RELATIVE]: ['', 42, 52, 0, '', null],\n           [TOMATO_RELATIVE]: ['Tomato', 76, 41, 1, [], mockTomatoSha1],\n         }),\n       );\n@@ -388,8 +388,8 @@ describe('watchman watch', () => {\n \n       expect(removedFiles).toEqual(\n         createMap({\n-          [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n-          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n+          [MELON_RELATIVE]: ['', 33, 43, 0, '', null],\n+          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, '', null],\n         }),\n       );\n     });\n@@ -466,15 +466,15 @@ describe('watchman watch', () => {\n \n       expect(hasteMap.files).toEqual(\n         createMap({\n-          [KIWI_RELATIVE]: ['', 42, 52, 0, [], null],\n-          [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n+          [KIWI_RELATIVE]: ['', 42, 52, 0, '', null],\n+          [MELON_RELATIVE]: ['', 33, 43, 0, '', null],\n         }),\n       );\n \n       expect(removedFiles).toEqual(\n         createMap({\n-          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n-          [TOMATO_RELATIVE]: ['', 31, 41, 0, [], null],\n+          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, '', null],\n+          [TOMATO_RELATIVE]: ['', 31, 41, 0, '', null],\n         }),\n       );\n     });"},{"sha":"71ee6c053a3bbbdeea9af9257ac13faa8c365d28","filename":"packages/jest-haste-map/src/crawlers/node.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -164,7 +164,7 @@ export = function nodeCrawl(\n           files.set(relativeFilePath, existingFile);\n         } else {\n           // See ../constants.js; SHA-1 will always be null and fulfilled later.\n-          files.set(relativeFilePath, ['', mtime, size, 0, [], null]);\n+          files.set(relativeFilePath, ['', mtime, size, 0, '', null]);\n         }\n         removedFiles.delete(relativeFilePath);\n       });"},{"sha":"5e60ed59a7e44d7bdf91459f0fd5cb7199905ae8","filename":"packages/jest-haste-map/src/crawlers/watchman.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -232,7 +232,7 @@ export = async function watchmanCrawl(\n           ];\n         } else {\n           // See ../constants.ts\n-          nextData = ['', mtime, size, 0, [], sha1hex];\n+          nextData = ['', mtime, size, 0, '', sha1hex];\n         }\n \n         const mappings = options.mapper ? options.mapper(filePath) : null;"},{"sha":"4893470516ea0c93bcd39f0eabd8465b54411760","filename":"packages/jest-haste-map/src/index.ts","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.ts?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -522,7 +522,9 @@ class HasteMap extends EventEmitter {\n         setModule(metadataId, metadataModule);\n       }\n \n-      fileMetadata[H.DEPENDENCIES] = metadata.dependencies || [];\n+      fileMetadata[H.DEPENDENCIES] = metadata.dependencies\n+        ? metadata.dependencies.join(H.DEPENDENCY_DELIM)\n+        : '';\n \n       if (computeSha1) {\n         fileMetadata[H.SHA1] = metadata.sha1;\n@@ -940,7 +942,7 @@ class HasteMap extends EventEmitter {\n               stat ? stat.mtime.getTime() : -1,\n               stat ? stat.size : 0,\n               0,\n-              [],\n+              '',\n               null,\n             ];\n             hasteMap.files.set(relativeFilePath, fileMetadata);"},{"sha":"291d5473ba98001372b8ce5a5c16951e3ab62896","filename":"packages/jest-haste-map/src/types.ts","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/facebook/jest/blob/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Ftypes.ts","raw_url":"https://github.com/facebook/jest/raw/c0de52eacc55a3566a24667f21c2818010bcbf45/packages%2Fjest-haste-map%2Fsrc%2Ftypes.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Ftypes.ts?ref=c0de52eacc55a3566a24667f21c2818010bcbf45","patch":"@@ -51,7 +51,7 @@ export type FileMetaData = [\n   /* mtime */ number,\n   /* size */ number,\n   /* visited */ 0 | 1,\n-  /* dependencies */ Array<string>,\n+  /* dependencies */ string,\n   /* sha1 */ string | null | undefined\n ];\n \n@@ -100,6 +100,7 @@ export type HType = {\n   PACKAGE: 1;\n   GENERIC_PLATFORM: 'g';\n   NATIVE_PLATFORM: 'native';\n+  DEPENDENCY_DELIM: '\\0';\n };\n \n export type HTypeValue = HType[keyof HType];"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8232","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8232/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8232/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8232/events","html_url":"https://github.com/facebook/jest/pull/8232","id":426754435,"node_id":"MDExOlB1bGxSZXF1ZXN0MjY1NTQwOTQ4","number":8232,"title":"Performance: use Map for jest-runtime module registry.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-03-28T23:50:20Z","updated_at":"2021-05-11T20:07:04Z","closed_at":"2019-03-29T15:44:10Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8232","html_url":"https://github.com/facebook/jest/pull/8232","diff_url":"https://github.com/facebook/jest/pull/8232.diff","patch_url":"https://github.com/facebook/jest/pull/8232.patch","merged_at":"2019-03-29T15:44:10Z"},"body":"## Summary\r\n\r\nQuick benchmark of getting `Map` vs `Object` for string keys of various lengths on Node v11:\r\n```\r\n  get object key x   278 ops/sec ±2.28% (85 runs sampled)\r\n  get map key    x 1,716 ops/sec ±1.35% (93 runs sampled)\r\n```\r\n\r\n## Test plan\r\n\r\n- All tests pass.\r\n- Tested against FB's test suite.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8232/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8232/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"6740ed4a563dbef2b96c5e425786ad9f94e3056c","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/a46eb83c32cd49187deac04ff6ff124390f4e450/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/a46eb83c32cd49187deac04ff6ff124390f4e450/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=a46eb83c32cd49187deac04ff6ff124390f4e450","patch":"@@ -46,6 +46,7 @@\n - `[jest-core]` Improve performance of SearchSource.findMatchingTests by 15% ([#8184](https://github.com/facebook/jest/pull/8184))\n - `[jest-resolve]` Optimize internal cache lookup performance ([#8183](https://github.com/facebook/jest/pull/8183))\n - `[jest-core]` Dramatically improve watch mode performance ([#8201](https://github.com/facebook/jest/pull/8201))\n+- `[jest-runtime]` Use `Map` instead of `Object` for module registry ([#8232](https://github.com/facebook/jest/pull/8232))\n \n ## 24.5.0\n "},{"sha":"cd3b13be7026d872108c3f47472c048e10afd300","filename":"packages/jest-runtime/src/__tests__/runtime_require_module.test.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/a46eb83c32cd49187deac04ff6ff124390f4e450/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Fruntime_require_module.test.js","raw_url":"https://github.com/facebook/jest/raw/a46eb83c32cd49187deac04ff6ff124390f4e450/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Fruntime_require_module.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2F__tests__%2Fruntime_require_module.test.js?ref=a46eb83c32cd49187deac04ff6ff124390f4e450","patch":"@@ -132,7 +132,7 @@ describe('Runtime requireModule', () => {\n   });\n   it('provides `require.main` to modules', () =>\n     createRuntime(__filename).then(runtime => {\n-      runtime._moduleRegistry[__filename] = module;\n+      runtime._moduleRegistry.set(__filename, module);\n       [\n         './test_root/modules_with_main/export_main.js',\n         './test_root/modules_with_main/re_export_main.js',"},{"sha":"86e7115f9860da50f95978b5c4b1573d30e0e603","filename":"packages/jest-runtime/src/index.ts","status":"modified","additions":57,"deletions":45,"changes":102,"blob_url":"https://github.com/facebook/jest/blob/a46eb83c32cd49187deac04ff6ff124390f4e450/packages%2Fjest-runtime%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/a46eb83c32cd49187deac04ff6ff124390f4e450/packages%2Fjest-runtime%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Findex.ts?ref=a46eb83c32cd49187deac04ff6ff124390f4e450","patch":"@@ -47,7 +47,7 @@ type InternalModuleOptions = {\n \n type InitialModule = Partial<Module> &\n   Pick<Module, 'children' | 'exports' | 'filename' | 'id' | 'loaded'>;\n-type ModuleRegistry = {[key: string]: InitialModule | Module};\n+type ModuleRegistry = Map<string, InitialModule | Module>;\n type ResolveOptions = Parameters<typeof require.resolve>[1];\n \n type BooleanObject = {[key: string]: boolean};\n@@ -93,8 +93,8 @@ class Runtime {\n   private _mockMetaDataCache: {\n     [key: string]: MockFunctionMetadata<unknown, Array<unknown>>;\n   };\n-  private _mockRegistry: {[key: string]: any};\n-  private _isolatedMockRegistry: {[key: string]: any} | null;\n+  private _mockRegistry: Map<string, any>;\n+  private _isolatedMockRegistry: Map<string, any> | null;\n   private _moduleMocker: typeof jestMock;\n   private _isolatedModuleRegistry: ModuleRegistry | null;\n   private _moduleRegistry: ModuleRegistry;\n@@ -127,15 +127,15 @@ class Runtime {\n     this._currentlyExecutingModulePath = '';\n     this._environment = environment;\n     this._explicitShouldMock = Object.create(null);\n-    this._internalModuleRegistry = Object.create(null);\n+    this._internalModuleRegistry = new Map();\n     this._isCurrentlyExecutingManualMock = null;\n     this._mockFactories = Object.create(null);\n-    this._mockRegistry = Object.create(null);\n+    this._mockRegistry = new Map();\n     // during setup, this cannot be null (and it's fine to explode if it is)\n     this._moduleMocker = this._environment.moduleMocker!;\n     this._isolatedModuleRegistry = null;\n     this._isolatedMockRegistry = null;\n-    this._moduleRegistry = Object.create(null);\n+    this._moduleRegistry = new Map();\n     this._needsCoverageMapped = new Set();\n     this._resolver = resolver;\n     this._scriptTransformer = new ScriptTransformer(config);\n@@ -291,7 +291,7 @@ class Runtime {\n       from,\n       moduleName,\n     );\n-    let modulePath;\n+    let modulePath: string | undefined;\n \n     // Some old tests rely on this mocking behavior. Ideally we'll change this\n     // to be more explicit.\n@@ -320,7 +320,10 @@ class Runtime {\n     let moduleRegistry;\n \n     if (!options || !options.isInternalModule) {\n-      if (this._moduleRegistry[modulePath] || !this._isolatedModuleRegistry) {\n+      if (\n+        this._moduleRegistry.get(modulePath) ||\n+        !this._isolatedModuleRegistry\n+      ) {\n         moduleRegistry = this._moduleRegistry;\n       } else {\n         moduleRegistry = this._isolatedModuleRegistry;\n@@ -329,29 +332,33 @@ class Runtime {\n       moduleRegistry = this._internalModuleRegistry;\n     }\n \n-    if (!moduleRegistry[modulePath]) {\n-      // We must register the pre-allocated module object first so that any\n-      // circular dependencies that may arise while evaluating the module can\n-      // be satisfied.\n-      const localModule: InitialModule = {\n-        children: [],\n-        exports: {},\n-        filename: modulePath,\n-        id: modulePath,\n-        loaded: false,\n-      };\n-      moduleRegistry[modulePath] = localModule;\n-\n-      this._loadModule(\n-        localModule,\n-        from,\n-        moduleName,\n-        modulePath,\n-        options,\n-        moduleRegistry,\n-      );\n+    const module = moduleRegistry.get(modulePath);\n+    if (module) {\n+      return module.exports;\n     }\n-    return moduleRegistry[modulePath].exports;\n+\n+    // We must register the pre-allocated module object first so that any\n+    // circular dependencies that may arise while evaluating the module can\n+    // be satisfied.\n+    const localModule: InitialModule = {\n+      children: [],\n+      exports: {},\n+      filename: modulePath,\n+      id: modulePath,\n+      loaded: false,\n+    };\n+    moduleRegistry.set(modulePath, localModule);\n+\n+    this._loadModule(\n+      localModule,\n+      from,\n+      moduleName,\n+      modulePath,\n+      options,\n+      moduleRegistry,\n+    );\n+\n+    return localModule.exports;\n   }\n \n   requireInternalModule(from: Config.Path, to?: string) {\n@@ -369,16 +376,21 @@ class Runtime {\n       moduleName,\n     );\n \n-    if (this._isolatedMockRegistry && this._isolatedMockRegistry[moduleID]) {\n-      return this._isolatedMockRegistry[moduleID];\n-    } else if (this._mockRegistry[moduleID]) {\n-      return this._mockRegistry[moduleID];\n+    if (\n+      this._isolatedMockRegistry &&\n+      this._isolatedMockRegistry.get(moduleID)\n+    ) {\n+      return this._isolatedMockRegistry.get(moduleID);\n+    } else if (this._mockRegistry.get(moduleID)) {\n+      return this._mockRegistry.get(moduleID);\n     }\n \n     const mockRegistry = this._isolatedMockRegistry || this._mockRegistry;\n \n     if (moduleID in this._mockFactories) {\n-      return (mockRegistry[moduleID] = this._mockFactories[moduleID]());\n+      const module = this._mockFactories[moduleID]();\n+      mockRegistry.set(moduleID, module);\n+      return module;\n     }\n \n     const manualMockOrStub = this._resolver.getMockModule(from, moduleName);\n@@ -435,13 +447,13 @@ class Runtime {\n         mockRegistry,\n       );\n \n-      mockRegistry[moduleID] = localModule.exports;\n+      mockRegistry.set(moduleID, localModule.exports);\n     } else {\n       // Look for a real module to generate an automock from\n-      mockRegistry[moduleID] = this._generateMock(from, moduleName);\n+      mockRegistry.set(moduleID, this._generateMock(from, moduleName));\n     }\n \n-    return mockRegistry[moduleID];\n+    return mockRegistry.get(moduleID);\n   }\n \n   private _loadModule(\n@@ -495,8 +507,8 @@ class Runtime {\n         'isolateModules cannot be nested inside another isolateModules.',\n       );\n     }\n-    this._isolatedModuleRegistry = Object.create(null);\n-    this._isolatedMockRegistry = Object.create(null);\n+    this._isolatedModuleRegistry = new Map();\n+    this._isolatedMockRegistry = new Map();\n     fn();\n     this._isolatedModuleRegistry = null;\n     this._isolatedMockRegistry = null;\n@@ -505,8 +517,8 @@ class Runtime {\n   resetModules() {\n     this._isolatedModuleRegistry = null;\n     this._isolatedMockRegistry = null;\n-    this._mockRegistry = Object.create(null);\n-    this._moduleRegistry = Object.create(null);\n+    this._mockRegistry = new Map();\n+    this._moduleRegistry = new Map();\n \n     if (this._environment) {\n       if (this._environment.global) {\n@@ -678,7 +690,7 @@ class Runtime {\n       enumerable: true,\n       get() {\n         const key = from || '';\n-        return moduleRegistry[key] || null;\n+        return moduleRegistry.get(key) || null;\n       },\n     });\n \n@@ -770,8 +782,8 @@ class Runtime {\n       // mocked has calls into side-effectful APIs on another module.\n       const origMockRegistry = this._mockRegistry;\n       const origModuleRegistry = this._moduleRegistry;\n-      this._mockRegistry = Object.create(null);\n-      this._moduleRegistry = Object.create(null);\n+      this._mockRegistry = new Map();\n+      this._moduleRegistry = new Map();\n \n       const moduleExports = this.requireModule(from, moduleName);\n "}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8183","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8183/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8183/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8183/events","html_url":"https://github.com/facebook/jest/pull/8183","id":423577753,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYzMTIwNDg2","number":8183,"title":"jest-resolve 18% performance optimization","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-03-21T05:30:48Z","updated_at":"2021-05-11T21:07:15Z","closed_at":"2019-03-21T16:13:48Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8183","html_url":"https://github.com/facebook/jest/pull/8183","diff_url":"https://github.com/facebook/jest/pull/8183.diff","patch_url":"https://github.com/facebook/jest/pull/8183.patch","merged_at":"2019-03-21T16:13:48Z"},"body":"## Summary\r\n\r\n`jest-resolve` is called heavily by `jest-resolve-dependencies` when finding related tests. Benchmarking the simple change from `Object` to `Map` for the internal cache shows an 18% improvement in the total run time of `dependencyResolver.resolveInverse` for a test data set of 300k~ files, although obviously the performance characteristics are going to vary depending on the data set.\r\n\r\nAt Facebook, this PR means when I run just Jest to look at my changed files and run the appropriate tests, it boots up 2 seconds faster.\r\n\r\n## Test plan\r\n\r\n- All tests pass. New tests not appropriate for this simple change.\r\n- Tested manually.\r\n- Benchmarked to ensure performance improvement.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8183/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"50ca2d37dda1533268956a3acbcfcc2f39755bbd","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/3cff75c6a4762c076e3fc70f5c064485d7a83465/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/3cff75c6a4762c076e3fc70f5c064485d7a83465/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=3cff75c6a4762c076e3fc70f5c064485d7a83465","patch":"@@ -34,6 +34,7 @@\n \n - `[jest-haste-map]` Optimize haste map data structure for serialization/deserialization ([#8171](https://github.com/facebook/jest/pull/8171))\n - `[jest-haste-map]` Avoid persisting haste map or processing files when not changed ([#8153](https://github.com/facebook/jest/pull/8153))\n+- `[jest-resolve]` Optimize internal cache lookup performance ([#8183](https://github.com/facebook/jest/pull/8183))\n \n ## 24.5.0\n "},{"sha":"5d1dc26353f5bc95dc2783249b58344821e86023","filename":"e2e/__tests__/__snapshots__/moduleNameMapper.test.ts.snap","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/3cff75c6a4762c076e3fc70f5c064485d7a83465/e2e%2F__tests__%2F__snapshots__%2FmoduleNameMapper.test.ts.snap","raw_url":"https://github.com/facebook/jest/raw/3cff75c6a4762c076e3fc70f5c064485d7a83465/e2e%2F__tests__%2F__snapshots__%2FmoduleNameMapper.test.ts.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2F__snapshots__%2FmoduleNameMapper.test.ts.snap?ref=3cff75c6a4762c076e3fc70f5c064485d7a83465","patch":"@@ -30,6 +30,6 @@ FAIL __tests__/index.js\n       12 | module.exports = () => 'test';\n       13 | \n \n-      at createNoMappedModuleFoundError (../../packages/jest-resolve/build/index.js:455:17)\n+      at createNoMappedModuleFoundError (../../packages/jest-resolve/build/index.js:474:17)\n       at Object.require (index.js:10:1)\n `;"},{"sha":"73905d202b50f8f6f1dc777a58c1132de65368d8","filename":"e2e/__tests__/__snapshots__/resolveNoFileExtensions.test.ts.snap","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/3cff75c6a4762c076e3fc70f5c064485d7a83465/e2e%2F__tests__%2F__snapshots__%2FresolveNoFileExtensions.test.ts.snap","raw_url":"https://github.com/facebook/jest/raw/3cff75c6a4762c076e3fc70f5c064485d7a83465/e2e%2F__tests__%2F__snapshots__%2FresolveNoFileExtensions.test.ts.snap","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2F__snapshots__%2FresolveNoFileExtensions.test.ts.snap?ref=3cff75c6a4762c076e3fc70f5c064485d7a83465","patch":"@@ -33,6 +33,6 @@ FAIL __tests__/test.js\n         |                  ^\n       4 | \n \n-      at Resolver.resolveModule (../../packages/jest-resolve/build/index.js:222:17)\n+      at Resolver.resolveModule (../../packages/jest-resolve/build/index.js:232:17)\n       at Object.require (index.js:3:18)\n `;"},{"sha":"f64be27244d27f1c00a1f46ddb4f2eebb1b23944","filename":"packages/jest-resolve/src/index.ts","status":"modified","additions":34,"deletions":24,"changes":58,"blob_url":"https://github.com/facebook/jest/blob/3cff75c6a4762c076e3fc70f5c064485d7a83465/packages%2Fjest-resolve%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/3cff75c6a4762c076e3fc70f5c064485d7a83465/packages%2Fjest-resolve%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-resolve%2Fsrc%2Findex.ts?ref=3cff75c6a4762c076e3fc70f5c064485d7a83465","patch":"@@ -50,9 +50,9 @@ const nodePaths = process.env.NODE_PATH\n class Resolver {\n   private readonly _options: ResolverConfig;\n   private readonly _moduleMap: ModuleMap;\n-  private readonly _moduleIDCache: {[key: string]: string};\n-  private readonly _moduleNameCache: {[name: string]: Config.Path};\n-  private readonly _modulePathCache: {[path: string]: Array<Config.Path>};\n+  private readonly _moduleIDCache: Map<string, string>;\n+  private readonly _moduleNameCache: Map<string, Config.Path>;\n+  private readonly _modulePathCache: Map<string, Array<Config.Path>>;\n   private readonly _supportsNativePlatform: boolean;\n \n   constructor(moduleMap: ModuleMap, options: ResolverConfig) {\n@@ -73,9 +73,9 @@ class Resolver {\n       ? options.platforms.includes(NATIVE_PLATFORM)\n       : false;\n     this._moduleMap = moduleMap;\n-    this._moduleIDCache = Object.create(null);\n-    this._moduleNameCache = Object.create(null);\n-    this._modulePathCache = Object.create(null);\n+    this._moduleIDCache = new Map();\n+    this._moduleNameCache = new Map();\n+    this._modulePathCache = new Map();\n   }\n \n   static findNodeModule(\n@@ -127,14 +127,16 @@ class Resolver {\n \n     // 1. If we have already resolved this module for this directory name,\n     // return a value from the cache.\n-    if (this._moduleNameCache[key]) {\n-      return this._moduleNameCache[key];\n+    const cacheResult = this._moduleNameCache.get(key);\n+    if (cacheResult) {\n+      return cacheResult;\n     }\n \n     // 2. Check if the module is a haste module.\n     module = this.getModule(moduleName);\n     if (module) {\n-      return (this._moduleNameCache[key] = module);\n+      this._moduleNameCache.set(key, module);\n+      return module;\n     }\n \n     // 3. Check if the module is a node module and resolve it based on\n@@ -161,7 +163,8 @@ class Resolver {\n       module = resolveNodeModule(moduleName);\n \n       if (module) {\n-        return (this._moduleNameCache[key] = module);\n+        this._moduleNameCache.set(key, module);\n+        return module;\n       }\n     }\n \n@@ -177,8 +180,10 @@ class Resolver {\n         );\n         // try resolving with custom resolver first to support extensions,\n         // then fallback to require.resolve\n-        return (this._moduleNameCache[key] =\n-          resolveNodeModule(module) || require.resolve(module));\n+        const resolvedModule =\n+          resolveNodeModule(module) || require.resolve(module);\n+        this._moduleNameCache.set(key, resolvedModule);\n+        return resolvedModule;\n       } catch (ignoredError) {}\n     }\n \n@@ -250,16 +255,19 @@ class Resolver {\n   }\n \n   getModulePaths(from: Config.Path): Array<Config.Path> {\n-    if (!this._modulePathCache[from]) {\n-      const moduleDirectory = this._options.moduleDirectories;\n-      const paths = nodeModulesPaths(from, {moduleDirectory});\n-      if (paths[paths.length - 1] === undefined) {\n-        // circumvent node-resolve bug that adds `undefined` as last item.\n-        paths.pop();\n-      }\n-      this._modulePathCache[from] = paths;\n+    const cachedModule = this._modulePathCache.get(from);\n+    if (cachedModule) {\n+      return cachedModule;\n+    }\n+\n+    const moduleDirectory = this._options.moduleDirectories;\n+    const paths = nodeModulesPaths(from, {moduleDirectory});\n+    if (paths[paths.length - 1] === undefined) {\n+      // circumvent node-resolve bug that adds `undefined` as last item.\n+      paths.pop();\n     }\n-    return this._modulePathCache[from];\n+    this._modulePathCache.set(from, paths);\n+    return paths;\n   }\n \n   getModuleID(\n@@ -270,8 +278,9 @@ class Resolver {\n     const moduleName = _moduleName || '';\n \n     const key = from + path.delimiter + moduleName;\n-    if (this._moduleIDCache[key]) {\n-      return this._moduleIDCache[key];\n+    const cachedModuleID = this._moduleIDCache.get(key);\n+    if (cachedModuleID) {\n+      return cachedModuleID;\n     }\n \n     const moduleType = this._getModuleType(moduleName);\n@@ -285,7 +294,8 @@ class Resolver {\n       (absolutePath ? absolutePath + sep : '') +\n       (mockPath ? mockPath + sep : '');\n \n-    return (this._moduleIDCache[key] = id);\n+    this._moduleIDCache.set(key, id);\n+    return id;\n   }\n \n   private _getModuleType(moduleName: string): 'node' | 'user' {"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8056","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8056/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8056/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8056/events","html_url":"https://github.com/facebook/jest/pull/8056","id":417578520,"node_id":"MDExOlB1bGxSZXF1ZXN0MjU4NTQ1NjY2","number":8056,"title":"Optimize haste map tracking of deleted files with Watchman.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2019-03-06T01:23:45Z","updated_at":"2021-05-11T23:06:45Z","closed_at":"2019-03-06T18:48:27Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8056","html_url":"https://github.com/facebook/jest/pull/8056","diff_url":"https://github.com/facebook/jest/pull/8056.diff","patch_url":"https://github.com/facebook/jest/pull/8056.patch","merged_at":"2019-03-06T18:48:27Z"},"body":"## Summary\r\n\r\nThis is a minor PR to improve the performance of tracking deleted files by taking advantage of Watchman when available.\r\n\r\nCurrently, deleted files are tracked within jest-haste-map by:\r\n1. Making a shallow copy of the Haste Map files before building the file map.\r\n2. Filtering the shallow copy against the generated file map to remove all files that still exist.\r\n\r\nBenchmarking this operation against a large locally-generated test Haste Map of 300k~ files with one deletion, the operation currently takes about 150ms on my machine and grows linearly with more files tracked. Using Watchman makes it almost free and only grows with the number of files changed.\r\n\r\nI've updated the non-Watchman implementation to also track deleted files within the crawler to keep the interface consistent, although that update is neutral on performance.\r\n\r\n## Test plan\r\n\r\n- Benchmarked the performance to ensure what looked like a performance gain was one in practice.\r\n- Tested manually with and without Watchman to ensure deleted files were being picked up as expected.\r\n- Added tests for tracking deleted files with Watchman crawler when fresh and when not fresh.\r\n- Added tests for tracking deleted file with Node crawler.\r\n- Updated all related tests.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8056/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8056/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"746190c9c92b7c19024deefac130d2e692987aac","filename":"CHANGELOG.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -94,6 +94,8 @@\n \n ### Performance\n \n+- `[jest-haste-map]` Optimize haste map tracking of deleted files with Watchman. ([#8056](https://github.com/facebook/jest/pull/8056))\n+\n ## 24.1.0\n \n ### Features"},{"sha":"03b74317a210cdfb673fcd131d038bd74f2cc604","filename":"packages/jest-haste-map/src/__tests__/index.test.js","status":"modified","additions":24,"deletions":7,"changes":31,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -40,6 +40,7 @@ jest.mock('../crawlers/watchman', () =>\n \n     const {data, ignore, rootDir, roots, computeSha1} = options;\n     const list = mockChangedFiles || mockFs;\n+    const removedFiles = new Map();\n \n     data.clocks = mockClocks;\n \n@@ -51,12 +52,19 @@ jest.mock('../crawlers/watchman', () =>\n \n           data.files.set(relativeFilePath, ['', 32, 42, 0, [], hash]);\n         } else {\n-          data.files.delete(relativeFilePath);\n+          const fileData = data.files.get(relativeFilePath);\n+          if (fileData) {\n+            removedFiles.set(relativeFilePath, fileData);\n+            data.files.delete(relativeFilePath);\n+          }\n         }\n       }\n     }\n \n-    return Promise.resolve(data);\n+    return Promise.resolve({\n+      hasteMap: data,\n+      removedFiles,\n+    });\n   }),\n );\n \n@@ -416,7 +424,10 @@ describe('HasteMap', () => {\n             'vegetables/Melon.js': ['Melon', 32, 42, 0, [], null],\n           });\n \n-          return Promise.resolve(data);\n+          return Promise.resolve({\n+            hasteMap: data,\n+            removedFiles: new Map(),\n+          });\n         });\n \n         const hasteMap = new HasteMap({\n@@ -543,7 +554,7 @@ describe('HasteMap', () => {\n       ...defaultConfig,\n     })\n       .build()\n-      .catch(({__hasteMapForTest: data}) => {\n+      .catch(() => {\n         expect(console.error.mock.calls[0][0]).toMatchSnapshot();\n       });\n   });\n@@ -979,7 +990,7 @@ describe('HasteMap', () => {\n       mockImpl(options).then(() => {\n         const {data} = options;\n         data.files.set('fruits/invalid/file.js', ['', 34, 44, 0, []]);\n-        return data;\n+        return {hasteMap: data, removedFiles: new Map()};\n       }),\n     );\n     return new HasteMap(defaultConfig)\n@@ -1077,7 +1088,10 @@ describe('HasteMap', () => {\n       data.files = createMap({\n         'fruits/Banana.js': ['', 32, 42, 0, [], null],\n       });\n-      return Promise.resolve(data);\n+      return Promise.resolve({\n+        hasteMap: data,\n+        removedFiles: new Map(),\n+      });\n     });\n \n     return new HasteMap(defaultConfig)\n@@ -1108,7 +1122,10 @@ describe('HasteMap', () => {\n       data.files = createMap({\n         'fruits/Banana.js': ['', 32, 42, 0, [], null],\n       });\n-      return Promise.resolve(data);\n+      return Promise.resolve({\n+        hasteMap: data,\n+        removedFiles: new Map(),\n+      });\n     });\n \n     return new HasteMap(defaultConfig)"},{"sha":"b1cb1f1730e2c13ad21789f6647cb49d069e6a12","filename":"packages/jest-haste-map/src/crawlers/__tests__/node.test.js","status":"modified","additions":56,"deletions":14,"changes":70,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fnode.test.js?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -114,7 +114,7 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/project/fruits', '/project/vegtables'],\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       expect(childProcess.spawn).lastCalledWith('find', [\n         '/project/fruits',\n         '/project/vegtables',\n@@ -129,15 +129,17 @@ describe('node crawler', () => {\n         ')',\n       ]);\n \n-      expect(data.files).not.toBe(null);\n+      expect(hasteMap.files).not.toBe(null);\n \n-      expect(data.files).toEqual(\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           'fruits/strawberry.js': ['', 32, 42, 0, [], null],\n           'fruits/tomato.js': ['', 33, 42, 0, [], null],\n           'vegetables/melon.json': ['', 34, 42, 0, [], null],\n         }),\n       );\n+\n+      expect(removedFiles).toEqual(new Map());\n     });\n \n     return promise;\n@@ -161,16 +163,52 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/project/fruits'],\n-    }).then(data => {\n-      expect(data.files).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           'fruits/strawberry.js': ['', 32, 42, 0, [], null],\n           'fruits/tomato.js': tomato,\n         }),\n       );\n \n       // Make sure it is the *same* unchanged object.\n-      expect(data.files.get('fruits/tomato.js')).toBe(tomato);\n+      expect(hasteMap.files.get('fruits/tomato.js')).toBe(tomato);\n+\n+      expect(removedFiles).toEqual(new Map());\n+    });\n+  });\n+\n+  it('returns removed files', () => {\n+    process.platform = 'linux';\n+\n+    nodeCrawl = require('../node');\n+\n+    // In this test sample, previouslyExisted was present before and will not be\n+    // when crawling this directory.\n+    const files = createMap({\n+      'fruits/previouslyExisted.js': ['', 30, 40, 1, [], null],\n+      'fruits/strawberry.js': ['', 33, 42, 0, [], null],\n+      'fruits/tomato.js': ['', 32, 42, 0, [], null],\n+    });\n+\n+    return nodeCrawl({\n+      data: {files},\n+      extensions: ['js'],\n+      ignore: pearMatcher,\n+      rootDir,\n+      roots: ['/project/fruits'],\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n+        createMap({\n+          'fruits/strawberry.js': ['', 32, 42, 0, [], null],\n+          'fruits/tomato.js': ['', 33, 42, 0, [], null],\n+        }),\n+      );\n+      expect(removedFiles).toEqual(\n+        createMap({\n+          'fruits/previouslyExisted.js': ['', 30, 40, 1, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -187,13 +225,14 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/project/fruits'],\n-    }).then(data => {\n-      expect(data.files).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           'fruits/directory/strawberry.js': ['', 33, 42, 0, [], null],\n           'fruits/tomato.js': ['', 32, 42, 0, [], null],\n         }),\n       );\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n \n@@ -210,13 +249,14 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/project/fruits'],\n-    }).then(data => {\n-      expect(data.files).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           'fruits/directory/strawberry.js': ['', 33, 42, 0, [], null],\n           'fruits/tomato.js': ['', 32, 42, 0, [], null],\n         }),\n       );\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n \n@@ -233,8 +273,9 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: [],\n-    }).then(data => {\n-      expect(data.files).toEqual(new Map());\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(new Map());\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n \n@@ -250,8 +291,9 @@ describe('node crawler', () => {\n       ignore: pearMatcher,\n       rootDir,\n       roots: ['/error'],\n-    }).then(data => {\n-      expect(data.files).toEqual(new Map());\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(new Map());\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n });"},{"sha":"ab454171f5bde778569f44d12edaaea8bbd66d39","filename":"packages/jest-haste-map/src/crawlers/__tests__/watchman.test.js","status":"modified","additions":49,"deletions":24,"changes":73,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2F__tests__%2Fwatchman.test.js?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -128,7 +128,7 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       const client = watchman.Client.mock.instances[0];\n       const calls = client.command.mock.calls;\n \n@@ -159,13 +159,15 @@ describe('watchman watch', () => {\n         'vegetables/**/*.json',\n       ]);\n \n-      expect(data.clocks).toEqual(\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           '': 'c:fake-clock:1',\n         }),\n       );\n \n-      expect(data.files).toEqual(mockFiles);\n+      expect(hasteMap.files).toEqual(mockFiles);\n+\n+      expect(removedFiles).toEqual(new Map());\n \n       expect(client.end).toBeCalled();\n     }));\n@@ -208,17 +210,18 @@ describe('watchman watch', () => {\n           : null,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n-      expect(data.files).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           [path.join(DURIAN_RELATIVE, 'foo.1.js')]: ['', 33, 43, 0, [], null],\n           [path.join(DURIAN_RELATIVE, 'foo.2.js')]: ['', 33, 43, 0, [], null],\n         }),\n       );\n+      expect(removedFiles).toEqual(new Map());\n     });\n   });\n \n-  test('updates the file object when the clock is given', () => {\n+  test('updates file map and removedFiles when the clock is given', () => {\n     mockResponse = {\n       'list-capabilities': {\n         [undefined]: {\n@@ -262,27 +265,33 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       // The object was reused.\n-      expect(data.files).toBe(mockFiles);\n+      expect(hasteMap.files).toBe(mockFiles);\n \n-      expect(data.clocks).toEqual(\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           '': 'c:fake-clock:2',\n         }),\n       );\n \n-      expect(data.files).toEqual(\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           [KIWI_RELATIVE]: ['', 42, 40, 0, [], null],\n           [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n           [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n         }),\n       );\n+\n+      expect(removedFiles).toEqual(\n+        createMap({\n+          [TOMATO_RELATIVE]: ['', 31, 41, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n-  test('resets the file object when watchman is restarted', () => {\n+  test('resets the file map and tracks removedFiles when watchman is fresh', () => {\n     const mockTomatoSha1 = '321f6b7e8bf7f29aab89c5e41a555b1b0baa41a9';\n \n     mockResponse = {\n@@ -340,18 +349,18 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       // The file object was *not* reused.\n-      expect(data.files).not.toBe(mockFiles);\n+      expect(hasteMap.files).not.toBe(mockFiles);\n \n-      expect(data.clocks).toEqual(\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           '': 'c:fake-clock:3',\n         }),\n       );\n \n-      // /fruits/strawberry.js was removed from the file list.\n-      expect(data.files).toEqual(\n+      // strawberry and melon removed from the file list.\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           [BANANA_RELATIVE]: mockBananaMetadata,\n           [KIWI_RELATIVE]: ['', 42, 52, 0, [], null],\n@@ -361,10 +370,17 @@ describe('watchman watch', () => {\n \n       // Even though the file list was reset, old file objects are still reused\n       // if no changes have been made\n-      expect(data.files.get(BANANA_RELATIVE)).toBe(mockBananaMetadata);\n+      expect(hasteMap.files.get(BANANA_RELATIVE)).toBe(mockBananaMetadata);\n \n       // Old file objects are not reused if they have a different mtime\n-      expect(data.files.get(TOMATO_RELATIVE)).not.toBe(mockTomatoMetadata);\n+      expect(hasteMap.files.get(TOMATO_RELATIVE)).not.toBe(mockTomatoMetadata);\n+\n+      expect(removedFiles).toEqual(\n+        createMap({\n+          [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n+          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -427,20 +443,27 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: ROOTS,\n-    }).then(data => {\n-      expect(data.clocks).toEqual(\n+    }).then(({hasteMap, removedFiles}) => {\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           [FRUITS_RELATIVE]: 'c:fake-clock:3',\n           [VEGETABLES_RELATIVE]: 'c:fake-clock:4',\n         }),\n       );\n \n-      expect(data.files).toEqual(\n+      expect(hasteMap.files).toEqual(\n         createMap({\n           [KIWI_RELATIVE]: ['', 42, 52, 0, [], null],\n           [MELON_RELATIVE]: ['', 33, 43, 0, [], null],\n         }),\n       );\n+\n+      expect(removedFiles).toEqual(\n+        createMap({\n+          [STRAWBERRY_RELATIVE]: ['', 30, 40, 0, [], null],\n+          [TOMATO_RELATIVE]: ['', 31, 41, 0, [], null],\n+        }),\n+      );\n     });\n   });\n \n@@ -483,7 +506,7 @@ describe('watchman watch', () => {\n       ignore: pearMatcher,\n       rootDir: ROOT_MOCK,\n       roots: [...ROOTS, ROOT_MOCK],\n-    }).then(data => {\n+    }).then(({hasteMap, removedFiles}) => {\n       const client = watchman.Client.mock.instances[0];\n       const calls = client.command.mock.calls;\n \n@@ -509,13 +532,15 @@ describe('watchman watch', () => {\n \n       expect(query[2].glob).toEqual(['**/*.js', '**/*.json']);\n \n-      expect(data.clocks).toEqual(\n+      expect(hasteMap.clocks).toEqual(\n         createMap({\n           '': 'c:fake-clock:1',\n         }),\n       );\n \n-      expect(data.files).toEqual(createMap({}));\n+      expect(hasteMap.files).toEqual(new Map());\n+\n+      expect(removedFiles).toEqual(new Map());\n \n       expect(client.end).toBeCalled();\n     });"},{"sha":"07a93edf3ee4125d202366e7d873b4461c5b1617","filename":"packages/jest-haste-map/src/crawlers/node.ts","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -10,7 +10,12 @@ import path from 'path';\n import {spawn} from 'child_process';\n import H from '../constants';\n import * as fastPath from '../lib/fast_path';\n-import {IgnoreMatcher, InternalHasteMap, CrawlerOptions} from '../types';\n+import {\n+  IgnoreMatcher,\n+  InternalHasteMap,\n+  CrawlerOptions,\n+  FileData,\n+} from '../types';\n \n type Result = Array<[/* id */ string, /* mtime */ number, /* size */ number]>;\n \n@@ -130,7 +135,10 @@ function findNative(\n \n export = function nodeCrawl(\n   options: CrawlerOptions,\n-): Promise<InternalHasteMap> {\n+): Promise<{\n+  removedFiles: FileData;\n+  hasteMap: InternalHasteMap;\n+}> {\n   if (options.mapper) {\n     throw new Error(`Option 'mapper' isn't supported by the Node crawler`);\n   }\n@@ -147,6 +155,7 @@ export = function nodeCrawl(\n   return new Promise(resolve => {\n     const callback = (list: Result) => {\n       const files = new Map();\n+      const removedFiles = new Map(data.files);\n       list.forEach(fileData => {\n         const [filePath, mtime, size] = fileData;\n         const relativeFilePath = fastPath.relative(rootDir, filePath);\n@@ -157,9 +166,14 @@ export = function nodeCrawl(\n           // See ../constants.js; SHA-1 will always be null and fulfilled later.\n           files.set(relativeFilePath, ['', mtime, size, 0, [], null]);\n         }\n+        removedFiles.delete(relativeFilePath);\n       });\n       data.files = files;\n-      resolve(data);\n+\n+      resolve({\n+        hasteMap: data,\n+        removedFiles,\n+      });\n     };\n \n     if (forceNodeFilesystemAPI || process.platform === 'win32') {"},{"sha":"2512efab75400c14c70ba8971f6beca5ef7ab77c","filename":"packages/jest-haste-map/src/crawlers/watchman.ts","status":"modified","additions":35,"deletions":5,"changes":40,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fwatchman.ts?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -11,7 +11,12 @@ import {Config} from '@jest/types';\n import * as fastPath from '../lib/fast_path';\n import normalizePathSep from '../lib/normalizePathSep';\n import H from '../constants';\n-import {InternalHasteMap, CrawlerOptions, FileMetaData} from '../types';\n+import {\n+  InternalHasteMap,\n+  CrawlerOptions,\n+  FileMetaData,\n+  FileData,\n+} from '../types';\n \n type WatchmanRoots = Map<string, Array<string>>;\n \n@@ -27,7 +32,10 @@ function WatchmanError(error: Error): Error {\n \n export = async function watchmanCrawl(\n   options: CrawlerOptions,\n-): Promise<InternalHasteMap> {\n+): Promise<{\n+  removedFiles: FileData;\n+  hasteMap: InternalHasteMap;\n+}> {\n   const fields = ['name', 'exists', 'mtime_ms', 'size'];\n   const {data, extensions, ignore, rootDir, roots} = options;\n   const defaultWatchExpression = [\n@@ -139,7 +147,9 @@ export = async function watchmanCrawl(\n   }\n \n   let files = data.files;\n+  let removedFiles = new Map();\n   let watchmanFiles: Map<string, any>;\n+  let isFresh = false;\n   try {\n     const watchmanRoots = await getWatchmanRoots(roots);\n     const watchmanFileResults = await queryWatchmanForDirs(watchmanRoots);\n@@ -148,6 +158,8 @@ export = async function watchmanCrawl(\n     // files.\n     if (watchmanFileResults.isFresh) {\n       files = new Map();\n+      removedFiles = new Map(data.files);\n+      isFresh = true;\n     }\n \n     watchmanFiles = watchmanFileResults.files;\n@@ -168,9 +180,25 @@ export = async function watchmanCrawl(\n     for (const fileData of response.files) {\n       const filePath = fsRoot + path.sep + normalizePathSep(fileData.name);\n       const relativeFilePath = fastPath.relative(rootDir, filePath);\n+      const existingFileData = data.files.get(relativeFilePath);\n+\n+      // If watchman is fresh, the removed files map starts with all files\n+      // and we remove them as we verify they still exist.\n+      if (isFresh && existingFileData && fileData.exists) {\n+        removedFiles.delete(relativeFilePath);\n+      }\n \n       if (!fileData.exists) {\n-        files.delete(relativeFilePath);\n+        // No need to act on files that do not exist and were not tracked.\n+        if (existingFileData) {\n+          files.delete(relativeFilePath);\n+\n+          // If watchman is not fresh, we will know what specific files were\n+          // deleted since we last ran and can track only those files.\n+          if (!isFresh) {\n+            removedFiles.set(relativeFilePath, existingFileData);\n+          }\n+        }\n       } else if (!ignore(filePath)) {\n         const mtime =\n           typeof fileData.mtime_ms === 'number'\n@@ -183,7 +211,6 @@ export = async function watchmanCrawl(\n           sha1hex = null;\n         }\n \n-        const existingFileData = data.files.get(relativeFilePath);\n         let nextData: FileMetaData;\n \n         if (existingFileData && existingFileData[H.MTIME] === mtime) {\n@@ -226,5 +253,8 @@ export = async function watchmanCrawl(\n   }\n \n   data.files = files;\n-  return data;\n+  return {\n+    hasteMap: data,\n+    removedFiles,\n+  };\n };"},{"sha":"174c5e3baca294a0936cec0d31b34f30565c25a8","filename":"packages/jest-haste-map/src/index.ts","status":"modified","additions":21,"deletions":39,"changes":60,"blob_url":"https://github.com/facebook/jest/blob/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/d94f42fd3d892ef8adf3a414e3e0204ce80e0033/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.ts?ref=d94f42fd3d892ef8adf3a414e3e0204ce80e0033","patch":"@@ -42,6 +42,8 @@ import {\n   ModuleMapData,\n   ModuleMetaData,\n   WorkerMetadata,\n+  CrawlerOptions,\n+  FileData,\n } from './types';\n \n type HType = typeof H;\n@@ -394,27 +396,15 @@ class HasteMap extends EventEmitter {\n    * 2. crawl the file system.\n    */\n   private _buildFileMap(): Promise<{\n-    deprecatedFiles: Array<{moduleName: string; path: string}>;\n+    removedFiles: FileData;\n     hasteMap: InternalHasteMap;\n   }> {\n     const read = this._options.resetCache ? this._createEmptyMap : this.read;\n \n     return Promise.resolve()\n       .then(() => read.call(this))\n       .catch(() => this._createEmptyMap())\n-      .then(cachedHasteMap => {\n-        const cachedFiles: Array<{moduleName: string; path: string}> = [];\n-        for (const [relativeFilePath, fileMetadata] of cachedHasteMap.files) {\n-          const moduleName = fileMetadata[H.ID];\n-          cachedFiles.push({moduleName, path: relativeFilePath});\n-        }\n-        return this._crawl(cachedHasteMap).then(hasteMap => {\n-          const deprecatedFiles = cachedFiles.filter(\n-            file => !hasteMap.files.has(file.path),\n-          );\n-          return {deprecatedFiles, hasteMap};\n-        });\n-      });\n+      .then(hasteMap => this._crawl(hasteMap));\n   }\n \n   /**\n@@ -629,17 +619,16 @@ class HasteMap extends EventEmitter {\n   }\n \n   private _buildHasteMap(data: {\n-    deprecatedFiles: Array<{moduleName: string; path: string}>;\n+    removedFiles: FileData;\n     hasteMap: InternalHasteMap;\n   }): Promise<InternalHasteMap> {\n-    const {deprecatedFiles, hasteMap} = data;\n+    const {removedFiles, hasteMap} = data;\n     const map = new Map();\n     const mocks = new Map();\n     const promises = [];\n \n-    for (let i = 0; i < deprecatedFiles.length; ++i) {\n-      const file = deprecatedFiles[i];\n-      this._recoverDuplicates(hasteMap, file.path, file.moduleName);\n+    for (const [relativeFilePath, fileMetadata] of removedFiles) {\n+      this._recoverDuplicates(hasteMap, relativeFilePath, fileMetadata[H.ID]);\n     }\n \n     for (const relativeFilePath of hasteMap.files.keys()) {\n@@ -712,11 +701,21 @@ class HasteMap extends EventEmitter {\n     return this._worker;\n   }\n \n-  private _crawl(hasteMap: InternalHasteMap): Promise<InternalHasteMap> {\n+  private _crawl(hasteMap: InternalHasteMap) {\n     const options = this._options;\n     const ignore = this._ignore.bind(this);\n     const crawl =\n       canUseWatchman && this._options.useWatchman ? watchmanCrawl : nodeCrawl;\n+    const crawlerOptions: CrawlerOptions = {\n+      computeSha1: options.computeSha1,\n+      data: hasteMap,\n+      extensions: options.extensions,\n+      forceNodeFilesystemAPI: options.forceNodeFilesystemAPI,\n+      ignore,\n+      mapper: options.mapper,\n+      rootDir: options.rootDir,\n+      roots: options.roots,\n+    };\n \n     const retry = (error: Error) => {\n       if (crawl === watchmanCrawl) {\n@@ -729,16 +728,7 @@ class HasteMap extends EventEmitter {\n             `  ` +\n             error,\n         );\n-        return nodeCrawl({\n-          computeSha1: options.computeSha1,\n-          data: hasteMap,\n-          extensions: options.extensions,\n-          forceNodeFilesystemAPI: options.forceNodeFilesystemAPI,\n-          ignore,\n-          mapper: options.mapper,\n-          rootDir: options.rootDir,\n-          roots: options.roots,\n-        }).catch(e => {\n+        return nodeCrawl(crawlerOptions).catch(e => {\n           throw new Error(\n             `Crawler retry failed:\\n` +\n               `  Original error: ${error.message}\\n` +\n@@ -751,15 +741,7 @@ class HasteMap extends EventEmitter {\n     };\n \n     try {\n-      return crawl({\n-        computeSha1: options.computeSha1,\n-        data: hasteMap,\n-        extensions: options.extensions,\n-        forceNodeFilesystemAPI: options.forceNodeFilesystemAPI,\n-        ignore,\n-        rootDir: options.rootDir,\n-        roots: options.roots,\n-      }).catch(retry);\n+      return crawl(crawlerOptions).catch(retry);\n     } catch (error) {\n       return retry(error);\n     }"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/8201","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8201/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8201/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8201/events","html_url":"https://github.com/facebook/jest/pull/8201","id":424587889,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYzODg5MDI2","number":8201,"title":"Dramatically improve watch mode performance.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2019-03-24T08:24:56Z","updated_at":"2021-05-11T21:07:12Z","closed_at":"2019-03-24T21:57:03Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8201","html_url":"https://github.com/facebook/jest/pull/8201","diff_url":"https://github.com/facebook/jest/pull/8201.diff","patch_url":"https://github.com/facebook/jest/pull/8201.patch","merged_at":"2019-03-24T21:57:03Z"},"body":"## Summary\r\n\r\nResolves #7341 \r\n\r\nThis PR dramatically improves watch mode performance, bringing it in line with single run mode performance. It accomplishes that by:\r\n- Workers previously initialized a new `ModuleMap` and `Resolver` for every test in watch mode. Now, those objects are only initialized once when the worker is setup.\r\n- In the main thread, caching the conversion of `ModuleMap` to a JSON-friendly object.\r\n\r\n## Benchmarks\r\n\r\nI benchmarked against Jest's own test suite, excluding e2e tests which don't provide good signal because they individually take a long time (so startup time for the test is marginalized). The numbers show that running in Watch mode previously added an extra 35%~ of runtime to the tests but that has now been reduced to almost nothing.\r\n\r\nWatch mode should now just be paying a one-time initial cost for each worker when the haste map changes instead of paying that same cost for _every_ test run.\r\n\r\n### branch: master\r\n\r\n`yarn jest ./packages`\r\nRun time: 15.091s\r\n\r\n`yarn jest ./packages --watch`\r\nRun time: 23.234s\r\n\r\n### branch: watch-performance\r\n\r\n`yarn jest ./packages`\r\nRun time: 14.973s\r\n\r\n`yarn jest ./packages --watch`\r\nRun time: 15.196s\r\n\r\n\r\n## Test plan\r\n\r\n- All tests pass.\r\n- Benchmarked to verify the performance wins.\r\n- Verified that when the haste map is updated, the update is propagated out to all workers.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8201/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8201/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"126eb8bdcbe3a77cf4de7c01389f5a063faba612","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -36,6 +36,7 @@\n - `[jest-haste-map]` Avoid persisting haste map or processing files when not changed ([#8153](https://github.com/facebook/jest/pull/8153))\n - `[jest-core]` Improve performance of SearchSource.findMatchingTests by 15% ([#8184](https://github.com/facebook/jest/pull/8184))\n - `[jest-resolve]` Optimize internal cache lookup performance ([#8183](https://github.com/facebook/jest/pull/8183))\n+- `[jest-core]` Dramatically improve watch mode performance ([#8201](https://github.com/facebook/jest/pull/8201))\n \n ## 24.5.0\n "},{"sha":"a4a92a4191318a62f95ec4ee5e076b51babdb281","filename":"packages/jest-config/src/__tests__/getMaxWorkers.test.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-config%2Fsrc%2F__tests__%2FgetMaxWorkers.test.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-config%2Fsrc%2F__tests__%2FgetMaxWorkers.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2F__tests__%2FgetMaxWorkers.test.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -32,7 +32,7 @@ describe('getMaxWorkers', () => {\n \n   it('Returns based on the number of cpus', () => {\n     expect(getMaxWorkers({})).toBe(3);\n-    expect(getMaxWorkers({watch: true})).toBe(2);\n+    expect(getMaxWorkers({watch: true})).toBe(3);\n   });\n \n   describe('% based', () => {"},{"sha":"edf67a5de5d7f53a05e67da8bec175b43115c80b","filename":"packages/jest-config/src/getMaxWorkers.ts","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-config%2Fsrc%2FgetMaxWorkers.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-config%2Fsrc%2FgetMaxWorkers.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FgetMaxWorkers.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -32,6 +32,6 @@ export default function getMaxWorkers(\n     return parsed > 0 ? parsed : 1;\n   } else {\n     const cpus = os.cpus() ? os.cpus().length : 1;\n-    return Math.max(argv.watch ? Math.floor(cpus / 2) : cpus - 1, 1);\n+    return Math.max(cpus - 1, 1);\n   }\n }"},{"sha":"73390e1050926a946dc7c0025faa2d7ddbbc2cc9","filename":"packages/jest-haste-map/src/ModuleMap.ts","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2FModuleMap.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -32,8 +32,9 @@ export type SerializableModuleMap = {\n };\n \n export default class ModuleMap {\n-  private readonly _raw: RawModuleMap;\n   static DuplicateHasteCandidatesError: typeof DuplicateHasteCandidatesError;\n+  private readonly _raw: RawModuleMap;\n+  private json: SerializableModuleMap | undefined;\n \n   constructor(raw: RawModuleMap) {\n     this._raw = raw;\n@@ -84,12 +85,15 @@ export default class ModuleMap {\n   }\n \n   toJSON(): SerializableModuleMap {\n-    return {\n-      duplicates: Array.from(this._raw.duplicates),\n-      map: Array.from(this._raw.map),\n-      mocks: Array.from(this._raw.mocks),\n-      rootDir: this._raw.rootDir,\n-    };\n+    if (!this.json) {\n+      this.json = {\n+        duplicates: Array.from(this._raw.duplicates),\n+        map: Array.from(this._raw.map),\n+        mocks: Array.from(this._raw.mocks),\n+        rootDir: this._raw.rootDir,\n+      };\n+    }\n+    return this.json;\n   }\n \n   static fromJSON(serializableModuleMap: SerializableModuleMap) {"},{"sha":"18a1333137c7169b4b0692473f22ebae62ce6995","filename":"packages/jest-runner/src/__tests__/testRunner.test.js","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2F__tests__%2FtestRunner.test.js?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -51,7 +51,6 @@ test('injects the serializable module map into each worker in watch mode', () =>\n             context: runContext,\n             globalConfig,\n             path: './file.test.js',\n-            serializableModuleMap,\n           },\n         ],\n         [\n@@ -60,7 +59,6 @@ test('injects the serializable module map into each worker in watch mode', () =>\n             context: runContext,\n             globalConfig,\n             path: './file2.test.js',\n-            serializableModuleMap,\n           },\n         ],\n       ]);\n@@ -90,7 +88,6 @@ test('does not inject the serializable module map in serial mode', () => {\n             context: runContext,\n             globalConfig,\n             path: './file.test.js',\n-            serializableModuleMap: null,\n           },\n         ],\n         [\n@@ -99,7 +96,6 @@ test('does not inject the serializable module map in serial mode', () => {\n             context: runContext,\n             globalConfig,\n             path: './file2.test.js',\n-            serializableModuleMap: null,\n           },\n         ],\n       ]);"},{"sha":"10712b94af9e964ca17b19ebb7da64d8cb36ea24","filename":"packages/jest-runner/src/index.ts","status":"modified","additions":21,"deletions":4,"changes":25,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2Findex.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -11,7 +11,7 @@ import exit from 'exit';\n import throat from 'throat';\n import Worker from 'jest-worker';\n import runTest from './runTest';\n-import {worker} from './testWorker';\n+import {worker, SerializableResolver} from './testWorker';\n import {\n   OnTestFailure,\n   OnTestStart,\n@@ -103,11 +103,31 @@ class TestRunner {\n     onResult: OnTestSuccess,\n     onFailure: OnTestFailure,\n   ) {\n+    let resolvers: Map<string, SerializableResolver> | undefined = undefined;\n+    if (watcher.isWatchMode()) {\n+      resolvers = new Map();\n+      for (const test of tests) {\n+        if (!resolvers.has(test.context.config.name)) {\n+          resolvers.set(test.context.config.name, {\n+            config: test.context.config,\n+            serializableModuleMap: test.context.moduleMap.toJSON(),\n+          });\n+        }\n+      }\n+    }\n+\n     const worker = new Worker(TEST_WORKER_PATH, {\n       exposedMethods: ['worker'],\n       forkOptions: {stdio: 'pipe'},\n       maxRetries: 3,\n       numWorkers: this._globalConfig.maxWorkers,\n+      setupArgs: resolvers\n+        ? [\n+            {\n+              serializableResolvers: Array.from(resolvers.values()),\n+            },\n+          ]\n+        : undefined,\n     }) as WorkerInterface;\n \n     if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n@@ -135,9 +155,6 @@ class TestRunner {\n           },\n           globalConfig: this._globalConfig,\n           path: test.path,\n-          serializableModuleMap: watcher.isWatchMode()\n-            ? test.context.moduleMap.toJSON()\n-            : null,\n         });\n       });\n "},{"sha":"a2b5edb0fa6d10bda5443b977eb92efc173c27f2","filename":"packages/jest-runner/src/testWorker.ts","status":"modified","additions":36,"deletions":26,"changes":62,"blob_url":"https://github.com/facebook/jest/blob/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts","raw_url":"https://github.com/facebook/jest/raw/68c2c438fb9693cc3dbebd9d716f7f88146dc752/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runner%2Fsrc%2FtestWorker.ts?ref=68c2c438fb9693cc3dbebd9d716f7f88146dc752","patch":"@@ -8,18 +8,23 @@\n \n import {Config} from '@jest/types';\n import {SerializableError, TestResult} from '@jest/test-result';\n-import HasteMap, {SerializableModuleMap, ModuleMap} from 'jest-haste-map';\n+import HasteMap, {ModuleMap, SerializableModuleMap} from 'jest-haste-map';\n import exit from 'exit';\n import {separateMessageFromStack} from 'jest-message-util';\n import Runtime from 'jest-runtime';\n+import Resolver from 'jest-resolve';\n import {ErrorWithCode, TestRunnerSerializedContext} from './types';\n import runTest from './runTest';\n \n+export type SerializableResolver = {\n+  config: Config.ProjectConfig;\n+  serializableModuleMap: SerializableModuleMap;\n+};\n+\n type WorkerData = {\n   config: Config.ProjectConfig;\n   globalConfig: Config.GlobalConfig;\n   path: Config.Path;\n-  serializableModuleMap: SerializableModuleMap | null;\n   context?: TestRunnerSerializedContext;\n };\n \n@@ -47,45 +52,50 @@ const formatError = (error: string | ErrorWithCode): SerializableError => {\n   };\n };\n \n-const resolvers = Object.create(null);\n-const getResolver = (\n-  config: Config.ProjectConfig,\n-  moduleMap: ModuleMap | null,\n-) => {\n-  // In watch mode, the raw module map with all haste modules is passed from\n-  // the test runner to the watch command. This is because jest-haste-map's\n-  // watch mode does not persist the haste map on disk after every file change.\n-  // To make this fast and consistent, we pass it from the TestRunner.\n-  if (moduleMap) {\n-    return Runtime.createResolver(config, moduleMap);\n-  } else {\n-    const name = config.name;\n-    if (!resolvers[name]) {\n-      resolvers[name] = Runtime.createResolver(\n+const resolvers = new Map<string, Resolver>();\n+const getResolver = (config: Config.ProjectConfig, moduleMap?: ModuleMap) => {\n+  const name = config.name;\n+  if (moduleMap || !resolvers.has(name)) {\n+    resolvers.set(\n+      name,\n+      Runtime.createResolver(\n         config,\n-        Runtime.createHasteMap(config).readModuleMap(),\n-      );\n-    }\n-    return resolvers[name];\n+        moduleMap || Runtime.createHasteMap(config).readModuleMap(),\n+      ),\n+    );\n   }\n+  return resolvers.get(name)!;\n };\n \n+export function setup(setupData?: {\n+  serializableResolvers: Array<SerializableResolver>;\n+}) {\n+  // Setup data is only used in watch mode to pass the latest version of all\n+  // module maps that will be used during the test runs. Otherwise, module maps\n+  // are loaded from disk as needed.\n+  if (setupData) {\n+    for (const {\n+      config,\n+      serializableModuleMap,\n+    } of setupData.serializableResolvers) {\n+      const moduleMap = HasteMap.ModuleMap.fromJSON(serializableModuleMap);\n+      getResolver(config, moduleMap);\n+    }\n+  }\n+}\n+\n export async function worker({\n   config,\n   globalConfig,\n   path,\n-  serializableModuleMap,\n   context,\n }: WorkerData): Promise<TestResult> {\n   try {\n-    const moduleMap = serializableModuleMap\n-      ? HasteMap.ModuleMap.fromJSON(serializableModuleMap)\n-      : null;\n     return await runTest(\n       path,\n       globalConfig,\n       config,\n-      getResolver(config, moduleMap),\n+      getResolver(config),\n       context && {\n         ...context,\n         changedFiles: context.changedFiles && new Set(context.changedFiles),"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/4237","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/4237/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/4237/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/4237/events","html_url":"https://github.com/facebook/jest/pull/4237","id":249352086,"node_id":"MDExOlB1bGxSZXF1ZXN0MTM1MTI4ODQ5","number":4237,"title":"Complain if expect is passed multiple arguments","user":{"login":"gustavnikolaj","id":1371503,"node_id":"MDQ6VXNlcjEzNzE1MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1371503?v=4","gravatar_id":"","url":"https://api.github.com/users/gustavnikolaj","html_url":"https://github.com/gustavnikolaj","followers_url":"https://api.github.com/users/gustavnikolaj/followers","following_url":"https://api.github.com/users/gustavnikolaj/following{/other_user}","gists_url":"https://api.github.com/users/gustavnikolaj/gists{/gist_id}","starred_url":"https://api.github.com/users/gustavnikolaj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gustavnikolaj/subscriptions","organizations_url":"https://api.github.com/users/gustavnikolaj/orgs","repos_url":"https://api.github.com/users/gustavnikolaj/repos","events_url":"https://api.github.com/users/gustavnikolaj/events{/privacy}","received_events_url":"https://api.github.com/users/gustavnikolaj/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-08-10T13:47:26Z","updated_at":"2021-05-12T15:07:23Z","closed_at":"2017-08-10T15:01:12Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/4237","html_url":"https://github.com/facebook/jest/pull/4237","diff_url":"https://github.com/facebook/jest/pull/4237.diff","patch_url":"https://github.com/facebook/jest/pull/4237.patch","merged_at":"2017-08-10T15:01:12Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n**Summary**\r\n\r\nWhen using [unexpected](http://unexpected.js.org/) it's common to import it under the name `expect`. Consider this case:\r\n\r\n```js\r\nimport expect from 'unexpected';\r\n\r\nit('should be unexpected', () => {\r\n  expect(true, 'to be false');\r\n});\r\n``` \r\n\r\nIf a user by accident forgets to import unexpected, they will not immediately notice, as the builtin expect in jest will ignore any further arguments passed to it. Which will result in a passing test instead of the failure you would expect.\r\n\r\nThis PR adds a check to the expect method, so that it will throw an error if it is called with more than one argument.\r\n\r\n@Munter already discussed a solution to this with @cpojer. The solution I implemented here is a bit different. Instead of using a check on `arguments.length` I opted to use `...rest` and check that it has a length of 0. The expect method was implemented as an arrow function, and arrow functions do not expose `arguments`, so it was either refactoring it into a normal function or using the `...rest` alternative. From my humble benchmarking I didn't observe any significant difference, so I opted for the least invasive change, that also happens to be following the [Code Conventions](https://github.com/facebook/jest/blob/master/CONTRIBUTING.md#code-conventions) the closest - prefering es6 syntax where possible.\r\n\r\nTo further enhance the check one could add a check for the case of expect being called with no arguments. It's less likely to cause users to shoot themselves in the feet, so I left it out.\r\n\r\n**Test plan**\r\n\r\nThe test implemented covers the case that the check is implementing.\r\n\r\nAll tests in the project is passing. I ran `yarn test` in the root of the repo to verify that the change had no unintended side effects.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/4237/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/4237/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"572f1a2f27c2804804f3d8635e851f7dd35b9aea","filename":"packages/jest-matchers/src/__tests__/matchers.test.js","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/d0836193f89b5e4c864d48bc8cc73d1bfc3c9d13/packages%2Fjest-matchers%2Fsrc%2F__tests__%2Fmatchers.test.js","raw_url":"https://github.com/facebook/jest/raw/d0836193f89b5e4c864d48bc8cc73d1bfc3c9d13/packages%2Fjest-matchers%2Fsrc%2F__tests__%2Fmatchers.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matchers%2Fsrc%2F__tests__%2Fmatchers.test.js?ref=d0836193f89b5e4c864d48bc8cc73d1bfc3c9d13","patch":"@@ -11,6 +11,12 @@\n const {stringify} = require('jest-matcher-utils');\n const jestExpect = require('../');\n \n+it('should throw if passed two arguments', () => {\n+  expect(() => jestExpect('foo', 'bar')).toThrow(\n+    new Error('Expect takes at most one argument.'),\n+  );\n+});\n+\n describe('.rejects', () => {\n   it('should reject', async () => {\n     await jestExpect(Promise.reject(4)).rejects.toBe(4);"},{"sha":"9e94a316f47a578aa377ffb92f4b89b02eb091e3","filename":"packages/jest-matchers/src/index.js","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/d0836193f89b5e4c864d48bc8cc73d1bfc3c9d13/packages%2Fjest-matchers%2Fsrc%2Findex.js","raw_url":"https://github.com/facebook/jest/raw/d0836193f89b5e4c864d48bc8cc73d1bfc3c9d13/packages%2Fjest-matchers%2Fsrc%2Findex.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-matchers%2Fsrc%2Findex.js?ref=d0836193f89b5e4c864d48bc8cc73d1bfc3c9d13","patch":"@@ -52,7 +52,11 @@ const isPromise = obj => {\n   );\n };\n \n-const expect = (actual: any): ExpectationObject => {\n+const expect = (actual: any, ...rest): ExpectationObject => {\n+  if (rest.length !== 0) {\n+    throw new Error('Expect takes at most one argument.');\n+  }\n+\n   const allMatchers = getMatchers();\n   const expectation = {\n     not: {},"}]},{"url":"https://api.github.com/repos/facebook/jest/issues/9351","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/9351/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/9351/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/9351/events","html_url":"https://github.com/facebook/jest/pull/9351","id":542620140,"node_id":"MDExOlB1bGxSZXF1ZXN0MzU3MDIzOTAz","number":9351,"title":"feat(jest-haste-map): Enable crawling for symlink test files","user":{"login":"mrmeku","id":8085051,"node_id":"MDQ6VXNlcjgwODUwNTE=","avatar_url":"https://avatars.githubusercontent.com/u/8085051?v=4","gravatar_id":"","url":"https://api.github.com/users/mrmeku","html_url":"https://github.com/mrmeku","followers_url":"https://api.github.com/users/mrmeku/followers","following_url":"https://api.github.com/users/mrmeku/following{/other_user}","gists_url":"https://api.github.com/users/mrmeku/gists{/gist_id}","starred_url":"https://api.github.com/users/mrmeku/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrmeku/subscriptions","organizations_url":"https://api.github.com/users/mrmeku/orgs","repos_url":"https://api.github.com/users/mrmeku/repos","events_url":"https://api.github.com/users/mrmeku/events{/privacy}","received_events_url":"https://api.github.com/users/mrmeku/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/facebook/jest/milestones/12","html_url":"https://github.com/facebook/jest/milestone/12","labels_url":"https://api.github.com/repos/facebook/jest/milestones/12/labels","id":5375234,"node_id":"MDk6TWlsZXN0b25lNTM3NTIzNA==","number":12,"title":"Jest 27","description":null,"creator":{"login":"jeysal","id":16069751,"node_id":"MDQ6VXNlcjE2MDY5NzUx","avatar_url":"https://avatars.githubusercontent.com/u/16069751?v=4","gravatar_id":"","url":"https://api.github.com/users/jeysal","html_url":"https://github.com/jeysal","followers_url":"https://api.github.com/users/jeysal/followers","following_url":"https://api.github.com/users/jeysal/following{/other_user}","gists_url":"https://api.github.com/users/jeysal/gists{/gist_id}","starred_url":"https://api.github.com/users/jeysal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeysal/subscriptions","organizations_url":"https://api.github.com/users/jeysal/orgs","repos_url":"https://api.github.com/users/jeysal/repos","events_url":"https://api.github.com/users/jeysal/events{/privacy}","received_events_url":"https://api.github.com/users/jeysal/received_events","type":"User","site_admin":false},"open_issues":0,"closed_issues":61,"state":"closed","created_at":"2020-05-02T19:43:47Z","updated_at":"2021-05-25T11:03:50Z","due_on":null,"closed_at":"2021-05-25T11:03:50Z"},"comments":50,"created_at":"2019-12-26T17:51:04Z","updated_at":"2021-05-10T21:06:37Z","closed_at":"2021-04-02T12:42:31Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/9351","html_url":"https://github.com/facebook/jest/pull/9351","diff_url":"https://github.com/facebook/jest/pull/9351.diff","patch_url":"https://github.com/facebook/jest/pull/9351.patch","merged_at":"2021-04-02T12:42:31Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md in the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\nJest haste maps test file crawler (see packages/jest-haste-map/src/crawlers/node.ts) uses the unix find command by default to find files whose name matches the testMatch pattern defined in jest.config.js. This works great for most cases, but works poorly when executing jest under bazel.\r\n\r\nIn bazel's execution environment, all source/test files are symlinked into a sandboxed directory rather than copied over directly. Jest's crawler is currently set up to use find's type flag to filter only for files. This excludes symlinked files\r\n\r\nUnder bazel I would expect my symlinked test files to be able to be crawled. This merely involves tweaking the command line args to find to include both files and symlinks `--type f` ---> `(--type f -o --type=l)`\r\n\r\n## Test plan\r\n\r\nI have already tested my fix against multiple bazel environments to verify that the fix enables jest to work properly for that test runner. The only risk of this change is that my adding support for crawling symlinks hampers performance of file crawling. If that is the case this behavior might be better off to be enabled behind a flag. But I do not suspect that there will be a performance hit. If reviewers have a mechanism for running jest bench marks I'm happy to create a repo filled with both files and symlinks and benchmarking the change. \r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/9351/reactions","total_count":18,"+1":18,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/9351/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"2220d15ea6b17af323cdce43e1b78d0a82847782","filename":"CHANGELOG.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/CHANGELOG.md","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/CHANGELOG.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/CHANGELOG.md?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -18,6 +18,7 @@\n - `[jest-environment-node]` Add AbortController to globals ([#11182](https://github.com/facebook/jest/pull/11182))\n - `[@jest/fake-timers]` Update to `@sinonjs/fake-timers` to v7 ([#11198](https://github.com/facebook/jest/pull/11198))\n - `[jest-haste-map]` Handle injected scm clocks ([#10966](https://github.com/facebook/jest/pull/10966))\n+- `[jest-haste-map]` Add `enableSymlinks` configuration option to follow symlinks for test files ([#9351](https://github.com/facebook/jest/pull/9351))\n - `[jest-repl, jest-runner]` [**BREAKING**] Run transforms over environment ([#8751](https://github.com/facebook/jest/pull/8751))\n - `[jest-runner]` [**BREAKING**] set exit code to 1 if test logs after teardown ([#10728](https://github.com/facebook/jest/pull/10728))\n - `[jest-runner]` [**BREAKING**] Run transforms over `runnner` ([#8823](https://github.com/facebook/jest/pull/8823))"},{"sha":"bfafee8d67ffe25e4ab44223a4d2d4986c1186d0","filename":"docs/Configuration.md","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/docs%2FConfiguration.md","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/docs%2FConfiguration.md","contents_url":"https://api.github.com/repos/facebook/jest/contents/docs%2FConfiguration.md?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -491,15 +491,21 @@ This will be used to configure the behavior of `jest-haste-map`, Jest's internal\n \n ```ts\n type HasteConfig = {\n-  // Whether to hash files using SHA-1.\n+  /** Whether to hash files using SHA-1. */\n   computeSha1?: boolean;\n-  // The platform to use as the default, e.g. 'ios'.\n+  /** The platform to use as the default, e.g. 'ios'. */\n   defaultPlatform?: string | null;\n-  // Path to a custom implementation of Haste.\n+  /**\n+   * Whether to follow symlinks when crawling for files.\n+   *   This options cannot be used in projects which use watchman.\n+   *   Projects with `watchman` set to true will error if this option is set to true.\n+   */\n+  enableSymlinks?: boolean;\n+  /** Path to a custom implementation of Haste. */\n   hasteImplModulePath?: string;\n-  // All platforms to target, e.g ['ios', 'android'].\n+  /** All platforms to target, e.g ['ios', 'android']. */\n   platforms?: Array<string>;\n-  // Whether to throw on error on module collision.\n+  /** Whether to throw on error on module collision. */\n   throwOnModuleCollision?: boolean;\n };\n ```"},{"sha":"f09fe7f39001d7ce58a0ae524c2424822d8539f5","filename":"e2e/__tests__/crawlSymlinks.test.ts","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/e2e%2F__tests__%2FcrawlSymlinks.test.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/e2e%2F__tests__%2FcrawlSymlinks.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/e2e%2F__tests__%2FcrawlSymlinks.test.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n+ *\n+ * This source code is licensed under the MIT license found in the\n+ * LICENSE file in the root directory of this source tree.\n+ */\n+import {tmpdir} from 'os';\n+import * as path from 'path';\n+import {wrap} from 'jest-snapshot-serializer-raw';\n+import {cleanup, writeFiles, writeSymlinks} from '../Utils';\n+import runJest from '../runJest';\n+\n+const DIR = path.resolve(tmpdir(), 'crawl-symlinks-test');\n+\n+beforeEach(() => {\n+  cleanup(DIR);\n+\n+  writeFiles(DIR, {\n+    'package.json': JSON.stringify({\n+      jest: {\n+        testMatch: ['<rootDir>/test-files/test.js'],\n+      },\n+    }),\n+    'symlinked-files/test.js': `\n+      test('1+1', () => {\n+        expect(1).toBe(1);\n+      });\n+    `,\n+  });\n+\n+  writeSymlinks(DIR, {\n+    'symlinked-files/test.js': 'test-files/test.js',\n+  });\n+});\n+\n+afterEach(() => {\n+  cleanup(DIR);\n+});\n+\n+test('Node crawler picks up symlinked files when option is set as flag', () => {\n+  // Symlinks are only enabled on windows with developer mode.\n+  // https://blogs.windows.com/windowsdeveloper/2016/12/02/symlinks-windows-10/\n+  if (process.platform === 'win32') {\n+    return;\n+  }\n+\n+  const {stdout, stderr, exitCode} = runJest(DIR, [\n+    '--haste={\"enableSymlinks\": true}',\n+    '--no-watchman',\n+  ]);\n+\n+  expect(stdout).toEqual('');\n+  expect(stderr).toContain('Test Suites: 1 passed, 1 total');\n+  expect(exitCode).toEqual(0);\n+});\n+\n+test('Node crawler does not pick up symlinked files by default', () => {\n+  const {stdout, stderr, exitCode} = runJest(DIR, ['--no-watchman']);\n+  expect(stdout).toContain('No tests found, exiting with code 1');\n+  expect(stderr).toEqual('');\n+  expect(exitCode).toEqual(1);\n+});\n+\n+test('Should throw if watchman used with haste.enableSymlinks', () => {\n+  // it should throw both if watchman is explicitly provided and not\n+  const run1 = runJest(DIR, ['--haste={\"enableSymlinks\": true}']);\n+  const run2 = runJest(DIR, ['--haste={\"enableSymlinks\": true}', '--watchman']);\n+\n+  expect(run1.exitCode).toEqual(run2.exitCode);\n+  expect(run1.stderr).toEqual(run2.stderr);\n+  expect(run1.stdout).toEqual(run2.stdout);\n+\n+  const {exitCode, stderr, stdout} = run1;\n+\n+  expect(stdout).toEqual('');\n+  expect(wrap(stderr)).toMatchInlineSnapshot(`\n+    Validation Error:\n+\n+    haste.enableSymlinks is incompatible with watchman\n+\n+    Either set haste.enableSymlinks to false or do not use watchman\n+  `);\n+  expect(exitCode).toEqual(1);\n+});"},{"sha":"515526e0ff8c5756c9c01b34c6e9b6ee5493bfee","filename":"packages/jest-config/src/ValidConfig.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2FValidConfig.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2FValidConfig.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2FValidConfig.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -55,6 +55,7 @@ const initialOptions: Config.InitialOptions = {\n   haste: {\n     computeSha1: true,\n     defaultPlatform: 'ios',\n+    enableSymlinks: false,\n     hasteImplModulePath: '<rootDir>/haste_impl.js',\n     platforms: ['ios', 'android'],\n     throwOnModuleCollision: false,"},{"sha":"1000d1e10c14fbb8b8357ae749fe16200c103210","filename":"packages/jest-config/src/__tests__/normalize.test.ts","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2F__tests__%2Fnormalize.test.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2F__tests__%2Fnormalize.test.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2F__tests__%2Fnormalize.test.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -1842,3 +1842,26 @@ describe('extensionsToTreatAsEsm', () => {\n     );\n   });\n });\n+\n+describe('haste.enableSymlinks', () => {\n+  it('should throw if watchman is not disabled', async () => {\n+    await expect(\n+      normalize({haste: {enableSymlinks: true}, rootDir: '/root/'}, {}),\n+    ).rejects.toThrow('haste.enableSymlinks is incompatible with watchman');\n+\n+    await expect(\n+      normalize(\n+        {haste: {enableSymlinks: true}, rootDir: '/root/', watchman: true},\n+        {},\n+      ),\n+    ).rejects.toThrow('haste.enableSymlinks is incompatible with watchman');\n+\n+    const {options} = await normalize(\n+      {haste: {enableSymlinks: true}, rootDir: '/root/', watchman: false},\n+      {},\n+    );\n+\n+    expect(options.haste.enableSymlinks).toBe(true);\n+    expect(options.watchman).toBe(false);\n+  });\n+});"},{"sha":"2e561d181aeecaa7b660df00384ce87707790174","filename":"packages/jest-config/src/normalize.ts","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2Fnormalize.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-config%2Fsrc%2Fnormalize.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-config%2Fsrc%2Fnormalize.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -648,6 +648,10 @@ export default async function normalize(\n \n   validateExtensionsToTreatAsEsm(options.extensionsToTreatAsEsm);\n \n+  if (options.watchman == null) {\n+    options.watchman = DEFAULT_CONFIG.watchman;\n+  }\n+\n   const optionKeys = Object.keys(options) as Array<keyof Config.InitialOptions>;\n \n   optionKeys.reduce((newOptions, key: keyof Config.InitialOptions) => {\n@@ -1023,6 +1027,14 @@ export default async function normalize(\n     return newOptions;\n   }, newOptions);\n \n+  if (options.watchman && options.haste?.enableSymlinks) {\n+    throw new ValidationError(\n+      'Validation Error',\n+      'haste.enableSymlinks is incompatible with watchman',\n+      'Either set haste.enableSymlinks to false or do not use watchman',\n+    );\n+  }\n+\n   newOptions.roots.forEach((root, i) => {\n     verifyDirectoryExists(root, `roots[${i}]`);\n   });"},{"sha":"d400e73cbe686a0b177a8f444c011e474ec3eb05","filename":"packages/jest-haste-map/src/__tests__/index.test.js","status":"modified","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2F__tests__%2Findex.test.js?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -84,6 +84,19 @@ let mockChangedFiles;\n let mockFs;\n \n jest.mock('graceful-fs', () => ({\n+  existsSync: jest.fn(path => {\n+    // A file change can be triggered by writing into the\n+    // mockChangedFiles object.\n+    if (mockChangedFiles && path in mockChangedFiles) {\n+      return true;\n+    }\n+\n+    if (mockFs[path]) {\n+      return true;\n+    }\n+\n+    return false;\n+  }),\n   readFileSync: jest.fn((path, options) => {\n     // A file change can be triggered by writing into the\n     // mockChangedFiles object.\n@@ -494,6 +507,42 @@ describe('HasteMap', () => {\n     expect(useBuitinsInContext(hasteMap.read())).toEqual(data);\n   });\n \n+  it('throws if both symlinks and watchman is enabled', () => {\n+    expect(\n+      () => new HasteMap({...defaultConfig, enableSymlinks: true}),\n+    ).toThrow(\n+      'Set either `enableSymlinks` to false or `useWatchman` to false.',\n+    );\n+    expect(\n+      () =>\n+        new HasteMap({\n+          ...defaultConfig,\n+          enableSymlinks: true,\n+          useWatchman: true,\n+        }),\n+    ).toThrow(\n+      'Set either `enableSymlinks` to false or `useWatchman` to false.',\n+    );\n+\n+    expect(\n+      () =>\n+        new HasteMap({\n+          ...defaultConfig,\n+          enableSymlinks: false,\n+          useWatchman: true,\n+        }),\n+    ).not.toThrow();\n+\n+    expect(\n+      () =>\n+        new HasteMap({\n+          ...defaultConfig,\n+          enableSymlinks: true,\n+          useWatchman: false,\n+        }),\n+    ).not.toThrow();\n+  });\n+\n   describe('builds a haste map on a fresh cache with SHA-1s', () => {\n     it.each([false, true])('uses watchman: %s', async useWatchman => {\n       const node = require('../crawlers/node');"},{"sha":"075498c4702ad8ccc54d34fe8f91f80ed10953c6","filename":"packages/jest-haste-map/src/crawlers/node.ts","status":"modified","additions":16,"deletions":5,"changes":21,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Fcrawlers%2Fnode.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -60,6 +60,7 @@ function find(\n   roots: Array<string>,\n   extensions: Array<string>,\n   ignore: IgnoreMatcher,\n+  enableSymlinks: boolean,\n   callback: Callback,\n ): void {\n   const result: Result = [];\n@@ -98,7 +99,9 @@ function find(\n \n         activeCalls++;\n \n-        fs.lstat(file, (err, stat) => {\n+        const stat = enableSymlinks ? fs.stat : fs.lstat;\n+\n+        stat(file, (err, stat) => {\n           activeCalls--;\n \n           // This logic is unnecessary for node > v10.10, but leaving it in\n@@ -137,10 +140,16 @@ function findNative(\n   roots: Array<string>,\n   extensions: Array<string>,\n   ignore: IgnoreMatcher,\n+  enableSymlinks: boolean,\n   callback: Callback,\n ): void {\n   const args = Array.from(roots);\n-  args.push('-type', 'f');\n+  if (enableSymlinks) {\n+    args.push('(', '-type', 'f', '-o', '-type', 'l', ')');\n+  } else {\n+    args.push('-type', 'f');\n+  }\n+\n   if (extensions.length) {\n     args.push('(');\n   }\n@@ -177,7 +186,8 @@ function findNative(\n     } else {\n       lines.forEach(path => {\n         fs.stat(path, (err, stat) => {\n-          if (!err && stat) {\n+          // Filter out symlinks that describe directories\n+          if (!err && stat && !stat.isDirectory()) {\n             result.push([path, stat.mtime.getTime(), stat.size]);\n           }\n           if (--count === 0) {\n@@ -201,6 +211,7 @@ export = async function nodeCrawl(\n     forceNodeFilesystemAPI,\n     ignore,\n     rootDir,\n+    enableSymlinks,\n     roots,\n   } = options;\n \n@@ -231,9 +242,9 @@ export = async function nodeCrawl(\n     };\n \n     if (useNativeFind) {\n-      findNative(roots, extensions, ignore, callback);\n+      findNative(roots, extensions, ignore, enableSymlinks, callback);\n     } else {\n-      find(roots, extensions, ignore, callback);\n+      find(roots, extensions, ignore, enableSymlinks, callback);\n     }\n   });\n };"},{"sha":"5969c12df4847b7a011ed6778e2642225ac5293e","filename":"packages/jest-haste-map/src/index.ts","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Findex.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -56,6 +56,7 @@ type Options = {\n   computeSha1?: boolean;\n   console?: Console;\n   dependencyExtractor?: string | null;\n+  enableSymlinks?: boolean;\n   extensions: Array<string>;\n   forceNodeFilesystemAPI?: boolean;\n   hasteImplModulePath?: string;\n@@ -79,6 +80,7 @@ type InternalOptions = {\n   computeDependencies: boolean;\n   computeSha1: boolean;\n   dependencyExtractor: string | null;\n+  enableSymlinks: boolean;\n   extensions: Array<string>;\n   forceNodeFilesystemAPI: boolean;\n   hasteImplModulePath?: string;\n@@ -227,6 +229,7 @@ export default class HasteMap extends EventEmitter {\n           : options.computeDependencies,\n       computeSha1: options.computeSha1 || false,\n       dependencyExtractor: options.dependencyExtractor || null,\n+      enableSymlinks: options.enableSymlinks || false,\n       extensions: options.extensions,\n       forceNodeFilesystemAPI: !!options.forceNodeFilesystemAPI,\n       hasteImplModulePath: options.hasteImplModulePath,\n@@ -262,6 +265,14 @@ export default class HasteMap extends EventEmitter {\n       this._options.ignorePattern = new RegExp(VCS_DIRECTORIES);\n     }\n \n+    if (this._options.enableSymlinks && this._options.useWatchman) {\n+      throw new Error(\n+        'jest-haste-map: enableSymlinks config option was set, but ' +\n+          'is incompatible with watchman.\\n' +\n+          'Set either `enableSymlinks` to false or `useWatchman` to false.',\n+      );\n+    }\n+\n     const rootDirHash = createHash('md5').update(options.rootDir).digest('hex');\n     let hasteImplHash = '';\n     let dependencyExtractorHash = '';\n@@ -725,6 +736,7 @@ export default class HasteMap extends EventEmitter {\n     const crawlerOptions: CrawlerOptions = {\n       computeSha1: options.computeSha1,\n       data: hasteMap,\n+      enableSymlinks: options.enableSymlinks,\n       extensions: options.extensions,\n       forceNodeFilesystemAPI: options.forceNodeFilesystemAPI,\n       ignore,"},{"sha":"106f209d9c68f1e6ef81721b941272ecdaefb333","filename":"packages/jest-haste-map/src/types.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Ftypes.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-haste-map%2Fsrc%2Ftypes.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-haste-map%2Fsrc%2Ftypes.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -30,6 +30,7 @@ export type WorkerMetadata = {\n \n export type CrawlerOptions = {\n   computeSha1: boolean;\n+  enableSymlinks: boolean;\n   data: InternalHasteMap;\n   extensions: Array<string>;\n   forceNodeFilesystemAPI: boolean;"},{"sha":"96b7e27febc7ecf147688b63fb1e3a6eae5a87b1","filename":"packages/jest-runtime/src/index.ts","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-runtime%2Fsrc%2Findex.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-runtime%2Fsrc%2Findex.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-runtime%2Fsrc%2Findex.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -319,6 +319,7 @@ export default class Runtime {\n       computeSha1: config.haste.computeSha1,\n       console: options && options.console,\n       dependencyExtractor: config.dependencyExtractor,\n+      enableSymlinks: config.haste.enableSymlinks,\n       extensions: [Snapshot.EXTENSION].concat(config.moduleFileExtensions),\n       hasteImplModulePath: config.haste.hasteImplModulePath,\n       ignorePattern,"},{"sha":"f620a3a081ce24b9f3e39747ebd40573c1563459","filename":"packages/jest-types/src/Config.ts","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/facebook/jest/blob/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-types%2Fsrc%2FConfig.ts","raw_url":"https://github.com/facebook/jest/raw/88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2/packages%2Fjest-types%2Fsrc%2FConfig.ts","contents_url":"https://api.github.com/repos/facebook/jest/contents/packages%2Fjest-types%2Fsrc%2FConfig.ts?ref=88cfea0062f7d6ea26171a5ad26259ce1c3fd3d2","patch":"@@ -22,6 +22,12 @@ export type HasteConfig = {\n   computeSha1?: boolean;\n   /** The platform to use as the default, e.g. 'ios'. */\n   defaultPlatform?: string | null;\n+  /**\n+   * Whether to follow symlinks when crawling for files.\n+   *   This options cannot be used in projects which use watchman.\n+   *   Projects with `watchman` set to true will error if this option is set to true.\n+   */\n+  enableSymlinks?: boolean;\n   /** Path to a custom implementation of Haste. */\n   hasteImplModulePath?: string;\n   /** All platforms to target, e.g ['ios', 'android']. */"}]}]