[{"url":"https://api.github.com/repos/eslint/eslint/issues/16533","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/16533/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/16533/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/16533/events","html_url":"https://github.com/eslint/eslint/pull/16533","id":1444613261,"node_id":"PR_kwDOAKjKDc5CqKRi","number":16533,"title":"fix: throw error for first unmatched pattern","user":{"login":"mdjermanovic","id":44349756,"node_id":"MDQ6VXNlcjQ0MzQ5NzU2","avatar_url":"https://avatars.githubusercontent.com/u/44349756?v=4","gravatar_id":"","url":"https://api.github.com/users/mdjermanovic","html_url":"https://github.com/mdjermanovic","followers_url":"https://api.github.com/users/mdjermanovic/followers","following_url":"https://api.github.com/users/mdjermanovic/following{/other_user}","gists_url":"https://api.github.com/users/mdjermanovic/gists{/gist_id}","starred_url":"https://api.github.com/users/mdjermanovic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdjermanovic/subscriptions","organizations_url":"https://api.github.com/users/mdjermanovic/orgs","repos_url":"https://api.github.com/users/mdjermanovic/repos","events_url":"https://api.github.com/users/mdjermanovic/events{/privacy}","received_events_url":"https://api.github.com/users/mdjermanovic/received_events","type":"User","site_admin":false},"labels":[{"id":45711350,"node_id":"MDU6TGFiZWw0NTcxMTM1MA==","url":"https://api.github.com/repos/eslint/eslint/labels/bug","name":"bug","color":"fc2929","default":true,"description":"ESLint is working incorrectly"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-11-10T21:50:45Z","updated_at":"2022-11-14T19:20:18Z","closed_at":"2022-11-14T19:20:17Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/16533","html_url":"https://github.com/eslint/eslint/pull/16533","diff_url":"https://github.com/eslint/eslint/pull/16533.diff","patch_url":"https://github.com/eslint/eslint/pull/16533.patch","merged_at":"2022-11-14T19:20:17Z"},"body":"<!--\r\n    Thank you for contributing!\r\n\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://eslint.org/conduct).\r\n-->\r\n\r\n#### Prerequisites checklist\r\n\r\n- [x] I have read the [contributing guidelines](https://github.com/eslint/eslint/blob/HEAD/CONTRIBUTING.md).\r\n\r\n#### What is the purpose of this pull request? (put an \"X\" next to an item)\r\n\r\n<!--\r\n    The following template is intentionally not a markdown checkbox list for the reasons\r\n    explained in https://github.com/eslint/eslint/pull/12848#issuecomment-580302888\r\n-->\r\n\r\n[ ] Documentation update\r\n[x] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/HEAD/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/HEAD/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/HEAD/templates/rule-change-proposal.md))\r\n[ ] Add autofix to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[ ] Other, please explain:\r\n\r\nAddresses https://github.com/eslint/eslint/pull/16462#pullrequestreview-1168561292.\r\n\r\nWhen there are multiple unmatched patterns, both ESLint and FlatESLint throw an error containing information about only one pattern. The error can be either that the pattern doesn't match any files or that it matches only ignored files.\r\n\r\nThe difference is that ESLint always throws an error for the very first unmatched pattern, while FlatESLint first checks if there are patterns that match ignored files.\r\n\r\nTo reproduce, run `eslint \"doesnotexist/*.js\" \"tests/fixtures/*.js\"`.\r\n\r\nESLint:\r\n\r\n```\r\nOops! Something went wrong! :(\r\n\r\nESLint: 8.27.0\r\n\r\nNo files matching the pattern \"doesnotexist/*.js\" were found.\r\nPlease check for typing mistakes in the pattern.\r\n```\r\n\r\nFlatESLint:\r\n\r\n```\r\nOops! Something went wrong! :(\r\n\r\nESLint: 8.27.0\r\n\r\nYou are linting \"tests/fixtures/*.js\", but all of the files matching the glob pattern \"tests/fixtures/*.js\" are ignored.\r\n\r\nIf you don't want to lint these files, remove the pattern \"tests/fixtures/*.js\" from the list of arguments passed to ESLint.\r\n\r\nIf you do want to lint these files, try the following solutions:\r\n\r\n* Check your .eslintignore file, or the eslintIgnore property in package.json, to ensure that the files are not configured to be ignored.\r\n* Explicitly list the files from this glob that you'd like to lint on the command-line, rather than providing a glob as an argument.\r\n```\r\n\r\nIt's an error either way, but I think ESLint behavior is preferable as it would be surprising for users that after fixing or removing the reported pattern, eslint in the next run reports an error for a preceding pattern. Checking only the first pattern also simplifies the code a bit, and is better for performance in this, albeit exceptional, scenario.\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n#### What changes did you make? (Give an overview)\r\n\r\nI changed the code in `eslint-helpers` to always check only the first unmatched pattern.\r\n\r\n#### Is there anything you'd like reviewers to focus on?\r\n\r\n<!-- markdownlint-disable-file MD004 -->\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/16533/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/16533/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"bf91700ba358b2b9ce0d37cce2d1eda0af37d30c","filename":"lib/eslint/eslint-helpers.js","status":"modified","additions":23,"deletions":29,"changes":52,"blob_url":"https://github.com/eslint/eslint/blob/496bf062f8f75eeb077253917cc0572000f3f31a/lib%2Feslint%2Feslint-helpers.js","raw_url":"https://github.com/eslint/eslint/raw/496bf062f8f75eeb077253917cc0572000f3f31a/lib%2Feslint%2Feslint-helpers.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Feslint%2Feslint-helpers.js?ref=496bf062f8f75eeb077253917cc0572000f3f31a","patch":"@@ -76,7 +76,7 @@ class UnmatchedSearchPatternsError extends Error {\n     constructor({ basePath, unmatchedPatterns, patterns, rawPatterns }) {\n         super(`No files matching '${rawPatterns}' in '${basePath}' were found.`);\n         this.basePath = basePath;\n-        this.patternsToCheck = unmatchedPatterns;\n+        this.unmatchedPatterns = unmatchedPatterns;\n         this.patterns = patterns;\n         this.rawPatterns = rawPatterns;\n     }\n@@ -337,49 +337,43 @@ async function globSearch({\n }\n \n /**\n- * Checks to see if there are any ignored results for a given search. This\n- * happens either when there are unmatched patterns during a search or if\n- * a search returns no results.\n+ * Throws an error for unmatched patterns. The error will only contain information about the first one.\n+ * Checks to see if there are any ignored results for a given search.\n  * @param {Object} options The options for this function.\n  * @param {string} options.basePath The directory to search.\n  * @param {Array<string>} options.patterns An array of glob patterns\n  *      that were used in the original search.\n  * @param {Array<string>} options.rawPatterns An array of glob patterns\n  *      as the user inputted them. Used for errors.\n- * @param {Array<string>} options.patternsToCheck An array of glob patterns\n- *      to use for this check.\n- * @returns {void}\n- * @throws {NoFilesFoundError} If there is a pattern that doesn't match\n- *      any files and `errorOnUnmatchedPattern` is true.\n- * @throws {AllFilesIgnoredError} If there is a pattern that matches files\n- *      when there are no ignores.\n+ * @param {Array<string>} options.unmatchedPatterns A non-empty array of glob patterns\n+ *      that were unmatched in the original search.\n+ * @returns {void} Always throws an error.\n+ * @throws {NoFilesFoundError} If the first unmatched pattern\n+ *      doesn't match any files even when there are no ignores.\n+ * @throws {AllFilesIgnoredError} If the first unmatched pattern\n+ *      matches some files when there are no ignores.\n  */\n-async function checkForIgnoredResults({\n+async function throwErrorForUnmatchedPatterns({\n     basePath,\n     patterns,\n     rawPatterns,\n-    patternsToCheck = patterns\n+    unmatchedPatterns\n }) {\n \n-    for (const pattern of patternsToCheck) {\n+    const pattern = unmatchedPatterns[0];\n+    const rawPattern = rawPatterns[patterns.indexOf(pattern)];\n \n-        const patternHasMatch = await globMatch({\n-            basePath,\n-            pattern\n-        });\n+    const patternHasMatch = await globMatch({\n+        basePath,\n+        pattern\n+    });\n \n-        if (patternHasMatch) {\n-            throw new AllFilesIgnoredError(\n-                rawPatterns[patterns.indexOf(pattern)]\n-            );\n-        }\n+    if (patternHasMatch) {\n+        throw new AllFilesIgnoredError(rawPattern);\n     }\n \n     // if we get here there are truly no matches\n-    throw new NoFilesFoundError(\n-        rawPatterns[patterns.indexOf(patternsToCheck[0])],\n-        true\n-    );\n+    throw new NoFilesFoundError(rawPattern, true);\n }\n \n /**\n@@ -446,9 +440,9 @@ async function globMultiSearch({ searches, configs, errorOnUnmatchedPattern }) {\n \n         if (errorOnUnmatchedPattern) {\n \n-            await checkForIgnoredResults({\n+            await throwErrorForUnmatchedPatterns({\n                 ...currentSearch,\n-                patternsToCheck: error.patternsToCheck\n+                unmatchedPatterns: error.unmatchedPatterns\n             });\n \n         }"},{"sha":"c9b1bb82d9d8b8667ae7b7ba69c8ae2cddf4c440","filename":"tests/lib/eslint/flat-eslint.js","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/eslint/eslint/blob/496bf062f8f75eeb077253917cc0572000f3f31a/tests%2Flib%2Feslint%2Fflat-eslint.js","raw_url":"https://github.com/eslint/eslint/raw/496bf062f8f75eeb077253917cc0572000f3f31a/tests%2Flib%2Feslint%2Fflat-eslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Feslint%2Fflat-eslint.js?ref=496bf062f8f75eeb077253917cc0572000f3f31a","patch":"@@ -848,6 +848,31 @@ describe(\"FlatESLint\", () => {\n                 }, /All files matched by 'subdir2\\/\\*\\.js' are ignored/u);\n             });\n \n+            it(\"should always throw an error for the first unmatched file pattern\", async () => {\n+                eslint = new FlatESLint({\n+                    cwd: getFixturePath(\"example-app2\"),\n+                    overrideConfig: {\n+                        ignores: [\"subdir1/*.js\", \"subdir2/*.js\"]\n+                    }\n+                });\n+\n+                await assert.rejects(async () => {\n+                    await eslint.lintFiles([\"doesnotexist1/*.js\", \"doesnotexist2/*.js\"]);\n+                }, /No files matching 'doesnotexist1\\/\\*\\.js' were found/u);\n+\n+                await assert.rejects(async () => {\n+                    await eslint.lintFiles([\"doesnotexist1/*.js\", \"subdir1/*.js\"]);\n+                }, /No files matching 'doesnotexist1\\/\\*\\.js' were found/u);\n+\n+                await assert.rejects(async () => {\n+                    await eslint.lintFiles([\"subdir1/*.js\", \"doesnotexist1/*.js\"]);\n+                }, /All files matched by 'subdir1\\/\\*\\.js' are ignored/u);\n+\n+                await assert.rejects(async () => {\n+                    await eslint.lintFiles([\"subdir1/*.js\", \"subdir2/*.js\"]);\n+                }, /All files matched by 'subdir1\\/\\*\\.js' are ignored/u);\n+            });\n+\n             it(\"should not throw an error for an ignored file pattern when errorOnUnmatchedPattern is false\", async () => {\n                 eslint = new FlatESLint({\n                     cwd: getFixturePath(\"example-app2\"),"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/15606","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/15606/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/15606/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/15606/events","html_url":"https://github.com/eslint/eslint/pull/15606","id":1137594195,"node_id":"PR_kwDOAKjKDc4yzSJc","number":15606,"title":"perf: fix lazy loading of core rules","user":{"login":"mdjermanovic","id":44349756,"node_id":"MDQ6VXNlcjQ0MzQ5NzU2","avatar_url":"https://avatars.githubusercontent.com/u/44349756?v=4","gravatar_id":"","url":"https://api.github.com/users/mdjermanovic","html_url":"https://github.com/mdjermanovic","followers_url":"https://api.github.com/users/mdjermanovic/followers","following_url":"https://api.github.com/users/mdjermanovic/following{/other_user}","gists_url":"https://api.github.com/users/mdjermanovic/gists{/gist_id}","starred_url":"https://api.github.com/users/mdjermanovic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdjermanovic/subscriptions","organizations_url":"https://api.github.com/users/mdjermanovic/orgs","repos_url":"https://api.github.com/users/mdjermanovic/repos","events_url":"https://api.github.com/users/mdjermanovic/events{/privacy}","received_events_url":"https://api.github.com/users/mdjermanovic/received_events","type":"User","site_admin":false},"labels":[{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":255319420,"node_id":"MDU6TGFiZWwyNTUzMTk0MjA=","url":"https://api.github.com/repos/eslint/eslint/labels/evaluating","name":"evaluating","color":"fef2c0","default":false,"description":"The team will evaluate this issue to decide whether it meets the criteria for inclusion"},{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2022-02-14T17:07:44Z","updated_at":"2022-08-17T00:57:39Z","closed_at":"2022-02-17T01:08:41Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/15606","html_url":"https://github.com/eslint/eslint/pull/15606","diff_url":"https://github.com/eslint/eslint/pull/15606.diff","patch_url":"https://github.com/eslint/eslint/pull/15606.patch","merged_at":"2022-02-17T01:08:41Z"},"body":"<!--\r\n    Thank you for contributing!\r\n\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://eslint.org/conduct).\r\n-->\r\n\r\n#### Prerequisites checklist\r\n\r\n- [x] I have read the [contributing guidelines](https://github.com/eslint/eslint/blob/HEAD/CONTRIBUTING.md).\r\n\r\n#### What is the purpose of this pull request? (put an \"X\" next to an item)\r\n\r\n<!--\r\n    The following template is intentionally not a markdown checkbox list for the reasons\r\n    explained in https://github.com/eslint/eslint/pull/12848#issuecomment-580302888\r\n-->\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/HEAD/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/HEAD/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/HEAD/templates/rule-change-proposal.md))\r\n[ ] Add autofix to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[x] Other, please explain:\r\n\r\nPerformance improvement.\r\n\r\nWe have [`lazy-loading-rule-map`](https://github.com/eslint/eslint/blob/main/lib/rules/utils/lazy-loading-rule-map.js) which prevents loading all core rule modules when they are not necessary, and that part works well.\r\n\r\nOn the other hand, [`eslint-all.js`](https://github.com/eslint/eslint/blob/main/conf/eslint-all.js) loads all rule modules, because it needs `meta` of rules to filter out deprecated ones.\r\n\r\nThe problem is that `flat-config-array` always loads `eslint-all.js`:\r\n\r\nhttps://github.com/eslint/eslint/blob/8d3c25f47b1a377993c42d44f0b1722193aa7361/lib/config/flat-config-array.js#L17\r\n\r\nso, as a consequence, basically any use of ESLint loads all rules, which we were obviously trying to avoid.\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n#### What changes did you make? (Give an overview)\r\n\r\nMoved `require(\"../../conf/eslint-all\")` from the top level of `flat-config-array.js` to the place where it's needed.\r\n\r\n<details>\r\n<summary> `npm run perf` before this change</summary>\r\n\r\n```\r\n\r\n> eslint@8.9.0 perf D:\\projects\\eslint\r\n> node Makefile.js perf\r\n\r\n\r\nLoading:\r\n  Load performance Run #1:  622.997785ms\r\n  Load performance Run #2:  685.887445ms\r\n  Load performance Run #3:  617.0843ms\r\n  Load performance Run #4:  689.034299ms\r\n  Load performance Run #5:  615.789688ms\r\n\r\n  Load Performance median:  622.997785ms\r\n\r\n\r\nSingle File:\r\n  CPU Speed is 2095 with multiplier 13000000\r\n  Performance Run #1:  11956.969383ms\r\n  Performance Run #2:  11742.944261ms\r\n  Performance Run #3:  11807.732589ms\r\n  Performance Run #4:  12022.606126ms\r\n  Performance Run #5:  11804.399046ms\r\n\r\n  Performance budget exceeded: 11807.732589ms (limit: 6205.250596658711ms)\r\n\r\n\r\nMulti Files (450 files):\r\n  CPU Speed is 2095 with multiplier 39000000\r\n  Performance Run #1:  31217.632838ms\r\n  Performance Run #2:  31106.2355ms\r\n  Performance Run #3:  31508.789833ms\r\n  Performance Run #4:  30745.145445ms\r\n  Performance Run #5:  30807.573268ms\r\n\r\n  Performance budget exceeded: 31106.2355ms (limit: 18615.751789976133ms)\r\n\r\n\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary> `npm run perf` after this change</summary>\r\n\r\n```\r\n\r\n> eslint@8.9.0 perf D:\\projects\\eslint\r\n> node Makefile.js perf\r\n\r\n\r\nLoading:\r\n  Load performance Run #1:  313.853045ms\r\n  Load performance Run #2:  306.604384ms\r\n  Load performance Run #3:  344.540608ms\r\n  Load performance Run #4:  304.535642ms\r\n  Load performance Run #5:  306.038938ms\r\n\r\n  Load Performance median:  306.604384ms\r\n\r\n\r\nSingle File:\r\n  CPU Speed is 2095 with multiplier 13000000\r\n  Performance Run #1:  11899.784524ms\r\n  Performance Run #2:  11760.932493ms\r\n  Performance Run #3:  11679.374794ms\r\n  Performance Run #4:  11751.555466ms\r\n  Performance Run #5:  12019.626415ms\r\n\r\n  Performance budget exceeded: 11760.932493ms (limit: 6205.250596658711ms)\r\n\r\n\r\nMulti Files (450 files):\r\n  CPU Speed is 2095 with multiplier 39000000\r\n  Performance Run #1:  31008.965526ms\r\n  Performance Run #2:  30747.93309ms\r\n  Performance Run #3:  30830.182326ms\r\n  Performance Run #4:  31287.272178ms\r\n  Performance Run #5:  31279.041194ms\r\n\r\n  Performance budget exceeded: 31008.965526ms (limit: 18615.751789976133ms)\r\n\r\n\r\n```\r\n\r\n</details>\r\n\r\nThis improves Loading performance by 50%.\r\n\r\nSingle File and Multi File are not relevant for this change, as they run all rules anyways.\r\n\r\n#### Is there anything you'd like reviewers to focus on?\r\n\r\nI tried to write a test for this using proxyquire's [@global](https://github.com/thlorenz/proxyquire#globally-override-require), and eventually managed to make a test that fails without this change, but didn't manage to remove proxies after the test.\r\n\r\nUpdate: I added a test that runs in a child process and seems to be working well. I've verified that the test would fail without the change in `flat-config-array.js`. I've also verified that the test would fail if `eslint-all.js` is loaded from `cli-engine.js` (as in https://github.com/eslint/eslint/pull/15602#discussion_r805862163).\r\n\r\n<!-- markdownlint-disable-file MD004 -->\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/15606/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/15606/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"fbedf139d8b0c92cdd90d98f4f55708b060519d2","filename":"lib/config/flat-config-array.js","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/eslint/eslint/blob/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/lib%2Fconfig%2Fflat-config-array.js","raw_url":"https://github.com/eslint/eslint/raw/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/lib%2Fconfig%2Fflat-config-array.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fconfig%2Fflat-config-array.js?ref=cc43a0d8e4d6060b8780dba703389f4e82f1db0a","patch":"@@ -14,7 +14,6 @@ const { flatConfigSchema } = require(\"./flat-config-schema\");\n const { RuleValidator } = require(\"./rule-validator\");\n const { defaultConfig } = require(\"./default-config\");\n const recommendedConfig = require(\"../../conf/eslint-recommended\");\n-const allConfig = require(\"../../conf/eslint-all\");\n \n //-----------------------------------------------------------------------------\n // Helpers\n@@ -79,7 +78,13 @@ class FlatConfigArray extends ConfigArray {\n         }\n \n         if (config === \"eslint:all\") {\n-            return allConfig;\n+\n+            /*\n+             * Load `eslint-all.js` here instead of at the top level to avoid loading all rule modules\n+             * when it isn't necessary. `eslint-all.js` reads `meta` of rule objects to filter out deprecated ones,\n+             * so requiring `eslint-all.js` module loads all rule modules as a consequence.\n+             */\n+            return require(\"../../conf/eslint-all\");\n         }\n \n         return config;"},{"sha":"b5dd764327e4efe8697f0c89148e0c3333ad362a","filename":"package.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/package.json","raw_url":"https://github.com/eslint/eslint/raw/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/package.json","contents_url":"https://api.github.com/repos/eslint/eslint/contents/package.json?ref=cc43a0d8e4d6060b8780dba703389f4e82f1db0a","patch":"@@ -122,6 +122,7 @@\n     \"node-polyfill-webpack-plugin\": \"^1.0.3\",\n     \"npm-license\": \"^0.3.3\",\n     \"nyc\": \"^15.0.1\",\n+    \"pirates\": \"^4.0.5\",\n     \"progress\": \"^2.0.3\",\n     \"proxyquire\": \"^2.0.1\",\n     \"puppeteer\": \"^9.1.1\","},{"sha":"bac4383242a975e288e6ced163bda92abe576023","filename":"tests/_utils/test-lazy-loading-rules.js","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/eslint/eslint/blob/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/tests%2F_utils%2Ftest-lazy-loading-rules.js","raw_url":"https://github.com/eslint/eslint/raw/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/tests%2F_utils%2Ftest-lazy-loading-rules.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2F_utils%2Ftest-lazy-loading-rules.js?ref=cc43a0d8e4d6060b8780dba703389f4e82f1db0a","patch":"@@ -0,0 +1,66 @@\n+/**\n+ * @fileoverview Tests lazy-loading of core rules\n+ * @author Milos Djermanovic\n+ */\n+\n+/*\n+ * This module should be run as a child process, with `fork()`,\n+ * because it is important to run this test with a separate, clean Node process\n+ * in order to add hooks before any of the ESLint modules is loaded.\n+ */\n+\n+\"use strict\";\n+\n+const path = require(\"path\");\n+const assert = require(\"assert\");\n+const { addHook } = require(\"pirates\");\n+\n+const {\n+    dir: rulesDirectoryPath,\n+    name: rulesDirectoryIndexFilename\n+} = path.parse(require.resolve(\"../../lib/rules\"));\n+\n+// Show full stack trace. The default 10 is usually not enough to find the root cause of this problem.\n+Error.stackTraceLimit = Infinity;\n+\n+const [cwd, pattern, usedRulesCommaSeparated] = process.argv.slice(2);\n+\n+assert.ok(cwd, \"cwd argument isn't provided\");\n+assert.ok(pattern, \"pattern argument isn't provided\");\n+assert.ok(usedRulesCommaSeparated, \"used rules argument isn't provided\");\n+\n+const usedRules = usedRulesCommaSeparated.split(\",\");\n+\n+// `require()` hook\n+addHook(\n+    (_code, filename) => {\n+        throw new Error(`Unexpected attempt to load unused rule ${filename}`);\n+    },\n+    {\n+\n+        // returns `true` if the hook (the function passed in as the first argument) should be called for this filename\n+        matcher(filename) {\n+            const { dir, name } = path.parse(filename);\n+\n+            if (dir === rulesDirectoryPath && ![rulesDirectoryIndexFilename, ...usedRules].includes(name)) {\n+                return true;\n+            }\n+\n+            return false;\n+        }\n+\n+    }\n+);\n+\n+/*\n+ * Everything related to loading any ESLint modules should be in this IIFE\n+ */\n+(async () => {\n+    const { ESLint } = require(\"../..\");\n+    const eslint = new ESLint({ cwd });\n+\n+    await eslint.lintFiles([pattern]);\n+})().catch(({ message, stack }) => {\n+    process.send({ message, stack });\n+    process.exit(1);\n+});"},{"sha":"fc6500203b90d57387a79e6004facebf749fea23","filename":"tests/fixtures/lazy-loading-rules/.eslintrc.js","status":"added","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/eslint/eslint/blob/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/tests%2Ffixtures%2Flazy-loading-rules%2F.eslintrc.js","raw_url":"https://github.com/eslint/eslint/raw/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/tests%2Ffixtures%2Flazy-loading-rules%2F.eslintrc.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Ffixtures%2Flazy-loading-rules%2F.eslintrc.js?ref=cc43a0d8e4d6060b8780dba703389f4e82f1db0a","patch":"@@ -0,0 +1,6 @@\n+module.exports = {\n+    root: true,\n+    rules: {\n+        semi: 2\n+    }\n+};"},{"sha":"9b2b3016bd0930c1cc5bf7065579870570e4bbde","filename":"tests/fixtures/lazy-loading-rules/foo.js","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/tests%2Ffixtures%2Flazy-loading-rules%2Ffoo.js","raw_url":"https://github.com/eslint/eslint/raw/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/tests%2Ffixtures%2Flazy-loading-rules%2Ffoo.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Ffixtures%2Flazy-loading-rules%2Ffoo.js?ref=cc43a0d8e4d6060b8780dba703389f4e82f1db0a","patch":"@@ -0,0 +1 @@\n+/* content is not necessary */"},{"sha":"cc150b34961dca6a058bddd49c3304fb42065413","filename":"tests/lib/eslint/eslint.js","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/eslint/eslint/blob/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/tests%2Flib%2Feslint%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/cc43a0d8e4d6060b8780dba703389f4e82f1db0a/tests%2Flib%2Feslint%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Feslint%2Feslint.js?ref=cc43a0d8e4d6060b8780dba703389f4e82f1db0a","patch":"@@ -27,6 +27,7 @@ const {\n const hash = require(\"../../../lib/cli-engine/hash\");\n const { unIndent, createCustomTeardown } = require(\"../../_utils\");\n const coreRules = require(\"../../../lib/rules\");\n+const childProcess = require(\"child_process\");\n \n //------------------------------------------------------------------------------\n // Tests\n@@ -6694,4 +6695,45 @@ describe(\"ESLint\", () => {\n             });\n         });\n     });\n+\n+    describe(\"loading rules\", () => {\n+        it(\"should not load unused core rules\", done => {\n+            let calledDone = false;\n+\n+            const cwd = getFixturePath(\"lazy-loading-rules\");\n+            const pattern = \"foo.js\";\n+            const usedRules = [\"semi\"];\n+\n+            const forkedProcess = childProcess.fork(\n+                path.join(__dirname, \"../../_utils/test-lazy-loading-rules.js\"),\n+                [cwd, pattern, String(usedRules)]\n+            );\n+\n+            // this is an error message\n+            forkedProcess.on(\"message\", ({ message, stack }) => {\n+                if (calledDone) {\n+                    return;\n+                }\n+                calledDone = true;\n+\n+                const error = new Error(message);\n+\n+                error.stack = stack;\n+                done(error);\n+            });\n+\n+            forkedProcess.on(\"exit\", exitCode => {\n+                if (calledDone) {\n+                    return;\n+                }\n+                calledDone = true;\n+\n+                if (exitCode === 0) {\n+                    done();\n+                } else {\n+                    done(new Error(\"Forked process exited with a non-zero exit code\"));\n+                }\n+            });\n+        });\n+    });\n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/15181","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/15181/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/15181/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/15181/events","html_url":"https://github.com/eslint/eslint/pull/15181","id":1028436977,"node_id":"PR_kwDOAKjKDc4tS1XX","number":15181,"title":"Chore: improve performance of `:function` selector","user":{"login":"mdjermanovic","id":44349756,"node_id":"MDQ6VXNlcjQ0MzQ5NzU2","avatar_url":"https://avatars.githubusercontent.com/u/44349756?v=4","gravatar_id":"","url":"https://api.github.com/users/mdjermanovic","html_url":"https://github.com/mdjermanovic","followers_url":"https://api.github.com/users/mdjermanovic/followers","following_url":"https://api.github.com/users/mdjermanovic/following{/other_user}","gists_url":"https://api.github.com/users/mdjermanovic/gists{/gist_id}","starred_url":"https://api.github.com/users/mdjermanovic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdjermanovic/subscriptions","organizations_url":"https://api.github.com/users/mdjermanovic/orgs","repos_url":"https://api.github.com/users/mdjermanovic/repos","events_url":"https://api.github.com/users/mdjermanovic/events{/privacy}","received_events_url":"https://api.github.com/users/mdjermanovic/received_events","type":"User","site_admin":false},"labels":[{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2021-10-17T21:03:19Z","updated_at":"2022-04-20T00:57:46Z","closed_at":"2021-10-21T12:02:31Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/15181","html_url":"https://github.com/eslint/eslint/pull/15181","diff_url":"https://github.com/eslint/eslint/pull/15181.diff","patch_url":"https://github.com/eslint/eslint/pull/15181.patch","merged_at":"2021-10-21T12:02:31Z"},"body":"<!--\r\n    Thank you for contributing!\r\n\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n#### Prerequisites checklist\r\n\r\n- [x] I have read the [contributing guidelines](https://github.com/eslint/eslint/blob/HEAD/CONTRIBUTING.md).\r\n\r\n#### What is the purpose of this pull request? (put an \"X\" next to an item)\r\n\r\n<!--\r\n    The following template is intentionally not a markdown checkbox list for the reasons\r\n    explained in https://github.com/eslint/eslint/pull/12848#issuecomment-580302888\r\n-->\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/HEAD/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/HEAD/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/HEAD/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[x] Other, please explain:\r\n\r\n\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n`:function` selector is costly because [getPossibleTypes](https://github.com/eslint/eslint/blob/35f3254d5f8027f75a6cb35b58bea10037003be8/lib/linter/node-event-generator.js#L66) doesn't assume that it matches only a particular set of node types, so `NodeEventGenerator` runs `esquery.matches()` on every node to check if it matches.\r\n\r\nFor example, running `no-shadow-restricted-names` on ESLint's codebase spends ~95% of the time in trying to match unrelated nodes with its [`\"VariableDeclaration, :function, CatchClause\"`](https://github.com/eslint/eslint/blob/35f3254d5f8027f75a6cb35b58bea10037003be8/lib/rules/no-shadow-restricted-names.js#L47) selector. Note that this isn't observable with `TIMING` because it tracks only time spent in visitors.\r\n\r\n#### What changes did you make? (Give an overview)\r\n\r\nAs esquery [hardcodes](https://github.com/estools/esquery/blob/7c3800a4b2ff5c7b3eb3b2cf742865b7c908981f/esquery.js#L229-L232) `:function` to only three exact types, I added them as the only possible types for `:function`. This improves the performance of `no-shadow-restricted-names` by the said 95%, and will also improve the execution time for any other rule with the `:function` selector in tail positions. We're not using that selector much in core rules, but it's used in plugins.\r\n\r\n#### Is there anything you'd like reviewers to focus on?\r\n\r\nDoes this make sense? I don't expect any maintenance problems with this as the meaning of `:function` in esquery is unlikely to change in the foreseeable future. \r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/15181/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/15181/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"d56bef2fa9defde5473775643accc90ced99a8a6","filename":"lib/linter/node-event-generator.js","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/eslint/eslint/blob/9fdce9ea43cbc74f5321b1396345b3b5b659f87c/lib%2Flinter%2Fnode-event-generator.js","raw_url":"https://github.com/eslint/eslint/raw/9fdce9ea43cbc74f5321b1396345b3b5b659f87c/lib%2Flinter%2Fnode-event-generator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Flinter%2Fnode-event-generator.js?ref=9fdce9ea43cbc74f5321b1396345b3b5b659f87c","patch":"@@ -98,6 +98,13 @@ function getPossibleTypes(parsedSelector) {\n         case \"adjacent\":\n             return getPossibleTypes(parsedSelector.right);\n \n+        case \"class\":\n+            if (parsedSelector.name === \"function\") {\n+                return [\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"];\n+            }\n+\n+            return null;\n+\n         default:\n             return null;\n "},{"sha":"44f8e512d6796c78854e104ac027915b9e4018d6","filename":"tests/lib/linter/node-event-generator.js","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/eslint/eslint/blob/9fdce9ea43cbc74f5321b1396345b3b5b659f87c/tests%2Flib%2Flinter%2Fnode-event-generator.js","raw_url":"https://github.com/eslint/eslint/raw/9fdce9ea43cbc74f5321b1396345b3b5b659f87c/tests%2Flib%2Flinter%2Fnode-event-generator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Flinter%2Fnode-event-generator.js?ref=9fdce9ea43cbc74f5321b1396345b3b5b659f87c","patch":"@@ -257,6 +257,20 @@ describe(\"NodeEventGenerator\", () => {\n             ]\n         );\n \n+        assertEmissions(\n+            \"function foo(){} var x; (function (p){}); () => {};\",\n+            [\":function\", \"ExpressionStatement > :function\", \"VariableDeclaration, :function[params.length=1]\"],\n+            ast => [\n+                [\":function\", ast.body[0]], // function foo(){}\n+                [\"VariableDeclaration, :function[params.length=1]\", ast.body[1]], // var x;\n+                [\":function\", ast.body[2].expression], // function (p){}\n+                [\"ExpressionStatement > :function\", ast.body[2].expression], // function (p){}\n+                [\"VariableDeclaration, :function[params.length=1]\", ast.body[2].expression], // function (p){}\n+                [\":function\", ast.body[3].expression], // () => {}\n+                [\"ExpressionStatement > :function\", ast.body[3].expression] // () => {}\n+            ]\n+        );\n+\n         assertEmissions(\n             \"foo;\",\n             ["}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/14617","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/14617/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/14617/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/14617/events","html_url":"https://github.com/eslint/eslint/pull/14617","id":898981835,"node_id":"MDExOlB1bGxSZXF1ZXN0NjUwNzYwMTA3","number":14617,"title":"Breaking: Fixable disable directives (fixes #11815)","user":{"login":"JoshuaKGoldberg","id":3335181,"node_id":"MDQ6VXNlcjMzMzUxODE=","avatar_url":"https://avatars.githubusercontent.com/u/3335181?v=4","gravatar_id":"","url":"https://api.github.com/users/JoshuaKGoldberg","html_url":"https://github.com/JoshuaKGoldberg","followers_url":"https://api.github.com/users/JoshuaKGoldberg/followers","following_url":"https://api.github.com/users/JoshuaKGoldberg/following{/other_user}","gists_url":"https://api.github.com/users/JoshuaKGoldberg/gists{/gist_id}","starred_url":"https://api.github.com/users/JoshuaKGoldberg/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/JoshuaKGoldberg/subscriptions","organizations_url":"https://api.github.com/users/JoshuaKGoldberg/orgs","repos_url":"https://api.github.com/users/JoshuaKGoldberg/repos","events_url":"https://api.github.com/users/JoshuaKGoldberg/events{/privacy}","received_events_url":"https://api.github.com/users/JoshuaKGoldberg/received_events","type":"User","site_admin":false},"labels":[{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":185518888,"node_id":"MDU6TGFiZWwxODU1MTg4ODg=","url":"https://api.github.com/repos/eslint/eslint/labels/breaking","name":"breaking","color":"e11d21","default":false,"description":"This change is backwards-incompatible"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":13,"created_at":"2021-05-23T09:58:37Z","updated_at":"2022-02-02T01:10:15Z","closed_at":"2021-08-05T20:09:33Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/14617","html_url":"https://github.com/eslint/eslint/pull/14617","diff_url":"https://github.com/eslint/eslint/pull/14617.diff","patch_url":"https://github.com/eslint/eslint/pull/14617.patch","merged_at":"2021-08-05T20:09:32Z"},"body":"#### Prerequisites checklist\r\n\r\n- [x] I have read the [contributing guidelines](https://github.com/eslint/eslint/blob/master/CONTRIBUTING.md).\r\n\r\n#### What is the purpose of this pull request? (put an \"X\" next to an item)\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[x] Add something to the core\r\n[ ] Other, please explain:\r\n\r\n#### What changes did you make? (Give an overview)\r\n\r\nImplements https://github.com/eslint/rfcs/pull/78 as described.\r\n\r\n#### Is there anything you'd like reviewers to focus on?\r\n\r\n~I'm not confident I got all the places to update docs about the addition to `fixTypes` and friends...~ Thanks!\r\n\r\n~Would you like me to split out the added logic in `apply-disable-directives.js` into a new file and individually unit test it? I was dubious that re-searching through the source file for the previously retrieved disable directives is the right approach for performance, so I held off in the initial commit.~ I ended up storing a `parentComment` in `linter.js` > `createDisableDirectives`, to hold off on re-scanning.","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/14617/reactions","total_count":3,"+1":2,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/14617/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"edaf7fc158014cf1bc39dbb812cdae0a0482ec21","filename":"docs/developer-guide/nodejs-api.md","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/docs%2Fdeveloper-guide%2Fnodejs-api.md","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/docs%2Fdeveloper-guide%2Fnodejs-api.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Fdeveloper-guide%2Fnodejs-api.md?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -148,7 +148,7 @@ The `ESLint` constructor takes an `options` object. If you omit the `options` ob\n \n * `options.fix` (`boolean | (message: LintMessage) => boolean`)<br>\n   Default is `false`. If `true` is present, the [`eslint.lintFiles()`][eslint-lintfiles] and [`eslint.lintText()`][eslint-linttext] methods work in autofix mode. If a predicate function is present, the methods pass each lint message to the function, then use only the lint messages for which the function returned `true`.\n-* `options.fixTypes` (`(\"problem\" | \"suggestion\" | \"layout\")[] | null`)<br>\n+* `options.fixTypes` (`(\"directive\" | \"problem\" | \"suggestion\" | \"layout\")[] | null`)<br>\n   Default is `null`. The types of the rules that the [`eslint.lintFiles()`][eslint-lintfiles] and [`eslint.lintText()`][eslint-linttext] methods use for autofix.\n \n ##### Cache-related"},{"sha":"9ff8cbc3d99cbe035ccc0adcbedb9754ed164147","filename":"docs/user-guide/command-line-interface.md","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/docs%2Fuser-guide%2Fcommand-line-interface.md","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/docs%2Fuser-guide%2Fcommand-line-interface.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Fuser-guide%2Fcommand-line-interface.md?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -47,7 +47,7 @@ Specifying rules and plugins:\n Fixing problems:\n   --fix                          Automatically fix problems\n   --fix-dry-run                  Automatically fix problems without saving the changes to the file system\n-  --fix-type Array               Specify the types of fixes to apply (problem, suggestion, layout)\n+  --fix-type Array               Specify the types of fixes to apply (directive, problem, suggestion, layout)\n \n Ignoring files:\n   --ignore-path path::String     Specify path of ignore file\n@@ -240,11 +240,12 @@ This flag can be useful for integrations (e.g. editor plugins) which need to aut\n \n #### `--fix-type`\n \n-This option allows you to specify the type of fixes to apply when using either `--fix` or `--fix-dry-run`. The three types of fixes are:\n+This option allows you to specify the type of fixes to apply when using either `--fix` or `--fix-dry-run`. The four types of fixes are:\n \n 1. `problem` - fix potential errors in the code\n 1. `suggestion` - apply fixes to the code that improve it\n 1. `layout` - apply fixes that do not change the program structure (AST)\n+1. `directive` - apply fixes to inline directives such as `// eslint-disable`\n \n You can specify one or more fix type on the command line. Here are some examples:\n "},{"sha":"97ab38f68087c5ac5c4f385fb899c6720073839c","filename":"lib/cli-engine/cli-engine.js","status":"modified","additions":19,"deletions":7,"changes":26,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Fcli-engine%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Fcli-engine%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fcli-engine%2Fcli-engine.js?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -41,7 +41,7 @@ const hash = require(\"./hash\");\n const LintResultCache = require(\"./lint-result-cache\");\n \n const debug = require(\"debug\")(\"eslint:cli-engine\");\n-const validFixTypes = new Set([\"problem\", \"suggestion\", \"layout\"]);\n+const validFixTypes = new Set([\"directive\", \"problem\", \"suggestion\", \"layout\"]);\n \n //------------------------------------------------------------------------------\n // Typedefs\n@@ -331,6 +331,23 @@ function getRule(ruleId, configArrays) {\n     return builtInRules.get(ruleId) || null;\n }\n \n+/**\n+ * Checks whether a message's rule type should be fixed.\n+ * @param {LintMessage} message The message to check.\n+ * @param {ConfigArray[]} lastConfigArrays The list of config arrays that the last `executeOnFiles` or `executeOnText` used.\n+ * @param {string[]} fixTypes An array of fix types to check.\n+ * @returns {boolean} Whether the message should be fixed.\n+ */\n+function shouldMessageBeFixed(message, lastConfigArrays, fixTypes) {\n+    if (!message.ruleId) {\n+        return fixTypes.has(\"directive\");\n+    }\n+\n+    const rule = message.ruleId && getRule(message.ruleId, lastConfigArrays);\n+\n+    return Boolean(rule && rule.meta && fixTypes.has(rule.meta.type));\n+}\n+\n /**\n  * Collect used deprecated rules.\n  * @param {ConfigArray[]} usedConfigArrays The config arrays which were used.\n@@ -623,12 +640,7 @@ class CLIEngine {\n             const originalFix = (typeof options.fix === \"function\")\n                 ? options.fix : () => true;\n \n-            options.fix = message => {\n-                const rule = message.ruleId && getRule(message.ruleId, lastConfigArrays);\n-                const matches = rule && rule.meta && fixTypes.has(rule.meta.type);\n-\n-                return matches && originalFix(message);\n-            };\n+            options.fix = message => shouldMessageBeFixed(message, lastConfigArrays, fixTypes) && originalFix(message);\n         }\n     }\n "},{"sha":"62229be80689571428b910424e5e7be9c5932d06","filename":"lib/eslint/eslint.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Feslint%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Feslint%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Feslint%2Feslint.js?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -125,7 +125,7 @@ function isArrayOfNonEmptyString(x) {\n  * @returns {boolean} `true` if `x` is valid fix type.\n  */\n function isFixType(x) {\n-    return x === \"problem\" || x === \"suggestion\" || x === \"layout\";\n+    return x === \"directive\" || x === \"problem\" || x === \"suggestion\" || x === \"layout\";\n }\n \n /**\n@@ -237,7 +237,7 @@ function processOptions({\n         errors.push(\"'fix' must be a boolean or a function.\");\n     }\n     if (fixTypes !== null && !isFixTypeArray(fixTypes)) {\n-        errors.push(\"'fixTypes' must be an array of any of \\\"problem\\\", \\\"suggestion\\\", and \\\"layout\\\".\");\n+        errors.push(\"'fixTypes' must be an array of any of \\\"directive\\\", \\\"problem\\\", \\\"suggestion\\\", and \\\"layout\\\".\");\n     }\n     if (typeof globInputPaths !== \"boolean\") {\n         errors.push(\"'globInputPaths' must be a boolean.\");"},{"sha":"de81c24447fc3ed66247f770c2070c8faa6c81b6","filename":"lib/linter/apply-disable-directives.js","status":"modified","additions":136,"deletions":23,"changes":159,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Flinter%2Fapply-disable-directives.js","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Flinter%2Fapply-disable-directives.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Flinter%2Fapply-disable-directives.js?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -5,6 +5,8 @@\n \n \"use strict\";\n \n+const escapeRegExp = require(\"escape-string-regexp\");\n+\n /**\n  * Compares the locations of two objects in a source file\n  * @param {{line: number, column: number}} itemA The first object\n@@ -16,6 +18,123 @@ function compareLocations(itemA, itemB) {\n     return itemA.line - itemB.line || itemA.column - itemB.column;\n }\n \n+/**\n+ * Groups a set of directives into sub-arrays by their parent comment.\n+ * @param {Directive[]} directives Unused directives to be removed.\n+ * @returns {Directive[][]} Directives grouped by their parent comment.\n+ */\n+function groupByParentComment(directives) {\n+    const groups = new Map();\n+\n+    for (const directive of directives) {\n+        const { unprocessedDirective: { parentComment } } = directive;\n+\n+        if (groups.has(parentComment)) {\n+            groups.get(parentComment).push(directive);\n+        } else {\n+            groups.set(parentComment, [directive]);\n+        }\n+    }\n+\n+    return [...groups.values()];\n+}\n+\n+/**\n+ * Creates removal details for a set of directives within the same comment.\n+ * @param {Directive[]} directives Unused directives to be removed.\n+ * @param {Token} commentToken The backing Comment token.\n+ * @returns {{ description, fix, position }[]} Details for later creation of output Problems.\n+ */\n+function createIndividualDirectivesRemoval(directives, commentToken) {\n+    const listOffset = /^\\s*\\S+\\s+/u.exec(commentToken.value)[0].length;\n+    const listText = commentToken.value\n+        .slice(listOffset) // remove eslint-*\n+        .split(/\\s-{2,}\\s/u)[0] // remove -- directive comment\n+        .trimRight();\n+    const listStart = commentToken.range[0] + 2 + listOffset;\n+\n+    return directives.map(directive => {\n+        const { ruleId } = directive;\n+        const match = new RegExp(String.raw`(?:^|,)\\s*${escapeRegExp(ruleId)}\\s*(?:$|,)`, \"u\").exec(listText);\n+        const ruleOffset = match.index;\n+        const ruleEndOffset = ruleOffset + match[0].length;\n+        const ruleText = listText.slice(ruleOffset, ruleEndOffset);\n+\n+        return {\n+            description: `'${ruleId}'`,\n+            fix: {\n+                range: [\n+                    listStart + ruleOffset + (ruleText.startsWith(\",\") && ruleText.endsWith(\",\") ? 1 : 0),\n+                    listStart + ruleEndOffset\n+                ],\n+                text: \"\"\n+            },\n+            position: directive.unprocessedDirective\n+        };\n+    });\n+}\n+\n+/**\n+ * Creates a description of deleting an entire unused disable comment.\n+ * @param {Directive[]} directives Unused directives to be removed.\n+ * @param {Token} commentToken The backing Comment token.\n+ * @returns {{ description, fix, position }} Details for later creation of an output Problem.\n+ */\n+function createCommentRemoval(directives, commentToken) {\n+    const { range } = commentToken;\n+    const ruleIds = directives.filter(directive => directive.ruleId).map(directive => `'${directive.ruleId}'`);\n+\n+    return {\n+        description: ruleIds.length <= 2\n+            ? ruleIds.join(\" or \")\n+            : `${ruleIds.slice(0, ruleIds.length - 1).join(\", \")}, or ${ruleIds[ruleIds.length - 1]}`,\n+        fix: {\n+            range,\n+            text: \" \"\n+        },\n+        position: directives[0].unprocessedDirective\n+    };\n+}\n+\n+/**\n+ * Returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level.\n+ * TODO(stephenwade): Replace this with array.flatMap when we drop support for Node v10\n+ * @param {any[]} array The array to process\n+ * @param {Function} fn The function to use\n+ * @returns {any[]} The result array\n+ */\n+function flatMap(array, fn) {\n+    const mapped = array.map(fn);\n+    const flattened = [].concat(...mapped);\n+\n+    return flattened;\n+}\n+\n+/**\n+ * Parses details from directives to create output Problems.\n+ * @param {Directive[]} allDirectives Unused directives to be removed.\n+ * @returns {{ description, fix, position }[]} Details for later creation of output Problems.\n+ */\n+function processUnusedDisableDirectives(allDirectives) {\n+    const directiveGroups = groupByParentComment(allDirectives);\n+\n+    return flatMap(\n+        directiveGroups,\n+        directives => {\n+            const { parentComment } = directives[0].unprocessedDirective;\n+            const remainingRuleIds = new Set(parentComment.ruleIds);\n+\n+            for (const directive of directives) {\n+                remainingRuleIds.delete(directive.ruleId);\n+            }\n+\n+            return remainingRuleIds.size\n+                ? createIndividualDirectivesRemoval(directives, parentComment.commentToken)\n+                : [createCommentRemoval(directives, parentComment.commentToken)];\n+        }\n+    );\n+}\n+\n /**\n  * This is the same as the exported function, except that it\n  * doesn't handle disable-line and disable-next-line directives, and it always reports unused\n@@ -82,17 +201,22 @@ function applyDirectives(options) {\n         }\n     }\n \n-    const unusedDisableDirectives = options.directives\n-        .filter(directive => directive.type === \"disable\" && !usedDisableDirectives.has(directive))\n-        .map(directive => ({\n+    const unusedDisableDirectivesToReport = options.directives\n+        .filter(directive => directive.type === \"disable\" && !usedDisableDirectives.has(directive));\n+\n+    const processed = processUnusedDisableDirectives(unusedDisableDirectivesToReport);\n+\n+    const unusedDisableDirectives = processed\n+        .map(({ description, fix, position }) => ({\n             ruleId: null,\n-            message: directive.ruleId\n-                ? `Unused eslint-disable directive (no problems were reported from '${directive.ruleId}').`\n+            message: description\n+                ? `Unused eslint-disable directive (no problems were reported from ${description}).`\n                 : \"Unused eslint-disable directive (no problems were reported).\",\n-            line: directive.unprocessedDirective.line,\n-            column: directive.unprocessedDirective.column,\n+            line: position.line,\n+            column: position.column,\n             severity: options.reportUnusedDisableDirectives === \"warn\" ? 1 : 2,\n-            nodeType: null\n+            nodeType: null,\n+            ...options.disableFixes ? {} : { fix }\n         }));\n \n     return { problems, unusedDisableDirectives };\n@@ -113,29 +237,16 @@ function applyDirectives(options) {\n  * @param {{ruleId: (string|null), line: number, column: number}[]} options.problems\n  * A list of problems reported by rules, sorted by increasing location in the file, with one-based columns.\n  * @param {\"off\" | \"warn\" | \"error\"} options.reportUnusedDisableDirectives If `\"warn\"` or `\"error\"`, adds additional problems for unused directives\n+ * @param {boolean} options.disableFixes If true, it doesn't make `fix` properties.\n  * @returns {{ruleId: (string|null), line: number, column: number}[]}\n  * A list of reported problems that were not disabled by the directive comments.\n  */\n-module.exports = ({ directives, problems, reportUnusedDisableDirectives = \"off\" }) => {\n+module.exports = ({ directives, disableFixes, problems, reportUnusedDisableDirectives = \"off\" }) => {\n     const blockDirectives = directives\n         .filter(directive => directive.type === \"disable\" || directive.type === \"enable\")\n         .map(directive => Object.assign({}, directive, { unprocessedDirective: directive }))\n         .sort(compareLocations);\n \n-    /**\n-     * Returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level.\n-     * TODO(stephenwade): Replace this with array.flatMap when we drop support for Node v10\n-     * @param {any[]} array The array to process\n-     * @param {Function} fn The function to use\n-     * @returns {any[]} The result array\n-     */\n-    function flatMap(array, fn) {\n-        const mapped = array.map(fn);\n-        const flattened = [].concat(...mapped);\n-\n-        return flattened;\n-    }\n-\n     const lineDirectives = flatMap(directives, directive => {\n         switch (directive.type) {\n             case \"disable\":\n@@ -162,11 +273,13 @@ module.exports = ({ directives, problems, reportUnusedDisableDirectives = \"off\"\n     const blockDirectivesResult = applyDirectives({\n         problems,\n         directives: blockDirectives,\n+        disableFixes,\n         reportUnusedDisableDirectives\n     });\n     const lineDirectivesResult = applyDirectives({\n         problems: blockDirectivesResult.problems,\n         directives: lineDirectives,\n+        disableFixes,\n         reportUnusedDisableDirectives\n     });\n "},{"sha":"65a158895701992d020643df09264720b98825d2","filename":"lib/linter/linter.js","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Flinter%2Flinter.js","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Flinter%2Flinter.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Flinter%2Flinter.js?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -242,28 +242,30 @@ function createLintingProblem(options) {\n  * Creates a collection of disable directives from a comment\n  * @param {Object} options to create disable directives\n  * @param {(\"disable\"|\"enable\"|\"disable-line\"|\"disable-next-line\")} options.type The type of directive comment\n- * @param {{line: number, column: number}} options.loc The 0-based location of the comment token\n+ * @param {token} options.commentToken The Comment token\n  * @param {string} options.value The value after the directive in the comment\n  * comment specified no specific rules, so it applies to all rules (e.g. `eslint-disable`)\n  * @param {function(string): {create: Function}} options.ruleMapper A map from rule IDs to defined rules\n  * @returns {Object} Directives and problems from the comment\n  */\n function createDisableDirectives(options) {\n-    const { type, loc, value, ruleMapper } = options;\n+    const { commentToken, type, value, ruleMapper } = options;\n     const ruleIds = Object.keys(commentParser.parseListConfig(value));\n     const directiveRules = ruleIds.length ? ruleIds : [null];\n     const result = {\n         directives: [], // valid disable directives\n         directiveProblems: [] // problems in directives\n     };\n \n+    const parentComment = { commentToken, ruleIds };\n+\n     for (const ruleId of directiveRules) {\n \n         // push to directives, if the rule is defined(including null, e.g. /*eslint enable*/)\n         if (ruleId === null || ruleMapper(ruleId) !== null) {\n-            result.directives.push({ type, line: loc.start.line, column: loc.start.column + 1, ruleId });\n+            result.directives.push({ parentComment, type, line: commentToken.loc.start.line, column: commentToken.loc.start.column + 1, ruleId });\n         } else {\n-            result.directiveProblems.push(createLintingProblem({ ruleId, loc }));\n+            result.directiveProblems.push(createLintingProblem({ ruleId, loc: commentToken.loc }));\n         }\n     }\n     return result;\n@@ -344,7 +346,7 @@ function getDirectiveComments(filename, ast, ruleMapper, warnInlineConfig) {\n             case \"eslint-disable-next-line\":\n             case \"eslint-disable-line\": {\n                 const directiveType = directiveText.slice(\"eslint-\".length);\n-                const options = { type: directiveType, loc: comment.loc, value: directiveValue, ruleMapper };\n+                const options = { commentToken: comment, type: directiveType, value: directiveValue, ruleMapper };\n                 const { directives, directiveProblems } = createDisableDirectives(options);\n \n                 disableDirectives.push(...directives);\n@@ -1208,6 +1210,7 @@ class Linter {\n \n         return applyDisableDirectives({\n             directives: commentDirectives.disableDirectives,\n+            disableFixes: options.disableFixes,\n             problems: lintingProblems\n                 .concat(commentDirectives.problems)\n                 .sort((problemA, problemB) => problemA.line - problemB.line || problemA.column - problemB.column),"},{"sha":"2dd186de3e82a432ff99c977a02d298825dc7265","filename":"lib/options.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Foptions.js","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/lib%2Foptions.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Foptions.js?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -32,7 +32,7 @@ const optionator = require(\"optionator\");\n  * @property {string[]} [ext] Specify JavaScript file extensions\n  * @property {boolean} fix Automatically fix problems\n  * @property {boolean} fixDryRun Automatically fix problems without saving the changes to the file system\n- * @property {(\"problem\" | \"suggestion\" | \"layout\")[]} [fixType] Specify the types of fixes to apply (problem, suggestion, layout)\n+ * @property {(\"directive\" | \"problem\" | \"suggestion\" | \"layout\")[]} [fixType] Specify the types of fixes to apply (directive, problem, suggestion, layout)\n  * @property {string} format Use a specific output format\n  * @property {string[]} [global] Define global variables\n  * @property {boolean} [help] Show help\n@@ -151,7 +151,7 @@ module.exports = optionator({\n         {\n             option: \"fix-type\",\n             type: \"Array\",\n-            description: \"Specify the types of fixes to apply (problem, suggestion, layout)\"\n+            description: \"Specify the types of fixes to apply (directive, problem, suggestion, layout)\"\n         },\n         {\n             heading: \"Ignoring files\""},{"sha":"cf3f14072e84c655d9b22d727fd9c155f268f8c1","filename":"tests/lib/cli-engine/cli-engine.js","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/tests%2Flib%2Fcli-engine%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/tests%2Flib%2Fcli-engine%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fcli-engine%2Fcli-engine.js?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -5086,22 +5086,26 @@ describe(\"CLIEngine\", () => {\n                                     message: \"Unused eslint-disable directive (no problems were reported).\",\n                                     line: 1,\n                                     column: 1,\n+                                    fix: {\n+                                        range: [0, 20],\n+                                        text: \" \"\n+                                    },\n                                     severity: 2,\n                                     nodeType: null\n                                 }\n                             ],\n                             errorCount: 1,\n                             warningCount: 0,\n                             fatalErrorCount: 0,\n-                            fixableErrorCount: 0,\n+                            fixableErrorCount: 1,\n                             fixableWarningCount: 0,\n                             source: \"/* eslint-disable */\"\n                         }\n                     ],\n                     errorCount: 1,\n                     warningCount: 0,\n                     fatalErrorCount: 0,\n-                    fixableErrorCount: 0,\n+                    fixableErrorCount: 1,\n                     fixableWarningCount: 0,\n                     usedDeprecatedRules: []\n                 }"},{"sha":"e2664a2416f69301e46aa8a15f13477f4af13600","filename":"tests/lib/eslint/eslint.js","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/tests%2Flib%2Feslint%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/tests%2Flib%2Feslint%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Feslint%2Feslint.js?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -199,7 +199,7 @@ describe(\"ESLint\", () => {\n                     \"- 'errorOnUnmatchedPattern' must be a boolean.\",\n                     \"- 'extensions' must be an array of non-empty strings or null.\",\n                     \"- 'fix' must be a boolean or a function.\",\n-                    \"- 'fixTypes' must be an array of any of \\\"problem\\\", \\\"suggestion\\\", and \\\"layout\\\".\",\n+                    \"- 'fixTypes' must be an array of any of \\\"directive\\\", \\\"problem\\\", \\\"suggestion\\\", and \\\"layout\\\".\",\n                     \"- 'globInputPaths' must be a boolean.\",\n                     \"- 'ignore' must be a boolean.\",\n                     \"- 'ignorePath' must be a non-empty string or null.\",\n@@ -443,7 +443,7 @@ describe(\"ESLint\", () => {\n                         fix: true,\n                         fixTypes: [\"layou\"]\n                     });\n-                }, /'fixTypes' must be an array of any of \"problem\", \"suggestion\", and \"layout\"\\./iu);\n+                }, /'fixTypes' must be an array of any of \"directive\", \"problem\", \"suggestion\", and \"layout\"\\./iu);\n             });\n \n             it(\"should not fix any rules when fixTypes is used without fix\", async () => {\n@@ -5009,14 +5009,18 @@ describe(\"ESLint\", () => {\n                                 message: \"Unused eslint-disable directive (no problems were reported).\",\n                                 line: 1,\n                                 column: 1,\n+                                fix: {\n+                                    range: [0, 20],\n+                                    text: \" \"\n+                                },\n                                 severity: 2,\n                                 nodeType: null\n                             }\n                         ],\n                         errorCount: 1,\n                         warningCount: 0,\n                         fatalErrorCount: 0,\n-                        fixableErrorCount: 0,\n+                        fixableErrorCount: 1,\n                         fixableWarningCount: 0,\n                         source: \"/* eslint-disable */\",\n                         usedDeprecatedRules: []"},{"sha":"c0aaf8519c051307ad16a868cbb886af0dd62819","filename":"tests/lib/linter/apply-disable-directives.js","status":"modified","additions":976,"deletions":103,"changes":1079,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/tests%2Flib%2Flinter%2Fapply-disable-directives.js","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/tests%2Flib%2Flinter%2Fapply-disable-directives.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Flinter%2Fapply-disable-directives.js?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -8,12 +8,26 @@\n const assert = require(\"chai\").assert;\n const applyDisableDirectives = require(\"../../../lib/linter/apply-disable-directives\");\n \n+/**\n+ * Creates a ParentComment for a given range.\n+ * @param {[number, number]} range total range of the comment\n+ * @param {string} value String value of the comment\n+ * @param {string[]} ruleIds Rule IDs reported in the value\n+ * @returns {ParentComment} Test-ready ParentComment object.\n+ */\n+function createParentComment(range, value, ruleIds = []) {\n+    return {\n+        commentToken: { range, value },\n+        ruleIds\n+    };\n+}\n+\n describe(\"apply-disable-directives\", () => {\n     describe(\"/* eslint-disable */ comments without rules\", () => {\n         it(\"keeps problems before the comment on the same line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable\", line: 1, column: 8, ruleId: null }],\n+                    directives: [{ parentComment: createParentComment([0, 7]), type: \"disable\", line: 1, column: 8, ruleId: null }],\n                     problems: [{ line: 1, column: 7, ruleId: \"foo\" }]\n                 }),\n                 [{ ruleId: \"foo\", line: 1, column: 7 }]\n@@ -23,7 +37,7 @@ describe(\"apply-disable-directives\", () => {\n         it(\"keeps problems on a previous line before the comment\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable\", line: 2, column: 8, ruleId: null }],\n+                    directives: [{ parentComment: createParentComment([21, 27]), type: \"disable\", line: 2, column: 1, ruleId: null }],\n                     problems: [{ line: 1, column: 10, ruleId: \"foo\" }]\n                 }),\n                 [{ ruleId: \"foo\", line: 1, column: 10 }]\n@@ -85,7 +99,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"keeps problems after the comment that have a different ruleId\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable\", line: 1, column: 8, ruleId: \"foo\" }],\n+                    directives: [{\n+                        parentComment: createParentComment([26, 29]),\n+                        type: \"disable\",\n+                        line: 1,\n+                        column: 1,\n+                        ruleId: \"foo\"\n+                    }],\n                     problems: [{ line: 2, column: 3, ruleId: \"not-foo\" }]\n                 }),\n                 [{ line: 2, column: 3, ruleId: \"not-foo\" }]\n@@ -95,7 +115,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"keeps problems before the comment that have the same ruleId\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable\", line: 1, column: 8, ruleId: \"foo\" }],\n+                    directives: [{\n+                        parentComment: createParentComment([7, 31]),\n+                        type: \"disable\",\n+                        line: 1,\n+                        column: 8,\n+                        ruleId: \"foo\"\n+                    }],\n                     problems: [{ line: 1, column: 7, ruleId: \"foo\" }]\n                 }),\n                 [{ line: 1, column: 7, ruleId: \"foo\" }]\n@@ -108,25 +134,49 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"enable\", line: 1, column: 5, ruleId: null }\n+                        {\n+                            parentComment: createParentComment([0, 26]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([27, 45]),\n+                            type: \"enable\",\n+                            line: 1,\n+                            column: 26,\n+                            ruleId: null\n+                        }\n                     ],\n-                    problems: [{ line: 1, column: 7, ruleId: \"foo\" }]\n+                    problems: [{ line: 1, column: 27, ruleId: \"foo\" }]\n                 }),\n-                [{ line: 1, column: 7, ruleId: \"foo\" }]\n+                [{ line: 1, column: 27, ruleId: \"foo\" }]\n             );\n         });\n \n         it(\"keeps problems in the same location as the eslint-enable comment\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"enable\", line: 1, column: 5, ruleId: null }\n+                        {\n+                            parentComment: createParentComment([0, 25]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([26, 40]),\n+                            type: \"enable\",\n+                            line: 1,\n+                            column: 26,\n+                            ruleId: null\n+                        }\n                     ],\n-                    problems: [{ line: 1, column: 5, ruleId: \"foo\" }]\n+                    problems: [{ line: 1, column: 26, ruleId: \"foo\" }]\n                 }),\n-                [{ line: 1, column: 5, ruleId: \"foo\" }]\n+                [{ line: 1, column: 26, ruleId: \"foo\" }]\n             );\n         });\n \n@@ -135,7 +185,7 @@ describe(\"apply-disable-directives\", () => {\n                 applyDisableDirectives({\n                     directives: [\n                         { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"enable\", line: 1, column: 5, ruleId: null }\n+                        { type: \"enable\", line: 1, column: 26, ruleId: null }\n                     ],\n                     problems: [{ line: 1, column: 3, ruleId: \"foo\" }]\n                 }),\n@@ -147,9 +197,27 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"enable\", line: 1, column: 5, ruleId: \"foo\" },\n-                        { type: \"disable\", line: 2, column: 1, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([0, 20]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([26, 44]),\n+                            type: \"enable\",\n+                            line: 1,\n+                            column: 26,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([45, 63]),\n+                            type: \"disable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n                     problems: [{ line: 3, column: 3, ruleId: \"foo\" }]\n                 }),\n@@ -161,9 +229,27 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"enable\", line: 1, column: 5, ruleId: \"foo\" },\n-                        { type: \"disable\", line: 2, column: 1, ruleId: null }\n+                        {\n+                            parentComment: createParentComment([0, 20]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([21, 44]),\n+                            type: \"enable\",\n+                            line: 1,\n+                            column: 26,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([45, 63]),\n+                            type: \"disable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: null\n+                        }\n                     ],\n                     problems: [{ line: 3, column: 3, ruleId: \"foo\" }]\n                 }),\n@@ -175,8 +261,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: \"foo\" },\n-                        { type: \"enable\", line: 1, column: 5, ruleId: null }\n+                        {\n+                            parentComment: createParentComment([0, 20]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([25, 44]),\n+                            type: \"enable\",\n+                            line: 1,\n+                            column: 26,\n+                            ruleId: null\n+                        }\n                     ],\n                     problems: [{ line: 1, column: 3, ruleId: \"not-foo\" }]\n                 }),\n@@ -190,8 +288,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 4, ruleId: null },\n-                        { type: \"enable\", line: 2, column: 1, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([0, 20]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([21, 44]),\n+                            type: \"enable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n                     problems: [{ line: 2, column: 4, ruleId: \"foo\" }]\n                 }),\n@@ -203,8 +313,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 4, ruleId: null },\n-                        { type: \"enable\", line: 2, column: 1, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([0, 20]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([21, 44]),\n+                            type: \"enable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n                     problems: [{ line: 2, column: 1, ruleId: \"foo\" }]\n                 }),\n@@ -216,7 +338,7 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 4, ruleId: null },\n+                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n                         { type: \"enable\", line: 2, column: 1, ruleId: \"foo\" }\n                     ],\n                     problems: [{ line: 2, column: 4, ruleId: \"not-foo\" }]\n@@ -230,22 +352,22 @@ describe(\"apply-disable-directives\", () => {\n                 applyDisableDirectives({\n                     directives: [\n                         { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"enable\", line: 1, column: 3, ruleId: \"foo\" },\n-                        { type: \"enable\", line: 1, column: 5, ruleId: \"bar\" }\n+                        { type: \"enable\", line: 1, column: 22, ruleId: \"foo\" },\n+                        { type: \"enable\", line: 1, column: 46, ruleId: \"bar\" }\n                     ],\n                     problems: [\n-                        { line: 1, column: 2, ruleId: \"foo\" },\n-                        { line: 1, column: 2, ruleId: \"bar\" },\n-                        { line: 1, column: 4, ruleId: \"foo\" },\n-                        { line: 1, column: 4, ruleId: \"bar\" },\n-                        { line: 1, column: 6, ruleId: \"foo\" },\n-                        { line: 1, column: 6, ruleId: \"bar\" }\n+                        { line: 1, column: 10, ruleId: \"foo\" },\n+                        { line: 1, column: 10, ruleId: \"bar\" },\n+                        { line: 1, column: 30, ruleId: \"foo\" },\n+                        { line: 1, column: 30, ruleId: \"bar\" },\n+                        { line: 1, column: 50, ruleId: \"foo\" },\n+                        { line: 1, column: 50, ruleId: \"bar\" }\n                     ]\n                 }),\n                 [\n-                    { line: 1, column: 4, ruleId: \"foo\" },\n-                    { line: 1, column: 6, ruleId: \"foo\" },\n-                    { line: 1, column: 6, ruleId: \"bar\" }\n+                    { line: 1, column: 30, ruleId: \"foo\" },\n+                    { line: 1, column: 50, ruleId: \"foo\" },\n+                    { line: 1, column: 50, ruleId: \"bar\" }\n                 ]\n             );\n         });\n@@ -255,7 +377,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"keeps problems on a previous line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-line\", line: 2, column: 1, ruleId: null }],\n+                    directives: [{\n+                        parentComment: createParentComment([6, 27]),\n+                        type: \"disable-line\",\n+                        line: 2,\n+                        column: 1,\n+                        ruleId: null\n+                    }],\n                     problems: [{ line: 1, column: 5, ruleId: \"foo\" }]\n                 }),\n                 [{ line: 1, column: 5, ruleId: \"foo\" }]\n@@ -265,7 +393,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"filters problems before the comment on the same line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-line\", line: 1, column: 5, ruleId: null }],\n+                    directives: [{\n+                        parentComment: createParentComment([7, 28]),\n+                        type: \"disable-line\",\n+                        line: 1,\n+                        column: 8,\n+                        ruleId: null\n+                    }],\n                     problems: [{ line: 1, column: 1, ruleId: \"foo\" }]\n                 }),\n                 []\n@@ -275,7 +409,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"filters problems after the comment on the same line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-line\", line: 1, column: 5, ruleId: null }],\n+                    directives: [{\n+                        parentComment: createParentComment([7, 28]),\n+                        type: \"disable-line\",\n+                        line: 1,\n+                        column: 8,\n+                        ruleId: null\n+                    }],\n                     problems: [{ line: 1, column: 10, ruleId: \"foo\" }]\n                 }),\n                 []\n@@ -285,7 +425,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"keeps problems on a following line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-line\", line: 1, column: 4 }],\n+                    directives: [{\n+                        parentComment: createParentComment([7, 34]),\n+                        type: \"disable-line\",\n+                        line: 1,\n+                        column: 8,\n+                        ruleId: \"foo\"\n+                    }],\n                     problems: [{ line: 2, column: 1, ruleId: \"foo\" }]\n                 }),\n                 [{ line: 2, column: 1, ruleId: \"foo\" }]\n@@ -297,7 +443,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"filters problems on the current line that match the ruleId\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-line\", line: 1, column: 4, ruleId: \"foo\" }],\n+                    directives: [{\n+                        parentComment: createParentComment([7, 34]),\n+                        type: \"disable-line\",\n+                        line: 1,\n+                        column: 8,\n+                        ruleId: \"foo\"\n+                    }],\n                     problems: [{ line: 1, column: 2, ruleId: \"foo\" }]\n                 }),\n                 []\n@@ -307,7 +459,7 @@ describe(\"apply-disable-directives\", () => {\n         it(\"keeps problems on the current line that do not match the ruleId\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-line\", line: 1, column: 4, ruleId: \"foo\" }],\n+                    directives: [{ parentComment: createParentComment([0, 27]), type: \"disable-line\", line: 1, column: 1, ruleId: \"foo\" }],\n                     problems: [{ line: 1, column: 2, ruleId: \"not-foo\" }]\n                 }),\n                 [{ line: 1, column: 2, ruleId: \"not-foo\" }]\n@@ -318,8 +470,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"disable-line\", line: 1, column: 3, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([0, 21]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([24, 28]),\n+                            type: \"disable-line\",\n+                            line: 1,\n+                            column: 22,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n                     problems: [{ line: 1, column: 5, ruleId: \"not-foo\" }]\n                 }),\n@@ -331,12 +495,48 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable-line\", line: 1, column: 5, ruleId: \"foo\" },\n-                        { type: \"disable-line\", line: 2, column: 5, ruleId: \"foo\" },\n-                        { type: \"disable-line\", line: 3, column: 5, ruleId: \"foo\" },\n-                        { type: \"disable-line\", line: 4, column: 5, ruleId: \"foo\" },\n-                        { type: \"disable-line\", line: 5, column: 5, ruleId: \"foo\" },\n-                        { type: \"disable-line\", line: 6, column: 5, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([7, 34]),\n+                            type: \"disable-line\",\n+                            line: 1,\n+                            column: 8,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([38, 73]),\n+                            type: \"disable-line\",\n+                            line: 2,\n+                            column: 8,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([76, 111]),\n+                            type: \"disable-line\",\n+                            line: 3,\n+                            column: 8,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([114, 149]),\n+                            type: \"disable-line\",\n+                            line: 4,\n+                            column: 8,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([152, 187]),\n+                            type: \"disable-line\",\n+                            line: 5,\n+                            column: 8,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([190, 225]),\n+                            type: \"disable-line\",\n+                            line: 6,\n+                            column: 8,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n                     problems: [{ line: 2, column: 1, ruleId: \"foo\" }]\n                 }),\n@@ -349,7 +549,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"filters problems on the next line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-next-line\", line: 1, column: 1, ruleId: null }],\n+                    directives: [{\n+                        parentComment: createParentComment([0, 31]),\n+                        type: \"disable-next-line\",\n+                        line: 1,\n+                        column: 1,\n+                        ruleId: null\n+                    }],\n                     problems: [{ line: 2, column: 3, ruleId: \"foo\" }]\n                 }),\n                 []\n@@ -359,7 +565,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"keeps problems on the same line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-next-line\", line: 1, column: 1, ruleId: null }],\n+                    directives: [{\n+                        parentComment: createParentComment([0, 31]),\n+                        type: \"disable-next-line\",\n+                        line: 1,\n+                        column: 1,\n+                        ruleId: null\n+                    }],\n                     problems: [{ line: 1, column: 3, ruleId: \"foo\" }]\n                 }),\n                 [{ line: 1, column: 3, ruleId: \"foo\" }]\n@@ -369,7 +581,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"keeps problems after the next line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-next-line\", line: 1, column: 1, ruleId: null }],\n+                    directives: [{\n+                        parentComment: createParentComment([0, 31]),\n+                        type: \"disable-next-line\",\n+                        line: 1,\n+                        column: 1,\n+                        ruleId: null\n+                    }],\n                     problems: [{ line: 3, column: 3, ruleId: \"foo\" }]\n                 }),\n                 [{ line: 3, column: 3, ruleId: \"foo\" }]\n@@ -404,7 +622,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"keeps problems on the next line that do not match the ruleId\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-next-line\", line: 1, column: 1, ruleId: \"foo\" }],\n+                    directives: [{\n+                        parentComment: createParentComment([0, 31]),\n+                        type: \"disable-next-line\",\n+                        line: 1,\n+                        column: 1,\n+                        ruleId: \"foo\"\n+                    }],\n                     problems: [{ line: 2, column: 1, ruleId: \"not-foo\" }]\n                 }),\n                 [{ line: 2, column: 1, ruleId: \"not-foo\" }]\n@@ -429,7 +653,42 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Adds a problem for /* eslint-disable */\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable\", line: 1, column: 5 }],\n+                    directives: [{\n+                        parentComment: createParentComment([0, 20]),\n+                        type: \"disable\",\n+                        line: 1,\n+                        column: 1\n+                    }],\n+                    problems: [],\n+                    reportUnusedDisableDirectives: \"error\"\n+                }),\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported).\",\n+                        line: 1,\n+                        column: 1,\n+                        fix: {\n+                            range: [0, 20],\n+                            text: \" \"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+\n+        it(\"Does not fix a problem for /* eslint-disable */ when disableFixes is enabled\", () => {\n+            assert.deepStrictEqual(\n+                applyDisableDirectives({\n+                    directives: [{\n+                        parentComment: createParentComment([0, 20]),\n+                        type: \"disable\",\n+                        line: 1,\n+                        column: 1\n+                    }],\n+                    disableFixes: true,\n                     problems: [],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n@@ -438,7 +697,7 @@ describe(\"apply-disable-directives\", () => {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n-                        column: 5,\n+                        column: 1,\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -449,7 +708,7 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Does not add a problem for /* eslint-disable */ /* (problem) */\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable\", line: 1, column: 5, ruleId: null }],\n+                    directives: [{ type: \"disable\", line: 1, column: 1, ruleId: null }],\n                     problems: [{ line: 2, column: 1, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n@@ -460,7 +719,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Adds a problem for /* eslint-disable foo */\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable\", line: 1, column: 5, ruleId: \"foo\" }],\n+                    directives: [{\n+                        parentComment: createParentComment([0, 21]),\n+                        type: \"disable\",\n+                        line: 1,\n+                        column: 1,\n+                        ruleId: \"foo\"\n+                    }],\n                     problems: [],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n@@ -469,7 +734,11 @@ describe(\"apply-disable-directives\", () => {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported from 'foo').\",\n                         line: 1,\n-                        column: 5,\n+                        column: 1,\n+                        fix: {\n+                            range: [0, 21],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -480,7 +749,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Adds a problem for /* eslint-disable foo */ /* (problem from another rule) */\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable\", line: 1, column: 5, ruleId: \"foo\" }],\n+                    directives: [{\n+                        parentComment: createParentComment([0, 24]),\n+                        type: \"disable\",\n+                        line: 1,\n+                        column: 1,\n+                        ruleId: \"foo\"\n+                    }],\n                     problems: [{ line: 1, column: 20, ruleId: \"not-foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n@@ -489,7 +764,11 @@ describe(\"apply-disable-directives\", () => {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported from 'foo').\",\n                         line: 1,\n-                        column: 5,\n+                        column: 1,\n+                        fix: {\n+                            range: [0, 24],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     },\n@@ -506,8 +785,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 5, ruleId: null },\n-                        { type: \"enable\", line: 1, column: 6, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([0, 21]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 8,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([0, 21]),\n+                            type: \"enable\",\n+                            line: 1,\n+                            column: 24,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n                     problems: [{ line: 1, column: 2, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n@@ -521,8 +812,12 @@ describe(\"apply-disable-directives\", () => {\n                     {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n+                        fix: {\n+                            range: [0, 21],\n+                            text: \" \"\n+                        },\n                         line: 1,\n-                        column: 5,\n+                        column: 8,\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -534,8 +829,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 5, ruleId: null },\n-                        { type: \"enable\", line: 1, column: 6, ruleId: null }\n+                        {\n+                            parentComment: createParentComment([0, 20]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([21, 41]),\n+                            type: \"enable\",\n+                            line: 1,\n+                            column: 12,\n+                            ruleId: null\n+                        }\n                     ],\n                     problems: [],\n                     reportUnusedDisableDirectives: \"error\"\n@@ -545,7 +852,11 @@ describe(\"apply-disable-directives\", () => {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n-                        column: 5,\n+                        column: 1,\n+                        fix: {\n+                            range: [0, 20],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -557,8 +868,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"disable\", line: 2, column: 1, ruleId: null }\n+                        {\n+                            parentComment: createParentComment([0, 21]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([21, 42]),\n+                            type: \"disable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: null\n+                        }\n                     ],\n                     problems: [],\n                     reportUnusedDisableDirectives: \"error\"\n@@ -569,6 +892,10 @@ describe(\"apply-disable-directives\", () => {\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 21],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     },\n@@ -577,6 +904,10 @@ describe(\"apply-disable-directives\", () => {\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 2,\n                         column: 1,\n+                        fix: {\n+                            range: [21, 42],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -588,8 +919,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"disable\", line: 2, column: 1, ruleId: null }\n+                        {\n+                            parentComment: createParentComment([0, 21]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([22, 45]),\n+                            type: \"disable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: null\n+                        }\n                     ],\n                     problems: [{ line: 3, column: 1, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n@@ -600,6 +943,10 @@ describe(\"apply-disable-directives\", () => {\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 21],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -611,8 +958,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: \"foo\" },\n-                        { type: \"disable\", line: 2, column: 1, ruleId: null }\n+                        {\n+                            parentComment: createParentComment([0, 21]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([22, 45]),\n+                            type: \"disable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: null\n+                        }\n                     ],\n                     problems: [{ line: 3, column: 1, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n@@ -623,6 +982,10 @@ describe(\"apply-disable-directives\", () => {\n                         message: \"Unused eslint-disable directive (no problems were reported from 'foo').\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 21],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -633,7 +996,7 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Does not add a problem for /* eslint-disable foo */ /* (problem from foo) */\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable\", line: 1, column: 5, ruleId: \"foo\" }],\n+                    directives: [{ type: \"disable\", line: 1, column: 1, ruleId: \"foo\" }],\n                     problems: [{ line: 1, column: 6, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n@@ -645,8 +1008,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"disable\", line: 2, column: 1, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([0, 21]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([22, 45]),\n+                            type: \"disable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n                     problems: [{ line: 3, column: 1, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n@@ -657,6 +1032,10 @@ describe(\"apply-disable-directives\", () => {\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 21],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -668,8 +1047,20 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"disable\", line: 2, column: 1, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([0, 20]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([21, 45]),\n+                            type: \"disable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n                     problems: [{ line: 3, column: 1, ruleId: \"bar\" }],\n                     reportUnusedDisableDirectives: \"error\"\n@@ -680,6 +1071,10 @@ describe(\"apply-disable-directives\", () => {\n                         message: \"Unused eslint-disable directive (no problems were reported from 'foo').\",\n                         line: 2,\n                         column: 1,\n+                        fix: {\n+                            range: [21, 45],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -691,25 +1086,41 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 5, ruleId: \"foo\" },\n-                        { type: \"enable\", line: 1, column: 8, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([0, 20]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([25, 46]),\n+                            type: \"enable\",\n+                            line: 1,\n+                            column: 26,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n-                    problems: [{ line: 1, column: 10, ruleId: \"foo\" }],\n+                    problems: [{ line: 1, column: 30, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n                 [\n                     {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported from 'foo').\",\n                         line: 1,\n-                        column: 5,\n+                        column: 1,\n+                        fix: {\n+                            range: [0, 20],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     },\n                     {\n                         ruleId: \"foo\",\n                         line: 1,\n-                        column: 10\n+                        column: 30\n                     }\n                 ]\n             );\n@@ -719,25 +1130,41 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 5, ruleId: \"foo\" },\n-                        { type: \"enable\", line: 1, column: 8, ruleId: null }\n+                        {\n+                            parentComment: createParentComment([0, 24]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([25, 49]),\n+                            type: \"enable\",\n+                            line: 1,\n+                            column: 26,\n+                            ruleId: null\n+                        }\n                     ],\n-                    problems: [{ line: 1, column: 10, ruleId: \"foo\" }],\n+                    problems: [{ line: 1, column: 30, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n                 [\n                     {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported from 'foo').\",\n                         line: 1,\n-                        column: 5,\n+                        column: 1,\n+                        fix: {\n+                            range: [0, 24],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     },\n                     {\n                         ruleId: \"foo\",\n                         line: 1,\n-                        column: 10\n+                        column: 30\n                     }\n                 ]\n             );\n@@ -747,9 +1174,27 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"disable\", line: 2, column: 1, ruleId: \"foo\" },\n-                        { type: \"enable\", line: 3, column: 1, ruleId: \"foo\" }\n+                        {\n+                            parentComment: createParentComment([0, 21]),\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 1,\n+                            ruleId: null\n+                        },\n+                        {\n+                            parentComment: createParentComment([22, 45]),\n+                            type: \"disable\",\n+                            line: 2,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        },\n+                        {\n+                            parentComment: createParentComment([46, 69]),\n+                            type: \"enable\",\n+                            line: 3,\n+                            column: 1,\n+                            ruleId: \"foo\"\n+                        }\n                     ],\n                     problems: [{ line: 4, column: 1, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n@@ -760,6 +1205,10 @@ describe(\"apply-disable-directives\", () => {\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 21],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     },\n@@ -768,8 +1217,11 @@ describe(\"apply-disable-directives\", () => {\n                         message: \"Unused eslint-disable directive (no problems were reported from 'foo').\",\n                         line: 2,\n                         column: 1,\n+                        fix: {\n+                            range: [22, 45],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n-\n                         nodeType: null\n                     },\n                     {\n@@ -784,7 +1236,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Adds a problem for // eslint-disable-line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-line\", line: 1, column: 5, ruleId: null }],\n+                    directives: [{\n+                        parentComment: createParentComment([0, 22]),\n+                        type: \"disable-line\",\n+                        line: 1,\n+                        column: 1,\n+                        ruleId: null\n+                    }],\n                     problems: [],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n@@ -793,7 +1251,11 @@ describe(\"apply-disable-directives\", () => {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n-                        column: 5,\n+                        column: 1,\n+                        fix: {\n+                            range: [0, 22],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -805,7 +1267,7 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Does not add a problem for // eslint-disable-line (problem)\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-line\", line: 1, column: 5, ruleId: null }],\n+                    directives: [{ type: \"disable-line\", line: 1, column: 1, ruleId: null }],\n                     problems: [{ line: 1, column: 10, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n@@ -816,7 +1278,13 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Adds a problem for // eslint-disable-next-line\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-next-line\", line: 1, column: 5, ruleId: null }],\n+                    directives: [{\n+                        parentComment: createParentComment([0, 27]),\n+                        type: \"disable-next-line\",\n+                        line: 1,\n+                        column: 1,\n+                        ruleId: null\n+                    }],\n                     problems: [],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n@@ -825,7 +1293,11 @@ describe(\"apply-disable-directives\", () => {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n-                        column: 5,\n+                        column: 1,\n+                        fix: {\n+                            range: [0, 27],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -836,7 +1308,7 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Does not add a problem for // eslint-disable-next-line \\\\n (problem)\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-next-line\", line: 1, column: 5, ruleId: null }],\n+                    directives: [{ type: \"disable-next-line\", line: 1, column: 1, ruleId: null }],\n                     problems: [{ line: 2, column: 10, ruleId: \"foo\" }],\n                     reportUnusedDisableDirectives: \"error\"\n                 }),\n@@ -848,8 +1320,8 @@ describe(\"apply-disable-directives\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n                     directives: [\n-                        { type: \"disable\", line: 1, column: 1, ruleId: null },\n-                        { type: \"disable-line\", line: 1, column: 5, ruleId: null }\n+                        { parentComment: createParentComment([0, 20]), type: \"disable\", line: 1, column: 1, ruleId: null },\n+                        { parentComment: createParentComment([20, 43]), type: \"disable-line\", line: 1, column: 22, ruleId: null }\n                     ],\n                     problems: [],\n                     reportUnusedDisableDirectives: \"error\"\n@@ -860,14 +1332,22 @@ describe(\"apply-disable-directives\", () => {\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 20],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     },\n                     {\n                         ruleId: null,\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n-                        column: 5,\n+                        column: 22,\n+                        fix: {\n+                            range: [20, 43],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -878,12 +1358,405 @@ describe(\"apply-disable-directives\", () => {\n         it(\"Does not add problems when reportUnusedDisableDirectives: \\\"off\\\" is used\", () => {\n             assert.deepStrictEqual(\n                 applyDisableDirectives({\n-                    directives: [{ type: \"disable-next-line\", line: 1, column: 5, ruleId: null }],\n+                    directives: [{ parentComment: createParentComment([0, 27]), type: \"disable-next-line\", line: 1, column: 1, ruleId: null }],\n                     problems: [],\n                     reportUnusedDisableDirectives: \"off\"\n                 }),\n                 []\n             );\n         });\n     });\n+\n+    describe(\"unused rules within directives\", () => {\n+        it(\"Adds a problem for /* eslint-disable used, unused */\", () => {\n+            const parentComment = createParentComment([0, 32], \" eslint-disable used, unused \", [\"used\", \"unused\"]);\n+\n+            assert.deepStrictEqual(\n+                applyDisableDirectives({\n+                    directives: [\n+                        {\n+                            parentComment,\n+                            ruleId: \"used\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 18\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 22\n+                        }\n+                    ],\n+                    problems: [{ line: 2, column: 1, ruleId: \"used\" }],\n+                    reportUnusedDisableDirectives: \"error\"\n+                }),\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused').\",\n+                        line: 1,\n+                        column: 22,\n+                        fix: {\n+                            range: [22, 30],\n+                            text: \"\"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+        it(\"Adds a problem for /* eslint-disable used , unused , -- unused and used are ok */\", () => {\n+            const parentComment = createParentComment([0, 62], \" eslint-disable used , unused , -- unused and used are ok \", [\"used\", \"unused\"]);\n+\n+            assert.deepStrictEqual(\n+                applyDisableDirectives({\n+                    directives: [\n+                        {\n+                            parentComment,\n+                            ruleId: \"used\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 18\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 24\n+                        }\n+                    ],\n+                    problems: [{ line: 2, column: 1, ruleId: \"used\" }],\n+                    reportUnusedDisableDirectives: \"error\"\n+                }),\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused').\",\n+                        line: 1,\n+                        column: 24,\n+                        fix: {\n+                            range: [24, 33],\n+                            text: \"\"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+\n+        it(\"Adds a problem for /* eslint-disable unused, used */\", () => {\n+            const parentComment = createParentComment([0, 32], \" eslint-disable unused, used \", [\"unused\", \"used\"]);\n+\n+            assert.deepStrictEqual(\n+                applyDisableDirectives({\n+                    directives: [\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 18\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"used\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 25\n+                        }\n+                    ],\n+                    problems: [{ line: 2, column: 1, ruleId: \"used\" }],\n+                    reportUnusedDisableDirectives: \"error\"\n+                }),\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused').\",\n+                        line: 1,\n+                        column: 18,\n+                        fix: {\n+                            range: [18, 25],\n+                            text: \"\"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+\n+        it(\"Adds a problem for /* eslint-disable unused,, ,, used */\", () => {\n+            const parentComment = createParentComment([0, 37], \" eslint-disable unused,, ,, used \", [\"unused\", \"used\"]);\n+\n+            assert.deepStrictEqual(\n+                applyDisableDirectives({\n+                    directives: [\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 18\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"used\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 29\n+                        }\n+                    ],\n+                    problems: [{ line: 2, column: 1, ruleId: \"used\" }],\n+                    reportUnusedDisableDirectives: \"error\"\n+                }),\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused').\",\n+                        line: 1,\n+                        column: 18,\n+                        fix: {\n+                            range: [18, 25],\n+                            text: \"\"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+\n+        it(\"Adds a problem for /* eslint-disable unused-1, unused-2, used */\", () => {\n+            const parentComment = createParentComment([0, 45], \" eslint-disable unused-1, unused-2, used \", [\"unused-1\", \"unused-2\", \"used\"]);\n+\n+            assert.deepStrictEqual(\n+                applyDisableDirectives({\n+                    directives: [\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-1\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 18\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-2\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 28\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"used\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 38\n+                        }\n+                    ],\n+                    problems: [{ line: 2, column: 1, ruleId: \"used\" }],\n+                    reportUnusedDisableDirectives: \"error\"\n+                }),\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused-1').\",\n+                        line: 1,\n+                        column: 18,\n+                        fix: {\n+                            range: [18, 27],\n+                            text: \"\"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    },\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused-2').\",\n+                        line: 1,\n+                        column: 28,\n+                        fix: {\n+                            range: [27, 37],\n+                            text: \"\"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+\n+        it(\"Adds a problem for /* eslint-disable unused-1, unused-2, used, unused-3 */\", () => {\n+            const parentComment = createParentComment([0, 55], \" eslint-disable unused-1, unused-2, used, unused-3 \", [\"unused-1\", \"unused-2\", \"used\", \"unused-3\"]);\n+\n+            assert.deepStrictEqual(\n+                applyDisableDirectives({\n+                    directives: [\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-1\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 18\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-2\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 28\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"used\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 38\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-3\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 43\n+                        }\n+                    ],\n+                    problems: [{ line: 2, column: 1, ruleId: \"used\" }],\n+                    reportUnusedDisableDirectives: \"error\"\n+                }),\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused-1').\",\n+                        line: 1,\n+                        column: 18,\n+                        fix: {\n+                            range: [18, 27],\n+                            text: \"\"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    },\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused-2').\",\n+                        line: 1,\n+                        column: 28,\n+                        fix: {\n+                            range: [27, 37],\n+                            text: \"\"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    },\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused-3').\",\n+                        line: 1,\n+                        column: 43,\n+                        fix: {\n+                            range: [42, 52],\n+                            text: \"\"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+\n+        it(\"Adds a problem for /* eslint-disable unused-1, unused-2 */\", () => {\n+            const parentComment = createParentComment([0, 39], \" eslint-disable unused-1, unused-2 \", [\"unused-1\", \"unused-2\"]);\n+\n+            assert.deepStrictEqual(\n+                applyDisableDirectives({\n+                    directives: [\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-1\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 18\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-2\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 28\n+                        }\n+                    ],\n+                    problems: [],\n+                    reportUnusedDisableDirectives: \"error\"\n+                }),\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused-1' or 'unused-2').\",\n+                        line: 1,\n+                        column: 18,\n+                        fix: {\n+                            range: [0, 39],\n+                            text: \" \"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+\n+        it(\"Adds a problem for /* eslint-disable unused-1, unused-2, unused-3 */\", () => {\n+            const parentComment = createParentComment([0, 49], \" eslint-disable unused-1, unused-2, unused-3 \", [\"unused-1\", \"unused-2\", \"unused-3\"]);\n+\n+            assert.deepStrictEqual(\n+                applyDisableDirectives({\n+                    directives: [\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-1\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 18\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-2\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 28\n+                        },\n+                        {\n+                            parentComment,\n+                            ruleId: \"unused-3\",\n+                            type: \"disable\",\n+                            line: 1,\n+                            column: 38\n+                        }\n+                    ],\n+                    problems: [],\n+                    reportUnusedDisableDirectives: \"error\"\n+                }),\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'unused-1', 'unused-2', or 'unused-3').\",\n+                        line: 1,\n+                        column: 18,\n+                        fix: {\n+                            range: [0, 49],\n+                            text: \" \"\n+                        },\n+                        severity: 2,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+    });\n });"},{"sha":"b53aac56f4a0eb63f64ee23ecd9fcd015ba1cc17","filename":"tests/lib/linter/linter.js","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/eslint/eslint/blob/804d1010f10c607e68966157d78c2621dab0c6e2/tests%2Flib%2Flinter%2Flinter.js","raw_url":"https://github.com/eslint/eslint/raw/804d1010f10c607e68966157d78c2621dab0c6e2/tests%2Flib%2Flinter%2Flinter.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Flinter%2Flinter.js?ref=804d1010f10c607e68966157d78c2621dab0c6e2","patch":"@@ -3300,6 +3300,10 @@ var a = \"test2\";\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 20],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -3316,6 +3320,10 @@ var a = \"test2\";\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 20],\n+                            text: \" \"\n+                        },\n                         severity: 2,\n                         nodeType: null\n                     }\n@@ -3332,6 +3340,10 @@ var a = \"test2\";\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 20],\n+                            text: \" \"\n+                        },\n                         severity: 1,\n                         nodeType: null\n                     }\n@@ -3348,6 +3360,44 @@ var a = \"test2\";\n                         message: \"Unused eslint-disable directive (no problems were reported).\",\n                         line: 1,\n                         column: 1,\n+                        fix: {\n+                            range: [0, 20],\n+                            text: \" \"\n+                        },\n+                        severity: 1,\n+                        nodeType: null\n+                    }\n+                ]\n+            );\n+        });\n+\n+        it(\"reports problems for partially unused eslint-disable comments (in config)\", () => {\n+            const code = \"alert('test'); // eslint-disable-line no-alert, no-redeclare\";\n+            const config = {\n+                reportUnusedDisableDirectives: true,\n+                rules: {\n+                    \"no-alert\": 1,\n+                    \"no-redeclare\": 1\n+                }\n+            };\n+\n+            const messages = linter.verify(code, config, {\n+                filename,\n+                allowInlineConfig: true\n+            });\n+\n+            assert.deepStrictEqual(\n+                messages,\n+                [\n+                    {\n+                        ruleId: null,\n+                        message: \"Unused eslint-disable directive (no problems were reported from 'no-redeclare').\",\n+                        line: 1,\n+                        column: 16,\n+                        fix: {\n+                            range: [46, 60],\n+                            text: \"\"\n+                        },\n                         severity: 1,\n                         nodeType: null\n                     }"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/13812","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/13812/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/13812/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/13812/events","html_url":"https://github.com/eslint/eslint/pull/13812","id":735823240,"node_id":"MDExOlB1bGxSZXF1ZXN0NTE1MTQzMTY1","number":13812,"title":"New: Configurable List Size For Per-Rule Performance Metrics","user":{"login":"bmish","id":698306,"node_id":"MDQ6VXNlcjY5ODMwNg==","avatar_url":"https://avatars.githubusercontent.com/u/698306?v=4","gravatar_id":"","url":"https://api.github.com/users/bmish","html_url":"https://github.com/bmish","followers_url":"https://api.github.com/users/bmish/followers","following_url":"https://api.github.com/users/bmish/following{/other_user}","gists_url":"https://api.github.com/users/bmish/gists{/gist_id}","starred_url":"https://api.github.com/users/bmish/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/bmish/subscriptions","organizations_url":"https://api.github.com/users/bmish/orgs","repos_url":"https://api.github.com/users/bmish/repos","events_url":"https://api.github.com/users/bmish/events{/privacy}","received_events_url":"https://api.github.com/users/bmish/received_events","type":"User","site_admin":false},"labels":[{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":253473350,"node_id":"MDU6TGFiZWwyNTM0NzMzNTA=","url":"https://api.github.com/repos/eslint/eslint/labels/feature","name":"feature","color":"bfd4f2","default":false,"description":"This change adds a new feature to ESLint"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2020-11-04T05:29:51Z","updated_at":"2021-05-07T00:44:22Z","closed_at":"2020-11-07T01:45:49Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/13812","html_url":"https://github.com/eslint/eslint/pull/13812","diff_url":"https://github.com/eslint/eslint/pull/13812.diff","patch_url":"https://github.com/eslint/eslint/pull/13812.patch","merged_at":"2020-11-07T01:45:49Z"},"body":"\r\n<!--\r\n    Thank you for contributing!\r\n\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n#### Prerequisites checklist\r\n\r\n- [X] I have read the [contributing guidelines](https://github.com/eslint/eslint/blob/master/CONTRIBUTING.md).\r\n\r\n#### What is the purpose of this pull request? (put an \"X\" next to an item)\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[X] Add a CLI option\r\n[ ] Add something to the core\r\n[ ] Other, please explain:\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n#### What changes did you make? (Give an overview)\r\n\r\nImplements RFC: https://github.com/eslint/rfcs/tree/master/designs/2020-timing-list-size\r\n\r\nEnables the `TIMING` environment variable to be set to a larger number or `all` in order to show a longer list of per-rule performance metrics when running eslint from the command line.\r\n\r\n#### Is there anything you'd like reviewers to focus on?\r\n\r\nInterested to hear ideas for improving the test coverage.","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/13812/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/13812/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"857a7314e55e22c5dd43189d08c28b86e882bec5","filename":"docs/developer-guide/working-with-rules.md","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/66b00af39fd7c0c86f33cb794b5a76779a17af0b/docs%2Fdeveloper-guide%2Fworking-with-rules.md","raw_url":"https://github.com/eslint/eslint/raw/66b00af39fd7c0c86f33cb794b5a76779a17af0b/docs%2Fdeveloper-guide%2Fworking-with-rules.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Fdeveloper-guide%2Fworking-with-rules.md?ref=66b00af39fd7c0c86f33cb794b5a76779a17af0b","patch":"@@ -720,6 +720,8 @@ Rule   | Time (ms) | Relative\n quotes |    18.066 |   100.0%\n ```\n \n+To see a longer list of results (more than 10), set the environment variable to another value such as `TIMING=50` or `TIMING=all`.\n+\n ## Rule Naming Conventions\n \n The rule naming conventions for ESLint are fairly simple:"},{"sha":"58230306855abe44229a7f650260b7f1f3db0422","filename":"lib/linter/timing.js","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/eslint/eslint/blob/66b00af39fd7c0c86f33cb794b5a76779a17af0b/lib%2Flinter%2Ftiming.js","raw_url":"https://github.com/eslint/eslint/raw/66b00af39fd7c0c86f33cb794b5a76779a17af0b/lib%2Flinter%2Ftiming.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Flinter%2Ftiming.js?ref=66b00af39fd7c0c86f33cb794b5a76779a17af0b","patch":"@@ -44,6 +44,26 @@ const enabled = !!process.env.TIMING;\n const HEADERS = [\"Rule\", \"Time (ms)\", \"Relative\"];\n const ALIGN = [alignLeft, alignRight, alignRight];\n \n+/**\n+ * Decide how many rules to show in the output list.\n+ * @returns {number} the number of rules to show\n+ */\n+function getListSize() {\n+    const MINIMUM_SIZE = 10;\n+\n+    if (typeof process.env.TIMING !== \"string\") {\n+        return MINIMUM_SIZE;\n+    }\n+\n+    if (process.env.TIMING.toLowerCase() === \"all\") {\n+        return Number.POSITIVE_INFINITY;\n+    }\n+\n+    const TIMING_ENV_VAR_AS_INTEGER = Number.parseInt(process.env.TIMING, 10);\n+\n+    return TIMING_ENV_VAR_AS_INTEGER > 10 ? TIMING_ENV_VAR_AS_INTEGER : MINIMUM_SIZE;\n+}\n+\n /* istanbul ignore next */\n /**\n  * display the data\n@@ -61,7 +81,7 @@ function display(data) {\n             return [key, time];\n         })\n         .sort((a, b) => b[1] - a[1])\n-        .slice(0, 10);\n+        .slice(0, getListSize());\n \n     rows.forEach(row => {\n         row.push(`${(row[1] * 100 / total).toFixed(1)}%`);\n@@ -133,7 +153,8 @@ module.exports = (function() {\n \n     return {\n         time,\n-        enabled\n+        enabled,\n+        getListSize\n     };\n \n }());"},{"sha":"e1052348a03ad2a826afc336308f32e5a5955765","filename":"tests/lib/linter/timing.js","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/eslint/eslint/blob/66b00af39fd7c0c86f33cb794b5a76779a17af0b/tests%2Flib%2Flinter%2Ftiming.js","raw_url":"https://github.com/eslint/eslint/raw/66b00af39fd7c0c86f33cb794b5a76779a17af0b/tests%2Flib%2Flinter%2Ftiming.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Flinter%2Ftiming.js?ref=66b00af39fd7c0c86f33cb794b5a76779a17af0b","patch":"@@ -0,0 +1,51 @@\n+\"use strict\";\n+\n+const { getListSize } = require(\"../../../lib/linter/timing\");\n+const assert = require(\"chai\").assert;\n+\n+describe(\"timing\", () => {\n+    describe(\"getListSize()\", () => {\n+        after(() => {\n+            delete process.env.TIMING;\n+        });\n+\n+        it(\"returns minimum list size with small environment variable value\", () => {\n+            delete process.env.TIMING; // With no value.\n+            assert.strictEqual(getListSize(), 10);\n+\n+            process.env.TIMING = \"true\";\n+            assert.strictEqual(getListSize(), 10);\n+\n+            process.env.TIMING = \"foo\";\n+            assert.strictEqual(getListSize(), 10);\n+\n+            process.env.TIMING = \"0\";\n+            assert.strictEqual(getListSize(), 10);\n+\n+            process.env.TIMING = \"1\";\n+            assert.strictEqual(getListSize(), 10);\n+\n+            process.env.TIMING = \"5\";\n+            assert.strictEqual(getListSize(), 10);\n+\n+            process.env.TIMING = \"10\";\n+            assert.strictEqual(getListSize(), 10);\n+        });\n+\n+        it(\"returns longer list size with larger environment variable value\", () => {\n+            process.env.TIMING = \"11\";\n+            assert.strictEqual(getListSize(), 11);\n+\n+            process.env.TIMING = \"100\";\n+            assert.strictEqual(getListSize(), 100);\n+        });\n+\n+        it(\"returns maximum list size with environment variable value of 'all'\", () => {\n+            process.env.TIMING = \"all\";\n+            assert.strictEqual(getListSize(), Number.POSITIVE_INFINITY);\n+\n+            process.env.TIMING = \"ALL\";\n+            assert.strictEqual(getListSize(), Number.POSITIVE_INFINITY);\n+        });\n+    });\n+});"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/13768","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/13768/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/13768/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/13768/events","html_url":"https://github.com/eslint/eslint/pull/13768","id":723899979,"node_id":"MDExOlB1bGxSZXF1ZXN0NTA1Mzg2NzIw","number":13768,"title":"Chore: Increase Mocha timeout for copying fixtures","user":{"login":"btmills","id":1709537,"node_id":"MDQ6VXNlcjE3MDk1Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/1709537?v=4","gravatar_id":"","url":"https://api.github.com/users/btmills","html_url":"https://github.com/btmills","followers_url":"https://api.github.com/users/btmills/followers","following_url":"https://api.github.com/users/btmills/following{/other_user}","gists_url":"https://api.github.com/users/btmills/gists{/gist_id}","starred_url":"https://api.github.com/users/btmills/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/btmills/subscriptions","organizations_url":"https://api.github.com/users/btmills/orgs","repos_url":"https://api.github.com/users/btmills/repos","events_url":"https://api.github.com/users/btmills/events{/privacy}","received_events_url":"https://api.github.com/users/btmills/received_events","type":"User","site_admin":false},"labels":[{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-10-18T04:13:22Z","updated_at":"2021-04-19T00:44:22Z","closed_at":"2020-10-20T13:04:17Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/13768","html_url":"https://github.com/eslint/eslint/pull/13768","diff_url":"https://github.com/eslint/eslint/pull/13768.diff","patch_url":"https://github.com/eslint/eslint/pull/13768.patch","merged_at":"2020-10-20T13:04:17Z"},"body":"<!--\r\n    Thank you for contributing!\r\n\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n#### Prerequisites checklist\r\n\r\n- [x] I have read the [contributing guidelines](https://github.com/eslint/eslint/blob/master/CONTRIBUTING.md).\r\n\r\n#### What is the purpose of this pull request? (put an \"X\" next to an item)\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[x] Other, please explain: Fix GitHub Actions test flakiness\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n#### What changes did you make? (Give an overview)\r\n\r\nFor the last several weeks, our CI jobs have been flaky due to test hook timeouts on the Windows and macOS runners. I traced most of the failures to four `before` hooks that copy the test fixtures to a temporary directory. They usually take ~2.5s, but that occasionally spikes to tens of seconds: in the two times I was able to repro the timeouts, the slowest copy jobs were 25 ([output](https://github.com/eslint/eslint/runs/1269555746#step:5:25)) and 32 seconds.\r\n\r\n#### Is there anything you'd like reviewers to focus on?\r\n\r\n- Rather than increasing the global test timeout, I instead bumped it just for these four hooks that were causing problems. Is the narrower approach acceptable?\r\n- The previous timeout was 10 seconds. Is 60 seconds for these four hooks too much? In 8 samples (2 successful repros &times; 4 hooks), the longest I saw was 32 seconds.\r\n- Since these hooks just call out to the shell, I didn't try to do any optimization that might speed up these operations. Is there something easy I missed? My guess is that resource contention on shared runners is causing slow filesystem performance, but I haven't proven that's the original cause.","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/13768/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/13768/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"b4d65fa1163c63d28eb38968fcc19a13910b7693","filename":"tests/lib/cli-engine/cli-engine.js","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/eslint/eslint/blob/2ee94938a8701ac7aabba15eb152e558aff540c9/tests%2Flib%2Fcli-engine%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/2ee94938a8701ac7aabba15eb152e558aff540c9/tests%2Flib%2Fcli-engine%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fcli-engine%2Fcli-engine.js?ref=2ee94938a8701ac7aabba15eb152e558aff540c9","patch":"@@ -102,7 +102,15 @@ describe(\"CLIEngine\", () => {\n     }\n \n     // copy into clean area so as not to get \"infected\" by this project's .eslintrc files\n-    before(() => {\n+    before(function() {\n+\n+        /*\n+         * GitHub Actions Windows and macOS runners occasionally exhibit\n+         * extremely slow filesystem operations, during which copying fixtures\n+         * exceeds the default test timeout, so raise it just for this hook.\n+         * Mocha uses `this` to set timeouts on an individual hook level.\n+         */\n+        this.timeout(60 * 1000); // eslint-disable-line no-invalid-this\n         shell.mkdir(\"-p\", fixtureDir);\n         shell.cp(\"-r\", \"./tests/fixtures/.\", fixtureDir);\n     });"},{"sha":"7f91b2a95f44dce566191b286feb57b7f1c808d7","filename":"tests/lib/cli-engine/file-enumerator.js","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/eslint/eslint/blob/2ee94938a8701ac7aabba15eb152e558aff540c9/tests%2Flib%2Fcli-engine%2Ffile-enumerator.js","raw_url":"https://github.com/eslint/eslint/raw/2ee94938a8701ac7aabba15eb152e558aff540c9/tests%2Flib%2Fcli-engine%2Ffile-enumerator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fcli-engine%2Ffile-enumerator.js?ref=2ee94938a8701ac7aabba15eb152e558aff540c9","patch":"@@ -211,7 +211,16 @@ describe(\"FileEnumerator\", () => {\n                 );\n             }\n \n-            before(() => {\n+            before(function() {\n+\n+                /*\n+                 * GitHub Actions Windows and macOS runners occasionally\n+                 * exhibit extremely slow filesystem operations, during which\n+                 * copying fixtures exceeds the default test timeout, so raise\n+                 * it just for this hook. Mocha uses `this` to set timeouts on\n+                 * an individual hook level.\n+                 */\n+                this.timeout(60 * 1000); // eslint-disable-line no-invalid-this\n                 fixtureDir = `${os.tmpdir()}/eslint/tests/fixtures/`;\n                 sh.mkdir(\"-p\", fixtureDir);\n                 sh.cp(\"-r\", \"./tests/fixtures/*\", fixtureDir);"},{"sha":"0f8a24c2e28975cb22da24b82bc25ed6779877a7","filename":"tests/lib/cli.js","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/eslint/eslint/blob/2ee94938a8701ac7aabba15eb152e558aff540c9/tests%2Flib%2Fcli.js","raw_url":"https://github.com/eslint/eslint/raw/2ee94938a8701ac7aabba15eb152e558aff540c9/tests%2Flib%2Fcli.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fcli.js?ref=2ee94938a8701ac7aabba15eb152e558aff540c9","patch":"@@ -82,7 +82,15 @@ describe(\"cli\", () => {\n     }\n \n     // copy into clean area so as not to get \"infected\" by this project's .eslintrc files\n-    before(() => {\n+    before(function() {\n+\n+        /*\n+         * GitHub Actions Windows and macOS runners occasionally exhibit\n+         * extremely slow filesystem operations, during which copying fixtures\n+         * exceeds the default test timeout, so raise it just for this hook.\n+         * Mocha uses `this` to set timeouts on an individual hook level.\n+         */\n+        this.timeout(60 * 1000); // eslint-disable-line no-invalid-this\n         fixtureDir = `${os.tmpdir()}/eslint/fixtures`;\n         sh.mkdir(\"-p\", fixtureDir);\n         sh.cp(\"-r\", \"./tests/fixtures/.\", fixtureDir);"},{"sha":"d6abf5a8bda3408c6903bf3756cfe5c458dba385","filename":"tests/lib/eslint/eslint.js","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/eslint/eslint/blob/2ee94938a8701ac7aabba15eb152e558aff540c9/tests%2Flib%2Feslint%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/2ee94938a8701ac7aabba15eb152e558aff540c9/tests%2Flib%2Feslint%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Feslint%2Feslint.js?ref=2ee94938a8701ac7aabba15eb152e558aff540c9","patch":"@@ -86,7 +86,15 @@ describe(\"ESLint\", () => {\n     }\n \n     // copy into clean area so as not to get \"infected\" by this project's .eslintrc files\n-    before(() => {\n+    before(function() {\n+\n+        /*\n+         * GitHub Actions Windows and macOS runners occasionally exhibit\n+         * extremely slow filesystem operations, during which copying fixtures\n+         * exceeds the default test timeout, so raise it just for this hook.\n+         * Mocha uses `this` to set timeouts on an individual hook level.\n+         */\n+        this.timeout(60 * 1000); // eslint-disable-line no-invalid-this\n         shell.mkdir(\"-p\", fixtureDir);\n         shell.cp(\"-r\", \"./tests/fixtures/.\", fixtureDir);\n     });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/13408","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/13408/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/13408/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/13408/events","html_url":"https://github.com/eslint/eslint/pull/13408","id":636525099,"node_id":"MDExOlB1bGxSZXF1ZXN0NDMyNjgxNTcy","number":13408,"title":"Update: rename id-blacklist to id-denylist (fixes #13407)","user":{"login":"kaicataldo","id":7041728,"node_id":"MDQ6VXNlcjcwNDE3Mjg=","avatar_url":"https://avatars.githubusercontent.com/u/7041728?v=4","gravatar_id":"","url":"https://api.github.com/users/kaicataldo","html_url":"https://github.com/kaicataldo","followers_url":"https://api.github.com/users/kaicataldo/followers","following_url":"https://api.github.com/users/kaicataldo/following{/other_user}","gists_url":"https://api.github.com/users/kaicataldo/gists{/gist_id}","starred_url":"https://api.github.com/users/kaicataldo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kaicataldo/subscriptions","organizations_url":"https://api.github.com/users/kaicataldo/orgs","repos_url":"https://api.github.com/users/kaicataldo/repos","events_url":"https://api.github.com/users/kaicataldo/events{/privacy}","received_events_url":"https://api.github.com/users/kaicataldo/received_events","type":"User","site_admin":false},"labels":[{"id":45711352,"node_id":"MDU6TGFiZWw0NTcxMTM1Mg==","url":"https://api.github.com/repos/eslint/eslint/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":"This change enhances an existing feature of ESLint"},{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":{"login":"kaicataldo","id":7041728,"node_id":"MDQ6VXNlcjcwNDE3Mjg=","avatar_url":"https://avatars.githubusercontent.com/u/7041728?v=4","gravatar_id":"","url":"https://api.github.com/users/kaicataldo","html_url":"https://github.com/kaicataldo","followers_url":"https://api.github.com/users/kaicataldo/followers","following_url":"https://api.github.com/users/kaicataldo/following{/other_user}","gists_url":"https://api.github.com/users/kaicataldo/gists{/gist_id}","starred_url":"https://api.github.com/users/kaicataldo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kaicataldo/subscriptions","organizations_url":"https://api.github.com/users/kaicataldo/orgs","repos_url":"https://api.github.com/users/kaicataldo/repos","events_url":"https://api.github.com/users/kaicataldo/events{/privacy}","received_events_url":"https://api.github.com/users/kaicataldo/received_events","type":"User","site_admin":false},"assignees":[{"login":"kaicataldo","id":7041728,"node_id":"MDQ6VXNlcjcwNDE3Mjg=","avatar_url":"https://avatars.githubusercontent.com/u/7041728?v=4","gravatar_id":"","url":"https://api.github.com/users/kaicataldo","html_url":"https://github.com/kaicataldo","followers_url":"https://api.github.com/users/kaicataldo/followers","following_url":"https://api.github.com/users/kaicataldo/following{/other_user}","gists_url":"https://api.github.com/users/kaicataldo/gists{/gist_id}","starred_url":"https://api.github.com/users/kaicataldo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kaicataldo/subscriptions","organizations_url":"https://api.github.com/users/kaicataldo/orgs","repos_url":"https://api.github.com/users/kaicataldo/repos","events_url":"https://api.github.com/users/kaicataldo/events{/privacy}","received_events_url":"https://api.github.com/users/kaicataldo/received_events","type":"User","site_admin":false}],"milestone":null,"comments":2,"created_at":"2020-06-10T20:26:25Z","updated_at":"2020-12-23T17:28:04Z","closed_at":"2020-06-25T17:17:49Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/13408","html_url":"https://github.com/eslint/eslint/pull/13408","diff_url":"https://github.com/eslint/eslint/pull/13408.diff","patch_url":"https://github.com/eslint/eslint/pull/13408.patch","merged_at":"2020-06-25T17:17:49Z"},"body":"<!--\r\n    Thank you for contributing!\r\n\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n#### Prerequisites checklist\r\n\r\n- [X] I have read the [contributing guidelines](https://github.com/eslint/eslint/blob/master/CONTRIBUTING.md).\r\n\r\n#### What is the purpose of this pull request? (put an \"X\" next to an item)\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[X] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[ ] Other, please explain:\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\nfixes #13407\r\n\r\n#### What changes did you make? (Give an overview)\r\nThis PR renames `id-blacklist` to `id-denylist` in a backwards-compatible way. Additionally, this change removes all instances of the term \"blacklist\" in our code.\r\n\r\nAs a follow up, we'll probably want to add a redirect on our website for the documentation.\r\n\r\n#### Is there anything you'd like reviewers to focus on?\r\n1. Note that this word shows up in other projects that we have inlined in our repor for performance testing. Should we change those as well?\r\n1. Have I missed anything?","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/13408/reactions","total_count":6,"+1":1,"-1":2,"laugh":0,"hooray":0,"confused":0,"heart":3,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/13408/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"040f26e894c099f633ca57cbbd40de5fd06c3426","filename":"docs/rules/id-denylist.md","status":"renamed","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/eslint/eslint/blob/df4a175df6044930e1a1aeb1cb6859a8cd96664f/docs%2Frules%2Fid-denylist.md","raw_url":"https://github.com/eslint/eslint/raw/df4a175df6044930e1a1aeb1cb6859a8cd96664f/docs%2Frules%2Fid-denylist.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2Fid-denylist.md?ref=df4a175df6044930e1a1aeb1cb6859a8cd96664f","patch":"@@ -1,20 +1,20 @@\n-# disallow specified identifiers (id-blacklist)\n+# disallow specified identifiers (id-denylist)\n \n > \"There are only two hard things in Computer Science: cache invalidation and naming things.\" — Phil Karlton\n \n-Bad names can lead to hard-to-decipher code. Generic names, such as `data`, don't infer much about the code and the values it receives. This rule allows you to configure a blacklist of bad identifier names, that you don't want to see in your code.\n+Generic names can lead to hard-to-decipher code. This rule allows you to specify a deny list of disallowed identifier names to avoid this practice.\n \n ## Rule Details\n \n This rule disallows specified identifiers in assignments and `function` definitions.\n \n-This rule will catch blacklisted identifiers that are:\n+This rule will catch disallowed identifiers that are:\n \n - variable declarations\n - function declarations\n - object properties assigned to during object creation\n \n-It will not catch blacklisted identifiers that are:\n+It will not catch disallowed identifiers that are:\n \n - function calls (so you can still use functions you do not have control over)\n - object properties (so you can still use objects you do not have control over)\n@@ -27,14 +27,14 @@ For example, to restrict the use of common generic identifiers:\n \n ```json\n {\n-    \"id-blacklist\": [\"error\", \"data\", \"err\", \"e\", \"cb\", \"callback\"]\n+    \"id-denylist\": [\"error\", \"data\", \"err\", \"e\", \"cb\", \"callback\"]\n }\n ```\n \n Examples of **incorrect** code for this rule with sample `\"data\", \"callback\"` restricted identifiers:\n \n ```js\n-/*eslint id-blacklist: [\"error\", \"data\", \"callback\"] */\n+/*eslint id-denylist: [\"error\", \"data\", \"callback\"] */\n \n var data = {...};\n \n@@ -54,7 +54,7 @@ var itemSet = {\n Examples of **correct** code for this rule with sample `\"data\", \"callback\"` restricted identifiers:\n \n ```js\n-/*eslint id-blacklist: [\"error\", \"data\", \"callback\"] */\n+/*eslint id-denylist: [\"error\", \"data\", \"callback\"] */\n \n var encodingOptions = {...};\n \n@@ -79,4 +79,4 @@ foo.data; // all property names that are not assignments are ignored\n \n ## When Not To Use It\n \n-You can turn this rule off if you are happy for identifiers to be named freely.\n+You can turn this rule off if you do not want to restrict the use of certain identifiers.","previous_filename":"docs/rules/id-blacklist.md"},{"sha":"112fd8a9d5515eed6f1a2a3ce76139a0af09c5c0","filename":"lib/rules/id-denylist.js","status":"renamed","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/eslint/eslint/blob/df4a175df6044930e1a1aeb1cb6859a8cd96664f/lib%2Frules%2Fid-denylist.js","raw_url":"https://github.com/eslint/eslint/raw/df4a175df6044930e1a1aeb1cb6859a8cd96664f/lib%2Frules%2Fid-denylist.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fid-denylist.js?ref=df4a175df6044930e1a1aeb1cb6859a8cd96664f","patch":"@@ -1,6 +1,6 @@\n /**\n  * @fileoverview Rule that warns when identifier names that are\n- * blacklisted in the configuration are used.\n+ * specified in the configuration are used.\n  * @author Keith Cirkel (http://keithcirkel.co.uk)\n  */\n \n@@ -117,7 +117,7 @@ module.exports = {\n             description: \"disallow specified identifiers\",\n             category: \"Stylistic Issues\",\n             recommended: false,\n-            url: \"https://eslint.org/docs/rules/id-blacklist\"\n+            url: \"https://eslint.org/docs/rules/id-denylist\"\n         },\n \n         schema: {\n@@ -128,25 +128,25 @@ module.exports = {\n             uniqueItems: true\n         },\n         messages: {\n-            blacklisted: \"Identifier '{{name}}' is blacklisted.\"\n+            restricted: \"Identifier '{{name}}' is restricted.\"\n         }\n     },\n \n     create(context) {\n \n-        const blacklist = new Set(context.options);\n+        const denyList = new Set(context.options);\n         const reportedNodes = new Set();\n \n         let globalScope;\n \n         /**\n-         * Checks whether the given name is blacklisted.\n+         * Checks whether the given name is restricted.\n          * @param {string} name The name to check.\n-         * @returns {boolean} `true` if the name is blacklisted.\n+         * @returns {boolean} `true` if the name is restricted.\n          * @private\n          */\n-        function isBlacklisted(name) {\n-            return blacklist.has(name);\n+        function isRestricted(name) {\n+            return denyList.has(name);\n         }\n \n         /**\n@@ -172,8 +172,8 @@ module.exports = {\n \n             /*\n              * Member access has special rules for checking property names.\n-             * Read access to a property with a blacklisted name is allowed, because it can be on an object that user has no control over.\n-             * Write access isn't allowed, because it potentially creates a new property with a blacklisted name.\n+             * Read access to a property with a restricted name is allowed, because it can be on an object that user has no control over.\n+             * Write access isn't allowed, because it potentially creates a new property with a restricted name.\n              */\n             if (\n                 parent.type === \"MemberExpression\" &&\n@@ -205,7 +205,7 @@ module.exports = {\n             if (!reportedNodes.has(node)) {\n                 context.report({\n                     node,\n-                    messageId: \"blacklisted\",\n+                    messageId: \"restricted\",\n                     data: {\n                         name: node.name\n                     }\n@@ -221,7 +221,7 @@ module.exports = {\n             },\n \n             Identifier(node) {\n-                if (isBlacklisted(node.name) && shouldCheck(node)) {\n+                if (isRestricted(node.name) && shouldCheck(node)) {\n                     report(node);\n                 }\n             }","previous_filename":"lib/rules/id-blacklist.js"},{"sha":"d84ed32a7c1953e9bf68656fcf6c00fc2bc44e46","filename":"lib/rules/index.js","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/eslint/eslint/blob/df4a175df6044930e1a1aeb1cb6859a8cd96664f/lib%2Frules%2Findex.js","raw_url":"https://github.com/eslint/eslint/raw/df4a175df6044930e1a1aeb1cb6859a8cd96664f/lib%2Frules%2Findex.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Findex.js?ref=df4a175df6044930e1a1aeb1cb6859a8cd96664f","patch":"@@ -56,7 +56,10 @@ module.exports = new LazyLoadingRuleMap(Object.entries({\n     \"grouped-accessor-pairs\": () => require(\"./grouped-accessor-pairs\"),\n     \"guard-for-in\": () => require(\"./guard-for-in\"),\n     \"handle-callback-err\": () => require(\"./handle-callback-err\"),\n-    \"id-blacklist\": () => require(\"./id-blacklist\"),\n+\n+    // Renamed to id-denylist.\n+    \"id-blacklist\": () => require(\"./id-denylist\"),\n+    \"id-denylist\": () => require(\"./id-denylist\"),\n     \"id-length\": () => require(\"./id-length\"),\n     \"id-match\": () => require(\"./id-match\"),\n     \"implicit-arrow-linebreak\": () => require(\"./implicit-arrow-linebreak\"),"},{"sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","filename":"tests/lib/rules/id-blacklist.js","status":"modified","additions":0,"deletions":1359,"changes":1359,"blob_url":"https://github.com/eslint/eslint/blob/df4a175df6044930e1a1aeb1cb6859a8cd96664f/tests%2Flib%2Frules%2Fid-blacklist.js","raw_url":"https://github.com/eslint/eslint/raw/df4a175df6044930e1a1aeb1cb6859a8cd96664f/tests%2Flib%2Frules%2Fid-blacklist.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fid-blacklist.js?ref=df4a175df6044930e1a1aeb1cb6859a8cd96664f","patch":"@@ -1,1359 +0,0 @@\n-/**\n- * @fileoverview Tests for id-blacklist rule.\n- * @author Keith Cirkel\n- */\n-\n-\"use strict\";\n-\n-//------------------------------------------------------------------------------\n-// Requirements\n-//------------------------------------------------------------------------------\n-\n-const rule = require(\"../../../lib/rules/id-blacklist\"),\n-    { RuleTester } = require(\"../../../lib/rule-tester\");\n-\n-//------------------------------------------------------------------------------\n-// Tests\n-//------------------------------------------------------------------------------\n-\n-const ruleTester = new RuleTester();\n-const error = { messageId: \"blacklisted\", type: \"Identifier\" };\n-\n-ruleTester.run(\"id-blacklist\", rule, {\n-    valid: [\n-        {\n-            code: \"foo = \\\"bar\\\"\",\n-            options: [\"bar\"]\n-        },\n-        {\n-            code: \"bar = \\\"bar\\\"\",\n-            options: [\"foo\"]\n-        },\n-        {\n-            code: \"foo = \\\"bar\\\"\",\n-            options: [\"f\", \"fo\", \"fooo\", \"bar\"]\n-        },\n-        {\n-            code: \"function foo(){}\",\n-            options: [\"bar\"]\n-        },\n-        {\n-            code: \"foo()\",\n-            options: [\"f\", \"fo\", \"fooo\", \"bar\"]\n-        },\n-        {\n-            code: \"import { foo as bar } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" }\n-        },\n-        {\n-            code: \"export { foo as bar } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" }\n-        },\n-        {\n-            code: \"foo.bar()\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"baz\"]\n-        },\n-        {\n-            code: \"var foo = bar.baz;\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\"]\n-        },\n-        {\n-            code: \"var foo = bar.baz.bing;\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n-        },\n-        {\n-            code: \"foo.bar.baz = bing.bong.bash;\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n-        },\n-        {\n-            code: \"if (foo.bar) {}\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n-        },\n-        {\n-            code: \"var obj = { key: foo.bar };\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n-        },\n-        {\n-            code: \"const {foo: bar} = baz\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-        {\n-            code: \"const {foo: {bar: baz}} = qux\",\n-            options: [\"foo\", \"bar\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-        {\n-            code: \"function foo({ bar: baz }) {}\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-        {\n-            code: \"function foo({ bar: {baz: qux} }) {}\",\n-            options: [\"bar\", \"baz\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-        {\n-            code: \"function foo({baz} = obj.qux) {}\",\n-            options: [\"qux\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-        {\n-            code: \"function foo({ foo: {baz} = obj.qux }) {}\",\n-            options: [\"qux\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-        {\n-            code: \"({a: bar = obj.baz});\",\n-            options: [\"baz\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-        {\n-            code: \"({foo: {a: bar = obj.baz}} = qux);\",\n-            options: [\"baz\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-        {\n-            code: \"var arr = [foo.bar];\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n-        },\n-        {\n-            code: \"[foo.bar]\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n-        },\n-        {\n-            code: \"[foo.bar.nesting]\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n-        },\n-        {\n-            code: \"if (foo.bar === bar.baz) { [foo.bar] }\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n-        },\n-        {\n-            code: \"var myArray = new Array(); var myDate = new Date();\",\n-            options: [\"array\", \"date\", \"mydate\", \"myarray\", \"new\", \"var\"]\n-        },\n-        {\n-            code: \"foo()\",\n-            options: [\"foo\"]\n-        },\n-        {\n-            code: \"foo.bar()\",\n-            options: [\"bar\"]\n-        },\n-        {\n-            code: \"foo.bar\",\n-            options: [\"bar\"]\n-        },\n-        {\n-            code: \"({foo: obj.bar.bar.bar.baz} = {});\",\n-            options: [\"foo\", \"bar\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-        {\n-            code: \"({[obj.bar]: a = baz} = qux);\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6 }\n-        },\n-\n-        // references to global variables\n-        {\n-            code: \"Number.parseInt()\",\n-            options: [\"Number\"]\n-        },\n-        {\n-            code: \"x = Number.NaN;\",\n-            options: [\"Number\"]\n-        },\n-        {\n-            code: \"var foo = undefined;\",\n-            options: [\"undefined\"]\n-        },\n-        {\n-            code: \"if (foo === undefined);\",\n-            options: [\"undefined\"]\n-        },\n-        {\n-            code: \"obj[undefined] = 5;\", // creates obj[\"undefined\"]. It should be disallowed, but the rule doesn't know values of globals and can't control computed access.\n-            options: [\"undefined\"]\n-        },\n-        {\n-            code: \"foo = { [myGlobal]: 1 };\",\n-            options: [\"myGlobal\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            globals: { myGlobal: \"readonly\" }\n-        },\n-        {\n-            code: \"({ myGlobal } = foo);\", // writability doesn't affect the logic, it's always assumed that user doesn't have control over the names of globals.\n-            options: [\"myGlobal\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            globals: { myGlobal: \"writable\" }\n-        },\n-        {\n-            code: \"/* global myGlobal: readonly */ myGlobal = 5;\",\n-            options: [\"myGlobal\"]\n-        },\n-        {\n-            code: \"var foo = [Map];\",\n-            options: [\"Map\"],\n-            env: { es6: true }\n-        },\n-        {\n-            code: \"var foo = { bar: window.baz };\",\n-            options: [\"window\"],\n-            env: { browser: true }\n-        }\n-    ],\n-    invalid: [\n-        {\n-            code: \"foo = \\\"bar\\\"\",\n-            options: [\"foo\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"bar = \\\"bar\\\"\",\n-            options: [\"bar\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"foo = \\\"bar\\\"\",\n-            options: [\"f\", \"fo\", \"foo\", \"bar\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"function foo(){}\",\n-            options: [\"f\", \"fo\", \"foo\", \"bar\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"import foo from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"import * as foo from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"export * as foo from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 2020, sourceType: \"module\" },\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"import { foo } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"import { foo as bar } from 'mod'\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"bar\" },\n-                type: \"Identifier\",\n-                column: 17\n-            }]\n-        },\n-        {\n-            code: \"import { foo as bar } from 'mod'\",\n-            options: [\"foo\", \"bar\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"bar\" },\n-                type: \"Identifier\",\n-                column: 17\n-            }]\n-        },\n-        {\n-            code: \"import { foo as foo } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"foo\" },\n-                type: \"Identifier\",\n-                column: 17\n-            }]\n-        },\n-        {\n-            code: \"import { foo, foo as bar } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"foo\" },\n-                type: \"Identifier\",\n-                column: 10\n-            }]\n-        },\n-        {\n-            code: \"import { foo as bar, foo } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"foo\" },\n-                type: \"Identifier\",\n-                column: 22\n-            }]\n-        },\n-        {\n-            code: \"import foo, { foo as bar } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"foo\" },\n-                type: \"Identifier\",\n-                column: 8\n-            }]\n-        },\n-        {\n-            code: \"var foo; export { foo as bar };\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"bar\" },\n-                type: \"Identifier\",\n-                column: 26\n-            }]\n-        },\n-        {\n-            code: \"var foo; export { foo };\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 5\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 19\n-                }\n-            ]\n-        },\n-        {\n-            code: \"var foo; export { foo as bar };\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 5\n-                },\n-\n-                // reports each occurrence of local identifier, although it's renamed in this export specifier\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 19\n-                }\n-            ]\n-        },\n-        {\n-            code: \"var foo; export { foo as foo };\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 5\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 19\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 26\n-                }\n-            ]\n-        },\n-        {\n-            code: \"var foo; export { foo as bar };\",\n-            options: [\"foo\", \"bar\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 5\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 19\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 26\n-                }\n-            ]\n-        },\n-        {\n-            code: \"export { foo } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"export { foo as bar } from 'mod'\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"bar\" },\n-                type: \"Identifier\",\n-                column: 17\n-            }]\n-        },\n-        {\n-            code: \"export { foo as bar } from 'mod'\",\n-            options: [\"foo\", \"bar\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"bar\" },\n-                type: \"Identifier\",\n-                column: 17\n-            }]\n-        },\n-        {\n-            code: \"export { foo as foo } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"foo\" },\n-                type: \"Identifier\",\n-                column: 17\n-            }]\n-        },\n-        {\n-            code: \"export { foo, foo as bar } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"foo\" },\n-                type: \"Identifier\",\n-                column: 10\n-            }]\n-        },\n-        {\n-            code: \"export { foo as bar, foo } from 'mod'\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"foo\" },\n-                type: \"Identifier\",\n-                column: 22\n-            }]\n-        },\n-        {\n-            code: \"foo.bar()\",\n-            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"baz\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"foo[bar] = baz;\",\n-            options: [\"bar\"],\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"bar\" },\n-                type: \"Identifier\"\n-            }]\n-        },\n-        {\n-            code: \"baz = foo[bar];\",\n-            options: [\"bar\"],\n-            errors: [{\n-                messageId: \"blacklisted\",\n-                data: { name: \"bar\" },\n-                type: \"Identifier\"\n-            }]\n-        },\n-        {\n-            code: \"var foo = bar.baz;\",\n-            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"barr\", \"bazz\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"var foo = bar.baz;\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"bar\", \"bazz\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"if (foo.bar) {}\",\n-            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"var obj = { key: foo.bar };\",\n-            options: [\"obj\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"var obj = { key: foo.bar };\",\n-            options: [\"key\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"var obj = { key: foo.bar };\",\n-            options: [\"foo\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"var arr = [foo.bar];\",\n-            options: [\"arr\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"var arr = [foo.bar];\",\n-            options: [\"foo\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"[foo.bar]\",\n-            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"if (foo.bar === bar.baz) { [bing.baz] }\",\n-            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"if (foo.bar === bar.baz) { [foo.bar] }\",\n-            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"bar\", \"bazz\", \"bingg\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"var myArray = new Array(); var myDate = new Date();\",\n-            options: [\"array\", \"date\", \"myDate\", \"myarray\", \"new\", \"var\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"var myArray = new Array(); var myDate = new Date();\",\n-            options: [\"array\", \"date\", \"mydate\", \"myArray\", \"new\", \"var\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"foo.bar = 1\",\n-            options: [\"bar\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"foo.bar.baz = 1\",\n-            options: [\"bar\", \"baz\"],\n-            errors: [\n-                error\n-            ]\n-        },\n-        {\n-            code: \"const {foo} = baz\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 8\n-                }\n-            ]\n-        },\n-        {\n-            code: \"const {foo: bar} = baz\",\n-            options: [\"foo\", \"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 13\n-                }\n-            ]\n-        },\n-        {\n-            code: \"const {[foo]: bar} = baz\",\n-            options: [\"foo\", \"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 9\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 15\n-                }\n-            ]\n-        },\n-        {\n-            code: \"const {foo: {bar: baz}} = qux\",\n-            options: [\"foo\", \"bar\", \"baz\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"baz\" },\n-                    type: \"Identifier\",\n-                    column: 19\n-                }\n-            ]\n-        },\n-        {\n-            code: \"const {foo: {[bar]: baz}} = qux\",\n-            options: [\"foo\", \"bar\", \"baz\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 15\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"baz\" },\n-                    type: \"Identifier\",\n-                    column: 21\n-                }\n-            ]\n-        },\n-        {\n-            code: \"const {[foo]: {[bar]: baz}} = qux\",\n-            options: [\"foo\", \"bar\", \"baz\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 9\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 17\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"baz\" },\n-                    type: \"Identifier\",\n-                    column: 23\n-                }\n-            ]\n-        },\n-        {\n-            code: \"function foo({ bar: baz }) {}\",\n-            options: [\"bar\", \"baz\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"baz\" },\n-                    type: \"Identifier\",\n-                    column: 21\n-                }\n-            ]\n-        },\n-        {\n-            code: \"function foo({ bar: {baz: qux} }) {}\",\n-            options: [\"bar\", \"baz\", \"qux\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"qux\" },\n-                    type: \"Identifier\",\n-                    column: 27\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({foo: obj.bar} = baz);\",\n-            options: [\"foo\", \"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 12\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({foo: obj.bar.bar.bar.baz} = {});\",\n-            options: [\"foo\", \"bar\", \"baz\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"baz\" },\n-                    type: \"Identifier\",\n-                    column: 24\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({[foo]: obj.bar} = baz);\",\n-            options: [\"foo\", \"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 4\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 14\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({foo: { a: obj.bar }} = baz);\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 17\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({a: obj.bar = baz} = qux);\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 10\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({a: obj.bar.bar.baz = obj.qux} = obj.qux);\",\n-            options: [\"a\", \"bar\", \"baz\", \"qux\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"baz\" },\n-                    type: \"Identifier\",\n-                    column: 18\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({a: obj[bar] = obj.qux} = obj.qux);\",\n-            options: [\"a\", \"bar\", \"baz\", \"qux\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 10\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({a: [obj.bar] = baz} = qux);\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 11\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({foo: { a: obj.bar = baz}} = qux);\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 17\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({foo: { [a]: obj.bar }} = baz);\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 19\n-                }\n-            ]\n-        },\n-        {\n-            code: \"({...obj.bar} = baz);\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 9 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 10\n-                }\n-            ]\n-        },\n-        {\n-            code: \"([obj.bar] = baz);\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 7\n-                }\n-            ]\n-        },\n-        {\n-            code: \"const [bar] = baz;\",\n-            options: [\"bar\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"bar\" },\n-                    type: \"Identifier\",\n-                    column: 8\n-                }\n-            ]\n-        },\n-\n-        // not a reference to a global variable, because it isn't a reference to a variable\n-        {\n-            code: \"foo.undefined = 1;\",\n-            options: [\"undefined\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\"\n-                }\n-            ]\n-        },\n-        {\n-            code: \"var foo = { undefined: 1 };\",\n-            options: [\"undefined\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\"\n-                }\n-            ]\n-        },\n-        {\n-            code: \"var foo = { undefined: undefined };\",\n-            options: [\"undefined\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\",\n-                    column: 13\n-                }\n-            ]\n-        },\n-        {\n-            code: \"var foo = { Number() {} };\",\n-            options: [\"Number\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\"\n-                }\n-            ]\n-        },\n-        {\n-            code: \"class Foo { Number() {} }\",\n-            options: [\"Number\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\"\n-                }\n-            ]\n-        },\n-        {\n-            code: \"myGlobal: while(foo) { break myGlobal; } \",\n-            options: [\"myGlobal\"],\n-            globals: { myGlobal: \"readonly\" },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"myGlobal\" },\n-                    type: \"Identifier\",\n-                    column: 1\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"myGlobal\" },\n-                    type: \"Identifier\",\n-                    column: 30\n-                }\n-            ]\n-        },\n-\n-        // globals declared in the given source code are not excluded from consideration\n-        {\n-            code: \"const foo = 1; bar = foo;\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 7\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 22\n-                }\n-            ]\n-        },\n-        {\n-            code: \"let foo; foo = bar;\",\n-            options: [\"foo\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 5\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 10\n-                }\n-            ]\n-        },\n-        {\n-            code: \"bar = foo; var foo;\",\n-            options: [\"foo\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 7\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 16\n-                }\n-            ]\n-        },\n-        {\n-            code: \"function foo() {} var bar = foo;\",\n-            options: [\"foo\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 10\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"foo\" },\n-                    type: \"Identifier\",\n-                    column: 29\n-                }\n-            ]\n-        },\n-        {\n-            code: \"class Foo {} var bar = Foo;\",\n-            options: [\"Foo\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Foo\" },\n-                    type: \"Identifier\",\n-                    column: 7\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Foo\" },\n-                    type: \"Identifier\",\n-                    column: 24\n-                }\n-            ]\n-        },\n-\n-        // redeclared globals are not excluded from consideration\n-        {\n-            code: \"let undefined; undefined = 1;\",\n-            options: [\"undefined\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\",\n-                    column: 5\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\",\n-                    column: 16\n-                }\n-            ]\n-        },\n-        {\n-            code: \"foo = undefined; var undefined;\",\n-            options: [\"undefined\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\",\n-                    column: 7\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\",\n-                    column: 22\n-                }\n-            ]\n-        },\n-        {\n-            code: \"function undefined(){} x = undefined;\",\n-            options: [\"undefined\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\",\n-                    column: 10\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\",\n-                    column: 28\n-                }\n-            ]\n-        },\n-        {\n-            code: \"class Number {} x = Number.NaN;\",\n-            options: [\"Number\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\",\n-                    column: 7\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\",\n-                    column: 21\n-                }\n-            ]\n-        },\n-\n-        /*\n-         * Assignment to a property with a blacklisted name isn't allowed, in general.\n-         * In this case, that restriction prevents creating a global variable with a blacklisted name.\n-         */\n-        {\n-            code: \"/* globals myGlobal */ window.myGlobal = 5; foo = myGlobal;\",\n-            options: [\"myGlobal\"],\n-            env: { browser: true },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"myGlobal\" },\n-                    type: \"Identifier\",\n-                    column: 31\n-                }\n-            ]\n-        },\n-\n-        // disabled global variables\n-        {\n-            code: \"var foo = undefined;\",\n-            options: [\"undefined\"],\n-            globals: { undefined: \"off\" },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\"\n-                }\n-            ]\n-        },\n-        {\n-            code: \"/* globals Number: off */ Number.parseInt()\",\n-            options: [\"Number\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\"\n-                }\n-            ]\n-        },\n-        {\n-            code: \"var foo = [Map];\", // this actually isn't a disabled global: it was never enabled because es6 environment isn't enabled\n-            options: [\"Map\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Map\" },\n-                    type: \"Identifier\"\n-                }\n-            ]\n-        },\n-\n-        // shadowed global variables\n-        {\n-            code: \"if (foo) { let undefined; bar = undefined; }\",\n-            options: [\"undefined\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\",\n-                    column: 16\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\",\n-                    column: 33\n-                }\n-            ]\n-        },\n-        {\n-            code: \"function foo(Number) { var x = Number.NaN; }\",\n-            options: [\"Number\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\",\n-                    column: 14\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\",\n-                    column: 32\n-                }\n-            ]\n-        },\n-        {\n-            code: \"function foo() { var myGlobal; x = myGlobal; }\",\n-            options: [\"myGlobal\"],\n-            globals: { myGlobal: \"readonly\" },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"myGlobal\" },\n-                    type: \"Identifier\",\n-                    column: 22\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"myGlobal\" },\n-                    type: \"Identifier\",\n-                    column: 36\n-                }\n-            ]\n-        },\n-        {\n-            code: \"function foo(bar) { return Number.parseInt(bar); } const Number = 1;\",\n-            options: [\"Number\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\",\n-                    column: 28\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\",\n-                    column: 58\n-                }\n-            ]\n-        },\n-        {\n-            code: \"import Number from 'myNumber'; const foo = Number.parseInt(bar);\",\n-            options: [\"Number\"],\n-            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\",\n-                    column: 8\n-                },\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"Number\" },\n-                    type: \"Identifier\",\n-                    column: 44\n-                }\n-            ]\n-        },\n-        {\n-            code: \"var foo = function undefined() {};\",\n-            options: [\"undefined\"],\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\"\n-                }\n-            ]\n-        },\n-\n-        // this is a reference to a global variable, but at the same time creates a property with a blacklisted name\n-        {\n-            code: \"var foo = { undefined }\",\n-            options: [\"undefined\"],\n-            parserOptions: { ecmaVersion: 6 },\n-            errors: [\n-                {\n-                    messageId: \"blacklisted\",\n-                    data: { name: \"undefined\" },\n-                    type: \"Identifier\"\n-                }\n-            ]\n-        }\n-    ]\n-});"},{"sha":"6da179d99ffcc360dd1f8ce39da7dea7238ab389","filename":"tests/lib/rules/id-denylist.js","status":"added","additions":1359,"deletions":0,"changes":1359,"blob_url":"https://github.com/eslint/eslint/blob/df4a175df6044930e1a1aeb1cb6859a8cd96664f/tests%2Flib%2Frules%2Fid-denylist.js","raw_url":"https://github.com/eslint/eslint/raw/df4a175df6044930e1a1aeb1cb6859a8cd96664f/tests%2Flib%2Frules%2Fid-denylist.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fid-denylist.js?ref=df4a175df6044930e1a1aeb1cb6859a8cd96664f","patch":"@@ -0,0 +1,1359 @@\n+/**\n+ * @fileoverview Tests for id-denylist rule.\n+ * @author Keith Cirkel\n+ */\n+\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+const rule = require(\"../../../lib/rules/id-denylist\"),\n+    { RuleTester } = require(\"../../../lib/rule-tester\");\n+\n+//------------------------------------------------------------------------------\n+// Tests\n+//------------------------------------------------------------------------------\n+\n+const ruleTester = new RuleTester();\n+const error = { messageId: \"restricted\", type: \"Identifier\" };\n+\n+ruleTester.run(\"id-denylist\", rule, {\n+    valid: [\n+        {\n+            code: \"foo = \\\"bar\\\"\",\n+            options: [\"bar\"]\n+        },\n+        {\n+            code: \"bar = \\\"bar\\\"\",\n+            options: [\"foo\"]\n+        },\n+        {\n+            code: \"foo = \\\"bar\\\"\",\n+            options: [\"f\", \"fo\", \"fooo\", \"bar\"]\n+        },\n+        {\n+            code: \"function foo(){}\",\n+            options: [\"bar\"]\n+        },\n+        {\n+            code: \"foo()\",\n+            options: [\"f\", \"fo\", \"fooo\", \"bar\"]\n+        },\n+        {\n+            code: \"import { foo as bar } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" }\n+        },\n+        {\n+            code: \"export { foo as bar } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" }\n+        },\n+        {\n+            code: \"foo.bar()\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"baz\"]\n+        },\n+        {\n+            code: \"var foo = bar.baz;\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\"]\n+        },\n+        {\n+            code: \"var foo = bar.baz.bing;\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n+        },\n+        {\n+            code: \"foo.bar.baz = bing.bong.bash;\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n+        },\n+        {\n+            code: \"if (foo.bar) {}\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n+        },\n+        {\n+            code: \"var obj = { key: foo.bar };\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n+        },\n+        {\n+            code: \"const {foo: bar} = baz\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+        {\n+            code: \"const {foo: {bar: baz}} = qux\",\n+            options: [\"foo\", \"bar\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+        {\n+            code: \"function foo({ bar: baz }) {}\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+        {\n+            code: \"function foo({ bar: {baz: qux} }) {}\",\n+            options: [\"bar\", \"baz\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+        {\n+            code: \"function foo({baz} = obj.qux) {}\",\n+            options: [\"qux\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+        {\n+            code: \"function foo({ foo: {baz} = obj.qux }) {}\",\n+            options: [\"qux\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+        {\n+            code: \"({a: bar = obj.baz});\",\n+            options: [\"baz\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+        {\n+            code: \"({foo: {a: bar = obj.baz}} = qux);\",\n+            options: [\"baz\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+        {\n+            code: \"var arr = [foo.bar];\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n+        },\n+        {\n+            code: \"[foo.bar]\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n+        },\n+        {\n+            code: \"[foo.bar.nesting]\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n+        },\n+        {\n+            code: \"if (foo.bar === bar.baz) { [foo.bar] }\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"]\n+        },\n+        {\n+            code: \"var myArray = new Array(); var myDate = new Date();\",\n+            options: [\"array\", \"date\", \"mydate\", \"myarray\", \"new\", \"var\"]\n+        },\n+        {\n+            code: \"foo()\",\n+            options: [\"foo\"]\n+        },\n+        {\n+            code: \"foo.bar()\",\n+            options: [\"bar\"]\n+        },\n+        {\n+            code: \"foo.bar\",\n+            options: [\"bar\"]\n+        },\n+        {\n+            code: \"({foo: obj.bar.bar.bar.baz} = {});\",\n+            options: [\"foo\", \"bar\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+        {\n+            code: \"({[obj.bar]: a = baz} = qux);\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6 }\n+        },\n+\n+        // references to global variables\n+        {\n+            code: \"Number.parseInt()\",\n+            options: [\"Number\"]\n+        },\n+        {\n+            code: \"x = Number.NaN;\",\n+            options: [\"Number\"]\n+        },\n+        {\n+            code: \"var foo = undefined;\",\n+            options: [\"undefined\"]\n+        },\n+        {\n+            code: \"if (foo === undefined);\",\n+            options: [\"undefined\"]\n+        },\n+        {\n+            code: \"obj[undefined] = 5;\", // creates obj[\"undefined\"]. It should be disallowed, but the rule doesn't know values of globals and can't control computed access.\n+            options: [\"undefined\"]\n+        },\n+        {\n+            code: \"foo = { [myGlobal]: 1 };\",\n+            options: [\"myGlobal\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            globals: { myGlobal: \"readonly\" }\n+        },\n+        {\n+            code: \"({ myGlobal } = foo);\", // writability doesn't affect the logic, it's always assumed that user doesn't have control over the names of globals.\n+            options: [\"myGlobal\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            globals: { myGlobal: \"writable\" }\n+        },\n+        {\n+            code: \"/* global myGlobal: readonly */ myGlobal = 5;\",\n+            options: [\"myGlobal\"]\n+        },\n+        {\n+            code: \"var foo = [Map];\",\n+            options: [\"Map\"],\n+            env: { es6: true }\n+        },\n+        {\n+            code: \"var foo = { bar: window.baz };\",\n+            options: [\"window\"],\n+            env: { browser: true }\n+        }\n+    ],\n+    invalid: [\n+        {\n+            code: \"foo = \\\"bar\\\"\",\n+            options: [\"foo\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"bar = \\\"bar\\\"\",\n+            options: [\"bar\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"foo = \\\"bar\\\"\",\n+            options: [\"f\", \"fo\", \"foo\", \"bar\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"function foo(){}\",\n+            options: [\"f\", \"fo\", \"foo\", \"bar\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"import foo from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"import * as foo from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"export * as foo from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 2020, sourceType: \"module\" },\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"import { foo } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"import { foo as bar } from 'mod'\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"bar\" },\n+                type: \"Identifier\",\n+                column: 17\n+            }]\n+        },\n+        {\n+            code: \"import { foo as bar } from 'mod'\",\n+            options: [\"foo\", \"bar\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"bar\" },\n+                type: \"Identifier\",\n+                column: 17\n+            }]\n+        },\n+        {\n+            code: \"import { foo as foo } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"foo\" },\n+                type: \"Identifier\",\n+                column: 17\n+            }]\n+        },\n+        {\n+            code: \"import { foo, foo as bar } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"foo\" },\n+                type: \"Identifier\",\n+                column: 10\n+            }]\n+        },\n+        {\n+            code: \"import { foo as bar, foo } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"foo\" },\n+                type: \"Identifier\",\n+                column: 22\n+            }]\n+        },\n+        {\n+            code: \"import foo, { foo as bar } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"foo\" },\n+                type: \"Identifier\",\n+                column: 8\n+            }]\n+        },\n+        {\n+            code: \"var foo; export { foo as bar };\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"bar\" },\n+                type: \"Identifier\",\n+                column: 26\n+            }]\n+        },\n+        {\n+            code: \"var foo; export { foo };\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 5\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 19\n+                }\n+            ]\n+        },\n+        {\n+            code: \"var foo; export { foo as bar };\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 5\n+                },\n+\n+                // reports each occurrence of local identifier, although it's renamed in this export specifier\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 19\n+                }\n+            ]\n+        },\n+        {\n+            code: \"var foo; export { foo as foo };\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 5\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 19\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 26\n+                }\n+            ]\n+        },\n+        {\n+            code: \"var foo; export { foo as bar };\",\n+            options: [\"foo\", \"bar\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 5\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 19\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 26\n+                }\n+            ]\n+        },\n+        {\n+            code: \"export { foo } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"export { foo as bar } from 'mod'\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"bar\" },\n+                type: \"Identifier\",\n+                column: 17\n+            }]\n+        },\n+        {\n+            code: \"export { foo as bar } from 'mod'\",\n+            options: [\"foo\", \"bar\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"bar\" },\n+                type: \"Identifier\",\n+                column: 17\n+            }]\n+        },\n+        {\n+            code: \"export { foo as foo } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"foo\" },\n+                type: \"Identifier\",\n+                column: 17\n+            }]\n+        },\n+        {\n+            code: \"export { foo, foo as bar } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"foo\" },\n+                type: \"Identifier\",\n+                column: 10\n+            }]\n+        },\n+        {\n+            code: \"export { foo as bar, foo } from 'mod'\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"foo\" },\n+                type: \"Identifier\",\n+                column: 22\n+            }]\n+        },\n+        {\n+            code: \"foo.bar()\",\n+            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"baz\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"foo[bar] = baz;\",\n+            options: [\"bar\"],\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"bar\" },\n+                type: \"Identifier\"\n+            }]\n+        },\n+        {\n+            code: \"baz = foo[bar];\",\n+            options: [\"bar\"],\n+            errors: [{\n+                messageId: \"restricted\",\n+                data: { name: \"bar\" },\n+                type: \"Identifier\"\n+            }]\n+        },\n+        {\n+            code: \"var foo = bar.baz;\",\n+            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"barr\", \"bazz\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"var foo = bar.baz;\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"bar\", \"bazz\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"if (foo.bar) {}\",\n+            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"var obj = { key: foo.bar };\",\n+            options: [\"obj\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"var obj = { key: foo.bar };\",\n+            options: [\"key\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"var obj = { key: foo.bar };\",\n+            options: [\"foo\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"var arr = [foo.bar];\",\n+            options: [\"arr\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"var arr = [foo.bar];\",\n+            options: [\"foo\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"[foo.bar]\",\n+            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"if (foo.bar === bar.baz) { [bing.baz] }\",\n+            options: [\"f\", \"fo\", \"foo\", \"b\", \"ba\", \"barr\", \"bazz\", \"bingg\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"if (foo.bar === bar.baz) { [foo.bar] }\",\n+            options: [\"f\", \"fo\", \"fooo\", \"b\", \"ba\", \"bar\", \"bazz\", \"bingg\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"var myArray = new Array(); var myDate = new Date();\",\n+            options: [\"array\", \"date\", \"myDate\", \"myarray\", \"new\", \"var\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"var myArray = new Array(); var myDate = new Date();\",\n+            options: [\"array\", \"date\", \"mydate\", \"myArray\", \"new\", \"var\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"foo.bar = 1\",\n+            options: [\"bar\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"foo.bar.baz = 1\",\n+            options: [\"bar\", \"baz\"],\n+            errors: [\n+                error\n+            ]\n+        },\n+        {\n+            code: \"const {foo} = baz\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 8\n+                }\n+            ]\n+        },\n+        {\n+            code: \"const {foo: bar} = baz\",\n+            options: [\"foo\", \"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 13\n+                }\n+            ]\n+        },\n+        {\n+            code: \"const {[foo]: bar} = baz\",\n+            options: [\"foo\", \"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 9\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 15\n+                }\n+            ]\n+        },\n+        {\n+            code: \"const {foo: {bar: baz}} = qux\",\n+            options: [\"foo\", \"bar\", \"baz\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"baz\" },\n+                    type: \"Identifier\",\n+                    column: 19\n+                }\n+            ]\n+        },\n+        {\n+            code: \"const {foo: {[bar]: baz}} = qux\",\n+            options: [\"foo\", \"bar\", \"baz\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 15\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"baz\" },\n+                    type: \"Identifier\",\n+                    column: 21\n+                }\n+            ]\n+        },\n+        {\n+            code: \"const {[foo]: {[bar]: baz}} = qux\",\n+            options: [\"foo\", \"bar\", \"baz\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 9\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 17\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"baz\" },\n+                    type: \"Identifier\",\n+                    column: 23\n+                }\n+            ]\n+        },\n+        {\n+            code: \"function foo({ bar: baz }) {}\",\n+            options: [\"bar\", \"baz\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"baz\" },\n+                    type: \"Identifier\",\n+                    column: 21\n+                }\n+            ]\n+        },\n+        {\n+            code: \"function foo({ bar: {baz: qux} }) {}\",\n+            options: [\"bar\", \"baz\", \"qux\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"qux\" },\n+                    type: \"Identifier\",\n+                    column: 27\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({foo: obj.bar} = baz);\",\n+            options: [\"foo\", \"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 12\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({foo: obj.bar.bar.bar.baz} = {});\",\n+            options: [\"foo\", \"bar\", \"baz\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"baz\" },\n+                    type: \"Identifier\",\n+                    column: 24\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({[foo]: obj.bar} = baz);\",\n+            options: [\"foo\", \"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 4\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 14\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({foo: { a: obj.bar }} = baz);\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 17\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({a: obj.bar = baz} = qux);\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 10\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({a: obj.bar.bar.baz = obj.qux} = obj.qux);\",\n+            options: [\"a\", \"bar\", \"baz\", \"qux\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"baz\" },\n+                    type: \"Identifier\",\n+                    column: 18\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({a: obj[bar] = obj.qux} = obj.qux);\",\n+            options: [\"a\", \"bar\", \"baz\", \"qux\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 10\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({a: [obj.bar] = baz} = qux);\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 11\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({foo: { a: obj.bar = baz}} = qux);\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 17\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({foo: { [a]: obj.bar }} = baz);\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 19\n+                }\n+            ]\n+        },\n+        {\n+            code: \"({...obj.bar} = baz);\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 9 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 10\n+                }\n+            ]\n+        },\n+        {\n+            code: \"([obj.bar] = baz);\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 7\n+                }\n+            ]\n+        },\n+        {\n+            code: \"const [bar] = baz;\",\n+            options: [\"bar\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"bar\" },\n+                    type: \"Identifier\",\n+                    column: 8\n+                }\n+            ]\n+        },\n+\n+        // not a reference to a global variable, because it isn't a reference to a variable\n+        {\n+            code: \"foo.undefined = 1;\",\n+            options: [\"undefined\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\"\n+                }\n+            ]\n+        },\n+        {\n+            code: \"var foo = { undefined: 1 };\",\n+            options: [\"undefined\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\"\n+                }\n+            ]\n+        },\n+        {\n+            code: \"var foo = { undefined: undefined };\",\n+            options: [\"undefined\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\",\n+                    column: 13\n+                }\n+            ]\n+        },\n+        {\n+            code: \"var foo = { Number() {} };\",\n+            options: [\"Number\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\"\n+                }\n+            ]\n+        },\n+        {\n+            code: \"class Foo { Number() {} }\",\n+            options: [\"Number\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\"\n+                }\n+            ]\n+        },\n+        {\n+            code: \"myGlobal: while(foo) { break myGlobal; } \",\n+            options: [\"myGlobal\"],\n+            globals: { myGlobal: \"readonly\" },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"myGlobal\" },\n+                    type: \"Identifier\",\n+                    column: 1\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"myGlobal\" },\n+                    type: \"Identifier\",\n+                    column: 30\n+                }\n+            ]\n+        },\n+\n+        // globals declared in the given source code are not excluded from consideration\n+        {\n+            code: \"const foo = 1; bar = foo;\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 7\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 22\n+                }\n+            ]\n+        },\n+        {\n+            code: \"let foo; foo = bar;\",\n+            options: [\"foo\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 5\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 10\n+                }\n+            ]\n+        },\n+        {\n+            code: \"bar = foo; var foo;\",\n+            options: [\"foo\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 7\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 16\n+                }\n+            ]\n+        },\n+        {\n+            code: \"function foo() {} var bar = foo;\",\n+            options: [\"foo\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 10\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"foo\" },\n+                    type: \"Identifier\",\n+                    column: 29\n+                }\n+            ]\n+        },\n+        {\n+            code: \"class Foo {} var bar = Foo;\",\n+            options: [\"Foo\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Foo\" },\n+                    type: \"Identifier\",\n+                    column: 7\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Foo\" },\n+                    type: \"Identifier\",\n+                    column: 24\n+                }\n+            ]\n+        },\n+\n+        // redeclared globals are not excluded from consideration\n+        {\n+            code: \"let undefined; undefined = 1;\",\n+            options: [\"undefined\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\",\n+                    column: 5\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\",\n+                    column: 16\n+                }\n+            ]\n+        },\n+        {\n+            code: \"foo = undefined; var undefined;\",\n+            options: [\"undefined\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\",\n+                    column: 7\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\",\n+                    column: 22\n+                }\n+            ]\n+        },\n+        {\n+            code: \"function undefined(){} x = undefined;\",\n+            options: [\"undefined\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\",\n+                    column: 10\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\",\n+                    column: 28\n+                }\n+            ]\n+        },\n+        {\n+            code: \"class Number {} x = Number.NaN;\",\n+            options: [\"Number\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\",\n+                    column: 7\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\",\n+                    column: 21\n+                }\n+            ]\n+        },\n+\n+        /*\n+         * Assignment to a property with a restricted name isn't allowed, in general.\n+         * In this case, that restriction prevents creating a global variable with a restricted name.\n+         */\n+        {\n+            code: \"/* globals myGlobal */ window.myGlobal = 5; foo = myGlobal;\",\n+            options: [\"myGlobal\"],\n+            env: { browser: true },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"myGlobal\" },\n+                    type: \"Identifier\",\n+                    column: 31\n+                }\n+            ]\n+        },\n+\n+        // disabled global variables\n+        {\n+            code: \"var foo = undefined;\",\n+            options: [\"undefined\"],\n+            globals: { undefined: \"off\" },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\"\n+                }\n+            ]\n+        },\n+        {\n+            code: \"/* globals Number: off */ Number.parseInt()\",\n+            options: [\"Number\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\"\n+                }\n+            ]\n+        },\n+        {\n+            code: \"var foo = [Map];\", // this actually isn't a disabled global: it was never enabled because es6 environment isn't enabled\n+            options: [\"Map\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Map\" },\n+                    type: \"Identifier\"\n+                }\n+            ]\n+        },\n+\n+        // shadowed global variables\n+        {\n+            code: \"if (foo) { let undefined; bar = undefined; }\",\n+            options: [\"undefined\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\",\n+                    column: 16\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\",\n+                    column: 33\n+                }\n+            ]\n+        },\n+        {\n+            code: \"function foo(Number) { var x = Number.NaN; }\",\n+            options: [\"Number\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\",\n+                    column: 14\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\",\n+                    column: 32\n+                }\n+            ]\n+        },\n+        {\n+            code: \"function foo() { var myGlobal; x = myGlobal; }\",\n+            options: [\"myGlobal\"],\n+            globals: { myGlobal: \"readonly\" },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"myGlobal\" },\n+                    type: \"Identifier\",\n+                    column: 22\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"myGlobal\" },\n+                    type: \"Identifier\",\n+                    column: 36\n+                }\n+            ]\n+        },\n+        {\n+            code: \"function foo(bar) { return Number.parseInt(bar); } const Number = 1;\",\n+            options: [\"Number\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\",\n+                    column: 28\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\",\n+                    column: 58\n+                }\n+            ]\n+        },\n+        {\n+            code: \"import Number from 'myNumber'; const foo = Number.parseInt(bar);\",\n+            options: [\"Number\"],\n+            parserOptions: { ecmaVersion: 6, sourceType: \"module\" },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\",\n+                    column: 8\n+                },\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"Number\" },\n+                    type: \"Identifier\",\n+                    column: 44\n+                }\n+            ]\n+        },\n+        {\n+            code: \"var foo = function undefined() {};\",\n+            options: [\"undefined\"],\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\"\n+                }\n+            ]\n+        },\n+\n+        // this is a reference to a global variable, but at the same time creates a property with a restricted name\n+        {\n+            code: \"var foo = { undefined }\",\n+            options: [\"undefined\"],\n+            parserOptions: { ecmaVersion: 6 },\n+            errors: [\n+                {\n+                    messageId: \"restricted\",\n+                    data: { name: \"undefined\" },\n+                    type: \"Identifier\"\n+                }\n+            ]\n+        }\n+    ]\n+});"},{"sha":"4ce9b29094ed50f3804299a4ee5e044705ff0c04","filename":"tools/rule-types.json","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/df4a175df6044930e1a1aeb1cb6859a8cd96664f/tools%2Frule-types.json","raw_url":"https://github.com/eslint/eslint/raw/df4a175df6044930e1a1aeb1cb6859a8cd96664f/tools%2Frule-types.json","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tools%2Frule-types.json?ref=df4a175df6044930e1a1aeb1cb6859a8cd96664f","patch":"@@ -43,7 +43,7 @@\n     \"grouped-accessor-pairs\": \"suggestion\",\n     \"guard-for-in\": \"suggestion\",\n     \"handle-callback-err\": \"suggestion\",\n-    \"id-blacklist\": \"suggestion\",\n+    \"id-denylist\": \"suggestion\",\n     \"id-length\": \"suggestion\",\n     \"id-match\": \"suggestion\",\n     \"implicit-arrow-linebreak\": \"layout\",\n@@ -278,4 +278,4 @@\n     \"wrap-regex\": \"layout\",\n     \"yield-star-spacing\": \"layout\",\n     \"yoda\": \"suggestion\"\n-}\n\\ No newline at end of file\n+}"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/12697","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/12697/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/12697/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/12697/events","html_url":"https://github.com/eslint/eslint/pull/12697","id":541364853,"node_id":"MDExOlB1bGxSZXF1ZXN0MzU2MDI3MTEx","number":12697,"title":"Update: report double extra parens in no-extra-parens (fixes #12127)","user":{"login":"yeonjuan","id":41323220,"node_id":"MDQ6VXNlcjQxMzIzMjIw","avatar_url":"https://avatars.githubusercontent.com/u/41323220?v=4","gravatar_id":"","url":"https://api.github.com/users/yeonjuan","html_url":"https://github.com/yeonjuan","followers_url":"https://api.github.com/users/yeonjuan/followers","following_url":"https://api.github.com/users/yeonjuan/following{/other_user}","gists_url":"https://api.github.com/users/yeonjuan/gists{/gist_id}","starred_url":"https://api.github.com/users/yeonjuan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/yeonjuan/subscriptions","organizations_url":"https://api.github.com/users/yeonjuan/orgs","repos_url":"https://api.github.com/users/yeonjuan/repos","events_url":"https://api.github.com/users/yeonjuan/events{/privacy}","received_events_url":"https://api.github.com/users/yeonjuan/received_events","type":"User","site_admin":false},"labels":[{"id":45711350,"node_id":"MDU6TGFiZWw0NTcxMTM1MA==","url":"https://api.github.com/repos/eslint/eslint/labels/bug","name":"bug","color":"fc2929","default":true,"description":"ESLint is working incorrectly"},{"id":45798639,"node_id":"MDU6TGFiZWw0NTc5ODYzOQ==","url":"https://api.github.com/repos/eslint/eslint/labels/rule","name":"rule","color":"fbca04","default":false,"description":"Relates to ESLint's core rules"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":14,"created_at":"2019-12-21T20:02:29Z","updated_at":"2020-07-16T00:47:46Z","closed_at":"2020-01-16T01:00:29Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/12697","html_url":"https://github.com/eslint/eslint/pull/12697","diff_url":"https://github.com/eslint/eslint/pull/12697.diff","patch_url":"https://github.com/eslint/eslint/pull/12697.patch","merged_at":"2020-01-16T01:00:28Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[x] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\nFix #12127 \r\n\r\n\r\n\r\nI tried to solve issue #12127 by adding just `|| hasDoubleExcessParens()` everywhere, but it had a performance issue when checking `ArrayExpression`'s element nodes.\r\n\r\nSo, I made a new function(`hasExcessParensWithConsiderPrecedence`) which checks extra parens with considering the precedence of a node. This function checks `isParenthesisedTwice` only if the node surrounded by at least one extra paren. \r\n\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nThis pr doesn't change the option's behavior that @mdjermanovic [mentioned](https://github.com/eslint/eslint/issues/12127#issuecomment-522782361).\r\n> There is also a question of options, do they allow just one pair or more.\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/12697/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/12697/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"29d5cd51583ae168ea1d625f6402d9fb6b8ae1c6","filename":"lib/rules/no-extra-parens.js","status":"modified","additions":82,"deletions":49,"changes":131,"blob_url":"https://github.com/eslint/eslint/blob/7b0047506e2a7d30cbe3071cecdaa580eddfd96d/lib%2Frules%2Fno-extra-parens.js","raw_url":"https://github.com/eslint/eslint/raw/7b0047506e2a7d30cbe3071cecdaa580eddfd96d/lib%2Frules%2Fno-extra-parens.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-extra-parens.js?ref=7b0047506e2a7d30cbe3071cecdaa580eddfd96d","patch":"@@ -169,6 +169,28 @@ module.exports = {\n             return ruleApplies(node) && isParenthesisedTwice(node);\n         }\n \n+        /**\n+         * Determines if a node that is expected to be parenthesised is surrounded by\n+         * (potentially) invalid extra parentheses with considering precedence level of the node.\n+         * If the preference level of the node is not higher or equal to precedence lower limit, it also checks\n+         * whether the node is surrounded by parentheses twice or not.\n+         * @param {ASTNode} node The node to be checked.\n+         * @param {number} precedenceLowerLimit The lower limit of precedence.\n+         * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.\n+         * @private\n+         */\n+        function hasExcessParensWithPrecedence(node, precedenceLowerLimit) {\n+            if (ruleApplies(node) && isParenthesised(node)) {\n+                if (\n+                    precedence(node) >= precedenceLowerLimit ||\n+                    isParenthesisedTwice(node)\n+                ) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n         /**\n          * Determines if a node test expression is allowed to have a parenthesised assignment\n          * @param {ASTNode} node The node to be checked.\n@@ -370,17 +392,13 @@ module.exports = {\n         }\n \n         /**\n-         * Evaluate Unary update\n+         * Evaluate a argument of the node.\n          * @param {ASTNode} node node to evaluate\n          * @returns {void}\n          * @private\n          */\n-        function checkUnaryUpdate(node) {\n-            if (node.type === \"UnaryExpression\" && node.argument.type === \"BinaryExpression\" && node.argument.operator === \"**\") {\n-                return;\n-            }\n-\n-            if (hasExcessParens(node.argument) && precedence(node.argument) >= precedence(node)) {\n+        function checkArgumentWithPrecedence(node) {\n+            if (hasExcessParensWithPrecedence(node.argument, precedence(node))) {\n                 report(node.argument);\n             }\n         }\n@@ -411,7 +429,7 @@ module.exports = {\n         function checkCallNew(node) {\n             const callee = node.callee;\n \n-            if (hasExcessParens(callee) && precedence(callee) >= precedence(node)) {\n+            if (hasExcessParensWithPrecedence(callee, precedence(node))) {\n                 const hasNewParensException = callee.type === \"NewExpression\" && !isNewExpressionWithParens(callee);\n \n                 if (\n@@ -429,7 +447,7 @@ module.exports = {\n                 }\n             }\n             node.arguments\n-                .filter(arg => hasExcessParens(arg) && precedence(arg) >= PRECEDENCE_OF_ASSIGNMENT_EXPR)\n+                .filter(arg => hasExcessParensWithPrecedence(arg, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                 .forEach(report);\n         }\n \n@@ -444,15 +462,26 @@ module.exports = {\n             const leftPrecedence = precedence(node.left);\n             const rightPrecedence = precedence(node.right);\n             const isExponentiation = node.operator === \"**\";\n-            const shouldSkipLeft = (NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\")) ||\n-              node.left.type === \"UnaryExpression\" && isExponentiation;\n+            const shouldSkipLeft = NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\");\n             const shouldSkipRight = NESTED_BINARY && (node.right.type === \"BinaryExpression\" || node.right.type === \"LogicalExpression\");\n \n-            if (!shouldSkipLeft && hasExcessParens(node.left) && (leftPrecedence > prec || (leftPrecedence === prec && !isExponentiation))) {\n-                report(node.left);\n+            if (!shouldSkipLeft && hasExcessParens(node.left)) {\n+                if (\n+                    !(node.left.type === \"UnaryExpression\" && isExponentiation) &&\n+                    (leftPrecedence > prec || (leftPrecedence === prec && !isExponentiation)) ||\n+                    isParenthesisedTwice(node.left)\n+                ) {\n+                    report(node.left);\n+                }\n             }\n-            if (!shouldSkipRight && hasExcessParens(node.right) && (rightPrecedence > prec || (rightPrecedence === prec && isExponentiation))) {\n-                report(node.right);\n+\n+            if (!shouldSkipRight && hasExcessParens(node.right)) {\n+                if (\n+                    (rightPrecedence > prec || (rightPrecedence === prec && isExponentiation)) ||\n+                    isParenthesisedTwice(node.right)\n+                ) {\n+                    report(node.right);\n+                }\n             }\n         }\n \n@@ -485,11 +514,7 @@ module.exports = {\n          * @returns {void}\n          */\n         function checkSpreadOperator(node) {\n-            const hasExtraParens = precedence(node.argument) >= PRECEDENCE_OF_ASSIGNMENT_EXPR\n-                ? hasExcessParens(node.argument)\n-                : hasDoubleExcessParens(node.argument);\n-\n-            if (hasExtraParens) {\n+            if (hasExcessParensWithPrecedence(node.argument, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                 report(node.argument);\n             }\n         }\n@@ -651,7 +676,7 @@ module.exports = {\n         return {\n             ArrayExpression(node) {\n                 node.elements\n-                    .filter(e => e && hasExcessParens(e) && precedence(e) >= PRECEDENCE_OF_ASSIGNMENT_EXPR)\n+                    .filter(e => e && hasExcessParensWithPrecedence(e, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                     .forEach(report);\n             },\n \n@@ -674,18 +699,14 @@ module.exports = {\n                     if (astUtils.isOpeningParenToken(tokenBeforeFirst) && astUtils.isOpeningBraceToken(firstBodyToken)) {\n                         tokensToIgnore.add(firstBodyToken);\n                     }\n-                    if (hasExcessParens(node.body) && precedence(node.body) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {\n+                    if (hasExcessParensWithPrecedence(node.body, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                         report(node.body);\n                     }\n                 }\n             },\n \n             AssignmentExpression(node) {\n-                if (isReturnAssignException(node)) {\n-                    return;\n-                }\n-\n-                if (hasExcessParens(node.right) && precedence(node.right) >= precedence(node)) {\n+                if (!isReturnAssignException(node) && hasExcessParensWithPrecedence(node.right, precedence(node))) {\n                     report(node.right);\n                 }\n             },\n@@ -702,25 +723,27 @@ module.exports = {\n \n             ClassBody(node) {\n                 node.body\n-                    .filter(member => member.type === \"MethodDefinition\" && member.computed &&\n-                        member.key && hasExcessParens(member.key) && precedence(member.key) >= PRECEDENCE_OF_ASSIGNMENT_EXPR)\n+                    .filter(member => member.type === \"MethodDefinition\" && member.computed && member.key)\n+                    .filter(member => hasExcessParensWithPrecedence(member.key, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                     .forEach(member => report(member.key));\n             },\n \n             ConditionalExpression(node) {\n                 if (isReturnAssignException(node)) {\n                     return;\n                 }\n-\n-                if (hasExcessParens(node.test) && precedence(node.test) >= precedence({ type: \"LogicalExpression\", operator: \"||\" })) {\n+                if (\n+                    !isCondAssignException(node) &&\n+                    hasExcessParensWithPrecedence(node.test, precedence({ type: \"LogicalExpression\", operator: \"||\" }))\n+                ) {\n                     report(node.test);\n                 }\n \n-                if (hasExcessParens(node.consequent) && precedence(node.consequent) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {\n+                if (hasExcessParensWithPrecedence(node.consequent, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                     report(node.consequent);\n                 }\n \n-                if (hasExcessParens(node.alternate) && precedence(node.alternate) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {\n+                if (hasExcessParensWithPrecedence(node.alternate, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                     report(node.alternate);\n                 }\n             },\n@@ -757,9 +780,19 @@ module.exports = {\n                         tokensToIgnore.add(firstLeftToken);\n                     }\n                 }\n-                if (!(node.type === \"ForOfStatement\" && node.right.type === \"SequenceExpression\") && hasExcessParens(node.right)) {\n+\n+                if (node.type === \"ForOfStatement\") {\n+                    const hasExtraParens = node.right.type === \"SequenceExpression\"\n+                        ? hasDoubleExcessParens(node.right)\n+                        : hasExcessParens(node.right);\n+\n+                    if (hasExtraParens) {\n+                        report(node.right);\n+                    }\n+                } else if (hasExcessParens(node.right)) {\n                     report(node.right);\n                 }\n+\n                 if (hasExcessParens(node.left)) {\n                     report(node.left);\n                 }\n@@ -911,18 +944,15 @@ module.exports = {\n \n             ObjectExpression(node) {\n                 node.properties\n-                    .filter(property => {\n-                        const value = property.value;\n-\n-                        return value && hasExcessParens(value) && precedence(value) >= PRECEDENCE_OF_ASSIGNMENT_EXPR;\n-                    }).forEach(property => report(property.value));\n+                    .filter(property => property.value && hasExcessParensWithPrecedence(property.value, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n+                    .forEach(property => report(property.value));\n             },\n \n             Property(node) {\n                 if (node.computed) {\n                     const { key } = node;\n \n-                    if (key && hasExcessParens(key) && precedence(key) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {\n+                    if (key && hasExcessParensWithPrecedence(key, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                         report(key);\n                     }\n                 }\n@@ -945,8 +975,10 @@ module.exports = {\n             },\n \n             SequenceExpression(node) {\n+                const precedenceOfNode = precedence(node);\n+\n                 node.expressions\n-                    .filter(e => hasExcessParens(e) && precedence(e) >= precedence(node))\n+                    .filter(e => hasExcessParensWithPrecedence(e, precedenceOfNode))\n                     .forEach(report);\n             },\n \n@@ -970,16 +1002,17 @@ module.exports = {\n                 }\n             },\n \n-            UnaryExpression: checkUnaryUpdate,\n-            UpdateExpression: checkUnaryUpdate,\n-            AwaitExpression: checkUnaryUpdate,\n+            UnaryExpression: checkArgumentWithPrecedence,\n+            UpdateExpression: checkArgumentWithPrecedence,\n+            AwaitExpression: checkArgumentWithPrecedence,\n \n             VariableDeclarator(node) {\n-                if (node.init && hasExcessParens(node.init) &&\n-                        precedence(node.init) >= PRECEDENCE_OF_ASSIGNMENT_EXPR &&\n+                if (\n+                    node.init && hasExcessParensWithPrecedence(node.init, PRECEDENCE_OF_ASSIGNMENT_EXPR) &&\n \n-                        // RegExp literal is allowed to have parens (#1589)\n-                        !(node.init.type === \"Literal\" && node.init.regex)) {\n+                    // RegExp literal is allowed to have parens (#1589)\n+                    !(node.init.type === \"Literal\" && node.init.regex)\n+                ) {\n                     report(node.init);\n                 }\n             },\n@@ -1024,7 +1057,7 @@ module.exports = {\n             AssignmentPattern(node) {\n                 const { right } = node;\n \n-                if (right && hasExcessParens(right) && precedence(right) >= PRECEDENCE_OF_ASSIGNMENT_EXPR) {\n+                if (right && hasExcessParensWithPrecedence(right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                     report(right);\n                 }\n             }"},{"sha":"3d5518a5abbbd6fab7fdcca6d39db90f38858e11","filename":"tests/lib/rules/no-extra-parens.js","status":"modified","additions":129,"deletions":2,"changes":131,"blob_url":"https://github.com/eslint/eslint/blob/7b0047506e2a7d30cbe3071cecdaa580eddfd96d/tests%2Flib%2Frules%2Fno-extra-parens.js","raw_url":"https://github.com/eslint/eslint/raw/7b0047506e2a7d30cbe3071cecdaa580eddfd96d/tests%2Flib%2Frules%2Fno-extra-parens.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-extra-parens.js?ref=7b0047506e2a7d30cbe3071cecdaa580eddfd96d","patch":"@@ -199,6 +199,7 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         \"var regex = (/^a$/);\",\n         \"function a(){ return (/^a$/); }\",\n         \"function a(){ return (/^a$/).test('a'); }\",\n+        \"var isA = ((/^a$/)).test('a');\",\n \n         // IIFE is allowed to have parens in any position (#655)\n         \"var foo = (function() { return bar(); }())\",\n@@ -250,17 +251,22 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         { code: \"var a = (b = c)\", options: [\"functions\"] },\n         { code: \"_ => (a = 0)\", options: [\"functions\"] },\n \n-        // [\"all\", {conditionalAssign: false}] enables extra parens around conditional assignments\n+        // [\"all\", { conditionalAssign: false }] enables extra parens around conditional assignments\n         { code: \"while ((foo = bar())) {}\", options: [\"all\", { conditionalAssign: false }] },\n         { code: \"if ((foo = bar())) {}\", options: [\"all\", { conditionalAssign: false }] },\n         { code: \"do; while ((foo = bar()))\", options: [\"all\", { conditionalAssign: false }] },\n         { code: \"for (;(a = b););\", options: [\"all\", { conditionalAssign: false }] },\n+        { code: \"var a = ((b = c)) ? foo : bar;\", options: [\"all\", { conditionalAssign: false }] },\n \n         // [\"all\", { nestedBinaryExpressions: false }] enables extra parens around conditional assignments\n         { code: \"a + (b * c)\", options: [\"all\", { nestedBinaryExpressions: false }] },\n         { code: \"(a * b) + c\", options: [\"all\", { nestedBinaryExpressions: false }] },\n         { code: \"(a * b) / c\", options: [\"all\", { nestedBinaryExpressions: false }] },\n         { code: \"a || (b && c)\", options: [\"all\", { nestedBinaryExpressions: false }] },\n+        { code: \"a + ((b * c))\", options: [\"all\", { nestedBinaryExpressions: false }] },\n+        { code: \"((a * b)) + c\", options: [\"all\", { nestedBinaryExpressions: false }] },\n+        { code: \"((a * b)) / c\", options: [\"all\", { nestedBinaryExpressions: false }] },\n+        { code: \"a || ((b && c))\", options: [\"all\", { nestedBinaryExpressions: false }] },\n \n         // [\"all\", { returnAssign: false }] enables extra parens around expressions returned by return statements\n         { code: \"function a(b) { return b || c; }\", options: [\"all\", { returnAssign: false }] },\n@@ -276,6 +282,8 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         { code: \"b => { return (b = 1) };\", options: [\"all\", { returnAssign: false }] },\n         { code: \"b => { return (b = c) || (b = d) };\", options: [\"all\", { returnAssign: false }] },\n         { code: \"b => { return c ? (d = b) : (e = b) };\", options: [\"all\", { returnAssign: false }] },\n+        { code: \"function a(b) { return ((b = 1)); }\", options: [\"all\", { returnAssign: false }] },\n+        { code: \"b => ((b = 1));\", options: [\"all\", { returnAssign: false }] },\n \n         // https://github.com/eslint/eslint/issues/3653\n         \"(function(){}).foo(), 1, 2;\",\n@@ -352,6 +360,8 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         { code: \"foo in (bar in baz)\", options: [\"all\", { nestedBinaryExpressions: false }] },\n         { code: \"foo + (bar + baz)\", options: [\"all\", { nestedBinaryExpressions: false }] },\n         { code: \"foo && (bar && baz)\", options: [\"all\", { nestedBinaryExpressions: false }] },\n+        { code: \"((foo instanceof bar)) instanceof baz\", options: [\"all\", { nestedBinaryExpressions: false }] },\n+        { code: \"((foo in bar)) in baz\", options: [\"all\", { nestedBinaryExpressions: false }] },\n \n         // https://github.com/eslint/eslint/issues/9019\n         \"(async function() {});\",\n@@ -452,7 +462,9 @@ ruleTester.run(\"no-extra-parens\", rule, {\n \n         // [\"all\", { enforceForSequenceExpressions: false }]\n         { code: \"(a, b)\", options: [\"all\", { enforceForSequenceExpressions: false }] },\n+        { code: \"((a, b))\", options: [\"all\", { enforceForSequenceExpressions: false }] },\n         { code: \"(foo(), bar());\", options: [\"all\", { enforceForSequenceExpressions: false }] },\n+        { code: \"((foo(), bar()));\", options: [\"all\", { enforceForSequenceExpressions: false }] },\n         { code: \"if((a, b)){}\", options: [\"all\", { enforceForSequenceExpressions: false }] },\n         { code: \"while ((val = foo(), val < 10));\", options: [\"all\", { enforceForSequenceExpressions: false }] },\n \n@@ -463,6 +475,7 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         { code: \"(new foo(bar)).baz\", options: [\"all\", { enforceForNewInMemberExpressions: false }] },\n         { code: \"(new foo.bar()).baz\", options: [\"all\", { enforceForNewInMemberExpressions: false }] },\n         { code: \"(new foo.bar()).baz()\", options: [\"all\", { enforceForNewInMemberExpressions: false }] },\n+        { code: \"((new foo.bar())).baz()\", options: [\"all\", { enforceForNewInMemberExpressions: false }] },\n \n         \"let a = [ ...b ]\",\n         \"let a = { ...b }\",\n@@ -481,6 +494,7 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         \"const A = class extends B {}\",\n         \"class A extends (B=C) {}\",\n         \"const A = class extends (B=C) {}\",\n+        \"class A extends (++foo) {}\",\n         \"() => ({ foo: 1 })\",\n         \"() => ({ foo: 1 }).foo\",\n         \"() => ({ foo: 1 }.foo().bar).baz.qux()\",\n@@ -631,11 +645,15 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         invalid(\"-(-foo)\", \"- -foo\", \"UnaryExpression\"),\n         invalid(\"+(-foo)\", \"+-foo\", \"UnaryExpression\"),\n         invalid(\"-(+foo)\", \"-+foo\", \"UnaryExpression\"),\n+        invalid(\"-((bar+foo))\", \"-(bar+foo)\", \"BinaryExpression\"),\n+        invalid(\"+((bar-foo))\", \"+(bar-foo)\", \"BinaryExpression\"),\n         invalid(\"++(foo)\", \"++foo\", \"Identifier\"),\n         invalid(\"--(foo)\", \"--foo\", \"Identifier\"),\n         invalid(\"(a || b) ? c : d\", \"a || b ? c : d\", \"LogicalExpression\"),\n         invalid(\"a ? (b = c) : d\", \"a ? b = c : d\", \"AssignmentExpression\"),\n         invalid(\"a ? b : (c = d)\", \"a ? b : c = d\", \"AssignmentExpression\"),\n+        invalid(\"(c = d) ? (b) : c\", \"(c = d) ? b : c\", \"Identifier\", null, { options: [\"all\", { conditionalAssign: false }] }),\n+        invalid(\"(c = d) ? b : (c)\", \"(c = d) ? b : c\", \"Identifier\", null, { options: [\"all\", { conditionalAssign: false }] }),\n         invalid(\"f((a = b))\", \"f(a = b)\", \"AssignmentExpression\"),\n         invalid(\"a, (b = c)\", \"a, b = c\", \"AssignmentExpression\"),\n         invalid(\"a = (b * c)\", \"a = b * c\", \"BinaryExpression\"),\n@@ -647,6 +665,9 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         invalid(\"(2 ** 3)\", \"2 ** 3\", \"BinaryExpression\", null),\n         invalid(\"(2 ** 3) + 1\", \"2 ** 3 + 1\", \"BinaryExpression\", null),\n         invalid(\"1 - (2 ** 3)\", \"1 - 2 ** 3\", \"BinaryExpression\", null),\n+        invalid(\"-((2 ** 3))\", \"-(2 ** 3)\", \"BinaryExpression\", null),\n+        invalid(\"typeof ((a ** b));\", \"typeof (a ** b);\", \"BinaryExpression\", null),\n+        invalid(\"((-2)) ** 3\", \"(-2) ** 3\", \"UnaryExpression\", null),\n \n         invalid(\"a = (b * c)\", \"a = b * c\", \"BinaryExpression\", null, { options: [\"all\", { nestedBinaryExpressions: false }] }),\n         invalid(\"(b * c)\", \"b * c\", \"BinaryExpression\", null, { options: [\"all\", { nestedBinaryExpressions: false }] }),\n@@ -729,6 +750,7 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         invalid(\"bar((class{}).foo(), 0);\", \"bar(class{}.foo(), 0);\", \"ClassExpression\", null),\n         invalid(\"bar[(class{}).foo()];\", \"bar[class{}.foo()];\", \"ClassExpression\", null),\n         invalid(\"var bar = (class{}).foo();\", \"var bar = class{}.foo();\", \"ClassExpression\", null),\n+        invalid(\"var foo = ((bar, baz));\", \"var foo = (bar, baz);\", \"SequenceExpression\", null),\n \n         // https://github.com/eslint/eslint/issues/4608\n         invalid(\"function *a() { yield (b); }\", \"function *a() { yield b; }\", \"Identifier\", null),\n@@ -1017,6 +1039,7 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         invalid(\"async function a() { await (a()); }\", \"async function a() { await a(); }\", \"CallExpression\", null),\n         invalid(\"async function a() { await (+a); }\", \"async function a() { await +a; }\", \"UnaryExpression\", null),\n         invalid(\"async function a() { +(await a); }\", \"async function a() { +await a; }\", \"AwaitExpression\", null),\n+        invalid(\"async function a() { await ((a,b)); }\", \"async function a() { await (a,b); }\", \"SequenceExpression\", null),\n         invalid(\"(foo) instanceof bar\", \"foo instanceof bar\", \"Identifier\", 1, { options: [\"all\", { nestedBinaryExpressions: false }] }),\n         invalid(\"(foo) in bar\", \"foo in bar\", \"Identifier\", 1, { options: [\"all\", { nestedBinaryExpressions: false }] }),\n         invalid(\"(foo) + bar\", \"foo + bar\", \"Identifier\", 1, { options: [\"all\", { nestedBinaryExpressions: false }] }),\n@@ -1294,6 +1317,12 @@ ruleTester.run(\"no-extra-parens\", rule, {\n             \"AssignmentExpression\",\n             1\n         ),\n+        invalid(\n+            \"class A extends ((++foo)) {}\",\n+            \"class A extends (++foo) {}\",\n+            \"UpdateExpression\",\n+            1\n+        ),\n         invalid(\n             \"for (foo of(bar));\",\n             \"for (foo of bar);\",\n@@ -1306,6 +1335,12 @@ ruleTester.run(\"no-extra-parens\", rule, {\n             \"Identifier\",\n             1\n         ),\n+        invalid(\n+            \"for (foo of ((bar, baz)));\",\n+            \"for (foo of (bar, baz));\",\n+            \"SequenceExpression\",\n+            1\n+        ),\n         invalid(\n             \"for ((foo)in bar);\",\n             \"for (foo in bar);\",\n@@ -2035,6 +2070,98 @@ ruleTester.run(\"no-extra-parens\", rule, {\n             \"SequenceExpression\",\n             1,\n             { parserOptions: { ecmaVersion: 2020 } }\n-        )\n+        ),\n+\n+        // https://github.com/eslint/eslint/issues/12127\n+        {\n+            code: \"[1, ((2, 3))];\",\n+            output: \"[1, (2, 3)];\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"const foo = () => ((bar, baz));\",\n+            output: \"const foo = () => (bar, baz);\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"foo = ((bar, baz));\",\n+            output: \"foo = (bar, baz);\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"foo + ((bar + baz));\",\n+            output: \"foo + (bar + baz);\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"((foo + bar)) + baz;\",\n+            output: \"(foo + bar) + baz;\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"foo * ((bar + baz));\",\n+            output: \"foo * (bar + baz);\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"((foo + bar)) * baz;\",\n+            output: \"(foo + bar) * baz;\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"new A(((foo, bar)))\",\n+            output: \"new A((foo, bar))\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"class A{ [((foo, bar))]() {} }\",\n+            output: \"class A{ [(foo, bar)]() {} }\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"new ((A, B))()\",\n+            output: \"new (A, B)()\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"((foo, bar)) ? bar : baz;\",\n+            output: \"(foo, bar) ? bar : baz;\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"((f ? o : o)) ? bar : baz;\",\n+            output: \"(f ? o : o) ? bar : baz;\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"((f = oo)) ? bar : baz;\",\n+            output: \"(f = oo) ? bar : baz;\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"foo ? ((bar, baz)) : baz;\",\n+            output: \"foo ? (bar, baz) : baz;\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"foo ? bar : ((bar, baz));\",\n+            output: \"foo ? bar : (bar, baz);\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"function foo(bar = ((baz1, baz2))) {}\",\n+            output: \"function foo(bar = (baz1, baz2)) {}\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"var foo = { bar: ((baz1, baz2)) };\",\n+            output: \"var foo = { bar: (baz1, baz2) };\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        },\n+        {\n+            code: \"var foo = { [((bar1, bar2))]: baz };\",\n+            output: \"var foo = { [(bar1, bar2)]: baz };\",\n+            errors: [{ messageId: \"unexpected\" }]\n+        }\n     ]\n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/12320","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/12320/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/12320/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/12320/events","html_url":"https://github.com/eslint/eslint/pull/12320","id":499071922,"node_id":"MDExOlB1bGxSZXF1ZXN0MzIxODcxNDMx","number":12320,"title":"Chore: cache results in runtime-info","user":{"login":"kaicataldo","id":7041728,"node_id":"MDQ6VXNlcjcwNDE3Mjg=","avatar_url":"https://avatars.githubusercontent.com/u/7041728?v=4","gravatar_id":"","url":"https://api.github.com/users/kaicataldo","html_url":"https://github.com/kaicataldo","followers_url":"https://api.github.com/users/kaicataldo/followers","following_url":"https://api.github.com/users/kaicataldo/following{/other_user}","gists_url":"https://api.github.com/users/kaicataldo/gists{/gist_id}","starred_url":"https://api.github.com/users/kaicataldo/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kaicataldo/subscriptions","organizations_url":"https://api.github.com/users/kaicataldo/orgs","repos_url":"https://api.github.com/users/kaicataldo/repos","events_url":"https://api.github.com/users/kaicataldo/events{/privacy}","received_events_url":"https://api.github.com/users/kaicataldo/received_events","type":"User","site_admin":false},"labels":[{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-09-26T19:25:43Z","updated_at":"2020-03-27T22:43:39Z","closed_at":"2019-09-28T01:49:57Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/12320","html_url":"https://github.com/eslint/eslint/pull/12320","diff_url":"https://github.com/eslint/eslint/pull/12320.diff","patch_url":"https://github.com/eslint/eslint/pull/12320.patch","merged_at":"2019-09-28T01:49:56Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[x] Other, please explain:\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis change improves performance by caching the results of the shell commands the `RuntimeInfo` module executes. In practice, this only improves performance when ESLint is installed locally and globally (which we're actively discouraging these days), but it's something!\r\n\r\nIn the code path described above, I'm seeing these results on my local machine (average over 5 runs with each branch):\r\n\r\n`master`: ~3.072s\r\n`runtime-info-cache-results`: ~2.826s\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nNothing in particular. This PR is a lot easier to review by hiding whitespace changes.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/12320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/12320/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"169bbc58f13c165a3c38e3dd3412c0a6df1d0a98","filename":"lib/shared/runtime-info.js","status":"modified","additions":95,"deletions":84,"changes":179,"blob_url":"https://github.com/eslint/eslint/blob/c01e5a125f1cbfe174a785a8152bb3e92a8d4116/lib%2Fshared%2Fruntime-info.js","raw_url":"https://github.com/eslint/eslint/raw/c01e5a125f1cbfe174a785a8152bb3e92a8d4116/lib%2Fshared%2Fruntime-info.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fshared%2Fruntime-info.js?ref=c01e5a125f1cbfe174a785a8152bb3e92a8d4116","patch":"@@ -20,110 +20,121 @@ const packageJson = require(\"../../package.json\");\n //------------------------------------------------------------------------------\n \n /**\n- * Checks if a path is a child of a directory.\n- * @param {string} parentPath - The parent path to check.\n- * @param {string} childPath - The path to check.\n- * @returns {boolean} Whether or not the given path is a child of a directory.\n- */\n-function isChildOfDirectory(parentPath, childPath) {\n-    return !path.relative(parentPath, childPath).startsWith(\"..\");\n-}\n-\n-/**\n- * Synchronously executes a shell command and formats the result.\n- * @param {string} cmd - The command to execute.\n- * @param {Array} args - The arguments to be executed with the command.\n- * @returns {string} The version returned by the command.\n+ * Generates and returns execution environment information.\n+ * @returns {string} A string that contains execution environment information.\n  */\n-function execCommand(cmd, args) {\n-    const process = spawn.sync(cmd, args, { encoding: \"utf8\" });\n-\n-    if (process.error) {\n-        throw process.error;\n+function environment() {\n+    const cache = new Map();\n+\n+    /**\n+     * Checks if a path is a child of a directory.\n+     * @param {string} parentPath - The parent path to check.\n+     * @param {string} childPath - The path to check.\n+     * @returns {boolean} Whether or not the given path is a child of a directory.\n+     */\n+    function isChildOfDirectory(parentPath, childPath) {\n+        return !path.relative(parentPath, childPath).startsWith(\"..\");\n     }\n \n-    return process.stdout.trim();\n-}\n+    /**\n+     * Synchronously executes a shell command and formats the result.\n+     * @param {string} cmd - The command to execute.\n+     * @param {Array} args - The arguments to be executed with the command.\n+     * @returns {string} The version returned by the command.\n+     */\n+    function execCommand(cmd, args) {\n+        const key = [cmd, ...args].join(\" \");\n+\n+        if (cache.has(key)) {\n+            return cache.get(key);\n+        }\n \n-/**\n- * Normalizes a version number.\n- * @param {string} versionStr - The string to normalize.\n- * @returns {string} The normalized version number.\n- */\n-function normalizeVersionStr(versionStr) {\n-    return versionStr.startsWith(\"v\") ? versionStr : `v${versionStr}`;\n-}\n+        const process = spawn.sync(cmd, args, { encoding: \"utf8\" });\n \n-/**\n- * Gets bin version.\n- * @param {string} bin - The bin to check.\n- * @returns {string} The normalized version returned by the command.\n- */\n-function getBinVersion(bin) {\n-    const binArgs = [\"--version\"];\n-\n-    try {\n-        return normalizeVersionStr(execCommand(bin, binArgs));\n-    } catch (e) {\n-        log.error(`Error finding ${bin} version running the command \\`${bin} ${binArgs.join(\" \")}\\``);\n-        throw e;\n-    }\n-}\n+        if (process.error) {\n+            throw process.error;\n+        }\n \n-/**\n- * Gets installed npm package version.\n- * @param {string} pkg - The package to check.\n- * @param {boolean} global - Whether to check globally or not.\n- * @returns {string} The normalized version returned by the command.\n- */\n-function getNpmPackageVersion(pkg, { global = false } = {}) {\n-    const npmBinArgs = [\"bin\", \"-g\"];\n-    const npmLsArgs = [\"ls\", \"--depth=0\", \"--json\", \"eslint\"];\n+        const result = process.stdout.trim();\n \n-    if (global) {\n-        npmLsArgs.push(\"-g\");\n+        cache.set(key, result);\n+        return result;\n     }\n \n-    try {\n-        const parsedStdout = JSON.parse(execCommand(\"npm\", npmLsArgs));\n-\n-        /*\n-         * Checking globally returns an empty JSON object, while local checks\n-         * include the name and version of the local project.\n-         */\n-        if (isEmpty(parsedStdout) || !(parsedStdout.dependencies && parsedStdout.dependencies.eslint)) {\n-            return \"Not found\";\n-        }\n+    /**\n+     * Normalizes a version number.\n+     * @param {string} versionStr - The string to normalize.\n+     * @returns {string} The normalized version number.\n+     */\n+    function normalizeVersionStr(versionStr) {\n+        return versionStr.startsWith(\"v\") ? versionStr : `v${versionStr}`;\n+    }\n \n-        const [, processBinPath] = process.argv;\n-        let npmBinPath;\n+    /**\n+     * Gets bin version.\n+     * @param {string} bin - The bin to check.\n+     * @returns {string} The normalized version returned by the command.\n+     */\n+    function getBinVersion(bin) {\n+        const binArgs = [\"--version\"];\n \n         try {\n-            npmBinPath = execCommand(\"npm\", npmBinArgs);\n+            return normalizeVersionStr(execCommand(bin, binArgs));\n         } catch (e) {\n-            log.error(`Error finding npm binary path when running command \\`npm ${npmBinArgs.join(\" \")}\\``);\n+            log.error(`Error finding ${bin} version running the command \\`${bin} ${binArgs.join(\" \")}\\``);\n             throw e;\n         }\n+    }\n \n-        const isGlobal = isChildOfDirectory(npmBinPath, processBinPath);\n-        let pkgVersion = parsedStdout.dependencies.eslint.version;\n-\n-        if ((global && isGlobal) || (!global && !isGlobal)) {\n-            pkgVersion += \" (Currently used)\";\n+    /**\n+     * Gets installed npm package version.\n+     * @param {string} pkg - The package to check.\n+     * @param {boolean} global - Whether to check globally or not.\n+     * @returns {string} The normalized version returned by the command.\n+     */\n+    function getNpmPackageVersion(pkg, { global = false } = {}) {\n+        const npmBinArgs = [\"bin\", \"-g\"];\n+        const npmLsArgs = [\"ls\", \"--depth=0\", \"--json\", \"eslint\"];\n+\n+        if (global) {\n+            npmLsArgs.push(\"-g\");\n         }\n \n-        return normalizeVersionStr(pkgVersion);\n-    } catch (e) {\n-        log.error(`Error finding ${pkg} version running the command \\`npm ${npmLsArgs.join(\" \")}\\``);\n-        throw e;\n+        try {\n+            const parsedStdout = JSON.parse(execCommand(\"npm\", npmLsArgs));\n+\n+            /*\n+             * Checking globally returns an empty JSON object, while local checks\n+             * include the name and version of the local project.\n+             */\n+            if (isEmpty(parsedStdout) || !(parsedStdout.dependencies && parsedStdout.dependencies.eslint)) {\n+                return \"Not found\";\n+            }\n+\n+            const [, processBinPath] = process.argv;\n+            let npmBinPath;\n+\n+            try {\n+                npmBinPath = execCommand(\"npm\", npmBinArgs);\n+            } catch (e) {\n+                log.error(`Error finding npm binary path when running command \\`npm ${npmBinArgs.join(\" \")}\\``);\n+                throw e;\n+            }\n+\n+            const isGlobal = isChildOfDirectory(npmBinPath, processBinPath);\n+            let pkgVersion = parsedStdout.dependencies.eslint.version;\n+\n+            if ((global && isGlobal) || (!global && !isGlobal)) {\n+                pkgVersion += \" (Currently used)\";\n+            }\n+\n+            return normalizeVersionStr(pkgVersion);\n+        } catch (e) {\n+            log.error(`Error finding ${pkg} version running the command \\`npm ${npmLsArgs.join(\" \")}\\``);\n+            throw e;\n+        }\n     }\n-}\n \n-/**\n- * Generates and returns execution environment information.\n- * @returns {string} A string that contains execution environment information.\n- */\n-function environment() {\n     return [\n         \"Environment Info:\",\n         \"\","},{"sha":"c82d416df9cde5a7d7e000551bb94bb86f073d47","filename":"tests/lib/shared/runtime-info.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/c01e5a125f1cbfe174a785a8152bb3e92a8d4116/tests%2Flib%2Fshared%2Fruntime-info.js","raw_url":"https://github.com/eslint/eslint/raw/c01e5a125f1cbfe174a785a8152bb3e92a8d4116/tests%2Flib%2Fshared%2Fruntime-info.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fshared%2Fruntime-info.js?ref=c01e5a125f1cbfe174a785a8152bb3e92a8d4116","patch":"@@ -86,8 +86,7 @@ describe(\"RuntimeInfo\", () => {\n                             }\n                         }\n                     }\n-                `,\n-                NPM_BIN_PATH\n+                `\n             ];\n         });\n \n@@ -138,6 +137,7 @@ describe(\"RuntimeInfo\", () => {\n                     \"version\": \"1.0.0\"\n                 }\n             `);\n+            spawnSyncStubArgs.push(NPM_BIN_PATH);\n             setupSpawnSyncStubReturnVals(spawnSyncStub, spawnSyncStubArgs);\n             process.argv[1] = GLOBAL_ESLINT_BIN_PATH;\n "}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/12079","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/12079/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/12079/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/12079/events","html_url":"https://github.com/eslint/eslint/pull/12079","id":478756312,"node_id":"MDExOlB1bGxSZXF1ZXN0MzA1ODA1MDE3","number":12079,"title":"Update: fix no-octal-escape false negatives after \\0","user":{"login":"mdjermanovic","id":44349756,"node_id":"MDQ6VXNlcjQ0MzQ5NzU2","avatar_url":"https://avatars.githubusercontent.com/u/44349756?v=4","gravatar_id":"","url":"https://api.github.com/users/mdjermanovic","html_url":"https://github.com/mdjermanovic","followers_url":"https://api.github.com/users/mdjermanovic/followers","following_url":"https://api.github.com/users/mdjermanovic/following{/other_user}","gists_url":"https://api.github.com/users/mdjermanovic/gists{/gist_id}","starred_url":"https://api.github.com/users/mdjermanovic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdjermanovic/subscriptions","organizations_url":"https://api.github.com/users/mdjermanovic/orgs","repos_url":"https://api.github.com/users/mdjermanovic/repos","events_url":"https://api.github.com/users/mdjermanovic/events{/privacy}","received_events_url":"https://api.github.com/users/mdjermanovic/received_events","type":"User","site_admin":false},"labels":[{"id":45711350,"node_id":"MDU6TGFiZWw0NTcxMTM1MA==","url":"https://api.github.com/repos/eslint/eslint/labels/bug","name":"bug","color":"fc2929","default":true,"description":"ESLint is working incorrectly"},{"id":45711352,"node_id":"MDU6TGFiZWw0NTcxMTM1Mg==","url":"https://api.github.com/repos/eslint/eslint/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":"This change enhances an existing feature of ESLint"},{"id":45798639,"node_id":"MDU6TGFiZWw0NTc5ODYzOQ==","url":"https://api.github.com/repos/eslint/eslint/labels/rule","name":"rule","color":"fbca04","default":false,"description":"Relates to ESLint's core rules"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-08-09T01:41:01Z","updated_at":"2020-03-12T22:43:49Z","closed_at":"2019-09-13T02:25:02Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/12079","html_url":"https://github.com/eslint/eslint/pull/12079","diff_url":"https://github.com/eslint/eslint/pull/12079.diff","patch_url":"https://github.com/eslint/eslint/pull/12079.patch","merged_at":"2019-09-13T02:25:02Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[X] Bug fix\r\n\r\nThis is a small bug fix, but it can produce more warnings.\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n**Tell us about your environment**\r\n\r\n* **ESLint Version:** 6.1.0\r\n* **Node Version:** 10.16.0\r\n* **npm Version:** 6.9.0\r\n\r\n**What parser (default, Babel-ESLint, etc.) are you using?**\r\n\r\ndefault\r\n\r\n**Please show your full configuration:**\r\n\r\n<details>\r\n<summary>Configuration</summary>\r\n\r\n<!-- Paste your configuration below: -->\r\n```js\r\nmodule.exports = {\r\n  parserOptions: {\r\n    ecmaVersion: 2015,\r\n  },\r\n};\r\n```\r\n\r\n</details>\r\n\r\n**What did you do? Please include the actual source code causing the issue.**\r\n\r\n```js\r\n/*eslint no-octal-escape: \"error\"*/\r\n\r\n\"\\0 \\1\"\r\n```\r\n\r\n[Demo link](https://eslint.org/demo#eyJ0ZXh0IjoiLyplc2xpbnQgbm8tb2N0YWwtZXNjYXBlOiBcImVycm9yXCIqL1xuXG5cIlxcMCBcXDFcIiIsIm9wdGlvbnMiOnsicGFyc2VyT3B0aW9ucyI6eyJlY21hVmVyc2lvbiI6NSwic291cmNlVHlwZSI6InNjcmlwdCIsImVjbWFGZWF0dXJlcyI6e319LCJydWxlcyI6eyJjb25zdHJ1Y3Rvci1zdXBlciI6MiwiZm9yLWRpcmVjdGlvbiI6MiwiZ2V0dGVyLXJldHVybiI6Miwibm8tYXN5bmMtcHJvbWlzZS1leGVjdXRvciI6Miwibm8tY2FzZS1kZWNsYXJhdGlvbnMiOjIsIm5vLWNsYXNzLWFzc2lnbiI6Miwibm8tY29tcGFyZS1uZWctemVybyI6Miwibm8tY29uZC1hc3NpZ24iOjIsIm5vLWNvbnN0LWFzc2lnbiI6Miwibm8tY29uc3RhbnQtY29uZGl0aW9uIjoyLCJuby1jb250cm9sLXJlZ2V4IjoyLCJuby1kZWJ1Z2dlciI6Miwibm8tZGVsZXRlLXZhciI6Miwibm8tZHVwZS1hcmdzIjoyLCJuby1kdXBlLWNsYXNzLW1lbWJlcnMiOjIsIm5vLWR1cGUta2V5cyI6Miwibm8tZHVwbGljYXRlLWNhc2UiOjIsIm5vLWVtcHR5IjoyLCJuby1lbXB0eS1jaGFyYWN0ZXItY2xhc3MiOjIsIm5vLWVtcHR5LXBhdHRlcm4iOjIsIm5vLWV4LWFzc2lnbiI6Miwibm8tZXh0cmEtYm9vbGVhbi1jYXN0IjoyLCJuby1leHRyYS1zZW1pIjoyLCJuby1mYWxsdGhyb3VnaCI6Miwibm8tZnVuYy1hc3NpZ24iOjIsIm5vLWdsb2JhbC1hc3NpZ24iOjIsIm5vLWlubmVyLWRlY2xhcmF0aW9ucyI6Miwibm8taW52YWxpZC1yZWdleHAiOjIsIm5vLWlycmVndWxhci13aGl0ZXNwYWNlIjoyLCJuby1taXNsZWFkaW5nLWNoYXJhY3Rlci1jbGFzcyI6Miwibm8tbWl4ZWQtc3BhY2VzLWFuZC10YWJzIjoyLCJuby1uZXctc3ltYm9sIjoyLCJuby1vYmotY2FsbHMiOjIsIm5vLW9jdGFsIjoyLCJuby1wcm90b3R5cGUtYnVpbHRpbnMiOjIsIm5vLXJlZGVjbGFyZSI6Miwibm8tcmVnZXgtc3BhY2VzIjoyLCJuby1zZWxmLWFzc2lnbiI6Miwibm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXMiOjIsIm5vLXNwYXJzZS1hcnJheXMiOjIsIm5vLXRoaXMtYmVmb3JlLXN1cGVyIjoyLCJuby11bmRlZiI6Miwibm8tdW5leHBlY3RlZC1tdWx0aWxpbmUiOjIsIm5vLXVucmVhY2hhYmxlIjoyLCJuby11bnNhZmUtZmluYWxseSI6Miwibm8tdW5zYWZlLW5lZ2F0aW9uIjoyLCJuby11bnVzZWQtbGFiZWxzIjoyLCJuby11bnVzZWQtdmFycyI6Miwibm8tdXNlbGVzcy1jYXRjaCI6Miwibm8tdXNlbGVzcy1lc2NhcGUiOjIsIm5vLXdpdGgiOjIsInJlcXVpcmUtYXRvbWljLXVwZGF0ZXMiOjIsInJlcXVpcmUteWllbGQiOjIsInVzZS1pc25hbiI6MiwidmFsaWQtdHlwZW9mIjoyfSwiZW52Ijp7fX19)\r\n\r\n**What did you expect to happen?**\r\n\r\n1 error\r\n\r\n**What actually happened? Please include the actual, raw output from ESLint.**\r\n\r\nNo errors.\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nModified regex to not capture `\\0` that isn't followed by an octal digit. The previous code was handling `\\0` by capturing and not reporting, which is okay for the `\\0` but it missed the rest of the string.\r\n\r\nAlso added messageId, I guess it's preferred way now.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\n* Regex validity and performance.\r\n* The whole conditional (`!== \"0\"`) is removed as it is no longer needed, but I'm not sure am I missing something with the other part of it, which is also removed now: `match[3] !== \"undefined\"`. How was that ever `true`?\r\n* I believe that `\\0` should be reported as octal when it's in `\\08` and `\\09`, I'll open an issue.\r\n* `prefer-template` has the same bug (looks like it was copy & paste from this rule and then simplified as it's for test only there), I'll fix it in another PR.\r\n* `quotes` does not check these cases at all when converting from string to template literals. I'll fix it after the PR for `prefer-template` (as it will share something in astUtils).","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/12079/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/12079/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"7f6845ec70f38831b2978599ab5e159e568c12d7","filename":"lib/rules/no-octal-escape.js","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/eslint/eslint/blob/7488c3ee3d28d619daad48c5993f1df664b10a1f/lib%2Frules%2Fno-octal-escape.js","raw_url":"https://github.com/eslint/eslint/raw/7488c3ee3d28d619daad48c5993f1df664b10a1f/lib%2Frules%2Fno-octal-escape.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-octal-escape.js?ref=7488c3ee3d28d619daad48c5993f1df664b10a1f","patch":"@@ -20,7 +20,11 @@ module.exports = {\n             url: \"https://eslint.org/docs/rules/no-octal-escape\"\n         },\n \n-        schema: []\n+        schema: [],\n+\n+        messages: {\n+            octalEscapeSequence: \"Don't use octal: '\\\\{{sequence}}'. Use '\\\\u....' instead.\"\n+        }\n     },\n \n     create(context) {\n@@ -32,15 +36,17 @@ module.exports = {\n                     return;\n                 }\n \n-                const match = node.raw.match(/^([^\\\\]|\\\\[^0-7])*\\\\([0-3][0-7]{1,2}|[4-7][0-7]|[0-7])/u);\n+                // \\0 represents a valid NULL character if it isn't followed by a digit.\n+                const match = node.raw.match(\n+                    /^(?:[^\\\\]|\\\\.)*?\\\\([0-3][0-7]{1,2}|[4-7][0-7]|[1-7])/u\n+                );\n \n                 if (match) {\n-                    const octalDigit = match[2];\n-\n-                    // \\0 is actually not considered an octal\n-                    if (match[2] !== \"0\" || typeof match[3] !== \"undefined\") {\n-                        context.report({ node, message: \"Don't use octal: '\\\\{{octalDigit}}'. Use '\\\\u....' instead.\", data: { octalDigit } });\n-                    }\n+                    context.report({\n+                        node,\n+                        messageId: \"octalEscapeSequence\",\n+                        data: { sequence: match[1] }\n+                    });\n                 }\n             }\n "},{"sha":"cd555ab607eeb7c69bee7bd860f00f7185380d77","filename":"tests/lib/rules/no-octal-escape.js","status":"modified","additions":26,"deletions":5,"changes":31,"blob_url":"https://github.com/eslint/eslint/blob/7488c3ee3d28d619daad48c5993f1df664b10a1f/tests%2Flib%2Frules%2Fno-octal-escape.js","raw_url":"https://github.com/eslint/eslint/raw/7488c3ee3d28d619daad48c5993f1df664b10a1f/tests%2Flib%2Frules%2Fno-octal-escape.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-octal-escape.js?ref=7488c3ee3d28d619daad48c5993f1df664b10a1f","patch":"@@ -24,13 +24,34 @@ ruleTester.run(\"no-octal-escape\", rule, {\n         \"var foo = \\\"\\\\x51\\\";\",\n         \"var foo = \\\"foo \\\\\\\\251 bar\\\";\",\n         \"var foo = /([abc]) \\\\1/g;\",\n-        \"var foo = '\\\\0';\"\n+        \"var foo = '\\\\0';\",\n+        \"'\\\\0 '\",\n+        \"'\\\\0a'\",\n+        \"'\\\\\\\\1'\",\n+        \"'\\\\\\\\01'\",\n+        \"'\\\\08'\",\n+        \"'\\\\09'\"\n     ],\n     invalid: [\n+\n+        // Test full message\n         { code: \"var foo = \\\"foo \\\\01 bar\\\";\", errors: [{ message: \"Don't use octal: '\\\\01'. Use '\\\\u....' instead.\", type: \"Literal\" }] },\n-        { code: \"var foo = \\\"foo \\\\251 bar\\\";\", errors: [{ message: \"Don't use octal: '\\\\251'. Use '\\\\u....' instead.\", type: \"Literal\" }] },\n-        { code: \"var foo = \\\"\\\\751\\\";\", errors: [{ message: \"Don't use octal: '\\\\75'. Use '\\\\u....' instead.\", type: \"Literal\" }] },\n-        { code: \"var foo = \\\"\\\\3s51\\\";\", errors: [{ message: \"Don't use octal: '\\\\3'. Use '\\\\u....' instead.\", type: \"Literal\" }] },\n-        { code: \"var foo = \\\"\\\\\\\\\\\\751\\\";\", errors: [{ message: \"Don't use octal: '\\\\75'. Use '\\\\u....' instead.\", type: \"Literal\" }] }\n+\n+        { code: \"var foo = \\\"foo \\\\251 bar\\\";\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"251\" }, type: \"Literal\" }] },\n+        { code: \"var foo = \\\"\\\\751\\\";\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"75\" }, type: \"Literal\" }] },\n+        { code: \"var foo = \\\"\\\\3s51\\\";\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"3\" }, type: \"Literal\" }] },\n+        { code: \"var foo = \\\"\\\\\\\\\\\\751\\\";\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"75\" }, type: \"Literal\" }] },\n+        { code: \"'\\\\0\\\\1'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"1\" }, type: \"Literal\" }] },\n+        { code: \"'\\\\0 \\\\1'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"1\" }, type: \"Literal\" }] },\n+        { code: \"'\\\\0\\\\01'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"01\" }, type: \"Literal\" }] },\n+        { code: \"'\\\\0 \\\\01'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"01\" }, type: \"Literal\" }] },\n+        { code: \"'\\\\08\\\\1'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"1\" }, type: \"Literal\" }] },\n+        { code: \"'\\\\08\\\\01'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"01\" }, type: \"Literal\" }] },\n+\n+        // Only the first one is reported\n+        { code: \"'\\\\01\\\\02'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"01\" }, type: \"Literal\" }] },\n+        { code: \"'\\\\02\\\\01'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"02\" }, type: \"Literal\" }] },\n+        { code: \"'\\\\01\\\\2'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"01\" }, type: \"Literal\" }] },\n+        { code: \"'\\\\2\\\\01'\", errors: [{ messageId: \"octalEscapeSequence\", data: { sequence: \"2\" }, type: \"Literal\" }] }\n     ]\n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/12085","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/12085/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/12085/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/12085/events","html_url":"https://github.com/eslint/eslint/pull/12085","id":479211037,"node_id":"MDExOlB1bGxSZXF1ZXN0MzA2MTcyOTEx","number":12085,"title":"Fix: prefer-template autofix produces syntax error with octal escapes","user":{"login":"mdjermanovic","id":44349756,"node_id":"MDQ6VXNlcjQ0MzQ5NzU2","avatar_url":"https://avatars.githubusercontent.com/u/44349756?v=4","gravatar_id":"","url":"https://api.github.com/users/mdjermanovic","html_url":"https://github.com/mdjermanovic","followers_url":"https://api.github.com/users/mdjermanovic/followers","following_url":"https://api.github.com/users/mdjermanovic/following{/other_user}","gists_url":"https://api.github.com/users/mdjermanovic/gists{/gist_id}","starred_url":"https://api.github.com/users/mdjermanovic/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdjermanovic/subscriptions","organizations_url":"https://api.github.com/users/mdjermanovic/orgs","repos_url":"https://api.github.com/users/mdjermanovic/repos","events_url":"https://api.github.com/users/mdjermanovic/events{/privacy}","received_events_url":"https://api.github.com/users/mdjermanovic/received_events","type":"User","site_admin":false},"labels":[{"id":45711350,"node_id":"MDU6TGFiZWw0NTcxMTM1MA==","url":"https://api.github.com/repos/eslint/eslint/labels/bug","name":"bug","color":"fc2929","default":true,"description":"ESLint is working incorrectly"},{"id":45798639,"node_id":"MDU6TGFiZWw0NTc5ODYzOQ==","url":"https://api.github.com/repos/eslint/eslint/labels/rule","name":"rule","color":"fbca04","default":false,"description":"Relates to ESLint's core rules"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-08-10T00:51:45Z","updated_at":"2020-02-15T22:43:55Z","closed_at":"2019-08-18T19:53:25Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/12085","html_url":"https://github.com/eslint/eslint/pull/12085","diff_url":"https://github.com/eslint/eslint/pull/12085.diff","patch_url":"https://github.com/eslint/eslint/pull/12085.patch","merged_at":"2019-08-18T19:53:25Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[X] Bug fix\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n**Tell us about your environment**\r\n\r\n* **ESLint Version:** 6.1.0\r\n* **Node Version:** 10.16.0\r\n* **npm Version:** 6.9.0\r\n\r\n**What parser (default, Babel-ESLint, etc.) are you using?**\r\n\r\ndefault\r\n\r\n**Please show your full configuration:**\r\n\r\n<details>\r\n<summary>Configuration</summary>\r\n\r\n<!-- Paste your configuration below: -->\r\n```js\r\nmodule.exports = {\r\n  parserOptions: {\r\n    ecmaVersion: 2015,\r\n  },\r\n};\r\n```\r\n\r\n</details>\r\n\r\n**What did you do? Please include the actual source code causing the issue.**\r\n\r\n```js\r\n/*eslint prefer-template: \"error\"*/\r\n\r\n\"\\0 \\1\" + foo\r\n```\r\n\r\n```js\r\n/*eslint prefer-template: \"error\"*/\r\n\r\n\"\\08\" + foo\r\n```\r\n\r\n**What did you expect to happen?**\r\n\r\nNot a syntax error in autofix.\r\n\r\n**What actually happened? Please include the actual, raw output from ESLint.**\r\n\r\n```js\r\n/*eslint prefer-template: \"error\"*/\r\n\r\n`\\0 \\1${  foo}`\r\n```\r\n\r\n`Parsing error: Octal literal in template string`\r\n\r\n```js\r\n/*eslint prefer-template: \"error\"*/\r\n\r\n`\\08${  foo}`\r\n```\r\n\r\n`Parsing error: Octal literal in template string`\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nMade a new regex in `astUtils`, which fixes two bugs:\r\n\r\n* Octal escapes after a valid `\\0` were missed (e.g. `\"\\0 \\1\"`). This bug was probably inherited from `no-octal-escape` (fixed there in #12079)\r\n* Whether or not `\"\\08\"` and `\"\\09\"` are octal escapes (#12080) these two de facto produce parsing errors in template literals.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\n* Regex and its performance.\r\n\r\nI'll also fix the `quotes` rule in another PR when this gets merged.","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/12085/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/12085/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"a2507d452c68eb00d69e9620dd973bee035d8b3d","filename":"lib/rules/prefer-template.js","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/eslint/eslint/blob/c500546d8a51e81bfd9b10f26406123463a7c11f/lib%2Frules%2Fprefer-template.js","raw_url":"https://github.com/eslint/eslint/raw/c500546d8a51e81bfd9b10f26406123463a7c11f/lib%2Frules%2Fprefer-template.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fprefer-template.js?ref=c500546d8a51e81bfd9b10f26406123463a7c11f","patch":"@@ -52,16 +52,7 @@ function isOctalEscapeSequence(node) {\n         return false;\n     }\n \n-    const match = node.raw.match(/^([^\\\\]|\\\\[^0-7])*\\\\([0-7]{1,3})/u);\n-\n-    if (match) {\n-\n-        // \\0 is actually not considered an octal\n-        if (match[2] !== \"0\" || typeof match[3] !== \"undefined\") {\n-            return true;\n-        }\n-    }\n-    return false;\n+    return astUtils.hasOctalEscapeSequence(node.raw);\n }\n \n /**"},{"sha":"a4731496841cdd59a10e6da226923725044a4915","filename":"lib/rules/utils/ast-utils.js","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/eslint/eslint/blob/c500546d8a51e81bfd9b10f26406123463a7c11f/lib%2Frules%2Futils%2Fast-utils.js","raw_url":"https://github.com/eslint/eslint/raw/c500546d8a51e81bfd9b10f26406123463a7c11f/lib%2Frules%2Futils%2Fast-utils.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Futils%2Fast-utils.js?ref=c500546d8a51e81bfd9b10f26406123463a7c11f","patch":"@@ -38,6 +38,7 @@ const LINEBREAKS = new Set([\"\\r\\n\", \"\\r\", \"\\n\", \"\\u2028\", \"\\u2029\"]);\n const STATEMENT_LIST_PARENTS = new Set([\"Program\", \"BlockStatement\", \"SwitchCase\"]);\n \n const DECIMAL_INTEGER_PATTERN = /^(0|[1-9]\\d*)$/u;\n+const OCTAL_ESCAPE_PATTERN = /^(?:[^\\\\]|\\\\[^0-7]|\\\\0(?![0-9]))*\\\\(?:[1-7]|0[0-9])/u;\n \n /**\n  * Checks reference if is non initializer and writable.\n@@ -1373,5 +1374,20 @@ module.exports = {\n             \"/*\".length +\n             (match ? match.index + 1 : 0)\n         );\n+    },\n+\n+    /**\n+     * Determines whether the given raw string contains an octal escape sequence.\n+     *\n+     * \"\\1\", \"\\2\" ... \"\\7\"\n+     * \"\\00\", \"\\01\" ... \"\\09\"\n+     *\n+     * \"\\0\", when not followed by a digit, is not an octal escape sequence.\n+     *\n+     * @param {string} rawString A string in its raw representation.\n+     * @returns {boolean} `true` if the string contains at least one octal escape sequence.\n+     */\n+    hasOctalEscapeSequence(rawString) {\n+        return OCTAL_ESCAPE_PATTERN.test(rawString);\n     }\n };"},{"sha":"439b261cc1afb58849688a2b971cc49cafd882d4","filename":"tests/lib/rules/prefer-template.js","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/eslint/eslint/blob/c500546d8a51e81bfd9b10f26406123463a7c11f/tests%2Flib%2Frules%2Fprefer-template.js","raw_url":"https://github.com/eslint/eslint/raw/c500546d8a51e81bfd9b10f26406123463a7c11f/tests%2Flib%2Frules%2Fprefer-template.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fprefer-template.js?ref=c500546d8a51e81bfd9b10f26406123463a7c11f","patch":"@@ -199,6 +199,16 @@ ruleTester.run(\"prefer-template\", rule, {\n             output: null,\n             errors\n         },\n+        {\n+            code: \"foo + '\\\\0\\\\1'\",\n+            output: null,\n+            errors\n+        },\n+        {\n+            code: \"foo + '\\\\08'\",\n+            output: null,\n+            errors\n+        },\n         {\n             code: \"foo + '\\\\\\\\033'\",\n             output: \"`${foo  }\\\\\\\\033`\","},{"sha":"904bf01487c264db4e19450dcf2bc235ba30b57b","filename":"tests/lib/rules/utils/ast-utils.js","status":"modified","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/eslint/eslint/blob/c500546d8a51e81bfd9b10f26406123463a7c11f/tests%2Flib%2Frules%2Futils%2Fast-utils.js","raw_url":"https://github.com/eslint/eslint/raw/c500546d8a51e81bfd9b10f26406123463a7c11f/tests%2Flib%2Frules%2Futils%2Fast-utils.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Futils%2Fast-utils.js?ref=c500546d8a51e81bfd9b10f26406123463a7c11f","patch":"@@ -1248,4 +1248,82 @@ describe(\"ast-utils\", () => {\n             assert.strictEqual(astUtils.equalTokens(ast.body[0], ast.body[1], sourceCode), false);\n         });\n     });\n+\n+    describe(\"hasOctalEscapeSequence\", () => {\n+\n+        /* eslint-disable quote-props */\n+        const expectedResults = {\n+            \"\\\\1\": true,\n+            \"\\\\2\": true,\n+            \"\\\\7\": true,\n+            \"\\\\00\": true,\n+            \"\\\\01\": true,\n+            \"\\\\02\": true,\n+            \"\\\\07\": true,\n+            \"\\\\08\": true,\n+            \"\\\\09\": true,\n+            \"\\\\10\": true,\n+            \"\\\\12\": true,\n+            \" \\\\1\": true,\n+            \"\\\\1 \": true,\n+            \"a\\\\1\": true,\n+            \"\\\\1a\": true,\n+            \"a\\\\1a\": true,\n+            \" \\\\01\": true,\n+            \"\\\\01 \": true,\n+            \"a\\\\01\": true,\n+            \"\\\\01a\": true,\n+            \"a\\\\01a\": true,\n+            \"a\\\\08a\": true,\n+            \"\\\\0\\\\1\": true,\n+            \"\\\\0\\\\01\": true,\n+            \"\\\\0\\\\08\": true,\n+            \"\\\\n\\\\1\": true,\n+            \"\\\\n\\\\01\": true,\n+            \"\\\\n\\\\08\": true,\n+            \"\\\\\\\\\\\\1\": true,\n+            \"\\\\\\\\\\\\01\": true,\n+            \"\\\\\\\\\\\\08\": true,\n+\n+            \"\\\\0\": false,\n+            \"\\\\8\": false,\n+            \"\\\\9\": false,\n+            \" \\\\0\": false,\n+            \"\\\\0 \": false,\n+            \"a\\\\0\": false,\n+            \"\\\\0a\": false,\n+            \"a\\\\8a\": false,\n+            \"\\\\0\\\\8\": false,\n+            \"\\\\8\\\\0\": false,\n+            \"\\\\80\": false,\n+            \"\\\\81\": false,\n+            \"\\\\\\\\\": false,\n+            \"\\\\\\\\0\": false,\n+            \"\\\\\\\\01\": false,\n+            \"\\\\\\\\08\": false,\n+            \"\\\\\\\\1\": false,\n+            \"\\\\\\\\12\": false,\n+            \"\\\\\\\\\\\\0\": false,\n+            \"\\\\\\\\\\\\8\": false,\n+            \"\\\\0\\\\\\\\\": false,\n+            \"0\": false,\n+            \"1\": false,\n+            \"8\": false,\n+            \"01\": false,\n+            \"08\": false,\n+            \"80\": false,\n+            \"12\": false,\n+            \"\\\\a\": false,\n+            \"\\\\n\": false\n+        };\n+        /* eslint-enable quote-props */\n+\n+        Object.keys(expectedResults).forEach(key => {\n+            it(`should return ${expectedResults[key]} for ${key}`, () => {\n+                const ast = espree.parse(`\"${key}\"`);\n+\n+                assert.strictEqual(astUtils.hasOctalEscapeSequence(ast.body[0].expression.raw), expectedResults[key]);\n+            });\n+        });\n+    });\n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/11705","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/11705/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/11705/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/11705/events","html_url":"https://github.com/eslint/eslint/pull/11705","id":442773261,"node_id":"MDExOlB1bGxSZXF1ZXN0Mjc3ODEyODEw","number":11705,"title":"Chore: lazy loading for rules","user":{"login":"mysticatea","id":1937871,"node_id":"MDQ6VXNlcjE5Mzc4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1937871?v=4","gravatar_id":"","url":"https://api.github.com/users/mysticatea","html_url":"https://github.com/mysticatea","followers_url":"https://api.github.com/users/mysticatea/followers","following_url":"https://api.github.com/users/mysticatea/following{/other_user}","gists_url":"https://api.github.com/users/mysticatea/gists{/gist_id}","starred_url":"https://api.github.com/users/mysticatea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mysticatea/subscriptions","organizations_url":"https://api.github.com/users/mysticatea/orgs","repos_url":"https://api.github.com/users/mysticatea/repos","events_url":"https://api.github.com/users/mysticatea/events{/privacy}","received_events_url":"https://api.github.com/users/mysticatea/received_events","type":"User","site_admin":false},"labels":[{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":255319420,"node_id":"MDU6TGFiZWwyNTUzMTk0MjA=","url":"https://api.github.com/repos/eslint/eslint/labels/evaluating","name":"evaluating","color":"fef2c0","default":false,"description":"The team will evaluate this issue to decide whether it meets the criteria for inclusion"},{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-05-10T15:23:42Z","updated_at":"2019-11-08T22:43:41Z","closed_at":"2019-05-11T00:30:35Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/11705","html_url":"https://github.com/eslint/eslint/pull/11705","diff_url":"https://github.com/eslint/eslint/pull/11705.diff","patch_url":"https://github.com/eslint/eslint/pull/11705.patch","merged_at":"2019-05-11T00:30:35Z"},"body":"**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[X] Other, please explain: improve performance.\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis PR improves performance by avoiding to load unused rules.\r\nBut this PR keeps static linking for bundlers can recognize rules.\r\n\r\n- `lib/util/lazy-loading-rule-map.js` ... The map of built-in rules. This map will load each rule at the first access.\r\n- `lib/cli.js` ... This file will iterate all rules at the first access of `rulesMeta`.\r\n- `lib/testers/rule-tester.js` ... This file no longer iterates all rules.\r\n- `conf/eslint-recommended.js` ... This file no longer iterates all rules.\r\n- `Makefile.js` ... The test verifies if `conf/eslint-recommended.js` is correct.\r\n\r\n----\r\n\r\n**Impacts:**\r\n\r\n```bash\r\neslint lib/linter.js --no-eslintrc --config conf/eslint-recommended.js --parser-options ecmaVersion:2018\r\n# 0.73s → 0.56s (23% speed up)\r\n\r\neslint lib/linter.js\r\n# 1.25s → 1.20s (4% speed up)\r\n\r\nmocha \"tests/{bin,lib,tools}/**/*.js\" --reporter progress\r\n# 52s → 49s (5% speed up)\r\n```\r\n\r\nEspecially, it has a lerge impact if it used fewer rules such as `eslint:recommended`.\r\n\r\n----\r\n\r\n**npm run perf:**\r\n\r\n```bash\r\n# BEFORE -----------------------------------------------------------------------\r\nLoading:\r\n  Load performance Run #1:  421.4627ms\r\n  Load performance Run #2:  449.755299ms\r\n  Load performance Run #4:  460.1405ms\r\n  Load performance Run #5:  453.075ms\r\n  Load Performance median:  453.075ms\r\n\r\n\r\nSingle File:\r\n  CPU Speed is 3192 with multiplier 13000000\r\n  Performance Run #1:  3998.2129ms\r\n  Performance Run #2:  3855.885199ms\r\n  Performance Run #3:  3704.6185ms\r\n  Performance Run #4:  3810.938001ms\r\n  Performance Run #5:  3731.5751ms\r\n\r\n  Performance budget ok:  3810.938001ms (limit: 4072.6817042606517ms)\r\n\r\n\r\nMulti Files (0 files):\r\n  CPU Speed is 3192 with multiplier 39000000\r\n  Performance Run #1:  11271.758299ms\r\n  Performance Run #2:  10577.971301ms\r\n  Performance Run #3:  10542.4316ms\r\n  Performance Run #4:  10947.606701ms\r\n  Performance Run #5:  10122.6511ms\r\n\r\n  Performance budget ok:  10577.971301ms (limit: 12218.045112781954ms)\r\n\r\n# AFTER ------------------------------------------------------------------------\r\nLoading:\r\n  Load performance Run #1:  220.293599ms\r\n  Load performance Run #2:  215.602099ms\r\n  Load performance Run #3:  210.9296ms\r\n  Load performance Run #4:  222.679ms\r\n  Load performance Run #5:  217.569701ms\r\n\r\n  Load Performance median:  217.569701ms\r\n\r\n\r\nSingle File:\r\n  CPU Speed is 3192 with multiplier 13000000\r\n  Performance Run #1:  3839.186ms\r\n  Performance Run #2:  3770.319299ms\r\n  Performance Run #3:  3685.686001ms\r\n  Performance Run #4:  3779.8463ms\r\n  Performance Run #5:  3650.4698ms\r\n\r\n  Performance budget ok:  3770.319299ms (limit: 4072.6817042606517ms)\r\n\r\n\r\nMulti Files (0 files):\r\n  CPU Speed is 3192 with multiplier 39000000\r\n  Performance Run #1:  10705.549801ms\r\n  Performance Run #2:  10394.445ms\r\n  Performance Run #3:  10542.7665ms\r\n  Performance Run #4:  10355.708099ms\r\n  Performance Run #5:  10419.626301ms\r\n\r\n  Performance budget ok:  10419.626301ms (limit: 12218.045112781954ms)\r\n```\r\n\r\n- Load performance 52% speed up.\r\n- Single File 4% speed up.\r\n- Multi Files 1% speed up.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nCan we go to this direction?\r\n\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/11705/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/11705/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"f326faafbf0bebcb8c198c065e527ef096512ead","filename":"Makefile.js","status":"modified","additions":21,"deletions":6,"changes":27,"blob_url":"https://github.com/eslint/eslint/blob/f642e074aef546acdfd877885f437007bc8a91c5/Makefile.js","raw_url":"https://github.com/eslint/eslint/raw/f642e074aef546acdfd877885f437007bc8a91c5/Makefile.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/Makefile.js?ref=f642e074aef546acdfd877885f437007bc8a91c5","patch":"@@ -847,16 +847,31 @@ target.checkRuleFiles = function() {\n         }\n \n         // check parity between rules index file and rules directory\n-        const builtInRulesIndexPath = \"./lib/built-in-rules-index\";\n-        const ruleIdsInIndex = require(builtInRulesIndexPath);\n-        const ruleEntryFromIndexIsMissing = !ruleIdsInIndex.has(basename);\n+        const ruleIdsInIndex = require(\"./lib/built-in-rules-index\");\n+        const ruleDef = ruleIdsInIndex.get(basename);\n \n-        if (ruleEntryFromIndexIsMissing) {\n-            console.error(`Missing rule from index (${builtInRulesIndexPath}.js): ${basename}. If you just added a ` +\n-                \"new rule then add an entry for it in this file.\");\n+        if (!ruleDef) {\n+            console.error(`Missing rule from index (./lib/built-in-rules-index.js): ${basename}. If you just added a new rule then add an entry for it in this file.`);\n             errors++;\n         }\n \n+        // check eslint:recommended\n+        const recommended = require(\"./conf/eslint-recommended\");\n+\n+        if (ruleDef) {\n+            if (ruleDef.meta.docs.recommended) {\n+                if (recommended.rules[basename] !== \"error\") {\n+                    console.error(`Missing rule from eslint:recommended (./conf/eslint-recommended.js): ${basename}. If you just made a rule recommended then add an entry for it in this file.`);\n+                    errors++;\n+                }\n+            } else {\n+                if (basename in recommended.rules) {\n+                    console.error(`Extra rule in eslint:recommended (./conf/eslint-recommended.js): ${basename}. If you just added a rule then don't add an entry for it in this file.`);\n+                    errors++;\n+                }\n+            }\n+        }\n+\n         // check for tests\n         if (!test(\"-f\", `tests/lib/rules/${basename}.js`)) {\n             console.error(\"Missing tests for rule %s\", basename);"},{"sha":"86f35bfddb5f111d12ab2ad9ab2885dba8aac87c","filename":"conf/eslint-recommended.js","status":"modified","additions":60,"deletions":9,"changes":69,"blob_url":"https://github.com/eslint/eslint/blob/f642e074aef546acdfd877885f437007bc8a91c5/conf%2Feslint-recommended.js","raw_url":"https://github.com/eslint/eslint/raw/f642e074aef546acdfd877885f437007bc8a91c5/conf%2Feslint-recommended.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/conf%2Feslint-recommended.js?ref=f642e074aef546acdfd877885f437007bc8a91c5","patch":"@@ -6,14 +6,65 @@\n \n \"use strict\";\n \n-const builtInRules = require(\"../lib/built-in-rules-index\");\n-const recommendedRules = {};\n-\n-for (const [ruleId, rule] of builtInRules) {\n-    if (rule.meta.docs.recommended) {\n-        recommendedRules[ruleId] = \"error\";\n-    }\n-}\n+/* eslint sort-keys: [\"error\", \"asc\"] */\n \n /** @type {import(\"../lib/util/types\").ConfigData} */\n-module.exports = { rules: recommendedRules };\n+module.exports = {\n+    rules: {\n+        \"constructor-super\": \"error\",\n+        \"for-direction\": \"error\",\n+        \"getter-return\": \"error\",\n+        \"no-async-promise-executor\": \"error\",\n+        \"no-case-declarations\": \"error\",\n+        \"no-class-assign\": \"error\",\n+        \"no-compare-neg-zero\": \"error\",\n+        \"no-cond-assign\": \"error\",\n+        \"no-const-assign\": \"error\",\n+        \"no-constant-condition\": \"error\",\n+        \"no-control-regex\": \"error\",\n+        \"no-debugger\": \"error\",\n+        \"no-delete-var\": \"error\",\n+        \"no-dupe-args\": \"error\",\n+        \"no-dupe-class-members\": \"error\",\n+        \"no-dupe-keys\": \"error\",\n+        \"no-duplicate-case\": \"error\",\n+        \"no-empty\": \"error\",\n+        \"no-empty-character-class\": \"error\",\n+        \"no-empty-pattern\": \"error\",\n+        \"no-ex-assign\": \"error\",\n+        \"no-extra-boolean-cast\": \"error\",\n+        \"no-extra-semi\": \"error\",\n+        \"no-fallthrough\": \"error\",\n+        \"no-func-assign\": \"error\",\n+        \"no-global-assign\": \"error\",\n+        \"no-inner-declarations\": \"error\",\n+        \"no-invalid-regexp\": \"error\",\n+        \"no-irregular-whitespace\": \"error\",\n+        \"no-misleading-character-class\": \"error\",\n+        \"no-mixed-spaces-and-tabs\": \"error\",\n+        \"no-new-symbol\": \"error\",\n+        \"no-obj-calls\": \"error\",\n+        \"no-octal\": \"error\",\n+        \"no-prototype-builtins\": \"error\",\n+        \"no-redeclare\": \"error\",\n+        \"no-regex-spaces\": \"error\",\n+        \"no-self-assign\": \"error\",\n+        \"no-shadow-restricted-names\": \"error\",\n+        \"no-sparse-arrays\": \"error\",\n+        \"no-this-before-super\": \"error\",\n+        \"no-undef\": \"error\",\n+        \"no-unexpected-multiline\": \"error\",\n+        \"no-unreachable\": \"error\",\n+        \"no-unsafe-finally\": \"error\",\n+        \"no-unsafe-negation\": \"error\",\n+        \"no-unused-labels\": \"error\",\n+        \"no-unused-vars\": \"error\",\n+        \"no-useless-catch\": \"error\",\n+        \"no-useless-escape\": \"error\",\n+        \"no-with\": \"error\",\n+        \"require-atomic-updates\": \"error\",\n+        \"require-yield\": \"error\",\n+        \"use-isnan\": \"error\",\n+        \"valid-typeof\": \"error\"\n+    }\n+};"},{"sha":"df321be9647140fe9b8e4b90422905517e45ffbb","filename":"lib/built-in-rules-index.js","status":"modified","additions":270,"deletions":268,"changes":538,"blob_url":"https://github.com/eslint/eslint/blob/f642e074aef546acdfd877885f437007bc8a91c5/lib%2Fbuilt-in-rules-index.js","raw_url":"https://github.com/eslint/eslint/raw/f642e074aef546acdfd877885f437007bc8a91c5/lib%2Fbuilt-in-rules-index.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fbuilt-in-rules-index.js?ref=f642e074aef546acdfd877885f437007bc8a91c5","patch":"@@ -8,272 +8,274 @@\n \n /* eslint sort-keys: [\"error\", \"asc\"] */\n \n-/** @type {Map<string, import(\"./util/types\").Rule>} */\n-module.exports = new Map(Object.entries({\n-    \"accessor-pairs\": require(\"./rules/accessor-pairs\"),\n-    \"array-bracket-newline\": require(\"./rules/array-bracket-newline\"),\n-    \"array-bracket-spacing\": require(\"./rules/array-bracket-spacing\"),\n-    \"array-callback-return\": require(\"./rules/array-callback-return\"),\n-    \"array-element-newline\": require(\"./rules/array-element-newline\"),\n-    \"arrow-body-style\": require(\"./rules/arrow-body-style\"),\n-    \"arrow-parens\": require(\"./rules/arrow-parens\"),\n-    \"arrow-spacing\": require(\"./rules/arrow-spacing\"),\n-    \"block-scoped-var\": require(\"./rules/block-scoped-var\"),\n-    \"block-spacing\": require(\"./rules/block-spacing\"),\n-    \"brace-style\": require(\"./rules/brace-style\"),\n-    \"callback-return\": require(\"./rules/callback-return\"),\n-    camelcase: require(\"./rules/camelcase\"),\n-    \"capitalized-comments\": require(\"./rules/capitalized-comments\"),\n-    \"class-methods-use-this\": require(\"./rules/class-methods-use-this\"),\n-    \"comma-dangle\": require(\"./rules/comma-dangle\"),\n-    \"comma-spacing\": require(\"./rules/comma-spacing\"),\n-    \"comma-style\": require(\"./rules/comma-style\"),\n-    complexity: require(\"./rules/complexity\"),\n-    \"computed-property-spacing\": require(\"./rules/computed-property-spacing\"),\n-    \"consistent-return\": require(\"./rules/consistent-return\"),\n-    \"consistent-this\": require(\"./rules/consistent-this\"),\n-    \"constructor-super\": require(\"./rules/constructor-super\"),\n-    curly: require(\"./rules/curly\"),\n-    \"default-case\": require(\"./rules/default-case\"),\n-    \"dot-location\": require(\"./rules/dot-location\"),\n-    \"dot-notation\": require(\"./rules/dot-notation\"),\n-    \"eol-last\": require(\"./rules/eol-last\"),\n-    eqeqeq: require(\"./rules/eqeqeq\"),\n-    \"for-direction\": require(\"./rules/for-direction\"),\n-    \"func-call-spacing\": require(\"./rules/func-call-spacing\"),\n-    \"func-name-matching\": require(\"./rules/func-name-matching\"),\n-    \"func-names\": require(\"./rules/func-names\"),\n-    \"func-style\": require(\"./rules/func-style\"),\n-    \"function-paren-newline\": require(\"./rules/function-paren-newline\"),\n-    \"generator-star-spacing\": require(\"./rules/generator-star-spacing\"),\n-    \"getter-return\": require(\"./rules/getter-return\"),\n-    \"global-require\": require(\"./rules/global-require\"),\n-    \"guard-for-in\": require(\"./rules/guard-for-in\"),\n-    \"handle-callback-err\": require(\"./rules/handle-callback-err\"),\n-    \"id-blacklist\": require(\"./rules/id-blacklist\"),\n-    \"id-length\": require(\"./rules/id-length\"),\n-    \"id-match\": require(\"./rules/id-match\"),\n-    \"implicit-arrow-linebreak\": require(\"./rules/implicit-arrow-linebreak\"),\n-    indent: require(\"./rules/indent\"),\n-    \"indent-legacy\": require(\"./rules/indent-legacy\"),\n-    \"init-declarations\": require(\"./rules/init-declarations\"),\n-    \"jsx-quotes\": require(\"./rules/jsx-quotes\"),\n-    \"key-spacing\": require(\"./rules/key-spacing\"),\n-    \"keyword-spacing\": require(\"./rules/keyword-spacing\"),\n-    \"line-comment-position\": require(\"./rules/line-comment-position\"),\n-    \"linebreak-style\": require(\"./rules/linebreak-style\"),\n-    \"lines-around-comment\": require(\"./rules/lines-around-comment\"),\n-    \"lines-around-directive\": require(\"./rules/lines-around-directive\"),\n-    \"lines-between-class-members\": require(\"./rules/lines-between-class-members\"),\n-    \"max-classes-per-file\": require(\"./rules/max-classes-per-file\"),\n-    \"max-depth\": require(\"./rules/max-depth\"),\n-    \"max-len\": require(\"./rules/max-len\"),\n-    \"max-lines\": require(\"./rules/max-lines\"),\n-    \"max-lines-per-function\": require(\"./rules/max-lines-per-function\"),\n-    \"max-nested-callbacks\": require(\"./rules/max-nested-callbacks\"),\n-    \"max-params\": require(\"./rules/max-params\"),\n-    \"max-statements\": require(\"./rules/max-statements\"),\n-    \"max-statements-per-line\": require(\"./rules/max-statements-per-line\"),\n-    \"multiline-comment-style\": require(\"./rules/multiline-comment-style\"),\n-    \"multiline-ternary\": require(\"./rules/multiline-ternary\"),\n-    \"new-cap\": require(\"./rules/new-cap\"),\n-    \"new-parens\": require(\"./rules/new-parens\"),\n-    \"newline-after-var\": require(\"./rules/newline-after-var\"),\n-    \"newline-before-return\": require(\"./rules/newline-before-return\"),\n-    \"newline-per-chained-call\": require(\"./rules/newline-per-chained-call\"),\n-    \"no-alert\": require(\"./rules/no-alert\"),\n-    \"no-array-constructor\": require(\"./rules/no-array-constructor\"),\n-    \"no-async-promise-executor\": require(\"./rules/no-async-promise-executor\"),\n-    \"no-await-in-loop\": require(\"./rules/no-await-in-loop\"),\n-    \"no-bitwise\": require(\"./rules/no-bitwise\"),\n-    \"no-buffer-constructor\": require(\"./rules/no-buffer-constructor\"),\n-    \"no-caller\": require(\"./rules/no-caller\"),\n-    \"no-case-declarations\": require(\"./rules/no-case-declarations\"),\n-    \"no-catch-shadow\": require(\"./rules/no-catch-shadow\"),\n-    \"no-class-assign\": require(\"./rules/no-class-assign\"),\n-    \"no-compare-neg-zero\": require(\"./rules/no-compare-neg-zero\"),\n-    \"no-cond-assign\": require(\"./rules/no-cond-assign\"),\n-    \"no-confusing-arrow\": require(\"./rules/no-confusing-arrow\"),\n-    \"no-console\": require(\"./rules/no-console\"),\n-    \"no-const-assign\": require(\"./rules/no-const-assign\"),\n-    \"no-constant-condition\": require(\"./rules/no-constant-condition\"),\n-    \"no-continue\": require(\"./rules/no-continue\"),\n-    \"no-control-regex\": require(\"./rules/no-control-regex\"),\n-    \"no-debugger\": require(\"./rules/no-debugger\"),\n-    \"no-delete-var\": require(\"./rules/no-delete-var\"),\n-    \"no-div-regex\": require(\"./rules/no-div-regex\"),\n-    \"no-dupe-args\": require(\"./rules/no-dupe-args\"),\n-    \"no-dupe-class-members\": require(\"./rules/no-dupe-class-members\"),\n-    \"no-dupe-keys\": require(\"./rules/no-dupe-keys\"),\n-    \"no-duplicate-case\": require(\"./rules/no-duplicate-case\"),\n-    \"no-duplicate-imports\": require(\"./rules/no-duplicate-imports\"),\n-    \"no-else-return\": require(\"./rules/no-else-return\"),\n-    \"no-empty\": require(\"./rules/no-empty\"),\n-    \"no-empty-character-class\": require(\"./rules/no-empty-character-class\"),\n-    \"no-empty-function\": require(\"./rules/no-empty-function\"),\n-    \"no-empty-pattern\": require(\"./rules/no-empty-pattern\"),\n-    \"no-eq-null\": require(\"./rules/no-eq-null\"),\n-    \"no-eval\": require(\"./rules/no-eval\"),\n-    \"no-ex-assign\": require(\"./rules/no-ex-assign\"),\n-    \"no-extend-native\": require(\"./rules/no-extend-native\"),\n-    \"no-extra-bind\": require(\"./rules/no-extra-bind\"),\n-    \"no-extra-boolean-cast\": require(\"./rules/no-extra-boolean-cast\"),\n-    \"no-extra-label\": require(\"./rules/no-extra-label\"),\n-    \"no-extra-parens\": require(\"./rules/no-extra-parens\"),\n-    \"no-extra-semi\": require(\"./rules/no-extra-semi\"),\n-    \"no-fallthrough\": require(\"./rules/no-fallthrough\"),\n-    \"no-floating-decimal\": require(\"./rules/no-floating-decimal\"),\n-    \"no-func-assign\": require(\"./rules/no-func-assign\"),\n-    \"no-global-assign\": require(\"./rules/no-global-assign\"),\n-    \"no-implicit-coercion\": require(\"./rules/no-implicit-coercion\"),\n-    \"no-implicit-globals\": require(\"./rules/no-implicit-globals\"),\n-    \"no-implied-eval\": require(\"./rules/no-implied-eval\"),\n-    \"no-inline-comments\": require(\"./rules/no-inline-comments\"),\n-    \"no-inner-declarations\": require(\"./rules/no-inner-declarations\"),\n-    \"no-invalid-regexp\": require(\"./rules/no-invalid-regexp\"),\n-    \"no-invalid-this\": require(\"./rules/no-invalid-this\"),\n-    \"no-irregular-whitespace\": require(\"./rules/no-irregular-whitespace\"),\n-    \"no-iterator\": require(\"./rules/no-iterator\"),\n-    \"no-label-var\": require(\"./rules/no-label-var\"),\n-    \"no-labels\": require(\"./rules/no-labels\"),\n-    \"no-lone-blocks\": require(\"./rules/no-lone-blocks\"),\n-    \"no-lonely-if\": require(\"./rules/no-lonely-if\"),\n-    \"no-loop-func\": require(\"./rules/no-loop-func\"),\n-    \"no-magic-numbers\": require(\"./rules/no-magic-numbers\"),\n-    \"no-misleading-character-class\": require(\"./rules/no-misleading-character-class\"),\n-    \"no-mixed-operators\": require(\"./rules/no-mixed-operators\"),\n-    \"no-mixed-requires\": require(\"./rules/no-mixed-requires\"),\n-    \"no-mixed-spaces-and-tabs\": require(\"./rules/no-mixed-spaces-and-tabs\"),\n-    \"no-multi-assign\": require(\"./rules/no-multi-assign\"),\n-    \"no-multi-spaces\": require(\"./rules/no-multi-spaces\"),\n-    \"no-multi-str\": require(\"./rules/no-multi-str\"),\n-    \"no-multiple-empty-lines\": require(\"./rules/no-multiple-empty-lines\"),\n-    \"no-native-reassign\": require(\"./rules/no-native-reassign\"),\n-    \"no-negated-condition\": require(\"./rules/no-negated-condition\"),\n-    \"no-negated-in-lhs\": require(\"./rules/no-negated-in-lhs\"),\n-    \"no-nested-ternary\": require(\"./rules/no-nested-ternary\"),\n-    \"no-new\": require(\"./rules/no-new\"),\n-    \"no-new-func\": require(\"./rules/no-new-func\"),\n-    \"no-new-object\": require(\"./rules/no-new-object\"),\n-    \"no-new-require\": require(\"./rules/no-new-require\"),\n-    \"no-new-symbol\": require(\"./rules/no-new-symbol\"),\n-    \"no-new-wrappers\": require(\"./rules/no-new-wrappers\"),\n-    \"no-obj-calls\": require(\"./rules/no-obj-calls\"),\n-    \"no-octal\": require(\"./rules/no-octal\"),\n-    \"no-octal-escape\": require(\"./rules/no-octal-escape\"),\n-    \"no-param-reassign\": require(\"./rules/no-param-reassign\"),\n-    \"no-path-concat\": require(\"./rules/no-path-concat\"),\n-    \"no-plusplus\": require(\"./rules/no-plusplus\"),\n-    \"no-process-env\": require(\"./rules/no-process-env\"),\n-    \"no-process-exit\": require(\"./rules/no-process-exit\"),\n-    \"no-proto\": require(\"./rules/no-proto\"),\n-    \"no-prototype-builtins\": require(\"./rules/no-prototype-builtins\"),\n-    \"no-redeclare\": require(\"./rules/no-redeclare\"),\n-    \"no-regex-spaces\": require(\"./rules/no-regex-spaces\"),\n-    \"no-restricted-globals\": require(\"./rules/no-restricted-globals\"),\n-    \"no-restricted-imports\": require(\"./rules/no-restricted-imports\"),\n-    \"no-restricted-modules\": require(\"./rules/no-restricted-modules\"),\n-    \"no-restricted-properties\": require(\"./rules/no-restricted-properties\"),\n-    \"no-restricted-syntax\": require(\"./rules/no-restricted-syntax\"),\n-    \"no-return-assign\": require(\"./rules/no-return-assign\"),\n-    \"no-return-await\": require(\"./rules/no-return-await\"),\n-    \"no-script-url\": require(\"./rules/no-script-url\"),\n-    \"no-self-assign\": require(\"./rules/no-self-assign\"),\n-    \"no-self-compare\": require(\"./rules/no-self-compare\"),\n-    \"no-sequences\": require(\"./rules/no-sequences\"),\n-    \"no-shadow\": require(\"./rules/no-shadow\"),\n-    \"no-shadow-restricted-names\": require(\"./rules/no-shadow-restricted-names\"),\n-    \"no-spaced-func\": require(\"./rules/no-spaced-func\"),\n-    \"no-sparse-arrays\": require(\"./rules/no-sparse-arrays\"),\n-    \"no-sync\": require(\"./rules/no-sync\"),\n-    \"no-tabs\": require(\"./rules/no-tabs\"),\n-    \"no-template-curly-in-string\": require(\"./rules/no-template-curly-in-string\"),\n-    \"no-ternary\": require(\"./rules/no-ternary\"),\n-    \"no-this-before-super\": require(\"./rules/no-this-before-super\"),\n-    \"no-throw-literal\": require(\"./rules/no-throw-literal\"),\n-    \"no-trailing-spaces\": require(\"./rules/no-trailing-spaces\"),\n-    \"no-undef\": require(\"./rules/no-undef\"),\n-    \"no-undef-init\": require(\"./rules/no-undef-init\"),\n-    \"no-undefined\": require(\"./rules/no-undefined\"),\n-    \"no-underscore-dangle\": require(\"./rules/no-underscore-dangle\"),\n-    \"no-unexpected-multiline\": require(\"./rules/no-unexpected-multiline\"),\n-    \"no-unmodified-loop-condition\": require(\"./rules/no-unmodified-loop-condition\"),\n-    \"no-unneeded-ternary\": require(\"./rules/no-unneeded-ternary\"),\n-    \"no-unreachable\": require(\"./rules/no-unreachable\"),\n-    \"no-unsafe-finally\": require(\"./rules/no-unsafe-finally\"),\n-    \"no-unsafe-negation\": require(\"./rules/no-unsafe-negation\"),\n-    \"no-unused-expressions\": require(\"./rules/no-unused-expressions\"),\n-    \"no-unused-labels\": require(\"./rules/no-unused-labels\"),\n-    \"no-unused-vars\": require(\"./rules/no-unused-vars\"),\n-    \"no-use-before-define\": require(\"./rules/no-use-before-define\"),\n-    \"no-useless-call\": require(\"./rules/no-useless-call\"),\n-    \"no-useless-catch\": require(\"./rules/no-useless-catch\"),\n-    \"no-useless-computed-key\": require(\"./rules/no-useless-computed-key\"),\n-    \"no-useless-concat\": require(\"./rules/no-useless-concat\"),\n-    \"no-useless-constructor\": require(\"./rules/no-useless-constructor\"),\n-    \"no-useless-escape\": require(\"./rules/no-useless-escape\"),\n-    \"no-useless-rename\": require(\"./rules/no-useless-rename\"),\n-    \"no-useless-return\": require(\"./rules/no-useless-return\"),\n-    \"no-var\": require(\"./rules/no-var\"),\n-    \"no-void\": require(\"./rules/no-void\"),\n-    \"no-warning-comments\": require(\"./rules/no-warning-comments\"),\n-    \"no-whitespace-before-property\": require(\"./rules/no-whitespace-before-property\"),\n-    \"no-with\": require(\"./rules/no-with\"),\n-    \"nonblock-statement-body-position\": require(\"./rules/nonblock-statement-body-position\"),\n-    \"object-curly-newline\": require(\"./rules/object-curly-newline\"),\n-    \"object-curly-spacing\": require(\"./rules/object-curly-spacing\"),\n-    \"object-property-newline\": require(\"./rules/object-property-newline\"),\n-    \"object-shorthand\": require(\"./rules/object-shorthand\"),\n-    \"one-var\": require(\"./rules/one-var\"),\n-    \"one-var-declaration-per-line\": require(\"./rules/one-var-declaration-per-line\"),\n-    \"operator-assignment\": require(\"./rules/operator-assignment\"),\n-    \"operator-linebreak\": require(\"./rules/operator-linebreak\"),\n-    \"padded-blocks\": require(\"./rules/padded-blocks\"),\n-    \"padding-line-between-statements\": require(\"./rules/padding-line-between-statements\"),\n-    \"prefer-arrow-callback\": require(\"./rules/prefer-arrow-callback\"),\n-    \"prefer-const\": require(\"./rules/prefer-const\"),\n-    \"prefer-destructuring\": require(\"./rules/prefer-destructuring\"),\n-    \"prefer-named-capture-group\": require(\"./rules/prefer-named-capture-group\"),\n-    \"prefer-numeric-literals\": require(\"./rules/prefer-numeric-literals\"),\n-    \"prefer-object-spread\": require(\"./rules/prefer-object-spread\"),\n-    \"prefer-promise-reject-errors\": require(\"./rules/prefer-promise-reject-errors\"),\n-    \"prefer-reflect\": require(\"./rules/prefer-reflect\"),\n-    \"prefer-rest-params\": require(\"./rules/prefer-rest-params\"),\n-    \"prefer-spread\": require(\"./rules/prefer-spread\"),\n-    \"prefer-template\": require(\"./rules/prefer-template\"),\n-    \"quote-props\": require(\"./rules/quote-props\"),\n-    quotes: require(\"./rules/quotes\"),\n-    radix: require(\"./rules/radix\"),\n-    \"require-atomic-updates\": require(\"./rules/require-atomic-updates\"),\n-    \"require-await\": require(\"./rules/require-await\"),\n-    \"require-jsdoc\": require(\"./rules/require-jsdoc\"),\n-    \"require-unicode-regexp\": require(\"./rules/require-unicode-regexp\"),\n-    \"require-yield\": require(\"./rules/require-yield\"),\n-    \"rest-spread-spacing\": require(\"./rules/rest-spread-spacing\"),\n-    semi: require(\"./rules/semi\"),\n-    \"semi-spacing\": require(\"./rules/semi-spacing\"),\n-    \"semi-style\": require(\"./rules/semi-style\"),\n-    \"sort-imports\": require(\"./rules/sort-imports\"),\n-    \"sort-keys\": require(\"./rules/sort-keys\"),\n-    \"sort-vars\": require(\"./rules/sort-vars\"),\n-    \"space-before-blocks\": require(\"./rules/space-before-blocks\"),\n-    \"space-before-function-paren\": require(\"./rules/space-before-function-paren\"),\n-    \"space-in-parens\": require(\"./rules/space-in-parens\"),\n-    \"space-infix-ops\": require(\"./rules/space-infix-ops\"),\n-    \"space-unary-ops\": require(\"./rules/space-unary-ops\"),\n-    \"spaced-comment\": require(\"./rules/spaced-comment\"),\n-    strict: require(\"./rules/strict\"),\n-    \"switch-colon-spacing\": require(\"./rules/switch-colon-spacing\"),\n-    \"symbol-description\": require(\"./rules/symbol-description\"),\n-    \"template-curly-spacing\": require(\"./rules/template-curly-spacing\"),\n-    \"template-tag-spacing\": require(\"./rules/template-tag-spacing\"),\n-    \"unicode-bom\": require(\"./rules/unicode-bom\"),\n-    \"use-isnan\": require(\"./rules/use-isnan\"),\n-    \"valid-jsdoc\": require(\"./rules/valid-jsdoc\"),\n-    \"valid-typeof\": require(\"./rules/valid-typeof\"),\n-    \"vars-on-top\": require(\"./rules/vars-on-top\"),\n-    \"wrap-iife\": require(\"./rules/wrap-iife\"),\n-    \"wrap-regex\": require(\"./rules/wrap-regex\"),\n-    \"yield-star-spacing\": require(\"./rules/yield-star-spacing\"),\n-    yoda: require(\"./rules/yoda\")\n+const { LazyLoadingRuleMap } = require(\"./util/lazy-loading-rule-map\");\n+\n+/** @type {ReadonlyMap<string, import(\"./util/types\").Rule>} */\n+module.exports = new LazyLoadingRuleMap(Object.entries({\n+    \"accessor-pairs\": () => require(\"./rules/accessor-pairs\"),\n+    \"array-bracket-newline\": () => require(\"./rules/array-bracket-newline\"),\n+    \"array-bracket-spacing\": () => require(\"./rules/array-bracket-spacing\"),\n+    \"array-callback-return\": () => require(\"./rules/array-callback-return\"),\n+    \"array-element-newline\": () => require(\"./rules/array-element-newline\"),\n+    \"arrow-body-style\": () => require(\"./rules/arrow-body-style\"),\n+    \"arrow-parens\": () => require(\"./rules/arrow-parens\"),\n+    \"arrow-spacing\": () => require(\"./rules/arrow-spacing\"),\n+    \"block-scoped-var\": () => require(\"./rules/block-scoped-var\"),\n+    \"block-spacing\": () => require(\"./rules/block-spacing\"),\n+    \"brace-style\": () => require(\"./rules/brace-style\"),\n+    \"callback-return\": () => require(\"./rules/callback-return\"),\n+    camelcase: () => require(\"./rules/camelcase\"),\n+    \"capitalized-comments\": () => require(\"./rules/capitalized-comments\"),\n+    \"class-methods-use-this\": () => require(\"./rules/class-methods-use-this\"),\n+    \"comma-dangle\": () => require(\"./rules/comma-dangle\"),\n+    \"comma-spacing\": () => require(\"./rules/comma-spacing\"),\n+    \"comma-style\": () => require(\"./rules/comma-style\"),\n+    complexity: () => require(\"./rules/complexity\"),\n+    \"computed-property-spacing\": () => require(\"./rules/computed-property-spacing\"),\n+    \"consistent-return\": () => require(\"./rules/consistent-return\"),\n+    \"consistent-this\": () => require(\"./rules/consistent-this\"),\n+    \"constructor-super\": () => require(\"./rules/constructor-super\"),\n+    curly: () => require(\"./rules/curly\"),\n+    \"default-case\": () => require(\"./rules/default-case\"),\n+    \"dot-location\": () => require(\"./rules/dot-location\"),\n+    \"dot-notation\": () => require(\"./rules/dot-notation\"),\n+    \"eol-last\": () => require(\"./rules/eol-last\"),\n+    eqeqeq: () => require(\"./rules/eqeqeq\"),\n+    \"for-direction\": () => require(\"./rules/for-direction\"),\n+    \"func-call-spacing\": () => require(\"./rules/func-call-spacing\"),\n+    \"func-name-matching\": () => require(\"./rules/func-name-matching\"),\n+    \"func-names\": () => require(\"./rules/func-names\"),\n+    \"func-style\": () => require(\"./rules/func-style\"),\n+    \"function-paren-newline\": () => require(\"./rules/function-paren-newline\"),\n+    \"generator-star-spacing\": () => require(\"./rules/generator-star-spacing\"),\n+    \"getter-return\": () => require(\"./rules/getter-return\"),\n+    \"global-require\": () => require(\"./rules/global-require\"),\n+    \"guard-for-in\": () => require(\"./rules/guard-for-in\"),\n+    \"handle-callback-err\": () => require(\"./rules/handle-callback-err\"),\n+    \"id-blacklist\": () => require(\"./rules/id-blacklist\"),\n+    \"id-length\": () => require(\"./rules/id-length\"),\n+    \"id-match\": () => require(\"./rules/id-match\"),\n+    \"implicit-arrow-linebreak\": () => require(\"./rules/implicit-arrow-linebreak\"),\n+    indent: () => require(\"./rules/indent\"),\n+    \"indent-legacy\": () => require(\"./rules/indent-legacy\"),\n+    \"init-declarations\": () => require(\"./rules/init-declarations\"),\n+    \"jsx-quotes\": () => require(\"./rules/jsx-quotes\"),\n+    \"key-spacing\": () => require(\"./rules/key-spacing\"),\n+    \"keyword-spacing\": () => require(\"./rules/keyword-spacing\"),\n+    \"line-comment-position\": () => require(\"./rules/line-comment-position\"),\n+    \"linebreak-style\": () => require(\"./rules/linebreak-style\"),\n+    \"lines-around-comment\": () => require(\"./rules/lines-around-comment\"),\n+    \"lines-around-directive\": () => require(\"./rules/lines-around-directive\"),\n+    \"lines-between-class-members\": () => require(\"./rules/lines-between-class-members\"),\n+    \"max-classes-per-file\": () => require(\"./rules/max-classes-per-file\"),\n+    \"max-depth\": () => require(\"./rules/max-depth\"),\n+    \"max-len\": () => require(\"./rules/max-len\"),\n+    \"max-lines\": () => require(\"./rules/max-lines\"),\n+    \"max-lines-per-function\": () => require(\"./rules/max-lines-per-function\"),\n+    \"max-nested-callbacks\": () => require(\"./rules/max-nested-callbacks\"),\n+    \"max-params\": () => require(\"./rules/max-params\"),\n+    \"max-statements\": () => require(\"./rules/max-statements\"),\n+    \"max-statements-per-line\": () => require(\"./rules/max-statements-per-line\"),\n+    \"multiline-comment-style\": () => require(\"./rules/multiline-comment-style\"),\n+    \"multiline-ternary\": () => require(\"./rules/multiline-ternary\"),\n+    \"new-cap\": () => require(\"./rules/new-cap\"),\n+    \"new-parens\": () => require(\"./rules/new-parens\"),\n+    \"newline-after-var\": () => require(\"./rules/newline-after-var\"),\n+    \"newline-before-return\": () => require(\"./rules/newline-before-return\"),\n+    \"newline-per-chained-call\": () => require(\"./rules/newline-per-chained-call\"),\n+    \"no-alert\": () => require(\"./rules/no-alert\"),\n+    \"no-array-constructor\": () => require(\"./rules/no-array-constructor\"),\n+    \"no-async-promise-executor\": () => require(\"./rules/no-async-promise-executor\"),\n+    \"no-await-in-loop\": () => require(\"./rules/no-await-in-loop\"),\n+    \"no-bitwise\": () => require(\"./rules/no-bitwise\"),\n+    \"no-buffer-constructor\": () => require(\"./rules/no-buffer-constructor\"),\n+    \"no-caller\": () => require(\"./rules/no-caller\"),\n+    \"no-case-declarations\": () => require(\"./rules/no-case-declarations\"),\n+    \"no-catch-shadow\": () => require(\"./rules/no-catch-shadow\"),\n+    \"no-class-assign\": () => require(\"./rules/no-class-assign\"),\n+    \"no-compare-neg-zero\": () => require(\"./rules/no-compare-neg-zero\"),\n+    \"no-cond-assign\": () => require(\"./rules/no-cond-assign\"),\n+    \"no-confusing-arrow\": () => require(\"./rules/no-confusing-arrow\"),\n+    \"no-console\": () => require(\"./rules/no-console\"),\n+    \"no-const-assign\": () => require(\"./rules/no-const-assign\"),\n+    \"no-constant-condition\": () => require(\"./rules/no-constant-condition\"),\n+    \"no-continue\": () => require(\"./rules/no-continue\"),\n+    \"no-control-regex\": () => require(\"./rules/no-control-regex\"),\n+    \"no-debugger\": () => require(\"./rules/no-debugger\"),\n+    \"no-delete-var\": () => require(\"./rules/no-delete-var\"),\n+    \"no-div-regex\": () => require(\"./rules/no-div-regex\"),\n+    \"no-dupe-args\": () => require(\"./rules/no-dupe-args\"),\n+    \"no-dupe-class-members\": () => require(\"./rules/no-dupe-class-members\"),\n+    \"no-dupe-keys\": () => require(\"./rules/no-dupe-keys\"),\n+    \"no-duplicate-case\": () => require(\"./rules/no-duplicate-case\"),\n+    \"no-duplicate-imports\": () => require(\"./rules/no-duplicate-imports\"),\n+    \"no-else-return\": () => require(\"./rules/no-else-return\"),\n+    \"no-empty\": () => require(\"./rules/no-empty\"),\n+    \"no-empty-character-class\": () => require(\"./rules/no-empty-character-class\"),\n+    \"no-empty-function\": () => require(\"./rules/no-empty-function\"),\n+    \"no-empty-pattern\": () => require(\"./rules/no-empty-pattern\"),\n+    \"no-eq-null\": () => require(\"./rules/no-eq-null\"),\n+    \"no-eval\": () => require(\"./rules/no-eval\"),\n+    \"no-ex-assign\": () => require(\"./rules/no-ex-assign\"),\n+    \"no-extend-native\": () => require(\"./rules/no-extend-native\"),\n+    \"no-extra-bind\": () => require(\"./rules/no-extra-bind\"),\n+    \"no-extra-boolean-cast\": () => require(\"./rules/no-extra-boolean-cast\"),\n+    \"no-extra-label\": () => require(\"./rules/no-extra-label\"),\n+    \"no-extra-parens\": () => require(\"./rules/no-extra-parens\"),\n+    \"no-extra-semi\": () => require(\"./rules/no-extra-semi\"),\n+    \"no-fallthrough\": () => require(\"./rules/no-fallthrough\"),\n+    \"no-floating-decimal\": () => require(\"./rules/no-floating-decimal\"),\n+    \"no-func-assign\": () => require(\"./rules/no-func-assign\"),\n+    \"no-global-assign\": () => require(\"./rules/no-global-assign\"),\n+    \"no-implicit-coercion\": () => require(\"./rules/no-implicit-coercion\"),\n+    \"no-implicit-globals\": () => require(\"./rules/no-implicit-globals\"),\n+    \"no-implied-eval\": () => require(\"./rules/no-implied-eval\"),\n+    \"no-inline-comments\": () => require(\"./rules/no-inline-comments\"),\n+    \"no-inner-declarations\": () => require(\"./rules/no-inner-declarations\"),\n+    \"no-invalid-regexp\": () => require(\"./rules/no-invalid-regexp\"),\n+    \"no-invalid-this\": () => require(\"./rules/no-invalid-this\"),\n+    \"no-irregular-whitespace\": () => require(\"./rules/no-irregular-whitespace\"),\n+    \"no-iterator\": () => require(\"./rules/no-iterator\"),\n+    \"no-label-var\": () => require(\"./rules/no-label-var\"),\n+    \"no-labels\": () => require(\"./rules/no-labels\"),\n+    \"no-lone-blocks\": () => require(\"./rules/no-lone-blocks\"),\n+    \"no-lonely-if\": () => require(\"./rules/no-lonely-if\"),\n+    \"no-loop-func\": () => require(\"./rules/no-loop-func\"),\n+    \"no-magic-numbers\": () => require(\"./rules/no-magic-numbers\"),\n+    \"no-misleading-character-class\": () => require(\"./rules/no-misleading-character-class\"),\n+    \"no-mixed-operators\": () => require(\"./rules/no-mixed-operators\"),\n+    \"no-mixed-requires\": () => require(\"./rules/no-mixed-requires\"),\n+    \"no-mixed-spaces-and-tabs\": () => require(\"./rules/no-mixed-spaces-and-tabs\"),\n+    \"no-multi-assign\": () => require(\"./rules/no-multi-assign\"),\n+    \"no-multi-spaces\": () => require(\"./rules/no-multi-spaces\"),\n+    \"no-multi-str\": () => require(\"./rules/no-multi-str\"),\n+    \"no-multiple-empty-lines\": () => require(\"./rules/no-multiple-empty-lines\"),\n+    \"no-native-reassign\": () => require(\"./rules/no-native-reassign\"),\n+    \"no-negated-condition\": () => require(\"./rules/no-negated-condition\"),\n+    \"no-negated-in-lhs\": () => require(\"./rules/no-negated-in-lhs\"),\n+    \"no-nested-ternary\": () => require(\"./rules/no-nested-ternary\"),\n+    \"no-new\": () => require(\"./rules/no-new\"),\n+    \"no-new-func\": () => require(\"./rules/no-new-func\"),\n+    \"no-new-object\": () => require(\"./rules/no-new-object\"),\n+    \"no-new-require\": () => require(\"./rules/no-new-require\"),\n+    \"no-new-symbol\": () => require(\"./rules/no-new-symbol\"),\n+    \"no-new-wrappers\": () => require(\"./rules/no-new-wrappers\"),\n+    \"no-obj-calls\": () => require(\"./rules/no-obj-calls\"),\n+    \"no-octal\": () => require(\"./rules/no-octal\"),\n+    \"no-octal-escape\": () => require(\"./rules/no-octal-escape\"),\n+    \"no-param-reassign\": () => require(\"./rules/no-param-reassign\"),\n+    \"no-path-concat\": () => require(\"./rules/no-path-concat\"),\n+    \"no-plusplus\": () => require(\"./rules/no-plusplus\"),\n+    \"no-process-env\": () => require(\"./rules/no-process-env\"),\n+    \"no-process-exit\": () => require(\"./rules/no-process-exit\"),\n+    \"no-proto\": () => require(\"./rules/no-proto\"),\n+    \"no-prototype-builtins\": () => require(\"./rules/no-prototype-builtins\"),\n+    \"no-redeclare\": () => require(\"./rules/no-redeclare\"),\n+    \"no-regex-spaces\": () => require(\"./rules/no-regex-spaces\"),\n+    \"no-restricted-globals\": () => require(\"./rules/no-restricted-globals\"),\n+    \"no-restricted-imports\": () => require(\"./rules/no-restricted-imports\"),\n+    \"no-restricted-modules\": () => require(\"./rules/no-restricted-modules\"),\n+    \"no-restricted-properties\": () => require(\"./rules/no-restricted-properties\"),\n+    \"no-restricted-syntax\": () => require(\"./rules/no-restricted-syntax\"),\n+    \"no-return-assign\": () => require(\"./rules/no-return-assign\"),\n+    \"no-return-await\": () => require(\"./rules/no-return-await\"),\n+    \"no-script-url\": () => require(\"./rules/no-script-url\"),\n+    \"no-self-assign\": () => require(\"./rules/no-self-assign\"),\n+    \"no-self-compare\": () => require(\"./rules/no-self-compare\"),\n+    \"no-sequences\": () => require(\"./rules/no-sequences\"),\n+    \"no-shadow\": () => require(\"./rules/no-shadow\"),\n+    \"no-shadow-restricted-names\": () => require(\"./rules/no-shadow-restricted-names\"),\n+    \"no-spaced-func\": () => require(\"./rules/no-spaced-func\"),\n+    \"no-sparse-arrays\": () => require(\"./rules/no-sparse-arrays\"),\n+    \"no-sync\": () => require(\"./rules/no-sync\"),\n+    \"no-tabs\": () => require(\"./rules/no-tabs\"),\n+    \"no-template-curly-in-string\": () => require(\"./rules/no-template-curly-in-string\"),\n+    \"no-ternary\": () => require(\"./rules/no-ternary\"),\n+    \"no-this-before-super\": () => require(\"./rules/no-this-before-super\"),\n+    \"no-throw-literal\": () => require(\"./rules/no-throw-literal\"),\n+    \"no-trailing-spaces\": () => require(\"./rules/no-trailing-spaces\"),\n+    \"no-undef\": () => require(\"./rules/no-undef\"),\n+    \"no-undef-init\": () => require(\"./rules/no-undef-init\"),\n+    \"no-undefined\": () => require(\"./rules/no-undefined\"),\n+    \"no-underscore-dangle\": () => require(\"./rules/no-underscore-dangle\"),\n+    \"no-unexpected-multiline\": () => require(\"./rules/no-unexpected-multiline\"),\n+    \"no-unmodified-loop-condition\": () => require(\"./rules/no-unmodified-loop-condition\"),\n+    \"no-unneeded-ternary\": () => require(\"./rules/no-unneeded-ternary\"),\n+    \"no-unreachable\": () => require(\"./rules/no-unreachable\"),\n+    \"no-unsafe-finally\": () => require(\"./rules/no-unsafe-finally\"),\n+    \"no-unsafe-negation\": () => require(\"./rules/no-unsafe-negation\"),\n+    \"no-unused-expressions\": () => require(\"./rules/no-unused-expressions\"),\n+    \"no-unused-labels\": () => require(\"./rules/no-unused-labels\"),\n+    \"no-unused-vars\": () => require(\"./rules/no-unused-vars\"),\n+    \"no-use-before-define\": () => require(\"./rules/no-use-before-define\"),\n+    \"no-useless-call\": () => require(\"./rules/no-useless-call\"),\n+    \"no-useless-catch\": () => require(\"./rules/no-useless-catch\"),\n+    \"no-useless-computed-key\": () => require(\"./rules/no-useless-computed-key\"),\n+    \"no-useless-concat\": () => require(\"./rules/no-useless-concat\"),\n+    \"no-useless-constructor\": () => require(\"./rules/no-useless-constructor\"),\n+    \"no-useless-escape\": () => require(\"./rules/no-useless-escape\"),\n+    \"no-useless-rename\": () => require(\"./rules/no-useless-rename\"),\n+    \"no-useless-return\": () => require(\"./rules/no-useless-return\"),\n+    \"no-var\": () => require(\"./rules/no-var\"),\n+    \"no-void\": () => require(\"./rules/no-void\"),\n+    \"no-warning-comments\": () => require(\"./rules/no-warning-comments\"),\n+    \"no-whitespace-before-property\": () => require(\"./rules/no-whitespace-before-property\"),\n+    \"no-with\": () => require(\"./rules/no-with\"),\n+    \"nonblock-statement-body-position\": () => require(\"./rules/nonblock-statement-body-position\"),\n+    \"object-curly-newline\": () => require(\"./rules/object-curly-newline\"),\n+    \"object-curly-spacing\": () => require(\"./rules/object-curly-spacing\"),\n+    \"object-property-newline\": () => require(\"./rules/object-property-newline\"),\n+    \"object-shorthand\": () => require(\"./rules/object-shorthand\"),\n+    \"one-var\": () => require(\"./rules/one-var\"),\n+    \"one-var-declaration-per-line\": () => require(\"./rules/one-var-declaration-per-line\"),\n+    \"operator-assignment\": () => require(\"./rules/operator-assignment\"),\n+    \"operator-linebreak\": () => require(\"./rules/operator-linebreak\"),\n+    \"padded-blocks\": () => require(\"./rules/padded-blocks\"),\n+    \"padding-line-between-statements\": () => require(\"./rules/padding-line-between-statements\"),\n+    \"prefer-arrow-callback\": () => require(\"./rules/prefer-arrow-callback\"),\n+    \"prefer-const\": () => require(\"./rules/prefer-const\"),\n+    \"prefer-destructuring\": () => require(\"./rules/prefer-destructuring\"),\n+    \"prefer-named-capture-group\": () => require(\"./rules/prefer-named-capture-group\"),\n+    \"prefer-numeric-literals\": () => require(\"./rules/prefer-numeric-literals\"),\n+    \"prefer-object-spread\": () => require(\"./rules/prefer-object-spread\"),\n+    \"prefer-promise-reject-errors\": () => require(\"./rules/prefer-promise-reject-errors\"),\n+    \"prefer-reflect\": () => require(\"./rules/prefer-reflect\"),\n+    \"prefer-rest-params\": () => require(\"./rules/prefer-rest-params\"),\n+    \"prefer-spread\": () => require(\"./rules/prefer-spread\"),\n+    \"prefer-template\": () => require(\"./rules/prefer-template\"),\n+    \"quote-props\": () => require(\"./rules/quote-props\"),\n+    quotes: () => require(\"./rules/quotes\"),\n+    radix: () => require(\"./rules/radix\"),\n+    \"require-atomic-updates\": () => require(\"./rules/require-atomic-updates\"),\n+    \"require-await\": () => require(\"./rules/require-await\"),\n+    \"require-jsdoc\": () => require(\"./rules/require-jsdoc\"),\n+    \"require-unicode-regexp\": () => require(\"./rules/require-unicode-regexp\"),\n+    \"require-yield\": () => require(\"./rules/require-yield\"),\n+    \"rest-spread-spacing\": () => require(\"./rules/rest-spread-spacing\"),\n+    semi: () => require(\"./rules/semi\"),\n+    \"semi-spacing\": () => require(\"./rules/semi-spacing\"),\n+    \"semi-style\": () => require(\"./rules/semi-style\"),\n+    \"sort-imports\": () => require(\"./rules/sort-imports\"),\n+    \"sort-keys\": () => require(\"./rules/sort-keys\"),\n+    \"sort-vars\": () => require(\"./rules/sort-vars\"),\n+    \"space-before-blocks\": () => require(\"./rules/space-before-blocks\"),\n+    \"space-before-function-paren\": () => require(\"./rules/space-before-function-paren\"),\n+    \"space-in-parens\": () => require(\"./rules/space-in-parens\"),\n+    \"space-infix-ops\": () => require(\"./rules/space-infix-ops\"),\n+    \"space-unary-ops\": () => require(\"./rules/space-unary-ops\"),\n+    \"spaced-comment\": () => require(\"./rules/spaced-comment\"),\n+    strict: () => require(\"./rules/strict\"),\n+    \"switch-colon-spacing\": () => require(\"./rules/switch-colon-spacing\"),\n+    \"symbol-description\": () => require(\"./rules/symbol-description\"),\n+    \"template-curly-spacing\": () => require(\"./rules/template-curly-spacing\"),\n+    \"template-tag-spacing\": () => require(\"./rules/template-tag-spacing\"),\n+    \"unicode-bom\": () => require(\"./rules/unicode-bom\"),\n+    \"use-isnan\": () => require(\"./rules/use-isnan\"),\n+    \"valid-jsdoc\": () => require(\"./rules/valid-jsdoc\"),\n+    \"valid-typeof\": () => require(\"./rules/valid-typeof\"),\n+    \"vars-on-top\": () => require(\"./rules/vars-on-top\"),\n+    \"wrap-iife\": () => require(\"./rules/wrap-iife\"),\n+    \"wrap-regex\": () => require(\"./rules/wrap-regex\"),\n+    \"yield-star-spacing\": () => require(\"./rules/yield-star-spacing\"),\n+    yoda: () => require(\"./rules/yoda\")\n }));"},{"sha":"2b050e1c61081aebc4f20a96d7db745667408ced","filename":"lib/cli.js","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/eslint/eslint/blob/f642e074aef546acdfd877885f437007bc8a91c5/lib%2Fcli.js","raw_url":"https://github.com/eslint/eslint/raw/f642e074aef546acdfd877885f437007bc8a91c5/lib%2Fcli.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fcli.js?ref=f642e074aef546acdfd877885f437007bc8a91c5","patch":"@@ -81,24 +81,27 @@ function translateOptions(cliOptions) {\n  */\n function printResults(engine, results, format, outputFile) {\n     let formatter;\n-    let rules;\n+    let rulesMeta;\n \n     try {\n         formatter = engine.getFormatter(format);\n-        rules = engine.getRules();\n     } catch (e) {\n         log.error(e.message);\n         return false;\n     }\n \n-    const rulesMeta = {};\n-\n-    rules.forEach((rule, ruleId) => {\n-        rulesMeta[ruleId] = rule.meta;\n+    const output = formatter(results, {\n+        get rulesMeta() {\n+            if (!rulesMeta) {\n+                rulesMeta = {};\n+                for (const [ruleId, rule] of engine.getRules()) {\n+                    rulesMeta[ruleId] = rule.meta;\n+                }\n+            }\n+            return rulesMeta;\n+        }\n     });\n \n-    const output = formatter(results, { rulesMeta });\n-\n     if (output) {\n         if (outputFile) {\n             const filePath = path.resolve(process.cwd(), outputFile);"},{"sha":"79b7cf6e0c3f7434288d07dedc334ad27febb02b","filename":"lib/testers/rule-tester.js","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/f642e074aef546acdfd877885f437007bc8a91c5/lib%2Ftesters%2Frule-tester.js","raw_url":"https://github.com/eslint/eslint/raw/f642e074aef546acdfd877885f437007bc8a91c5/lib%2Ftesters%2Frule-tester.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ftesters%2Frule-tester.js?ref=f642e074aef546acdfd877885f437007bc8a91c5","patch":"@@ -307,8 +307,6 @@ class RuleTester {\n \n         linter.defineRules(this.rules);\n \n-        const ruleMap = linter.getRules();\n-\n         /**\n          * Run the rule for the given item\n          * @param {string|Object} item Item to run the rule against\n@@ -398,7 +396,7 @@ class RuleTester {\n                 }\n             }\n \n-            validate(config, \"rule-tester\", ruleMap.get.bind(ruleMap));\n+            validate(config, \"rule-tester\", id => (id === ruleName ? rule : null));\n \n             return {\n                 messages: linter.verify(code, config, filename, true),"},{"sha":"e0caddb9b2821c93fea66aa34466cfc11ce73e95","filename":"lib/util/lazy-loading-rule-map.js","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/eslint/eslint/blob/f642e074aef546acdfd877885f437007bc8a91c5/lib%2Futil%2Flazy-loading-rule-map.js","raw_url":"https://github.com/eslint/eslint/raw/f642e074aef546acdfd877885f437007bc8a91c5/lib%2Futil%2Flazy-loading-rule-map.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Futil%2Flazy-loading-rule-map.js?ref=f642e074aef546acdfd877885f437007bc8a91c5","patch":"@@ -0,0 +1,116 @@\n+/**\n+ * @fileoverview `Map` to load rules lazily.\n+ * @author Toru Nagashima <https://github.com/mysticatea>\n+ */\n+\"use strict\";\n+\n+const debug = require(\"debug\")(\"eslint:rules\");\n+\n+/** @typedef {import(\"./types\").Rule} Rule */\n+\n+/**\n+ * The `Map` object that loads each rule when it's accessed.\n+ *\n+ * @example\n+ * const rules = new LazyLoadingRuleMap([\n+ *     [\"eqeqeq\", () => require(\"eqeqeq\")],\n+ *     [\"semi\", () => require(\"semi\")],\n+ *     [\"no-unused-vars\", () => require(\"no-unused-vars\")],\n+ * ])\n+ *\n+ * rules.get(\"semi\") // call `() => require(\"semi\")` here.\n+ *\n+ * @extends {Map<string, () => Rule>}\n+ */\n+class LazyLoadingRuleMap extends Map {\n+\n+    /**\n+     * Initialize this map.\n+     * @param {Array<[string, function(): Rule]>} loaders The rule loaders.\n+     */\n+    constructor(loaders) {\n+        let remaining = loaders.length;\n+\n+        super(\n+            debug.enabled\n+                ? loaders.map(([ruleId, load]) => {\n+                    let cache = null;\n+\n+                    return [\n+                        ruleId,\n+                        () => {\n+                            if (!cache) {\n+                                debug(\"Loading rule %o (remaining=%d)\", ruleId, --remaining);\n+                                cache = load();\n+                            }\n+                            return cache;\n+                        }\n+                    ];\n+                })\n+                : loaders\n+        );\n+\n+        // `super(...iterable)` uses `this.set()`, so disable it here.\n+        Object.defineProperty(LazyLoadingRuleMap.prototype, \"set\", {\n+            configurable: true,\n+            value: void 0\n+        });\n+    }\n+\n+    /**\n+     * Get a rule.\n+     * Each rule will be loaded on the first access.\n+     * @param {string} ruleId The rule ID to get.\n+     * @returns {Rule|undefined} The rule.\n+     */\n+    get(ruleId) {\n+        const load = super.get(ruleId);\n+\n+        return load && load();\n+    }\n+\n+    /**\n+     * Iterate rules.\n+     * @returns {IterableIterator<Rule>} Rules.\n+     */\n+    *values() {\n+        for (const load of super.values()) {\n+            yield load();\n+        }\n+    }\n+\n+    /**\n+     * Iterate rules.\n+     * @returns {IterableIterator<[string, Rule]>} Rules.\n+     */\n+    *entries() {\n+        for (const [ruleId, load] of super.entries()) {\n+            yield [ruleId, load()];\n+        }\n+    }\n+\n+    /**\n+     * Call a function with each rule.\n+     * @param {Function} callbackFn The callback function.\n+     * @param {any} [thisArg] The object to pass to `this` of the callback function.\n+     * @returns {void}\n+     */\n+    forEach(callbackFn, thisArg) {\n+        for (const [ruleId, load] of super.entries()) {\n+            callbackFn.call(thisArg, load(), ruleId, this);\n+        }\n+    }\n+}\n+\n+// Forbid mutation.\n+Object.defineProperties(LazyLoadingRuleMap.prototype, {\n+    clear: { configurable: true, value: void 0 },\n+    delete: { configurable: true, value: void 0 },\n+    [Symbol.iterator]: {\n+        configurable: true,\n+        writable: true,\n+        value: LazyLoadingRuleMap.prototype.entries\n+    }\n+});\n+\n+module.exports = { LazyLoadingRuleMap };"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/11685","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/11685/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/11685/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/11685/events","html_url":"https://github.com/eslint/eslint/pull/11685","id":441630462,"node_id":"MDExOlB1bGxSZXF1ZXN0Mjc2OTE1MDg0","number":11685,"title":"Fix: Unignoring directories in .eslintignore (fixes #11684)","user":{"login":"belochub","id":3501391,"node_id":"MDQ6VXNlcjM1MDEzOTE=","avatar_url":"https://avatars.githubusercontent.com/u/3501391?v=4","gravatar_id":"","url":"https://api.github.com/users/belochub","html_url":"https://github.com/belochub","followers_url":"https://api.github.com/users/belochub/followers","following_url":"https://api.github.com/users/belochub/following{/other_user}","gists_url":"https://api.github.com/users/belochub/gists{/gist_id}","starred_url":"https://api.github.com/users/belochub/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/belochub/subscriptions","organizations_url":"https://api.github.com/users/belochub/orgs","repos_url":"https://api.github.com/users/belochub/repos","events_url":"https://api.github.com/users/belochub/events{/privacy}","received_events_url":"https://api.github.com/users/belochub/received_events","type":"User","site_admin":false},"labels":[{"id":45711350,"node_id":"MDU6TGFiZWw0NTcxMTM1MA==","url":"https://api.github.com/repos/eslint/eslint/labels/bug","name":"bug","color":"fc2929","default":true,"description":"ESLint is working incorrectly"},{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-05-08T09:10:03Z","updated_at":"2019-11-15T22:43:42Z","closed_at":"2019-05-18T07:49:53Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/11685","html_url":"https://github.com/eslint/eslint/pull/11685","diff_url":"https://github.com/eslint/eslint/pull/11685.diff","patch_url":"https://github.com/eslint/eslint/pull/11685.patch","merged_at":"2019-05-18T07:49:53Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[ ] Documentation update\r\n[x] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[ ] Other, please explain:\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\nhttps://github.com/eslint/eslint/issues/11684\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nAs far as I understand the issue, the filtering of files/directories during globbing must pass absolute paths to the filtering function with the trailing slash present for directories to distinguish them from files, and the relative path extracted from the absolute path in this function must preserve the trailing slash as well since the relative path is passed to `ignore` package afterward, and it can not \"unignore\" directories that are \"marked\" as files (have no trailing slash).\r\n\r\n~~First of all, I've noticed that the `_mark()`ing in the overridden `GlobSync.prototype._readdir()` method didn't add the trailing slash to the path, IIUC due to the fact that it only uses cache to check if the path points to a directory and this cache is not created until the first call to the parent's `_readdir()` method, thus I've changed the order in which these methods are called.~~\r\n\r\n~~Secondly, I've changed the `getRelativePath()` function's behavior to preserve the trailing slash.~~\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\n~~The change to the `getRelativePath()` function is also related to the `IgnoredPaths.prototype.getIgnoredFoldersGlobChecker()` method's behavior and changes it implicitly.~~\r\n\r\n~~Also, even though paths are cached inside the `glob.GlobSync` instance, I am not sure if this does not significantly degrade the performance of globbing, I would like to get some help with the benchmarking of this change.~~\r\n\r\nEDIT: Some parts of the description above are no longer relevant after https://github.com/eslint/eslint/pull/11546 has landed.","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/11685/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/11685/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"2cb0fc6ea457b8cb7d91b0998c15bf02a7bd24b2","filename":"lib/cli-engine/file-enumerator.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/8f2911037dba41e1faedd99ac7d583f2fac0cc49/lib%2Fcli-engine%2Ffile-enumerator.js","raw_url":"https://github.com/eslint/eslint/raw/8f2911037dba41e1faedd99ac7d583f2fac0cc49/lib%2Fcli-engine%2Ffile-enumerator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fcli-engine%2Ffile-enumerator.js?ref=8f2911037dba41e1faedd99ac7d583f2fac0cc49","patch":"@@ -380,7 +380,7 @@ class FileEnumerator {\n      * @private\n      */\n     *_iterateFilesRecursive(directoryPath, options) {\n-        if (this._isIgnoredFile(directoryPath, options)) {\n+        if (this._isIgnoredFile(directoryPath + path.sep, options)) {\n             return;\n         }\n         debug(`Enter the directory: ${directoryPath}`);"},{"sha":"137d156e9c05af9d286a491005b8a6fded645aed","filename":"lib/util/ignored-paths.js","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/eslint/eslint/blob/8f2911037dba41e1faedd99ac7d583f2fac0cc49/lib%2Futil%2Fignored-paths.js","raw_url":"https://github.com/eslint/eslint/raw/8f2911037dba41e1faedd99ac7d583f2fac0cc49/lib%2Futil%2Fignored-paths.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Futil%2Fignored-paths.js?ref=8f2911037dba41e1faedd99ac7d583f2fac0cc49","patch":"@@ -328,12 +328,17 @@ class IgnoredPaths {\n      * @returns {boolean} true if the file path matches one or more patterns, false otherwise\n      */\n     contains(filepath, category) {\n+        const isDir = filepath.endsWith(path.sep) ||\n+            (path.sep === \"\\\\\" && filepath.endsWith(\"/\"));\n         let result = false;\n         const basePath = this.getBaseDir();\n         const absolutePath = path.resolve(this.options.cwd, filepath);\n-        const relativePath = path.relative(basePath, absolutePath);\n+        let relativePath = path.relative(basePath, absolutePath);\n \n         if (relativePath) {\n+            if (isDir) {\n+                relativePath += path.sep;\n+            }\n             if (typeof category === \"undefined\") {\n                 result =\n                     (this.ig.default.filter([relativePath]).length === 0) ||"},{"sha":"d1c26dcc88cce5ae147584df394bef0f65bfd292","filename":"tests/fixtures/glob-util/unignored/.eslintignore","status":"added","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/eslint/eslint/blob/8f2911037dba41e1faedd99ac7d583f2fac0cc49/tests%2Ffixtures%2Fglob-util%2Funignored%2F.eslintignore","raw_url":"https://github.com/eslint/eslint/raw/8f2911037dba41e1faedd99ac7d583f2fac0cc49/tests%2Ffixtures%2Fglob-util%2Funignored%2F.eslintignore","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Ffixtures%2Fglob-util%2Funignored%2F.eslintignore?ref=8f2911037dba41e1faedd99ac7d583f2fac0cc49","patch":"@@ -0,0 +1,3 @@\n+*\n+!/dir/\n+!*.js"},{"sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","filename":"tests/fixtures/glob-util/unignored/dir/foo.js","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/eslint/eslint/blob/8f2911037dba41e1faedd99ac7d583f2fac0cc49/tests%2Ffixtures%2Fglob-util%2Funignored%2Fdir%2Ffoo.js","raw_url":"https://github.com/eslint/eslint/raw/8f2911037dba41e1faedd99ac7d583f2fac0cc49/tests%2Ffixtures%2Fglob-util%2Funignored%2Fdir%2Ffoo.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Ffixtures%2Fglob-util%2Funignored%2Fdir%2Ffoo.js?ref=8f2911037dba41e1faedd99ac7d583f2fac0cc49"},{"sha":"23a21c0b7446910108a62d29f1a20f8e389d099b","filename":"tests/lib/cli-engine/file-enumerator.js","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/eslint/eslint/blob/8f2911037dba41e1faedd99ac7d583f2fac0cc49/tests%2Flib%2Fcli-engine%2Ffile-enumerator.js","raw_url":"https://github.com/eslint/eslint/raw/8f2911037dba41e1faedd99ac7d583f2fac0cc49/tests%2Flib%2Fcli-engine%2Ffile-enumerator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fcli-engine%2Ffile-enumerator.js?ref=8f2911037dba41e1faedd99ac7d583f2fac0cc49","patch":"@@ -448,6 +448,30 @@ describe(\"FileEnumerator\", () => {\n \n                     assert.includeDeepMembers(result, [{ filename: unignoredFilename, ignored: false }]);\n                 });\n+\n+                it(\"should return unignored files from folders unignored in .eslintignore\", () => {\n+                    const options = { cwd: getFixturePath(\"glob-util\", \"unignored\"), ignore: true };\n+                    const glob = getFixturePath(\"glob-util\", \"unignored\", \"**/*.js\");\n+                    const patterns = [glob];\n+                    const result = listFiles(patterns, options);\n+\n+                    const filename = getFixturePath(\"glob-util\", \"unignored\", \"dir\", \"foo.js\");\n+\n+                    assert.strictEqual(result.length, 1);\n+                    assert.deepStrictEqual(result, [{ filename, ignored: false }]);\n+                });\n+\n+                it(\"should return unignored files from folders unignored in .eslintignore for explicitly specified folder\", () => {\n+                    const options = { cwd: getFixturePath(\"glob-util\", \"unignored\"), ignore: true };\n+                    const dir = getFixturePath(\"glob-util\", \"unignored\", \"dir\");\n+                    const patterns = [dir];\n+                    const result = listFiles(patterns, options);\n+\n+                    const filename = getFixturePath(\"glob-util\", \"unignored\", \"dir\", \"foo.js\");\n+\n+                    assert.strictEqual(result.length, 1);\n+                    assert.deepStrictEqual(result, [{ filename, ignored: false }]);\n+                });\n             });\n         });\n     });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/10617","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/10617/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/10617/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/10617/events","html_url":"https://github.com/eslint/eslint/pull/10617","id":342187987,"node_id":"MDExOlB1bGxSZXF1ZXN0MjAyMTQ2NDI3","number":10617,"title":"Chore: fix redundant equality check","user":{"login":"mysticatea","id":1937871,"node_id":"MDQ6VXNlcjE5Mzc4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1937871?v=4","gravatar_id":"","url":"https://api.github.com/users/mysticatea","html_url":"https://github.com/mysticatea","followers_url":"https://api.github.com/users/mysticatea/followers","following_url":"https://api.github.com/users/mysticatea/following{/other_user}","gists_url":"https://api.github.com/users/mysticatea/gists{/gist_id}","starred_url":"https://api.github.com/users/mysticatea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mysticatea/subscriptions","organizations_url":"https://api.github.com/users/mysticatea/orgs","repos_url":"https://api.github.com/users/mysticatea/repos","events_url":"https://api.github.com/users/mysticatea/events{/privacy}","received_events_url":"https://api.github.com/users/mysticatea/received_events","type":"User","site_admin":false},"labels":[{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-07-18T06:03:12Z","updated_at":"2019-01-15T18:53:10Z","closed_at":"2018-07-18T12:58:46Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/10617","html_url":"https://github.com/eslint/eslint/pull/10617","diff_url":"https://github.com/eslint/eslint/pull/10617.diff","patch_url":"https://github.com/eslint/eslint/pull/10617.patch","merged_at":"2018-07-18T12:58:46Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[X] Other, please explain: improve performance.\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis PR removes a redundant equality check which was found in #10612.\r\n\r\n```js\r\n!util.isDeepStrictEqual(beforeAST, afterAST) || !lodash.isEqual(beforeAST, afterAST)\r\n```\r\n\r\nfixed to:\r\n\r\n```js\r\n!lodash.isEqual(beforeAST, afterAST)\r\n```\r\n\r\nAs the result, `mocha --reporter progress tests/lib/rules/*.js` in our codebase gets 15% faster.\r\n`lodash.isEqual` looks faster than `util.isDeepStrictEqual`.\r\nSee details: https://gist.github.com/mysticatea/1045687663c17f2a9f1488e92d9b3038\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nNothing in particular.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/10617/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/10617/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"a02f0b9bea209c59284a27cd8ee076dede23150a","filename":"lib/testers/rule-tester.js","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/a5ab0c204ee3c392337a81998471435950a50320/lib%2Ftesters%2Frule-tester.js","raw_url":"https://github.com/eslint/eslint/raw/a5ab0c204ee3c392337a81998471435950a50320/lib%2Ftesters%2Frule-tester.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ftesters%2Frule-tester.js?ref=a5ab0c204ee3c392337a81998471435950a50320","patch":"@@ -396,9 +396,7 @@ class RuleTester {\n          * @private\n          */\n         function assertASTDidntChange(beforeAST, afterAST) {\n-\n-            // Feature detect the Node.js implementation and use that if available.\n-            if ((util.isDeepStrictEqual && !util.isDeepStrictEqual(beforeAST, afterAST)) || !lodash.isEqual(beforeAST, afterAST)) {\n+            if (!lodash.isEqual(beforeAST, afterAST)) {\n                 assert.fail(null, null, \"Rule should not modify AST.\");\n             }\n         }"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/9752","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/9752/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/9752/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/9752/events","html_url":"https://github.com/eslint/eslint/pull/9752","id":284062730,"node_id":"MDExOlB1bGxSZXF1ZXN0MTU5NzkzNTk3","number":9752,"title":"Update: add `ignoreComments` option to `indent` rule (fixes #9018)","user":{"login":"platinumazure","id":284282,"node_id":"MDQ6VXNlcjI4NDI4Mg==","avatar_url":"https://avatars.githubusercontent.com/u/284282?v=4","gravatar_id":"","url":"https://api.github.com/users/platinumazure","html_url":"https://github.com/platinumazure","followers_url":"https://api.github.com/users/platinumazure/followers","following_url":"https://api.github.com/users/platinumazure/following{/other_user}","gists_url":"https://api.github.com/users/platinumazure/gists{/gist_id}","starred_url":"https://api.github.com/users/platinumazure/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/platinumazure/subscriptions","organizations_url":"https://api.github.com/users/platinumazure/orgs","repos_url":"https://api.github.com/users/platinumazure/repos","events_url":"https://api.github.com/users/platinumazure/events{/privacy}","received_events_url":"https://api.github.com/users/platinumazure/received_events","type":"User","site_admin":false},"labels":[{"id":45711352,"node_id":"MDU6TGFiZWw0NTcxMTM1Mg==","url":"https://api.github.com/repos/eslint/eslint/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":"This change enhances an existing feature of ESLint"},{"id":45798639,"node_id":"MDU6TGFiZWw0NTc5ODYzOQ==","url":"https://api.github.com/repos/eslint/eslint/labels/rule","name":"rule","color":"fbca04","default":false,"description":"Relates to ESLint's core rules"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":517845966,"node_id":"MDU6TGFiZWw1MTc4NDU5NjY=","url":"https://api.github.com/repos/eslint/eslint/labels/indent","name":"indent","color":"080016","default":false,"description":"Relates to the `indent` rule"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-12-22T03:20:50Z","updated_at":"2018-06-27T20:05:03Z","closed_at":"2017-12-28T20:58:25Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/9752","html_url":"https://github.com/eslint/eslint/pull/9752","diff_url":"https://github.com/eslint/eslint/pull/9752.diff","patch_url":"https://github.com/eslint/eslint/pull/9752.patch","merged_at":"2017-12-28T20:58:25Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[x] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[ ] Other, please explain:\r\n\r\nSee #9018.\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nAdded `ignoreComments` option (default: false) to indent rule.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nThis seemed, um, simpler than I thought. Is there a more idiomatic way I should have done this? Any advice on how to test performance and make sure it's acceptable?","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/9752/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/9752/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"37dcabbd3e47cc4ad7c6906e9d26786b03b624fe","filename":"docs/rules/indent.md","status":"modified","additions":18,"deletions":1,"changes":19,"blob_url":"https://github.com/eslint/eslint/blob/5d976738308013c174299f1a09df9b17d9a15c18/docs%2Frules%2Findent.md","raw_url":"https://github.com/eslint/eslint/raw/5d976738308013c174299f1a09df9b17d9a15c18/docs%2Frules%2Findent.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2Findent.md?ref=5d976738308013c174299f1a09df9b17d9a15c18","patch":"@@ -84,7 +84,8 @@ This rule has an object option:\n * `\"ObjectExpression\"` (default: 1) enforces indentation level for properties in objects. It can be set to the string `\"first\"`, indicating that all properties in the object should be aligned with the first property. This can also be set to `\"off\"` to disable checking for object properties.\n * `\"ImportDeclaration\"` (default: 1) enforces indentation level for import statements. It can be set to the string `\"first\"`, indicating that all imported members from a module should be aligned with the first member in the list. This can also be set to `\"off\"` to disable checking for imported module members.\n * `\"flatTernaryExpressions\": true` (`false` by default) requires no indentation for ternary expressions which are nested in other ternary expressions.\n-* `ignoredNodes` accepts an array of [selectors](/docs/developer-guide/selectors.md). If an AST node is matched by any of the selectors, the indentation of tokens which are direct children of that node will be ignored. This can be used as an escape hatch to relax the rule if you disagree with the indentation that it enforces for a particular syntactic pattern.\n+* `\"ignoredNodes\"` accepts an array of [selectors](/docs/developer-guide/selectors.md). If an AST node is matched by any of the selectors, the indentation of tokens which are direct children of that node will be ignored. This can be used as an escape hatch to relax the rule if you disagree with the indentation that it enforces for a particular syntactic pattern.\n+* `\"ignoreComments\"` (default: false) can be used when comments do not need to be aligned with nodes on the previous or next line.\n \n Level of indentation denotes the multiple of the indent specified. Example:\n \n@@ -641,6 +642,22 @@ bar();\n })\n ```\n \n+### ignoreComments\n+\n+Examples of additional **correct** code for this rule with the `4, { \"ignoreComments\": true }` option:\n+\n+```js\n+/*eslint indent: [\"error\", 4, { \"ignoreComments\": true }] */\n+\n+if (foo) {\n+    doSomething();\n+\n+// comment intentionally de-indented\n+    doSomethingElse();\n+}\n+```\n+\n+\n ## Compatibility\n \n * **JSHint**: `indent`"},{"sha":"511ee07c01bbf88d5773e1ca1d73c68f8254ac96","filename":"lib/rules/indent.js","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/eslint/eslint/blob/5d976738308013c174299f1a09df9b17d9a15c18/lib%2Frules%2Findent.js","raw_url":"https://github.com/eslint/eslint/raw/5d976738308013c174299f1a09df9b17d9a15c18/lib%2Frules%2Findent.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Findent.js?ref=5d976738308013c174299f1a09df9b17d9a15c18","patch":"@@ -600,6 +600,9 @@ module.exports = {\n                                 pattern: \":exit$\"\n                             }\n                         }\n+                    },\n+                    ignoreComments: {\n+                        type: \"boolean\"\n                     }\n                 },\n                 additionalProperties: false\n@@ -638,7 +641,8 @@ module.exports = {\n             ObjectExpression: 1,\n             ImportDeclaration: 1,\n             flatTernaryExpressions: false,\n-            ignoredNodes: []\n+            ignoredNodes: [],\n+            ignoreComments: false\n         };\n \n         if (context.options.length) {\n@@ -1457,6 +1461,12 @@ module.exports = {\n                 },\n                 \"Program:exit\"() {\n \n+                    // If ignoreComments option is enabled, ignore all comment tokens.\n+                    if (options.ignoreComments) {\n+                        sourceCode.getAllComments()\n+                            .forEach(comment => offsets.ignoreToken(comment));\n+                    }\n+\n                     // Invoke the queued offset listeners for the nodes that aren't ignored.\n                     listenerCallQueue\n                         .filter(nodeInfo => !ignoredNodes.has(nodeInfo.node))"},{"sha":"4ec4975bc99314ba28de15b8a028b80289fb7f76","filename":"tests/lib/rules/indent.js","status":"modified","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/eslint/eslint/blob/5d976738308013c174299f1a09df9b17d9a15c18/tests%2Flib%2Frules%2Findent.js","raw_url":"https://github.com/eslint/eslint/raw/5d976738308013c174299f1a09df9b17d9a15c18/tests%2Flib%2Frules%2Findent.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Findent.js?ref=5d976738308013c174299f1a09df9b17d9a15c18","patch":"@@ -4774,6 +4774,28 @@ ruleTester.run(\"indent\", rule, {\n                 ]\n             `,\n             options: [\"tab\", { ArrayExpression: \"first\", ignoredNodes: [\"CallExpression\"] }]\n+        },\n+        {\n+            code: unIndent`\n+                if (foo) {\n+                    doSomething();\n+\n+                // Intentionally unindented comment\n+                    doSomethingElse();\n+                }\n+            `,\n+            options: [4, { ignoreComments: true }]\n+        },\n+        {\n+            code: unIndent`\n+                if (foo) {\n+                    doSomething();\n+\n+                /* Intentionally unindented comment */\n+                    doSomethingElse();\n+                }\n+            `,\n+            options: [4, { ignoreComments: true }]\n         }\n     ],\n \n@@ -9199,6 +9221,46 @@ ruleTester.run(\"indent\", rule, {\n                 ignoredNodes: [\"ExpressionStatement > CallExpression > FunctionExpression.callee > BlockStatement\"]\n             }],\n             errors: expectedErrors([3, 4, 0, \"Identifier\"])\n+        },\n+        {\n+            code: unIndent`\n+                if (foo) {\n+                    doSomething();\n+\n+                // Intentionally unindented comment\n+                    doSomethingElse();\n+                }\n+            `,\n+            output: unIndent`\n+                if (foo) {\n+                    doSomething();\n+\n+                    // Intentionally unindented comment\n+                    doSomethingElse();\n+                }\n+            `,\n+            options: [4, { ignoreComments: false }],\n+            errors: expectedErrors([4, 4, 0, \"Line\"])\n+        },\n+        {\n+            code: unIndent`\n+                if (foo) {\n+                    doSomething();\n+\n+                /* Intentionally unindented comment */\n+                    doSomethingElse();\n+                }\n+            `,\n+            output: unIndent`\n+                if (foo) {\n+                    doSomething();\n+\n+                    /* Intentionally unindented comment */\n+                    doSomethingElse();\n+                }\n+            `,\n+            options: [4, { ignoreComments: false }],\n+            errors: expectedErrors([4, 4, 0, \"Block\"])\n         }\n     ]\n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/9364","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/9364/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/9364/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/9364/events","html_url":"https://github.com/eslint/eslint/pull/9364","id":261123708,"node_id":"MDExOlB1bGxSZXF1ZXN0MTQzNTA0NzY1","number":9364,"title":"Chore: avoid handling rules instances in config-validator","user":{"login":"not-an-aardvark","id":11638619,"node_id":"MDQ6VXNlcjExNjM4NjE5","avatar_url":"https://avatars.githubusercontent.com/u/11638619?v=4","gravatar_id":"","url":"https://api.github.com/users/not-an-aardvark","html_url":"https://github.com/not-an-aardvark","followers_url":"https://api.github.com/users/not-an-aardvark/followers","following_url":"https://api.github.com/users/not-an-aardvark/following{/other_user}","gists_url":"https://api.github.com/users/not-an-aardvark/gists{/gist_id}","starred_url":"https://api.github.com/users/not-an-aardvark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-an-aardvark/subscriptions","organizations_url":"https://api.github.com/users/not-an-aardvark/orgs","repos_url":"https://api.github.com/users/not-an-aardvark/repos","events_url":"https://api.github.com/users/not-an-aardvark/events{/privacy}","received_events_url":"https://api.github.com/users/not-an-aardvark/received_events","type":"User","site_admin":false},"labels":[{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2017-09-27T21:27:34Z","updated_at":"2018-05-10T20:03:47Z","closed_at":"2017-11-10T07:57:28Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/9364","html_url":"https://github.com/eslint/eslint/pull/9364","diff_url":"https://github.com/eslint/eslint/pull/9364.diff","patch_url":"https://github.com/eslint/eslint/pull/9364.patch","merged_at":"2017-11-10T07:57:28Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[x] Other, please explain:\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (https://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis is a modified version of #9277, which was merged but then reverted later for performance reasons. The performance issues from #9177 have been fixed (`Linter` no longer creates a new map of rules whenever it lints text).\r\n\r\nThe goal of this change is to progress towards being able to remove the `rules` property from `Linter` instances. Unfortunately, this isn't possible yet, since there are a few other modules that rely on reading the list of defined rules.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nNothing in particular\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/9364/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/9364/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"55450fd633e2832ca81148e5036407fd427e23dc","filename":"lib/cli-engine.js","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/eslint/eslint/blob/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fcli-engine.js?ref=2a8682cffff8ccc2555c7839c289d6d2f742c406","patch":"@@ -409,9 +409,13 @@ class CLIEngine {\n             });\n         }\n \n-        Object.keys(this.options.rules || {}).forEach(name => {\n-            validator.validateRuleOptions(name, this.options.rules[name], \"CLI\", this.linter.rules);\n-        });\n+        if (this.options.rules && Object.keys(this.options.rules).length) {\n+            const loadedRules = this.linter.getRules();\n+\n+            Object.keys(this.options.rules).forEach(name => {\n+                validator.validateRuleOptions(loadedRules.get(name), name, this.options.rules[name], \"CLI\");\n+            });\n+        }\n \n         this.config = new Config(this.options, this.linter);\n     }"},{"sha":"c5ff073cfcb9a2d1f234aa1411a812c6c0891360","filename":"lib/config/config-file.js","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Fconfig%2Fconfig-file.js","raw_url":"https://github.com/eslint/eslint/raw/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Fconfig%2Fconfig-file.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fconfig%2Fconfig-file.js?ref=2a8682cffff8ccc2555c7839c289d6d2f742c406","patch":"@@ -501,8 +501,10 @@ function loadFromDisk(resolvedPath, configContext) {\n             }\n         }\n \n+        const ruleMap = configContext.linterContext.getRules();\n+\n         // validate the configuration before continuing\n-        validator.validate(config, resolvedPath.configFullName, configContext.linterContext.rules, configContext.linterContext.environments);\n+        validator.validate(config, resolvedPath.configFullName, ruleMap.get.bind(ruleMap), configContext.linterContext.environments);\n \n         /*\n          * If an `extends` property is defined, it represents a configuration file to use as"},{"sha":"3d98b510455537ae99e965824a178db9e5a1907e","filename":"lib/config/config-validator.js","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/eslint/eslint/blob/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Fconfig%2Fconfig-validator.js","raw_url":"https://github.com/eslint/eslint/raw/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Fconfig%2Fconfig-validator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fconfig%2Fconfig-validator.js?ref=2a8682cffff8ccc2555c7839c289d6d2f742c406","patch":"@@ -14,9 +14,7 @@ const ajv = require(\"../util/ajv\"),\n     configSchema = require(\"../../conf/config-schema.js\"),\n     util = require(\"util\");\n \n-const validators = {\n-    rules: Object.create(null)\n-};\n+const ruleValidators = new WeakMap();\n \n //------------------------------------------------------------------------------\n // Private\n@@ -25,13 +23,11 @@ let validateSchema;\n \n /**\n  * Gets a complete options schema for a rule.\n- * @param {string} id The rule's unique name.\n- * @param {Rules} rulesContext Rule context\n+ * @param {{create: Function, schema: (Array|null)}} rule A new-style rule object\n  * @returns {Object} JSON Schema for the rule's options.\n  */\n-function getRuleOptionsSchema(id, rulesContext) {\n-    const rule = rulesContext.get(id),\n-        schema = rule && rule.schema || rule && rule.meta && rule.meta.schema;\n+function getRuleOptionsSchema(rule) {\n+    const schema = rule.schema || rule.meta && rule.meta.schema;\n \n     // Given a tuple of schemas, insert warning level at the beginning\n     if (Array.isArray(schema)) {\n@@ -72,19 +68,20 @@ function validateRuleSeverity(options) {\n \n /**\n  * Validates the non-severity options passed to a rule, based on its schema.\n- * @param {string} id The rule's unique name\n+ * @param {{create: Function}} rule The rule to validate\n  * @param {array} localOptions The options for the rule, excluding severity\n- * @param {Rules} rulesContext Rule context\n  * @returns {void}\n  */\n-function validateRuleSchema(id, localOptions, rulesContext) {\n-    const schema = getRuleOptionsSchema(id, rulesContext);\n+function validateRuleSchema(rule, localOptions) {\n+    if (!ruleValidators.has(rule)) {\n+        const schema = getRuleOptionsSchema(rule);\n \n-    if (!validators.rules[id] && schema) {\n-        validators.rules[id] = ajv.compile(schema);\n+        if (schema) {\n+            ruleValidators.set(rule, ajv.compile(schema));\n+        }\n     }\n \n-    const validateRule = validators.rules[id];\n+    const validateRule = ruleValidators.get(rule);\n \n     if (validateRule) {\n         validateRule(localOptions);\n@@ -98,21 +95,24 @@ function validateRuleSchema(id, localOptions, rulesContext) {\n \n /**\n  * Validates a rule's options against its schema.\n- * @param {string} id The rule's unique name.\n+ * @param {{create: Function}|null} rule The rule that the config is being validated for\n+ * @param {string} ruleId The rule's unique name.\n  * @param {array|number} options The given options for the rule.\n  * @param {string} source The name of the configuration source to report in any errors.\n- * @param {Rules} rulesContext Rule context\n  * @returns {void}\n  */\n-function validateRuleOptions(id, options, source, rulesContext) {\n+function validateRuleOptions(rule, ruleId, options, source) {\n+    if (!rule) {\n+        return;\n+    }\n     try {\n         const severity = validateRuleSeverity(options);\n \n         if (severity !== 0 && !(typeof severity === \"string\" && severity.toLowerCase() === \"off\")) {\n-            validateRuleSchema(id, Array.isArray(options) ? options.slice(1) : [], rulesContext);\n+            validateRuleSchema(rule, Array.isArray(options) ? options.slice(1) : []);\n         }\n     } catch (err) {\n-        throw new Error(`${source}:\\n\\tConfiguration for rule \"${id}\" is invalid:\\n${err.message}`);\n+        throw new Error(`${source}:\\n\\tConfiguration for rule \"${ruleId}\" is invalid:\\n${err.message}`);\n     }\n }\n \n@@ -143,16 +143,16 @@ function validateEnvironment(environment, source, envContext) {\n  * Validates a rules config object\n  * @param {Object} rulesConfig The rules config object to validate.\n  * @param {string} source The name of the configuration source to report in any errors.\n- * @param {Rules} rulesContext Rule context\n+ * @param {function(string): {create: Function}} ruleMapper A mapper function from strings to loaded rules\n  * @returns {void}\n  */\n-function validateRules(rulesConfig, source, rulesContext) {\n+function validateRules(rulesConfig, source, ruleMapper) {\n     if (!rulesConfig) {\n         return;\n     }\n \n     Object.keys(rulesConfig).forEach(id => {\n-        validateRuleOptions(id, rulesConfig[id], source, rulesContext);\n+        validateRuleOptions(ruleMapper(id), id, rulesConfig[id], source);\n     });\n }\n \n@@ -223,13 +223,13 @@ function validateConfigSchema(config, source) {\n  * Validates an entire config object.\n  * @param {Object} config The config object to validate.\n  * @param {string} source The name of the configuration source to report in any errors.\n- * @param {Rules} rulesContext The rules context\n+ * @param {function(string): {create: Function}} ruleMapper A mapper function from rule IDs to defined rules\n  * @param {Environments} envContext The env context\n  * @returns {void}\n  */\n-function validate(config, source, rulesContext, envContext) {\n+function validate(config, source, ruleMapper, envContext) {\n     validateConfigSchema(config, source);\n-    validateRules(config.rules, source, rulesContext);\n+    validateRules(config.rules, source, ruleMapper);\n     validateEnvironment(config.env, source, envContext);\n }\n "},{"sha":"35ecf7c75be32fc2b8786e39d9bc72e6a15593af","filename":"lib/linter.js","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/eslint/eslint/blob/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Flinter.js","raw_url":"https://github.com/eslint/eslint/raw/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Flinter.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Flinter.js?ref=2a8682cffff8ccc2555c7839c289d6d2f742c406","patch":"@@ -278,7 +278,7 @@ function createDisableDirectives(type, loc, value) {\n  * @param {string} filename The file being checked.\n  * @param {ASTNode} ast The top node of the AST.\n  * @param {Object} config The existing configuration data.\n- * @param {Linter} linterContext Linter context object\n+ * @param {function(string): {create: Function}} ruleMapper A map from rule IDs to defined rules\n  * @returns {{\n  *      config: Object,\n  *      problems: Problem[],\n@@ -291,7 +291,7 @@ function createDisableDirectives(type, loc, value) {\n  * }} Modified config object, along with any problems encountered\n  * while parsing config comments\n  */\n-function modifyConfigsFromComments(filename, ast, config, linterContext) {\n+function modifyConfigsFromComments(filename, ast, config, ruleMapper) {\n \n     const commentConfig = {\n         exported: {},\n@@ -337,7 +337,7 @@ function modifyConfigsFromComments(filename, ast, config, linterContext) {\n                             Object.keys(parseResult.config).forEach(name => {\n                                 const ruleValue = parseResult.config[name];\n \n-                                validator.validateRuleOptions(name, ruleValue, `${filename} line ${comment.loc.start.line}`, linterContext.rules);\n+                                validator.validateRuleOptions(ruleMapper(name), name, ruleValue, `${filename} line ${comment.loc.start.line}`);\n                                 commentRules[name] = ruleValue;\n                             });\n                         } else {\n@@ -806,7 +806,7 @@ module.exports = class Linter {\n \n         // parse global comments and modify config\n         if (allowInlineConfig !== false) {\n-            const modifyConfigResult = modifyConfigsFromComments(filename, sourceCode.ast, config, this);\n+            const modifyConfigResult = modifyConfigsFromComments(filename, sourceCode.ast, config, ruleId => this.rules.get(ruleId));\n \n             config = modifyConfigResult.config;\n             modifyConfigResult.problems.forEach(problem => problems.push(problem));"},{"sha":"aae66301d87173f3db05e52ccee083cbe1627f6f","filename":"lib/testers/rule-tester.js","status":"modified","additions":30,"deletions":27,"changes":57,"blob_url":"https://github.com/eslint/eslint/blob/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Ftesters%2Frule-tester.js","raw_url":"https://github.com/eslint/eslint/raw/2a8682cffff8ccc2555c7839c289d6d2f742c406/lib%2Ftesters%2Frule-tester.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ftesters%2Frule-tester.js?ref=2a8682cffff8ccc2555c7839c289d6d2f742c406","patch":"@@ -271,6 +271,23 @@ class RuleTester {\n             ].concat(scenarioErrors).join(\"\\n\"));\n         }\n \n+\n+        linter.defineRule(ruleName, Object.assign({}, rule, {\n+\n+            // Create a wrapper rule that freezes the `context` properties.\n+            create(context) {\n+                freezeDeeply(context.options);\n+                freezeDeeply(context.settings);\n+                freezeDeeply(context.parserOptions);\n+\n+                return (typeof rule === \"function\" ? rule : rule.create)(context);\n+            }\n+        }));\n+\n+        linter.defineRules(this.rules);\n+\n+        const ruleMap = linter.getRules();\n+\n         /**\n          * Run the rule for the given item\n          * @param {string|Object} item Item to run the rule against\n@@ -313,20 +330,22 @@ class RuleTester {\n                 config.rules[ruleName] = 1;\n             }\n \n-            linter.defineRule(ruleName, Object.assign({}, rule, {\n+            const schema = validator.getRuleOptionsSchema(rule);\n \n-                // Create a wrapper rule that freezes the `context` properties.\n-                create(context) {\n-                    freezeDeeply(context.options);\n-                    freezeDeeply(context.settings);\n-                    freezeDeeply(context.parserOptions);\n-\n-                    return (typeof rule === \"function\" ? rule : rule.create)(context);\n+            /*\n+             * Setup AST getters.\n+             * The goal is to check whether or not AST was modified when\n+             * running the rule under test.\n+             */\n+            linter.defineRule(\"rule-tester/validate-ast\", () => ({\n+                Program(node) {\n+                    beforeAST = cloneDeeplyExcludesParent(node);\n+                },\n+                \"Program:exit\"(node) {\n+                    afterAST = node;\n                 }\n             }));\n \n-            const schema = validator.getRuleOptionsSchema(ruleName, linter.rules);\n-\n             if (schema) {\n                 ajv.validateSchema(schema);\n \n@@ -341,21 +360,7 @@ class RuleTester {\n                 }\n             }\n \n-            validator.validate(config, \"rule-tester\", linter.rules, new Environments());\n-\n-            /*\n-             * Setup AST getters.\n-             * The goal is to check whether or not AST was modified when\n-             * running the rule under test.\n-             */\n-            linter.defineRule(\"rule-tester/validate-ast\", () => ({\n-                Program(node) {\n-                    beforeAST = cloneDeeplyExcludesParent(node);\n-                },\n-                \"Program:exit\"(node) {\n-                    afterAST = node;\n-                }\n-            }));\n+            validator.validate(config, \"rule-tester\", ruleMap.get.bind(ruleMap), new Environments());\n \n             return {\n                 messages: linter.verify(code, config, filename, true),\n@@ -532,7 +537,6 @@ class RuleTester {\n             RuleTester.describe(\"valid\", () => {\n                 test.valid.forEach(valid => {\n                     RuleTester.it(typeof valid === \"object\" ? valid.code : valid, () => {\n-                        linter.defineRules(this.rules);\n                         testValidTemplate(valid);\n                     });\n                 });\n@@ -541,7 +545,6 @@ class RuleTester {\n             RuleTester.describe(\"invalid\", () => {\n                 test.invalid.forEach(invalid => {\n                     RuleTester.it(invalid.code, () => {\n-                        linter.defineRules(this.rules);\n                         testInvalidTemplate(invalid);\n                     });\n                 });"},{"sha":"5d6cf8cc0d2e07747f4e62e68b0fb4691e83f37b","filename":"tests/lib/config/config-validator.js","status":"modified","additions":60,"deletions":51,"changes":111,"blob_url":"https://github.com/eslint/eslint/blob/2a8682cffff8ccc2555c7839c289d6d2f742c406/tests%2Flib%2Fconfig%2Fconfig-validator.js","raw_url":"https://github.com/eslint/eslint/raw/2a8682cffff8ccc2555c7839c289d6d2f742c406/tests%2Flib%2Fconfig%2Fconfig-validator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fconfig%2Fconfig-validator.js?ref=2a8682cffff8ccc2555c7839c289d6d2f742c406","patch":"@@ -90,6 +90,15 @@ const mockRequiredOptionsRule = {\n \n describe(\"Validator\", () => {\n \n+    /**\n+     * Gets a loaded rule given a rule ID\n+     * @param {string} ruleId The ID of the rule\n+     * @returns {{create: Function}} The loaded rule\n+     */\n+    function ruleMapper(ruleId) {\n+        return linter.getRules().get(ruleId);\n+    }\n+\n     beforeEach(() => {\n         linter.defineRule(\"mock-rule\", mockRule);\n         linter.defineRule(\"mock-required-options-rule\", mockRequiredOptionsRule);\n@@ -98,7 +107,7 @@ describe(\"Validator\", () => {\n     describe(\"validate\", () => {\n \n         it(\"should do nothing with an empty config\", () => {\n-            const fn = validator.validate.bind(null, {}, \"tests\", linter.rules, linter.environments);\n+            const fn = validator.validate.bind(null, {}, \"tests\", ruleMapper, linter.environments);\n \n             assert.doesNotThrow(fn);\n         });\n@@ -118,7 +127,7 @@ describe(\"Validator\", () => {\n                     rules: {}\n                 },\n                 \"tests\",\n-                linter.rules,\n+                ruleMapper,\n                 linter.environments\n             );\n \n@@ -132,7 +141,7 @@ describe(\"Validator\", () => {\n                     foo: true\n                 },\n                 \"tests\",\n-                linter.rules,\n+                ruleMapper,\n                 linter.environments\n             );\n \n@@ -141,35 +150,35 @@ describe(\"Validator\", () => {\n \n         describe(\"root\", () => {\n             it(\"should throw with a string value\", () => {\n-                const fn = validator.validate.bind(null, { root: \"true\" }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { root: \"true\" }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"root\\\" is the wrong type (expected boolean but got `\\\"true\\\"`).\");\n             });\n \n             it(\"should throw with a numeric value\", () => {\n-                const fn = validator.validate.bind(null, { root: 0 }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { root: 0 }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"root\\\" is the wrong type (expected boolean but got `0`).\");\n             });\n         });\n \n         describe(\"globals\", () => {\n             it(\"should throw with a string value\", () => {\n-                const fn = validator.validate.bind(null, { globals: \"jQuery\" }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { globals: \"jQuery\" }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"globals\\\" is the wrong type (expected object but got `\\\"jQuery\\\"`).\");\n             });\n \n             it(\"should throw with an array value\", () => {\n-                const fn = validator.validate.bind(null, { globals: [\"jQuery\"] }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { globals: [\"jQuery\"] }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"globals\\\" is the wrong type (expected object but got `[\\\"jQuery\\\"]`).\");\n             });\n         });\n \n         describe(\"parser\", () => {\n             it(\"should not throw with a null value\", () => {\n-                const fn = validator.validate.bind(null, { parser: null }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { parser: null }, null, ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n@@ -178,31 +187,31 @@ describe(\"Validator\", () => {\n         describe(\"env\", () => {\n \n             it(\"should throw with an array environment\", () => {\n-                const fn = validator.validate.bind(null, { env: [] }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { env: [] }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"env\\\" is the wrong type (expected object but got `[]`).\");\n             });\n \n             it(\"should throw with a primitive environment\", () => {\n-                const fn = validator.validate.bind(null, { env: 1 }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { env: 1 }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"env\\\" is the wrong type (expected object but got `1`).\");\n             });\n \n             it(\"should catch invalid environments\", () => {\n-                const fn = validator.validate.bind(null, { env: { browser: true, invalid: true } }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { env: { browser: true, invalid: true } }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Environment key \\\"invalid\\\" is unknown\\n\");\n             });\n \n             it(\"should catch disabled invalid environments\", () => {\n-                const fn = validator.validate.bind(null, { env: { browser: true, invalid: false } }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { env: { browser: true, invalid: false } }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Environment key \\\"invalid\\\" is unknown\\n\");\n             });\n \n             it(\"should do nothing with an undefined environment\", () => {\n-                const fn = validator.validate.bind(null, {}, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, {}, null, ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n@@ -211,61 +220,61 @@ describe(\"Validator\", () => {\n \n         describe(\"plugins\", () => {\n             it(\"should not throw with an empty array\", () => {\n-                const fn = validator.validate.bind(null, { plugins: [] }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { plugins: [] }, null, ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw with a string\", () => {\n-                const fn = validator.validate.bind(null, { plugins: \"react\" }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { plugins: \"react\" }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"plugins\\\" is the wrong type (expected array but got `\\\"react\\\"`).\");\n             });\n         });\n \n         describe(\"settings\", () => {\n             it(\"should not throw with an empty object\", () => {\n-                const fn = validator.validate.bind(null, { settings: {} }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { settings: {} }, null, ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw with an array\", () => {\n-                const fn = validator.validate.bind(null, { settings: [\"foo\"] }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { settings: [\"foo\"] }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"settings\\\" is the wrong type (expected object but got `[\\\"foo\\\"]`).\");\n             });\n         });\n \n         describe(\"extends\", () => {\n             it(\"should not throw with an empty array\", () => {\n-                const fn = validator.validate.bind(null, { extends: [] }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { extends: [] }, null, ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should not throw with a string\", () => {\n-                const fn = validator.validate.bind(null, { extends: \"react\" }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { extends: \"react\" }, null, ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw with an object\", () => {\n-                const fn = validator.validate.bind(null, { extends: {} }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { extends: {} }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"extends\\\" is the wrong type (expected string/array but got `{}`).\");\n             });\n         });\n \n         describe(\"parserOptions\", () => {\n             it(\"should not throw with an empty object\", () => {\n-                const fn = validator.validate.bind(null, { parserOptions: {} }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { parserOptions: {} }, null, ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw with an array\", () => {\n-                const fn = validator.validate.bind(null, { parserOptions: [\"foo\"] }, null, linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { parserOptions: [\"foo\"] }, null, ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"parserOptions\\\" is the wrong type (expected object but got `[\\\"foo\\\"]`).\");\n             });\n@@ -274,127 +283,127 @@ describe(\"Validator\", () => {\n         describe(\"rules\", () => {\n \n             it(\"should do nothing with an empty rules object\", () => {\n-                const fn = validator.validate.bind(null, { rules: {} }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: {} }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config with rules\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [2, \"second\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [2, \"second\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is off\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"off\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"off\", \"second\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with an invalid config when severity is off\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-required-options-rule\": \"off\" } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-required-options-rule\": \"off\" } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with an invalid config when severity is an array with 'off'\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-required-options-rule\": [\"off\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-required-options-rule\": [\"off\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is warn\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"warn\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"warn\", \"second\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is error\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"error\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"error\", \"second\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is Off\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Off\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Off\", \"second\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is Warn\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Warn\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Warn\", \"second\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is Error\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Error\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Error\", \"second\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should catch invalid rule options\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [3, \"third\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [3, \"third\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '3').\\n\");\n             });\n \n             it(\"should allow for rules with no options\", () => {\n                 linter.defineRule(\"mock-no-options-rule\", mockNoOptionsRule);\n \n-                const fn = validator.validate.bind(null, { rules: { \"mock-no-options-rule\": 2 } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-no-options-rule\": 2 } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should not allow options for rules with no options\", () => {\n                 linter.defineRule(\"mock-no-options-rule\", mockNoOptionsRule);\n \n-                const fn = validator.validate.bind(null, { rules: { \"mock-no-options-rule\": [2, \"extra\"] } }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-no-options-rule\": [2, \"extra\"] } }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-no-options-rule\\\" is invalid:\\n\\tValue [\\\"extra\\\"] should NOT have more than 0 items.\\n\");\n             });\n         });\n \n         describe(\"overrides\", () => {\n             it(\"should not throw with an empty overrides array\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [] }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [] }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should not throw with a valid overrides array\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", rules: {} }] }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", rules: {} }] }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw if override does not specify files\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ rules: {} }] }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ rules: {} }] }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- \\\"overrides[0]\\\" should have required property 'files'. Value: {\\\"rules\\\":{}}.\\n\");\n             });\n \n             it(\"should throw if override has an empty files array\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: [] }] }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: [] }] }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- Property \\\"overrides[0].files\\\" is the wrong type (expected string but got `[]`).\\n\\t- \\\"overrides[0].files\\\" should NOT have less than 1 items. Value: [].\\n\\t- \\\"overrides[0].files\\\" should match exactly one schema in oneOf. Value: [].\\n\");\n             });\n \n             it(\"should throw if override has nested overrides\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", overrides: [{ files: \"*\", rules: {} }] }] }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", overrides: [{ files: \"*\", rules: {} }] }] }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- Unexpected top-level property \\\"overrides[0].overrides\\\".\\n\");\n             });\n \n             it(\"should throw if override extends\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", extends: \"eslint-recommended\" }] }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", extends: \"eslint-recommended\" }] }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- Unexpected top-level property \\\"overrides[0].extends\\\".\\n\");\n             });\n \n             it(\"should throw if override tries to set root\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", root: \"true\" }] }, \"tests\", linter.rules, linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", root: \"true\" }] }, \"tests\", ruleMapper, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- Unexpected top-level property \\\"overrides[0].root\\\".\\n\");\n             });\n@@ -405,12 +414,12 @@ describe(\"Validator\", () => {\n     describe(\"getRuleOptionsSchema\", () => {\n \n         it(\"should return null for a missing rule\", () => {\n-            assert.strictEqual(validator.getRuleOptionsSchema(\"non-existent-rule\", linter.rules), null);\n+            assert.strictEqual(validator.getRuleOptionsSchema(linter.rules.get(\"non-existent-rule\")), null);\n         });\n \n         it(\"should not modify object schema\", () => {\n             linter.defineRule(\"mock-object-rule\", mockObjectRule);\n-            assert.deepStrictEqual(validator.getRuleOptionsSchema(\"mock-object-rule\", linter.rules), {\n+            assert.deepStrictEqual(validator.getRuleOptionsSchema(linter.rules.get(\"mock-object-rule\")), {\n                 enum: [\"first\", \"second\"]\n             });\n         });\n@@ -420,43 +429,43 @@ describe(\"Validator\", () => {\n     describe(\"validateRuleOptions\", () => {\n \n         it(\"should throw for incorrect warning level number\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", 3, \"tests\", linter.rules);\n+            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", 3, \"tests\");\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '3').\\n\");\n         });\n \n         it(\"should throw for incorrect warning level string\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", \"booya\", \"tests\", linter.rules);\n+            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", \"booya\", \"tests\");\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '\\\"booya\\\"').\\n\");\n         });\n \n         it(\"should throw for invalid-type warning level\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", [[\"error\"]], \"tests\", linter.rules);\n+            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", [[\"error\"]], \"tests\");\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '[ \\\"error\\\" ]').\\n\");\n         });\n \n         it(\"should only check warning level for nonexistent rules\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, \"non-existent-rule\", [3, \"foobar\"], \"tests\", linter.rules);\n+            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"non-existent-rule\"), \"non-existent-rule\", [3, \"foobar\"], \"tests\");\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"non-existent-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '3').\\n\");\n         });\n \n         it(\"should only check warning level for plugin rules\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, \"plugin/rule\", 3, \"tests\", linter.rules);\n+            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"plugin/rule\"), \"plugin/rule\", 3, \"tests\");\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"plugin/rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '3').\\n\");\n         });\n \n         it(\"should throw for incorrect configuration values\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", [2, \"frist\"], \"tests\", linter.rules);\n+            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", [2, \"frist\"], \"tests\");\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tValue \\\"frist\\\" should be equal to one of the allowed values.\\n\");\n         });\n \n         it(\"should throw for too many configuration values\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", [2, \"first\", \"second\"], \"tests\", linter.rules);\n+            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", [2, \"first\", \"second\"], \"tests\");\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tValue [\\\"first\\\",\\\"second\\\"] should NOT have more than 1 items.\\n\");\n         });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/9283","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/9283/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/9283/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/9283/events","html_url":"https://github.com/eslint/eslint/pull/9283","id":256545755,"node_id":"MDExOlB1bGxSZXF1ZXN0MTQwMjI4NTYz","number":9283,"title":"Update: run rules after `node.parent` is already set (fixes #9122)","user":{"login":"not-an-aardvark","id":11638619,"node_id":"MDQ6VXNlcjExNjM4NjE5","avatar_url":"https://avatars.githubusercontent.com/u/11638619?v=4","gravatar_id":"","url":"https://api.github.com/users/not-an-aardvark","html_url":"https://github.com/not-an-aardvark","followers_url":"https://api.github.com/users/not-an-aardvark/followers","following_url":"https://api.github.com/users/not-an-aardvark/following{/other_user}","gists_url":"https://api.github.com/users/not-an-aardvark/gists{/gist_id}","starred_url":"https://api.github.com/users/not-an-aardvark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-an-aardvark/subscriptions","organizations_url":"https://api.github.com/users/not-an-aardvark/orgs","repos_url":"https://api.github.com/users/not-an-aardvark/repos","events_url":"https://api.github.com/users/not-an-aardvark/events{/privacy}","received_events_url":"https://api.github.com/users/not-an-aardvark/received_events","type":"User","site_admin":false},"labels":[{"id":45711352,"node_id":"MDU6TGFiZWw0NTcxMTM1Mg==","url":"https://api.github.com/repos/eslint/eslint/labels/enhancement","name":"enhancement","color":"84b6eb","default":true,"description":"This change enhances an existing feature of ESLint"},{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-09-10T22:37:42Z","updated_at":"2018-03-15T06:10:38Z","closed_at":"2017-09-15T19:26:02Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/9283","html_url":"https://github.com/eslint/eslint/pull/9283","diff_url":"https://github.com/eslint/eslint/pull/9283.diff","patch_url":"https://github.com/eslint/eslint/pull/9283.patch","merged_at":"2017-09-15T19:26:02Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[x] Add something to the core\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (http://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis is a reference implementation of #9122. With this change, rules don't have to worry about whether `node.parent` has been set at any given point, because all of the `node.parent` properties will be assigned by the time the rule gets run.\r\n\r\n~~This builds on https://github.com/eslint/eslint/pull/9268, and should not be merged until https://github.com/eslint/eslint/pull/9268 is merged. For now, only look at the [second commit](https://github.com/eslint/eslint/pull/9283/commits/f65fdac1b0f8962cd44a899a4c6cf1a10e852fbf).~~\r\n\r\nSince this stores nodes in a queue rather than doing another traversal, this has very little performance impact:\r\n\r\n<details>\r\n<summary>Performance metrics</summary>\r\n\r\nOn 9ecd264 (without this change applied):\r\n\r\n```\r\n((HEAD detached at 7685fed3))$ npm run perf\r\n\r\n> eslint@4.6.1 perf /path/to/eslint\r\n> node Makefile.js perf\r\n\r\n\r\nLoading:\r\n  Load performance Run #1:  120.599158ms\r\n  Load performance Run #2:  114.98305ms\r\n  Load performance Run #3:  114.749014ms\r\n  Load performance Run #4:  119.581881ms\r\n  Load performance Run #5:  120.72974ms\r\n\r\n  Load Performance median:  119.581881ms\r\n\r\n\r\nSingle File:\r\n  CPU Speed is 3100 with multiplier 13000000\r\n  Performance Run #1:  5545.881914ms\r\n  Performance Run #2:  5494.320288ms\r\n  Performance Run #3:  5507.513848ms\r\n  Performance Run #4:  5535.386212ms\r\n  Performance Run #5:  5487.6923289999995ms\r\n\r\n  Performance budget exceeded: 5507.513848ms (limit: 4193.548387096775ms)\r\n\r\n\r\nMulti Files (0 files):\r\n  CPU Speed is 3100 with multiplier 39000000\r\n  Performance Run #1:  13472.871353ms\r\n  Performance Run #2:  13794.571958ms\r\n  Performance Run #3:  13790.013038000001ms\r\n  Performance Run #4:  13667.251705ms\r\n  Performance Run #5:  13450.531616ms\r\n\r\n  Performance budget exceeded: 13667.251705ms (limit: 12580.645161290322ms)\r\n```\r\n\r\nOn `deferred-listener-calls` (with this change applied):\r\n\r\n```\r\n(deferred-listener-calls)$ npm run perf\r\n\r\n> eslint@4.6.1 perf /Users/tkatz/code/eslint\r\n> node Makefile.js perf\r\n\r\n\r\nLoading:\r\n  Load performance Run #1:  116.02172ms\r\n  Load performance Run #2:  122.795839ms\r\n  Load performance Run #3:  120.586319ms\r\n  Load performance Run #4:  117.875192ms\r\n  Load performance Run #5:  117.937884ms\r\n\r\n  Load Performance median:  117.937884ms\r\n\r\n\r\nSingle File:\r\n  CPU Speed is 3100 with multiplier 13000000\r\n  Performance Run #1:  5591.12559ms\r\n  Performance Run #2:  5558.3983530000005ms\r\n  Performance Run #3:  5500.023409ms\r\n  Performance Run #4:  5587.691358ms\r\n  Performance Run #5:  5585.687514ms\r\n\r\n  Performance budget exceeded: 5585.687514ms (limit: 4193.548387096775ms)\r\n\r\n\r\nMulti Files (0 files):\r\n  CPU Speed is 3100 with multiplier 39000000\r\n  Performance Run #1:  13529.686102ms\r\n  Performance Run #2:  13508.945281ms\r\n  Performance Run #3:  13482.570723ms\r\n  Performance Run #4:  13340.607641ms\r\n  Performance Run #5:  13524.828015ms\r\n\r\n  Performance budget exceeded: 13508.945281ms (limit: 12580.645161290322ms)\r\n```\r\n\r\nThese numbers indicate a 1% performance decrease on the single-file benchmark, and a 1% improvement on the multi-file benchmark. I suspect at least some of this is noise, but if there is a performance impact it seems quite small.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nNothing in particular","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/9283/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/9283/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"c9315bf12498dbfb9cb22642c48823fc2906374f","filename":"docs/developer-guide/working-with-plugins.md","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/5aeed11d87c2b67ab72187a5a62d1b977e28e149/docs%2Fdeveloper-guide%2Fworking-with-plugins.md","raw_url":"https://github.com/eslint/eslint/raw/5aeed11d87c2b67ab72187a5a62d1b977e28e149/docs%2Fdeveloper-guide%2Fworking-with-plugins.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Fdeveloper-guide%2Fworking-with-plugins.md?ref=5aeed11d87c2b67ab72187a5a62d1b977e28e149","patch":"@@ -174,7 +174,7 @@ All nodes must have `range` property.\n * `range` (`number[]`) is an array of two numbers. Both numbers are a 0-based index which is the position in the array of source code characters. The first is the start position of the node, the second is the end position of the node. `code.slice(node.range[0], node.range[1])` must be the text of the node. This range does not include spaces/parentheses which are around the node.\n * `loc` (`SourceLocation`) must not be `null`. [The `loc` property is defined as nullable by ESTree](https://github.com/estree/estree/blob/25834f7247d44d3156030f8e8a2d07644d771fdb/es5.md#node-objects), but ESLint requires this property. On the other hand, `SourceLocation#source` property can be `undefined`. ESLint does not use the `SourceLocation#source` property.\n \n-The `parent` property of all nodes must be rewriteable. ESLint sets each node's parent properties to its parent node while traversing.\n+The `parent` property of all nodes must be rewriteable. ESLint sets each node's `parent` property to its parent node while traversing, before any rules have access to the AST.\n \n #### The `Program` node:\n "},{"sha":"328f8124b81b2dfe46d89c7fe605be60770fe858","filename":"lib/linter.js","status":"modified","additions":39,"deletions":17,"changes":56,"blob_url":"https://github.com/eslint/eslint/blob/5aeed11d87c2b67ab72187a5a62d1b977e28e149/lib%2Flinter.js","raw_url":"https://github.com/eslint/eslint/raw/5aeed11d87c2b67ab72187a5a62d1b977e28e149/lib%2Flinter.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Flinter.js?ref=5aeed11d87c2b67ab72187a5a62d1b977e28e149","patch":"@@ -653,6 +653,22 @@ function markVariableAsUsed(scopeManager, currentNode, parserOptions, name) {\n     return false;\n }\n \n+/**\n+ * Gets all the ancestors of a given node\n+ * @param {ASTNode} node The node\n+ * @returns {ASTNode[]} All the ancestor nodes in the AST, not including the provided node, starting\n+ * from the root node and going inwards to the parent node.\n+ */\n+function getAncestors(node) {\n+    if (node.parent) {\n+        const parentAncestors = getAncestors(node.parent);\n+\n+        parentAncestors.push(node.parent);\n+        return parentAncestors;\n+    }\n+    return [];\n+}\n+\n // methods that exist on SourceCode object\n const DEPRECATED_SOURCECODE_PASSTHROUGHS = {\n     getSource: \"getText\",\n@@ -812,7 +828,6 @@ module.exports = class Linter {\n         }\n \n         const emitter = new EventEmitter().setMaxListeners(Infinity);\n-        const traverser = new Traverser();\n         const ecmaFeatures = config.parserOptions.ecmaFeatures || {};\n         const ecmaVersion = config.parserOptions.ecmaVersion || 5;\n         const scopeManager = eslintScope.analyze(sourceCode.ast, {\n@@ -824,6 +839,19 @@ module.exports = class Linter {\n             fallback: Traverser.getKeys\n         });\n \n+        let currentNode = sourceCode.ast;\n+        const nodeQueue = [];\n+\n+        new Traverser().traverse(sourceCode.ast, {\n+            enter(node, parent) {\n+                node.parent = parent;\n+                nodeQueue.push({ isEntering: true, node });\n+            },\n+            leave(node) {\n+                nodeQueue.push({ isEntering: false, node });\n+            }\n+        });\n+\n         /*\n          * Create a frozen object with the ruleContext properties and methods that are shared by all rules.\n          * All rule contexts will inherit from this object. This avoids the performance penalty of copying all the\n@@ -833,12 +861,12 @@ module.exports = class Linter {\n             Object.assign(\n                 Object.create(BASE_TRAVERSAL_CONTEXT),\n                 {\n-                    getAncestors: () => traverser.parents(),\n+                    getAncestors: () => getAncestors(currentNode),\n                     getDeclaredVariables: scopeManager.getDeclaredVariables.bind(scopeManager),\n                     getFilename: () => filename,\n-                    getScope: () => getScope(scopeManager, traverser.current(), config.parserOptions.ecmaVersion),\n+                    getScope: () => getScope(scopeManager, currentNode, config.parserOptions.ecmaVersion),\n                     getSourceCode: () => sourceCode,\n-                    markVariableAsUsed: name => markVariableAsUsed(scopeManager, traverser.current(), config.parserOptions, name),\n+                    markVariableAsUsed: name => markVariableAsUsed(scopeManager, currentNode, config.parserOptions, name),\n                     parserOptions: config.parserOptions,\n                     parserPath: config.parser,\n                     parserServices,\n@@ -943,19 +971,13 @@ module.exports = class Linter {\n \n         const eventGenerator = new CodePathAnalyzer(new NodeEventGenerator(emitter));\n \n-        /*\n-         * Each node has a type property. Whenever a particular type of\n-         * node is found, an event is fired. This allows any listeners to\n-         * automatically be informed that this type of node has been found\n-         * and react accordingly.\n-         */\n-        traverser.traverse(sourceCode.ast, {\n-            enter(node, parent) {\n-                node.parent = parent;\n-                eventGenerator.enterNode(node);\n-            },\n-            leave(node) {\n-                eventGenerator.leaveNode(node);\n+        nodeQueue.forEach(traversalInfo => {\n+            currentNode = traversalInfo.node;\n+\n+            if (traversalInfo.isEntering) {\n+                eventGenerator.enterNode(currentNode);\n+            } else {\n+                eventGenerator.leaveNode(currentNode);\n             }\n         });\n "},{"sha":"1c6620ed7351631def50be82ccb927e90b3a8cdd","filename":"lib/util/source-code.js","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/eslint/eslint/blob/5aeed11d87c2b67ab72187a5a62d1b977e28e149/lib%2Futil%2Fsource-code.js","raw_url":"https://github.com/eslint/eslint/raw/5aeed11d87c2b67ab72187a5a62d1b977e28e149/lib%2Futil%2Fsource-code.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Futil%2Fsource-code.js?ref=5aeed11d87c2b67ab72187a5a62d1b977e28e149","patch":"@@ -349,15 +349,13 @@ class SourceCode extends TokenStore {\n      * @returns {ASTNode} The node if found or null if not found.\n      */\n     getNodeByRangeIndex(index) {\n-        let result = null,\n-            resultParent = null;\n+        let result = null;\n         const traverser = new Traverser();\n \n         traverser.traverse(this.ast, {\n-            enter(node, parent) {\n+            enter(node) {\n                 if (node.range[0] <= index && index < node.range[1]) {\n                     result = node;\n-                    resultParent = parent;\n                 } else {\n                     this.skip();\n                 }\n@@ -369,7 +367,7 @@ class SourceCode extends TokenStore {\n             }\n         });\n \n-        return result ? Object.assign({ parent: resultParent }, result) : null;\n+        return result;\n     }\n \n     /**"},{"sha":"53cb94a9f03cf413403a2f0f83bec26e30ea2adc","filename":"tests/lib/linter.js","status":"modified","additions":15,"deletions":37,"changes":52,"blob_url":"https://github.com/eslint/eslint/blob/5aeed11d87c2b67ab72187a5a62d1b977e28e149/tests%2Flib%2Flinter.js","raw_url":"https://github.com/eslint/eslint/raw/5aeed11d87c2b67ab72187a5a62d1b977e28e149/tests%2Flib%2Flinter.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Flinter.js?ref=5aeed11d87c2b67ab72187a5a62d1b977e28e149","patch":"@@ -100,6 +100,21 @@ describe(\"Linter\", () => {\n                 linter.verify(code, config, filename, true);\n             }, \"Intentional error.\");\n         });\n+\n+        it(\"has all the `parent` properties on nodes when the rule listeners are created\", () => {\n+            linter.defineRule(\"checker\", context => {\n+                const ast = context.getSourceCode().ast;\n+\n+                assert.strictEqual(ast.body[0].parent, ast);\n+                assert.strictEqual(ast.body[0].expression.parent, ast.body[0]);\n+                assert.strictEqual(ast.body[0].expression.left.parent, ast.body[0].expression);\n+                assert.strictEqual(ast.body[0].expression.right.parent, ast.body[0].expression);\n+\n+                return {};\n+            });\n+\n+            linter.verify(\"foo + bar\", { rules: { checker: \"error\" } });\n+        });\n     });\n \n     describe(\"context.getSourceLines()\", () => {\n@@ -432,43 +447,6 @@ describe(\"Linter\", () => {\n             linter.verify(code, config);\n             assert(spy.calledOnce);\n         });\n-\n-        it(\"should attach the node's parent\", () => {\n-            const config = { rules: { checker: \"error\" } };\n-            const spy = sandbox.spy(context => {\n-                const node = context.getNodeByRangeIndex(14);\n-\n-                assert.property(node, \"parent\");\n-                assert.equal(node.parent.type, \"VariableDeclarator\");\n-                return {};\n-            });\n-\n-            linter.defineRule(\"checker\", spy);\n-            linter.verify(code, config);\n-            assert(spy.calledOnce);\n-        });\n-\n-        it(\"should not modify the node when attaching the parent\", () => {\n-            const config = { rules: { checker: \"error\" } };\n-            const spy = sandbox.spy(context => {\n-                const node1 = context.getNodeByRangeIndex(10);\n-\n-                assert.equal(node1.type, \"VariableDeclarator\");\n-\n-                const node2 = context.getNodeByRangeIndex(4);\n-\n-                assert.equal(node2.type, \"Identifier\");\n-                assert.property(node2, \"parent\");\n-                assert.equal(node2.parent.type, \"VariableDeclarator\");\n-                assert.notProperty(node2.parent, \"parent\");\n-                return {};\n-            });\n-\n-            linter.defineRule(\"checker\", spy);\n-            linter.verify(code, config);\n-            assert(spy.calledOnce);\n-        });\n-\n     });\n \n "},{"sha":"b902bd2a151637b8326486aecd3aeab0093d215b","filename":"tests/lib/util/source-code.js","status":"modified","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/eslint/eslint/blob/5aeed11d87c2b67ab72187a5a62d1b977e28e149/tests%2Flib%2Futil%2Fsource-code.js","raw_url":"https://github.com/eslint/eslint/raw/5aeed11d87c2b67ab72187a5a62d1b977e28e149/tests%2Flib%2Futil%2Fsource-code.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Futil%2Fsource-code.js?ref=5aeed11d87c2b67ab72187a5a62d1b977e28e149","patch":"@@ -1775,25 +1775,6 @@ describe(\"SourceCode\", () => {\n             node = sourceCode.getNodeByRangeIndex(-99);\n             assert.isNull(node);\n         });\n-\n-        it(\"should attach the node's parent\", () => {\n-            const node = sourceCode.getNodeByRangeIndex(14);\n-\n-            assert.property(node, \"parent\");\n-            assert.equal(node.parent.type, \"VariableDeclarator\");\n-        });\n-\n-        it(\"should not modify the node when attaching the parent\", () => {\n-            let node = sourceCode.getNodeByRangeIndex(10);\n-\n-            assert.equal(node.type, \"VariableDeclarator\");\n-            node = sourceCode.getNodeByRangeIndex(4);\n-            assert.equal(node.type, \"Identifier\");\n-            assert.property(node, \"parent\");\n-            assert.equal(node.parent.type, \"VariableDeclarator\");\n-            assert.notProperty(node.parent, \"parent\");\n-        });\n-\n     });\n \n     describe(\"isSpaceBetweenTokens()\", () => {"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/9295","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/9295/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/9295/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/9295/events","html_url":"https://github.com/eslint/eslint/pull/9295","id":257220692,"node_id":"MDExOlB1bGxSZXF1ZXN0MTQwNzA5OTQ0","number":9295,"title":"Chore: Revert \"avoid handling Rules instances in config-validator\"","user":{"login":"not-an-aardvark","id":11638619,"node_id":"MDQ6VXNlcjExNjM4NjE5","avatar_url":"https://avatars.githubusercontent.com/u/11638619?v=4","gravatar_id":"","url":"https://api.github.com/users/not-an-aardvark","html_url":"https://github.com/not-an-aardvark","followers_url":"https://api.github.com/users/not-an-aardvark/followers","following_url":"https://api.github.com/users/not-an-aardvark/following{/other_user}","gists_url":"https://api.github.com/users/not-an-aardvark/gists{/gist_id}","starred_url":"https://api.github.com/users/not-an-aardvark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-an-aardvark/subscriptions","organizations_url":"https://api.github.com/users/not-an-aardvark/orgs","repos_url":"https://api.github.com/users/not-an-aardvark/repos","events_url":"https://api.github.com/users/not-an-aardvark/events{/privacy}","received_events_url":"https://api.github.com/users/not-an-aardvark/received_events","type":"User","site_admin":false},"labels":[{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-09-13T00:13:00Z","updated_at":"2018-03-15T06:10:30Z","closed_at":"2017-09-15T19:14:21Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/9295","html_url":"https://github.com/eslint/eslint/pull/9295","diff_url":"https://github.com/eslint/eslint/pull/9295.diff","patch_url":"https://github.com/eslint/eslint/pull/9295.patch","merged_at":"2017-09-15T19:14:21Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[x] Other, please explain:\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (http://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis reverts commit 7c95d5d0a44b7f4f7f885621deb7007a7faa3a4b to avoid the performance impact of iterating through all ~200 core rules in the `Linter#getRules` method every time Linter#verify is called.\r\n\r\nThis is most noticeable when using `RuleTester`, since `Linter#verify` is called a lot of times on small code samples, so the added overhead is a significant portion of the total time.\r\n\r\nI noticed this when running the `indent` tests. On `master`, it takes about 3.5 seconds to run all 751 `indent` tests, but after reverting this change it takes about 2.3 seconds.\r\n\r\nEventually, it would be nice to reapply this commit, but we will probably need to add a way to get a single defined rule from a `Linter` instance to make it workable, rather than getting a map of hundreds of rules.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nNothing in particular","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/9295/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/9295/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"2fb0c9bff8e9be5acdf1119eccd1336b2d4f28fa","filename":"lib/cli-engine.js","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/eslint/eslint/blob/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fcli-engine.js?ref=ecedecc469b40381301a5167c395767e07d11cdb","patch":"@@ -419,13 +419,9 @@ class CLIEngine {\n             });\n         }\n \n-        if (this.options.rules && Object.keys(this.options.rules).length) {\n-            const loadedRules = this.linter.getRules();\n-\n-            Object.keys(this.options.rules).filter(ruleId => loadedRules.has(ruleId)).forEach(name => {\n-                validator.validateRuleOptions(loadedRules.get(name), name, this.options.rules[name], \"CLI\");\n-            });\n-        }\n+        Object.keys(this.options.rules || {}).forEach(name => {\n+            validator.validateRuleOptions(name, this.options.rules[name], \"CLI\", this.linter.rules);\n+        });\n \n         this.config = new Config(this.options, this.linter);\n     }"},{"sha":"87412dd2a2d6b9d5478e4961889a46fbb8ed14ed","filename":"lib/config/config-file.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Fconfig%2Fconfig-file.js","raw_url":"https://github.com/eslint/eslint/raw/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Fconfig%2Fconfig-file.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fconfig%2Fconfig-file.js?ref=ecedecc469b40381301a5167c395767e07d11cdb","patch":"@@ -546,7 +546,7 @@ function loadFromDisk(resolvedPath, configContext) {\n         }\n \n         // validate the configuration before continuing\n-        validator.validate(config, resolvedPath.configFullName, configContext.linterContext.getRules(), configContext.linterContext.environments);\n+        validator.validate(config, resolvedPath.configFullName, configContext.linterContext.rules, configContext.linterContext.environments);\n \n         /*\n          * If an `extends` property is defined, it represents a configuration file to use as"},{"sha":"22bc1efbd0d235cc6fca52eaf247036b52ba055f","filename":"lib/config/config-validator.js","status":"modified","additions":27,"deletions":24,"changes":51,"blob_url":"https://github.com/eslint/eslint/blob/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Fconfig%2Fconfig-validator.js","raw_url":"https://github.com/eslint/eslint/raw/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Fconfig%2Fconfig-validator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fconfig%2Fconfig-validator.js?ref=ecedecc469b40381301a5167c395767e07d11cdb","patch":"@@ -14,7 +14,9 @@ const ajv = require(\"../util/ajv\"),\n     configSchema = require(\"../../conf/config-schema.js\"),\n     util = require(\"util\");\n \n-const ruleValidators = new WeakMap();\n+const validators = {\n+    rules: Object.create(null)\n+};\n \n //------------------------------------------------------------------------------\n // Private\n@@ -23,11 +25,13 @@ let validateSchema;\n \n /**\n  * Gets a complete options schema for a rule.\n- * @param {{create: Function, schema: (Array|null)}} rule A new-style rule object\n+ * @param {string} id The rule's unique name.\n+ * @param {Rules} rulesContext Rule context\n  * @returns {Object} JSON Schema for the rule's options.\n  */\n-function getRuleOptionsSchema(rule) {\n-    const schema = rule.schema || rule.meta && rule.meta.schema;\n+function getRuleOptionsSchema(id, rulesContext) {\n+    const rule = rulesContext.get(id),\n+        schema = rule && rule.schema || rule && rule.meta && rule.meta.schema;\n \n     // Given a tuple of schemas, insert warning level at the beginning\n     if (Array.isArray(schema)) {\n@@ -68,20 +72,19 @@ function validateRuleSeverity(options) {\n \n /**\n * Validates the non-severity options passed to a rule, based on its schema.\n-* @param {{create: Function}} rule The rule to validate\n+* @param {string} id The rule's unique name\n * @param {array} localOptions The options for the rule, excluding severity\n+* @param {Rules} rulesContext Rule context\n * @returns {void}\n */\n-function validateRuleSchema(rule, localOptions) {\n-    if (!ruleValidators.has(rule)) {\n-        const schema = getRuleOptionsSchema(rule);\n+function validateRuleSchema(id, localOptions, rulesContext) {\n+    const schema = getRuleOptionsSchema(id, rulesContext);\n \n-        if (schema) {\n-            ruleValidators.set(rule, ajv.compile(schema));\n-        }\n+    if (!validators.rules[id] && schema) {\n+        validators.rules[id] = ajv.compile(schema);\n     }\n \n-    const validateRule = ruleValidators.get(rule);\n+    const validateRule = validators.rules[id];\n \n     if (validateRule) {\n         validateRule(localOptions);\n@@ -93,21 +96,21 @@ function validateRuleSchema(rule, localOptions) {\n \n /**\n  * Validates a rule's options against its schema.\n- * @param {{create: Function}} rule The rule that the config is being validated for\n- * @param {string} ruleId The rule's unique name.\n+ * @param {string} id The rule's unique name.\n  * @param {array|number} options The given options for the rule.\n  * @param {string} source The name of the configuration source to report in any errors.\n+ * @param {Rules} rulesContext Rule context\n  * @returns {void}\n  */\n-function validateRuleOptions(rule, ruleId, options, source) {\n+function validateRuleOptions(id, options, source, rulesContext) {\n     try {\n         const severity = validateRuleSeverity(options);\n \n         if (severity !== 0 && !(typeof severity === \"string\" && severity.toLowerCase() === \"off\")) {\n-            validateRuleSchema(rule, Array.isArray(options) ? options.slice(1) : []);\n+            validateRuleSchema(id, Array.isArray(options) ? options.slice(1) : [], rulesContext);\n         }\n     } catch (err) {\n-        throw new Error(`${source}:\\n\\tConfiguration for rule \"${ruleId}\" is invalid:\\n${err.message}`);\n+        throw new Error(`${source}:\\n\\tConfiguration for rule \"${id}\" is invalid:\\n${err.message}`);\n     }\n }\n \n@@ -138,16 +141,16 @@ function validateEnvironment(environment, source, envContext) {\n  * Validates a rules config object\n  * @param {Object} rulesConfig The rules config object to validate.\n  * @param {string} source The name of the configuration source to report in any errors.\n- * @param {Map<string, {create: Function}>} rulesMap A map from strings to loaded rules\n+ * @param {Rules} rulesContext Rule context\n  * @returns {void}\n  */\n-function validateRules(rulesConfig, source, rulesMap) {\n+function validateRules(rulesConfig, source, rulesContext) {\n     if (!rulesConfig) {\n         return;\n     }\n \n-    Object.keys(rulesConfig).filter(id => rulesMap.has(id)).forEach(id => {\n-        validateRuleOptions(rulesMap.get(id), id, rulesConfig[id], source);\n+    Object.keys(rulesConfig).forEach(id => {\n+        validateRuleOptions(id, rulesConfig[id], source, rulesContext);\n     });\n }\n \n@@ -218,13 +221,13 @@ function validateConfigSchema(config, source) {\n  * Validates an entire config object.\n  * @param {Object} config The config object to validate.\n  * @param {string} source The name of the configuration source to report in any errors.\n- * @param {Map<string, {create: Function}>} ruleMap A map from rule IDs to defined rules\n+ * @param {Rules} rulesContext The rules context\n  * @param {Environments} envContext The env context\n  * @returns {void}\n  */\n-function validate(config, source, ruleMap, envContext) {\n+function validate(config, source, rulesContext, envContext) {\n     validateConfigSchema(config, source);\n-    validateRules(config.rules, source, ruleMap);\n+    validateRules(config.rules, source, rulesContext);\n     validateEnvironment(config.env, source, envContext);\n }\n "},{"sha":"4ae1da0f0d138551fa007f3157ffc01bdbd2b3f4","filename":"lib/linter.js","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/eslint/eslint/blob/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Flinter.js","raw_url":"https://github.com/eslint/eslint/raw/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Flinter.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Flinter.js?ref=ecedecc469b40381301a5167c395767e07d11cdb","patch":"@@ -276,7 +276,7 @@ function createDisableDirectives(type, loc, value) {\n  * @param {string} filename The file being checked.\n  * @param {ASTNode} ast The top node of the AST.\n  * @param {Object} config The existing configuration data.\n- * @param {Map<string, {create: Function}>} ruleMap A map from rule IDs to defined rules\n+ * @param {Linter} linterContext Linter context object\n  * @returns {{\n  *      config: Object,\n  *      problems: Problem[],\n@@ -289,9 +289,9 @@ function createDisableDirectives(type, loc, value) {\n  * }} Modified config object, along with any problems encountered\n  * while parsing config comments\n  */\n-function modifyConfigsFromComments(filename, ast, config, ruleMap) {\n+function modifyConfigsFromComments(filename, ast, config, linterContext) {\n \n-    const commentConfig = {\n+    let commentConfig = {\n         exported: {},\n         astGlobals: {},\n         rules: {},\n@@ -339,9 +339,7 @@ function modifyConfigsFromComments(filename, ast, config, ruleMap) {\n                             Object.keys(parseResult.config).forEach(name => {\n                                 const ruleValue = parseResult.config[name];\n \n-                                if (ruleMap.has(name)) {\n-                                    validator.validateRuleOptions(ruleMap.get(name), name, ruleValue, `${filename} line ${comment.loc.start.line}`);\n-                                }\n+                                validator.validateRuleOptions(name, ruleValue, `${filename} line ${comment.loc.start.line}`, linterContext.rules);\n                                 commentRules[name] = ruleValue;\n                             });\n                         } else {\n@@ -363,6 +361,14 @@ function modifyConfigsFromComments(filename, ast, config, ruleMap) {\n         }\n     });\n \n+    // apply environment configs\n+    Object.keys(commentConfig.env).forEach(name => {\n+        const env = linterContext.environments.get(name);\n+\n+        if (env) {\n+            commentConfig = ConfigOps.merge(commentConfig, env);\n+        }\n+    });\n     Object.assign(commentConfig.rules, commentRules);\n \n     return {\n@@ -802,7 +808,7 @@ module.exports = class Linter {\n \n         // parse global comments and modify config\n         if (allowInlineConfig !== false) {\n-            const modifyConfigResult = modifyConfigsFromComments(filename, sourceCode.ast, config, this.getRules());\n+            const modifyConfigResult = modifyConfigsFromComments(filename, sourceCode.ast, config, this);\n \n             config = modifyConfigResult.config;\n             modifyConfigResult.problems.forEach(problem => problems.push(problem));"},{"sha":"d7e14878cfa1b00901030d889d77076cbe8c1907","filename":"lib/testers/rule-tester.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Ftesters%2Frule-tester.js","raw_url":"https://github.com/eslint/eslint/raw/ecedecc469b40381301a5167c395767e07d11cdb/lib%2Ftesters%2Frule-tester.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ftesters%2Frule-tester.js?ref=ecedecc469b40381301a5167c395767e07d11cdb","patch":"@@ -319,7 +319,7 @@ class RuleTester {\n                 }\n             }));\n \n-            const schema = validator.getRuleOptionsSchema(rule);\n+            const schema = validator.getRuleOptionsSchema(ruleName, linter.rules);\n \n             if (schema) {\n                 ajv.validateSchema(schema);\n@@ -335,7 +335,7 @@ class RuleTester {\n                 }\n             }\n \n-            validator.validate(config, \"rule-tester\", linter.getRules(), new Environments());\n+            validator.validate(config, \"rule-tester\", linter.rules, new Environments());\n \n             /*\n              * Setup AST getters."},{"sha":"c6fec97ae64e3e3c98cd431f408db3e5bb9cae33","filename":"tests/lib/config/config-validator.js","status":"modified","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/eslint/eslint/blob/ecedecc469b40381301a5167c395767e07d11cdb/tests%2Flib%2Fconfig%2Fconfig-validator.js","raw_url":"https://github.com/eslint/eslint/raw/ecedecc469b40381301a5167c395767e07d11cdb/tests%2Flib%2Fconfig%2Fconfig-validator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fconfig%2Fconfig-validator.js?ref=ecedecc469b40381301a5167c395767e07d11cdb","patch":"@@ -98,7 +98,7 @@ describe(\"Validator\", () => {\n     describe(\"validate\", () => {\n \n         it(\"should do nothing with an empty config\", () => {\n-            const fn = validator.validate.bind(null, {}, \"tests\", linter.getRules(), linter.environments);\n+            const fn = validator.validate.bind(null, {}, \"tests\", linter.rules, linter.environments);\n \n             assert.doesNotThrow(fn);\n         });\n@@ -118,7 +118,7 @@ describe(\"Validator\", () => {\n                     rules: {}\n                 },\n                 \"tests\",\n-                linter.getRules(),\n+                linter.rules,\n                 linter.environments\n             );\n \n@@ -132,7 +132,7 @@ describe(\"Validator\", () => {\n                     foo: true\n                 },\n                 \"tests\",\n-                linter.getRules(),\n+                linter.rules,\n                 linter.environments\n             );\n \n@@ -141,35 +141,35 @@ describe(\"Validator\", () => {\n \n         describe(\"root\", () => {\n             it(\"should throw with a string value\", () => {\n-                const fn = validator.validate.bind(null, { root: \"true\" }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { root: \"true\" }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"root\\\" is the wrong type (expected boolean but got `\\\"true\\\"`).\");\n             });\n \n             it(\"should throw with a numeric value\", () => {\n-                const fn = validator.validate.bind(null, { root: 0 }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { root: 0 }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"root\\\" is the wrong type (expected boolean but got `0`).\");\n             });\n         });\n \n         describe(\"globals\", () => {\n             it(\"should throw with a string value\", () => {\n-                const fn = validator.validate.bind(null, { globals: \"jQuery\" }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { globals: \"jQuery\" }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"globals\\\" is the wrong type (expected object but got `\\\"jQuery\\\"`).\");\n             });\n \n             it(\"should throw with an array value\", () => {\n-                const fn = validator.validate.bind(null, { globals: [\"jQuery\"] }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { globals: [\"jQuery\"] }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"globals\\\" is the wrong type (expected object but got `[\\\"jQuery\\\"]`).\");\n             });\n         });\n \n         describe(\"parser\", () => {\n             it(\"should not throw with a null value\", () => {\n-                const fn = validator.validate.bind(null, { parser: null }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { parser: null }, null, linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n@@ -178,31 +178,31 @@ describe(\"Validator\", () => {\n         describe(\"env\", () => {\n \n             it(\"should throw with an array environment\", () => {\n-                const fn = validator.validate.bind(null, { env: [] }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { env: [] }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"env\\\" is the wrong type (expected object but got `[]`).\");\n             });\n \n             it(\"should throw with a primitive environment\", () => {\n-                const fn = validator.validate.bind(null, { env: 1 }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { env: 1 }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"env\\\" is the wrong type (expected object but got `1`).\");\n             });\n \n             it(\"should catch invalid environments\", () => {\n-                const fn = validator.validate.bind(null, { env: { browser: true, invalid: true } }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { env: { browser: true, invalid: true } }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Environment key \\\"invalid\\\" is unknown\\n\");\n             });\n \n             it(\"should catch disabled invalid environments\", () => {\n-                const fn = validator.validate.bind(null, { env: { browser: true, invalid: false } }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { env: { browser: true, invalid: false } }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Environment key \\\"invalid\\\" is unknown\\n\");\n             });\n \n             it(\"should do nothing with an undefined environment\", () => {\n-                const fn = validator.validate.bind(null, {}, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, {}, null, linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n@@ -211,61 +211,61 @@ describe(\"Validator\", () => {\n \n         describe(\"plugins\", () => {\n             it(\"should not throw with an empty array\", () => {\n-                const fn = validator.validate.bind(null, { plugins: [] }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { plugins: [] }, null, linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw with a string\", () => {\n-                const fn = validator.validate.bind(null, { plugins: \"react\" }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { plugins: \"react\" }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"plugins\\\" is the wrong type (expected array but got `\\\"react\\\"`).\");\n             });\n         });\n \n         describe(\"settings\", () => {\n             it(\"should not throw with an empty object\", () => {\n-                const fn = validator.validate.bind(null, { settings: {} }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { settings: {} }, null, linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw with an array\", () => {\n-                const fn = validator.validate.bind(null, { settings: [\"foo\"] }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { settings: [\"foo\"] }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"settings\\\" is the wrong type (expected object but got `[\\\"foo\\\"]`).\");\n             });\n         });\n \n         describe(\"extends\", () => {\n             it(\"should not throw with an empty array\", () => {\n-                const fn = validator.validate.bind(null, { extends: [] }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { extends: [] }, null, linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should not throw with a string\", () => {\n-                const fn = validator.validate.bind(null, { extends: \"react\" }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { extends: \"react\" }, null, linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw with an object\", () => {\n-                const fn = validator.validate.bind(null, { extends: {} }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { extends: {} }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"extends\\\" is the wrong type (expected string/array but got `{}`).\");\n             });\n         });\n \n         describe(\"parserOptions\", () => {\n             it(\"should not throw with an empty object\", () => {\n-                const fn = validator.validate.bind(null, { parserOptions: {} }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { parserOptions: {} }, null, linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw with an array\", () => {\n-                const fn = validator.validate.bind(null, { parserOptions: [\"foo\"] }, null, linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { parserOptions: [\"foo\"] }, null, linter.rules, linter.environments);\n \n                 assert.throws(fn, \"Property \\\"parserOptions\\\" is the wrong type (expected object but got `[\\\"foo\\\"]`).\");\n             });\n@@ -274,127 +274,127 @@ describe(\"Validator\", () => {\n         describe(\"rules\", () => {\n \n             it(\"should do nothing with an empty rules object\", () => {\n-                const fn = validator.validate.bind(null, { rules: {} }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: {} }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config with rules\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [2, \"second\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [2, \"second\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is off\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"off\", \"second\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"off\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with an invalid config when severity is off\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-required-options-rule\": \"off\" } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-required-options-rule\": \"off\" } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with an invalid config when severity is an array with 'off'\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-required-options-rule\": [\"off\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-required-options-rule\": [\"off\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is warn\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"warn\", \"second\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"warn\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is error\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"error\", \"second\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"error\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is Off\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Off\", \"second\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Off\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is Warn\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Warn\", \"second\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Warn\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should do nothing with a valid config when severity is Error\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Error\", \"second\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [\"Error\", \"second\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should catch invalid rule options\", () => {\n-                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [3, \"third\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-rule\": [3, \"third\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '3').\\n\");\n             });\n \n             it(\"should allow for rules with no options\", () => {\n                 linter.defineRule(\"mock-no-options-rule\", mockNoOptionsRule);\n \n-                const fn = validator.validate.bind(null, { rules: { \"mock-no-options-rule\": 2 } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-no-options-rule\": 2 } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should not allow options for rules with no options\", () => {\n                 linter.defineRule(\"mock-no-options-rule\", mockNoOptionsRule);\n \n-                const fn = validator.validate.bind(null, { rules: { \"mock-no-options-rule\": [2, \"extra\"] } }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { rules: { \"mock-no-options-rule\": [2, \"extra\"] } }, \"tests\", linter.rules, linter.environments);\n \n                 assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-no-options-rule\\\" is invalid:\\n\\tValue \\\"extra\\\" should NOT have more than 0 items.\\n\");\n             });\n         });\n \n         describe(\"overrides\", () => {\n             it(\"should not throw with an empty overrides array\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [] }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [] }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should not throw with a valid overrides array\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", rules: {} }] }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", rules: {} }] }, \"tests\", linter.rules, linter.environments);\n \n                 assert.doesNotThrow(fn);\n             });\n \n             it(\"should throw if override does not specify files\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ rules: {} }] }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ rules: {} }] }, \"tests\", linter.rules, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- \\\"overrides[0]\\\" should have required property 'files'. Value: {\\\"rules\\\":{}}.\\n\");\n             });\n \n             it(\"should throw if override has an empty files array\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: [] }] }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: [] }] }, \"tests\", linter.rules, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- Property \\\"overrides[0].files\\\" is the wrong type (expected string but got `[]`).\\n\\t- \\\"overrides[0].files\\\" should NOT have less than 1 items. Value: [].\\n\\t- \\\"overrides[0].files\\\" should match exactly one schema in oneOf. Value: [].\\n\");\n             });\n \n             it(\"should throw if override has nested overrides\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", overrides: [{ files: \"*\", rules: {} }] }] }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", overrides: [{ files: \"*\", rules: {} }] }] }, \"tests\", linter.rules, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- Unexpected top-level property \\\"overrides[0].overrides\\\".\\n\");\n             });\n \n             it(\"should throw if override extends\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", extends: \"eslint-recommended\" }] }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", extends: \"eslint-recommended\" }] }, \"tests\", linter.rules, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- Unexpected top-level property \\\"overrides[0].extends\\\".\\n\");\n             });\n \n             it(\"should throw if override tries to set root\", () => {\n-                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", root: \"true\" }] }, \"tests\", linter.getRules(), linter.environments);\n+                const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", root: \"true\" }] }, \"tests\", linter.rules, linter.environments);\n \n                 assert.throws(fn, \"ESLint configuration in tests is invalid:\\n\\t- Unexpected top-level property \\\"overrides[0].root\\\".\\n\");\n             });\n@@ -405,12 +405,12 @@ describe(\"Validator\", () => {\n     describe(\"getRuleOptionsSchema\", () => {\n \n         it(\"should return null for a missing rule\", () => {\n-            assert.equal(validator.getRuleOptionsSchema(linter.rules.get(\"non-existent-rule\")), null);\n+            assert.equal(validator.getRuleOptionsSchema(\"non-existent-rule\", linter.rules), null);\n         });\n \n         it(\"should not modify object schema\", () => {\n             linter.defineRule(\"mock-object-rule\", mockObjectRule);\n-            assert.deepEqual(validator.getRuleOptionsSchema(linter.rules.get(\"mock-object-rule\")), {\n+            assert.deepEqual(validator.getRuleOptionsSchema(\"mock-object-rule\", linter.rules), {\n                 enum: [\"first\", \"second\"]\n             });\n         });\n@@ -420,43 +420,43 @@ describe(\"Validator\", () => {\n     describe(\"validateRuleOptions\", () => {\n \n         it(\"should throw for incorrect warning level number\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", 3, \"tests\");\n+            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", 3, \"tests\", linter.rules);\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '3').\\n\");\n         });\n \n         it(\"should throw for incorrect warning level string\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", \"booya\", \"tests\");\n+            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", \"booya\", \"tests\", linter.rules);\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '\\\"booya\\\"').\\n\");\n         });\n \n         it(\"should throw for invalid-type warning level\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", [[\"error\"]], \"tests\");\n+            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", [[\"error\"]], \"tests\", linter.rules);\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '[ \\\"error\\\" ]').\\n\");\n         });\n \n         it(\"should only check warning level for nonexistent rules\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"non-existent-rule\"), \"non-existent-rule\", [3, \"foobar\"], \"tests\");\n+            const fn = validator.validateRuleOptions.bind(null, \"non-existent-rule\", [3, \"foobar\"], \"tests\", linter.rules);\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"non-existent-rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '3').\\n\");\n         });\n \n         it(\"should only check warning level for plugin rules\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"plugin/rule\"), \"plugin/rule\", 3, \"tests\");\n+            const fn = validator.validateRuleOptions.bind(null, \"plugin/rule\", 3, \"tests\", linter.rules);\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"plugin/rule\\\" is invalid:\\n\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '3').\\n\");\n         });\n \n         it(\"should throw for incorrect configuration values\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", [2, \"frist\"], \"tests\");\n+            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", [2, \"frist\"], \"tests\", linter.rules);\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tValue \\\"frist\\\" should be equal to one of the allowed values.\\n\");\n         });\n \n         it(\"should throw for too many configuration values\", () => {\n-            const fn = validator.validateRuleOptions.bind(null, linter.rules.get(\"mock-rule\"), \"mock-rule\", [2, \"first\", \"second\"], \"tests\");\n+            const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", [2, \"first\", \"second\"], \"tests\", linter.rules);\n \n             assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tValue \\\"first,second\\\" should NOT have more than 1 items.\\n\");\n         });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/8763","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/8763/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/8763/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/8763/events","html_url":"https://github.com/eslint/eslint/pull/8763","id":236756225,"node_id":"MDExOlB1bGxSZXF1ZXN0MTI2MjA4NTM4","number":8763,"title":"Chore: Only instantiate fileEntryCache when cache flage set (perf)","user":{"login":"gyandeeps","id":5554486,"node_id":"MDQ6VXNlcjU1NTQ0ODY=","avatar_url":"https://avatars.githubusercontent.com/u/5554486?v=4","gravatar_id":"","url":"https://api.github.com/users/gyandeeps","html_url":"https://github.com/gyandeeps","followers_url":"https://api.github.com/users/gyandeeps/followers","following_url":"https://api.github.com/users/gyandeeps/following{/other_user}","gists_url":"https://api.github.com/users/gyandeeps/gists{/gist_id}","starred_url":"https://api.github.com/users/gyandeeps/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gyandeeps/subscriptions","organizations_url":"https://api.github.com/users/gyandeeps/orgs","repos_url":"https://api.github.com/users/gyandeeps/repos","events_url":"https://api.github.com/users/gyandeeps/events{/privacy}","received_events_url":"https://api.github.com/users/gyandeeps/received_events","type":"User","site_admin":false},"labels":[{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2017-06-19T00:38:50Z","updated_at":"2018-02-06T20:56:18Z","closed_at":"2017-06-21T22:13:32Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/8763","html_url":"https://github.com/eslint/eslint/pull/8763","diff_url":"https://github.com/eslint/eslint/pull/8763.diff","patch_url":"https://github.com/eslint/eslint/pull/8763.patch","merged_at":"2017-06-21T22:13:32Z"},"body":"**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[ x ] Other, please explain:\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (http://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\n* Only instantiate `fileEntryCache` class when the  `cache` flag is set inside `CLIEngine` constructor\r\n* We were calling `file.distroy` after every file runn when the `cache: false`. Move that to only run once per `executeOnFiles`.\r\n\r\n<details>\r\n  <summary>Perf: Before</summary>\r\n  <p>\r\n\r\n```sh\r\nLoading:\r\n  Load performance Run #1:  205.960476ms\r\n  Load performance Run #2:  208.34978ms\r\n  Load performance Run #3:  218.538645ms\r\n  Load performance Run #4:  227.442409ms\r\n  Load performance Run #5:  214.86766ms\r\n\r\n  Load Performance median:  214.86766ms\r\n\r\n\r\nSingle File:\r\n  CPU Speed is 2394 with multiplier 13000000\r\n  Performance Run #1:  5697.026135ms\r\n  Performance Run #2:  5858.647406ms\r\n  Performance Run #3:  5737.508751ms\r\n  Performance Run #4:  5771.058235ms\r\n  Performance Run #5:  5696.607034ms\r\n\r\n  Performance budget exceeded: 5737.508751ms (limit: 5430.242272347536ms)\r\n\r\n\r\nMulti Files (0 files):\r\n  CPU Speed is 2394 with multiplier 39000000\r\n  Performance Run #1:  14013.649444ms\r\n  Performance Run #2:  14370.318308ms\r\n  Performance Run #3:  14275.008692ms\r\n  Performance Run #4:  14162.922197ms\r\n  Performance Run #5:  14093.300495ms\r\n\r\n  Performance budget ok:  14162.922197ms (limit: 16290.726817042607ms)\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n\r\n<details>\r\n  <summary>Perf: After</summary>\r\n  <p>\r\n\r\n```sh\r\nLoading:\r\n  Load performance Run #1:  221.480052ms\r\n  Load performance Run #2:  209.718274ms\r\n  Load performance Run #3:  228.439271ms\r\n  Load performance Run #4:  254.376935ms\r\n  Load performance Run #5:  223.951894ms\r\n\r\n  Load Performance median:  223.951894ms\r\n\r\n\r\nSingle File:\r\n  CPU Speed is 2394 with multiplier 13000000\r\n  Performance Run #1:  5810.71505ms\r\n  Performance Run #2:  5655.586ms\r\n  Performance Run #3:  5657.586994ms\r\n  Performance Run #4:  5686.535773ms\r\n  Performance Run #5:  5680.692304ms\r\n\r\n  Performance budget exceeded: 5680.692304ms (limit: 5430.242272347536ms)\r\n\r\n\r\nMulti Files (0 files):\r\n  CPU Speed is 2394 with multiplier 39000000\r\n  Performance Run #1:  13652.665121ms\r\n  Performance Run #2:  14079.418835ms\r\n  Performance Run #3:  14312.056817ms\r\n  Performance Run #4:  13719.907353ms\r\n  Performance Run #5:  14058.561277ms\r\n\r\n  Performance budget ok:  14058.561277ms (limit: 16290.726817042607ms)\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n* Not much difference in numbers.\r\n* I found this while I was trying to learn how to profile nodejs project on chrome. so I used `eslint` as example. 😄 \r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nNothing specific.\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/8763/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/8763/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"8d5ab065fe5b7cce06ca0e779d638c883dfa6b37","filename":"lib/cli-engine.js","status":"modified","additions":16,"deletions":11,"changes":27,"blob_url":"https://github.com/eslint/eslint/blob/d84f85bf469dbfcd81eab4d2c523a21c21bacd50/lib%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/d84f85bf469dbfcd81eab4d2c523a21c21bacd50/lib%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fcli-engine.js?ref=d84f85bf469dbfcd81eab4d2c523a21c21bacd50","patch":"@@ -398,15 +398,17 @@ class CLIEngine {\n         this.options = options;\n         this.linter = new Linter();\n \n-        const cacheFile = getCacheFile(this.options.cacheLocation || this.options.cacheFile, this.options.cwd);\n-\n-        /**\n-         * Cache used to avoid operating on files that haven't changed since the\n-         * last successful execution (e.g., file passed linting with no errors and\n-         * no warnings).\n-         * @type {Object}\n-         */\n-        this._fileCache = fileEntryCache.create(cacheFile);\n+        if (options.cache) {\n+            const cacheFile = getCacheFile(this.options.cacheLocation || this.options.cacheFile, this.options.cwd);\n+\n+            /**\n+             * Cache used to avoid operating on files that haven't changed since the\n+             * last successful execution (e.g., file passed linting with no errors and\n+             * no warnings).\n+             * @type {Object}\n+             */\n+            this._fileCache = fileEntryCache.create(cacheFile);\n+        }\n \n         // load in additional rules\n         if (this.options.rulePaths) {\n@@ -495,6 +497,11 @@ class CLIEngine {\n             fileCache = this._fileCache,\n             configHelper = this.config;\n         let prevConfig; // the previous configuration used\n+        const cacheFile = getCacheFile(this.options.cacheLocation || this.options.cacheFile, this.options.cwd);\n+\n+        if (!options.cache && fs.existsSync(cacheFile)) {\n+            fs.unlinkSync(cacheFile);\n+        }\n \n         /**\n          * Calculates the hash of the config file used to validate a given file\n@@ -570,8 +577,6 @@ class CLIEngine {\n                     // move to the next file\n                     return;\n                 }\n-            } else {\n-                fileCache.destroy();\n             }\n \n             debug(`Processing ${filename}`);"},{"sha":"fcc80b876bbc67c74b4f0e39bb9985379686852f","filename":"tests/lib/cli-engine.js","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/d84f85bf469dbfcd81eab4d2c523a21c21bacd50/tests%2Flib%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/d84f85bf469dbfcd81eab4d2c523a21c21bacd50/tests%2Flib%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fcli-engine.js?ref=d84f85bf469dbfcd81eab4d2c523a21c21bacd50","patch":"@@ -1324,6 +1324,8 @@ describe(\"CLIEngine\", () => {\n             fakeFS.realpathSync = function() {\n                 throw new Error(\"this error should not happen\");\n             };\n+            fakeFS.existsSync = fs.existsSync;\n+            fakeFS.unlinkSync = fs.unlinkSync;\n \n             engine = new LocalCLIEngine({\n                 ignorePattern: \"tests\""}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/8706","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/8706/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/8706/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/8706/events","html_url":"https://github.com/eslint/eslint/pull/8706","id":235004396,"node_id":"MDExOlB1bGxSZXF1ZXN0MTI0OTkxODE4","number":8706,"title":"Chore: Cache fs reads in ignored-paths (fixes #8363)","user":{"login":"VictorHom","id":3211873,"node_id":"MDQ6VXNlcjMyMTE4NzM=","avatar_url":"https://avatars.githubusercontent.com/u/3211873?v=4","gravatar_id":"","url":"https://api.github.com/users/VictorHom","html_url":"https://github.com/VictorHom","followers_url":"https://api.github.com/users/VictorHom/followers","following_url":"https://api.github.com/users/VictorHom/following{/other_user}","gists_url":"https://api.github.com/users/VictorHom/gists{/gist_id}","starred_url":"https://api.github.com/users/VictorHom/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/VictorHom/subscriptions","organizations_url":"https://api.github.com/users/VictorHom/orgs","repos_url":"https://api.github.com/users/VictorHom/repos","events_url":"https://api.github.com/users/VictorHom/events{/privacy}","received_events_url":"https://api.github.com/users/VictorHom/received_events","type":"User","site_admin":false},"labels":[{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2017-06-10T13:59:32Z","updated_at":"2018-02-06T20:57:53Z","closed_at":"2017-06-13T02:27:24Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/8706","html_url":"https://github.com/eslint/eslint/pull/8706","diff_url":"https://github.com/eslint/eslint/pull/8706.diff","patch_url":"https://github.com/eslint/eslint/pull/8706.patch","merged_at":"2017-06-13T02:27:24Z"},"body":"**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[X] Other, please explain:\r\nPer #8363 , this pr introduces caching fs reads to the ignored-paths.js file. This is to reduce the synchronous reads which would affect performance.\r\n\r\n\r\n**What changes did you make? (Give an overview)**\r\nPer #8363 , this pr introduces caching fs reads to the ignored-paths.js file. This is to reduce the synchronous reads which would affect performance.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\nconfig-file.js - I am unclear on how to verify the additional reads since #8363 also mentions similar repeats in this file.\r\n\r\nAlso should there be any tests related to caching?\r\n\r\nAny suggestions on on refactoring or any other approaches is appreciated.\r\n\r\nLet me know what you think and how I can make better.\r\n\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/8706/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/8706/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"d2d89bd9895b6ce3a6a7b583d2a605a3b2d6b8c2","filename":"lib/ignored-paths.js","status":"modified","additions":26,"deletions":14,"changes":40,"blob_url":"https://github.com/eslint/eslint/blob/463af8225a390f0da3064aa5184bde3c8da28481/lib%2Fignored-paths.js","raw_url":"https://github.com/eslint/eslint/raw/463af8225a390f0da3064aa5184bde3c8da28481/lib%2Fignored-paths.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fignored-paths.js?ref=463af8225a390f0da3064aa5184bde3c8da28481","patch":"@@ -37,7 +37,6 @@ const DEFAULT_OPTIONS = {\n     cwd: process.cwd()\n };\n \n-\n //------------------------------------------------------------------------------\n // Helpers\n //------------------------------------------------------------------------------\n@@ -80,6 +79,7 @@ class IgnoredPaths {\n      */\n     constructor(options) {\n         options = mergeDefaultOptions(options);\n+        this.cache = {};\n \n         /**\n          * add pattern to node-ignore instance\n@@ -91,17 +91,6 @@ class IgnoredPaths {\n             return ig.addPattern(pattern);\n         }\n \n-        /**\n-         * add ignore file to node-ignore instance\n-         * @param {Object} ig, instance of node-ignore\n-         * @param {string} filepath, file to add to ig\n-         * @returns {array} raw ignore rules\n-         */\n-        function addIgnoreFile(ig, filepath) {\n-            ig.ignoreFiles.push(filepath);\n-            return ig.add(fs.readFileSync(filepath, \"utf8\"));\n-        }\n-\n         this.defaultPatterns = [].concat(DEFAULT_IGNORE_DIRS, options.patterns || []);\n         this.baseDir = options.cwd;\n \n@@ -155,8 +144,8 @@ class IgnoredPaths {\n             if (ignorePath) {\n                 debug(`Adding ${ignorePath}`);\n                 this.baseDir = path.dirname(path.resolve(options.cwd, ignorePath));\n-                addIgnoreFile(this.ig.custom, ignorePath);\n-                addIgnoreFile(this.ig.default, ignorePath);\n+                this.addIgnoreFile(this.ig.custom, ignorePath);\n+                this.addIgnoreFile(this.ig.default, ignorePath);\n             }\n \n             if (options.ignorePattern) {\n@@ -168,6 +157,29 @@ class IgnoredPaths {\n         this.options = options;\n     }\n \n+    /**\n+     * read ignore filepath\n+     * @param {string} filePath, file to add to ig\n+     * @returns {array} raw ignore rules\n+     */\n+    readIgnoreFile(filePath) {\n+        if (typeof this.cache[filePath] === \"undefined\") {\n+            this.cache[filePath] = fs.readFileSync(filePath, \"utf8\");\n+        }\n+        return this.cache[filePath];\n+    }\n+\n+    /**\n+     * add ignore file to node-ignore instance\n+     * @param {Object} ig, instance of node-ignore\n+     * @param {string} filePath, file to add to ig\n+     * @returns {array} raw ignore rules\n+     */\n+    addIgnoreFile(ig, filePath) {\n+        ig.ignoreFiles.push(filePath);\n+        return ig.add(this.readIgnoreFile(filePath));\n+    }\n+\n     /**\n      * Determine whether a file path is included in the default or custom ignore patterns\n      * @param {string} filepath Path to check"},{"sha":"1631d37f41c892e8542c4c4c2fa279a1f9769248","filename":"tests/lib/ignored-paths.js","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/eslint/eslint/blob/463af8225a390f0da3064aa5184bde3c8da28481/tests%2Flib%2Fignored-paths.js","raw_url":"https://github.com/eslint/eslint/raw/463af8225a390f0da3064aa5184bde3c8da28481/tests%2Flib%2Fignored-paths.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fignored-paths.js?ref=463af8225a390f0da3064aa5184bde3c8da28481","patch":"@@ -164,6 +164,30 @@ describe(\"IgnoredPaths\", () => {\n                 )\n             );\n         });\n+\n+\n+    });\n+\n+    describe(\"caching file reads\", () => {\n+\n+        let readFileSyncCount;\n+\n+        before(() => {\n+            readFileSyncCount = sinon.spy(fs, \"readFileSync\");\n+        });\n+\n+        after(() => {\n+            readFileSyncCount.restore();\n+        });\n+\n+        it(\"should cache readFileSync on same file paths\", () => {\n+            const ignoreFilePath = getFixturePath(\".eslintignore\");\n+            const ignoredPaths = new IgnoredPaths({ ignore: true, cwd: getFixturePath() });\n+\n+            ignoredPaths.readIgnoreFile(ignoreFilePath);\n+            assert.isTrue(ignoredPaths.contains(ignoreFilePath));\n+            sinon.assert.calledOnce(readFileSyncCount);\n+        });\n     });\n \n     describe(\"initialization with ignorePattern\", () => {"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/9008","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/9008/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/9008/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/9008/events","html_url":"https://github.com/eslint/eslint/pull/9008","id":245585458,"node_id":"MDExOlB1bGxSZXF1ZXN0MTMyNDE2NjE4","number":9008,"title":"Fix: refactor no-multi-spaces to avoid regex backtracking (fixes #9001)","user":{"login":"not-an-aardvark","id":11638619,"node_id":"MDQ6VXNlcjExNjM4NjE5","avatar_url":"https://avatars.githubusercontent.com/u/11638619?v=4","gravatar_id":"","url":"https://api.github.com/users/not-an-aardvark","html_url":"https://github.com/not-an-aardvark","followers_url":"https://api.github.com/users/not-an-aardvark/followers","following_url":"https://api.github.com/users/not-an-aardvark/following{/other_user}","gists_url":"https://api.github.com/users/not-an-aardvark/gists{/gist_id}","starred_url":"https://api.github.com/users/not-an-aardvark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-an-aardvark/subscriptions","organizations_url":"https://api.github.com/users/not-an-aardvark/orgs","repos_url":"https://api.github.com/users/not-an-aardvark/repos","events_url":"https://api.github.com/users/not-an-aardvark/events{/privacy}","received_events_url":"https://api.github.com/users/not-an-aardvark/received_events","type":"User","site_admin":false},"labels":[{"id":45711350,"node_id":"MDU6TGFiZWw0NTcxMTM1MA==","url":"https://api.github.com/repos/eslint/eslint/labels/bug","name":"bug","color":"fc2929","default":true,"description":"ESLint is working incorrectly"},{"id":45798639,"node_id":"MDU6TGFiZWw0NTc5ODYzOQ==","url":"https://api.github.com/repos/eslint/eslint/labels/rule","name":"rule","color":"fbca04","default":false,"description":"Relates to ESLint's core rules"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-07-26T02:11:14Z","updated_at":"2018-02-06T20:49:44Z","closed_at":"2017-07-28T03:01:48Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/9008","html_url":"https://github.com/eslint/eslint/pull/9008","diff_url":"https://github.com/eslint/eslint/pull/9008.diff","patch_url":"https://github.com/eslint/eslint/pull/9008.patch","merged_at":"2017-07-28T03:01:48Z"},"body":"<!--\r\n    ESLint adheres to the [JS Foundation Code of Conduct](https://js.foundation/community/code-of-conduct).\r\n-->\r\n\r\n**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[x] Bug fix (https://github.com/eslint/eslint/issues/9001)\r\n\r\n<!--\r\n    If the item you've checked above has a template, please paste the template questions below and answer them. (If this pull request is addressing an issue, you can just paste a link to the issue here instead.)\r\n-->\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (http://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis refactors the `no-multi-spaces` rule to compare spacing between tokens, rather than matching a regex against the source text. This prevents performance issues resulting from quadratic-time regex matching (https://github.com/eslint/eslint/issues/9001). This also allows the rule to be simpler because by only evaluating spacing between tokens, it no longer needs to specifically exclude spacing in comments.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nNothing in particular","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/9008/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/9008/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"73e514335c43038d941595be0146f69f14c7f638","filename":"lib/rules/no-multi-spaces.js","status":"modified","additions":48,"deletions":113,"changes":161,"blob_url":"https://github.com/eslint/eslint/blob/fd13cef50c466c5534259c4ecda2a09c3cd5b35c/lib%2Frules%2Fno-multi-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/fd13cef50c466c5534259c4ecda2a09c3cd5b35c/lib%2Frules%2Fno-multi-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-multi-spaces.js?ref=fd13cef50c466c5534259c4ecda2a09c3cd5b35c","patch":"@@ -44,68 +44,11 @@ module.exports = {\n     },\n \n     create(context) {\n-\n-        // the index of the last comment that was checked\n-        const sourceCode = context.getSourceCode(),\n-            exceptions = { Property: true },\n-            options = context.options[0] || {},\n-            ignoreEOLComments = options.ignoreEOLComments;\n-        let hasExceptions = true,\n-            lastCommentIndex = 0;\n-\n-        if (options && options.exceptions) {\n-            Object.keys(options.exceptions).forEach(key => {\n-                if (options.exceptions[key]) {\n-                    exceptions[key] = true;\n-                } else {\n-                    delete exceptions[key];\n-                }\n-            });\n-            hasExceptions = Object.keys(exceptions).length > 0;\n-        }\n-\n-        /**\n-         * Checks if a given token is the last token of the line or not.\n-         * @param {Token} token The token to check.\n-         * @returns {boolean} Whether or not a token is at the end of the line it occurs in.\n-         * @private\n-         */\n-        function isLastTokenOfLine(token) {\n-            const nextToken = sourceCode.getTokenAfter(token, { includeComments: true });\n-\n-            // nextToken is null if the comment is the last token in the program.\n-            if (!nextToken) {\n-                return true;\n-            }\n-\n-            return !astUtils.isTokenOnSameLine(token, nextToken);\n-        }\n-\n-        /**\n-         * Determines if a given source index is in a comment or not by checking\n-         * the index against the comment range. Since the check goes straight\n-         * through the file, once an index is passed a certain comment, we can\n-         * go to the next comment to check that.\n-         * @param {int} index The source index to check.\n-         * @param {ASTNode[]} comments An array of comment nodes.\n-         * @returns {boolean} True if the index is within a comment, false if not.\n-         * @private\n-         */\n-        function isIndexInComment(index, comments) {\n-            while (lastCommentIndex < comments.length) {\n-                const comment = comments[lastCommentIndex];\n-\n-                if (comment.range[0] < index && index < comment.range[1]) {\n-                    return true;\n-                } else if (index > comment.range[1]) {\n-                    lastCommentIndex++;\n-                } else {\n-                    break;\n-                }\n-            }\n-\n-            return false;\n-        }\n+        const sourceCode = context.getSourceCode();\n+        const options = context.options[0] || {};\n+        const ignoreEOLComments = options.ignoreEOLComments;\n+        const exceptions = Object.assign({ Property: true }, options.exceptions);\n+        const hasExceptions = Object.keys(exceptions).filter(key => exceptions[key]).length > 0;\n \n         /**\n          * Formats value of given comment token for error message by truncating its length.\n@@ -121,70 +64,62 @@ module.exports = {\n             return valueLines.length === 1 && value.length <= 12 ? value : formattedValue;\n         }\n \n-        /**\n-         * Creates a fix function that removes the multiple spaces between the two tokens\n-         * @param {Token} leftToken left token\n-         * @param {Token} rightToken right token\n-         * @returns {Function} fix function\n-         * @private\n-         */\n-        function createFix(leftToken, rightToken) {\n-            return function(fixer) {\n-                return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \" \");\n-            };\n-        }\n-\n         //--------------------------------------------------------------------------\n         // Public\n         //--------------------------------------------------------------------------\n \n         return {\n             Program() {\n+                sourceCode.tokensAndComments.forEach((leftToken, leftIndex, tokensAndComments) => {\n+                    if (leftIndex === tokensAndComments.length - 1) {\n+                        return;\n+                    }\n+                    const rightToken = tokensAndComments[leftIndex + 1];\n \n-                const source = sourceCode.getText(),\n-                    allComments = sourceCode.getAllComments(),\n-                    pattern = /[^\\s].*? {2,}/g;\n-                let parent;\n-\n-                while (pattern.test(source)) {\n-\n-                    // do not flag anything inside of comments\n-                    if (!isIndexInComment(pattern.lastIndex, allComments)) {\n-\n-                        const token = sourceCode.getTokenByRangeStart(pattern.lastIndex, { includeComments: true });\n-\n-                        if (token) {\n-                            if (ignoreEOLComments && astUtils.isCommentToken(token) && isLastTokenOfLine(token)) {\n-                                return;\n-                            }\n+                    // Ignore tokens that have less than 2 spaces between them or are on different lines\n+                    if (leftToken.range[1] + 2 > rightToken.range[0] || leftToken.loc.end.line < rightToken.loc.start.line) {\n+                        return;\n+                    }\n \n-                            const previousToken = sourceCode.getTokenBefore(token, { includeComments: true });\n+                    // Ignore comments that are the last token on their line if `ignoreEOLComments` is active.\n+                    if (\n+                        ignoreEOLComments &&\n+                        astUtils.isCommentToken(rightToken) &&\n+                        (\n+                            leftIndex === tokensAndComments.length - 2 ||\n+                            rightToken.loc.end.line < tokensAndComments[leftIndex + 2].loc.start.line\n+                        )\n+                    ) {\n+                        return;\n+                    }\n \n-                            if (hasExceptions) {\n-                                parent = sourceCode.getNodeByRangeIndex(pattern.lastIndex - 1);\n-                            }\n+                    // Ignore tokens that are in a node in the \"exceptions\" object\n+                    if (hasExceptions) {\n+                        const parentNode = sourceCode.getNodeByRangeIndex(rightToken.range[0] - 1);\n \n-                            if (!parent || !exceptions[parent.type]) {\n-                                let value = token.value;\n-\n-                                if (token.type === \"Block\") {\n-                                    value = `/*${formatReportedCommentValue(token)}*/`;\n-                                } else if (token.type === \"Line\") {\n-                                    value = `//${formatReportedCommentValue(token)}`;\n-                                }\n-\n-                                context.report({\n-                                    node: token,\n-                                    loc: token.loc.start,\n-                                    message: \"Multiple spaces found before '{{value}}'.\",\n-                                    data: { value },\n-                                    fix: createFix(previousToken, token)\n-                                });\n-                            }\n+                        if (parentNode && exceptions[parentNode.type]) {\n+                            return;\n                         }\n+                    }\n \n+                    let displayValue;\n+\n+                    if (rightToken.type === \"Block\") {\n+                        displayValue = `/*${formatReportedCommentValue(rightToken)}*/`;\n+                    } else if (rightToken.type === \"Line\") {\n+                        displayValue = `//${formatReportedCommentValue(rightToken)}`;\n+                    } else {\n+                        displayValue = rightToken.value;\n                     }\n-                }\n+\n+                    context.report({\n+                        node: rightToken,\n+                        loc: rightToken.loc.start,\n+                        message: \"Multiple spaces found before '{{displayValue}}'.\",\n+                        data: { displayValue },\n+                        fix: fixer => fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \" \")\n+                    });\n+                });\n             }\n         };\n "},{"sha":"d3dcf61f588a748064a1078a5778981449a82317","filename":"tests/lib/rules/no-multi-spaces.js","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/eslint/eslint/blob/fd13cef50c466c5534259c4ecda2a09c3cd5b35c/tests%2Flib%2Frules%2Fno-multi-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/fd13cef50c466c5534259c4ecda2a09c3cd5b35c/tests%2Flib%2Frules%2Fno-multi-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-multi-spaces.js?ref=fd13cef50c466c5534259c4ecda2a09c3cd5b35c","patch":"@@ -98,7 +98,10 @@ ruleTester.run(\"no-multi-spaces\", rule, {\n \n         \"foo\\n\\f  bar\",\n         \"foo\\n\\u2003  bar\",\n-        \"foo\\n \\f  bar\"\n+        \"foo\\n \\f  bar\",\n+\n+        // https://github.com/eslint/eslint/issues/9001\n+        \"a\".repeat(2e5)\n     ],\n \n     invalid: ["}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/8852","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/8852/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/8852/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/8852/events","html_url":"https://github.com/eslint/eslint/pull/8852","id":239943135,"node_id":"MDExOlB1bGxSZXF1ZXN0MTI4NDg1MzA4","number":8852,"title":"refactor: replace is-my-json-valid with Ajv","user":{"login":"gajus","id":973543,"node_id":"MDQ6VXNlcjk3MzU0Mw==","avatar_url":"https://avatars.githubusercontent.com/u/973543?v=4","gravatar_id":"","url":"https://api.github.com/users/gajus","html_url":"https://github.com/gajus","followers_url":"https://api.github.com/users/gajus/followers","following_url":"https://api.github.com/users/gajus/following{/other_user}","gists_url":"https://api.github.com/users/gajus/gists{/gist_id}","starred_url":"https://api.github.com/users/gajus/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gajus/subscriptions","organizations_url":"https://api.github.com/users/gajus/orgs","repos_url":"https://api.github.com/users/gajus/repos","events_url":"https://api.github.com/users/gajus/events{/privacy}","received_events_url":"https://api.github.com/users/gajus/received_events","type":"User","site_admin":false},"labels":[{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":16,"created_at":"2017-07-01T11:10:31Z","updated_at":"2018-02-06T20:53:53Z","closed_at":"2017-07-07T01:02:11Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/8852","html_url":"https://github.com/eslint/eslint/pull/8852","diff_url":"https://github.com/eslint/eslint/pull/8852.diff","patch_url":"https://github.com/eslint/eslint/pull/8852.patch","merged_at":"2017-07-07T01:02:11Z"},"body":"**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[ ] Documentation update\r\n[ ] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[X] Add something to the core\r\n[ ] Other, please explain:\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nReplace the ESLint rule validation library from is-my-json-valid to Ajv.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nWIP. Will ping when ready for review.\r\n\r\n**Motivation**\r\n\r\nAjv has more contributors, more downloads, more regular releases. https://npmcompare.com/compare/ajv,is-my-json-valid summarizes it quite well.\r\n\r\nFrom the technical perspective, the Ajv is the fastest and the most standard compliant (https://github.com/epoberezkin/ajv#performance) implementation of a JSON validator.\r\n\r\nIt is being used in webpack. I am using it in https://www.npmjs.com/package/table, https://www.npmjs.com/package/isomorphic-webpack, etc.\r\n\r\nFinally, Ajv was originally planned to be used for ESLint (https://github.com/eslint/eslint/pull/8295#issuecomment-296556738). The current error message formatting is a bit hacky as a result. Ajv (optionally) provides a custom error message abstraction via https://github.com/epoberezkin/ajv-errors.","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/8852/reactions","total_count":6,"+1":6,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/8852/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"85eb502a680ed053f5c1c86ebbf1ae78e452455d","filename":"conf/json-schema-schema.json","status":"removed","additions":0,"deletions":150,"changes":150,"blob_url":"https://github.com/eslint/eslint/blob/5c3ac8ed3c1d8f4b8f4cd82d7c5d79d88de26ec5/conf%2Fjson-schema-schema.json","raw_url":"https://github.com/eslint/eslint/raw/5c3ac8ed3c1d8f4b8f4cd82d7c5d79d88de26ec5/conf%2Fjson-schema-schema.json","contents_url":"https://api.github.com/repos/eslint/eslint/contents/conf%2Fjson-schema-schema.json?ref=5c3ac8ed3c1d8f4b8f4cd82d7c5d79d88de26ec5","patch":"@@ -1,150 +0,0 @@\n-{\n-    \"id\": \"http://json-schema.org/draft-04/schema#\",\n-    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n-    \"description\": \"Core schema meta-schema\",\n-    \"definitions\": {\n-        \"schemaArray\": {\n-            \"type\": \"array\",\n-            \"minItems\": 1,\n-            \"items\": { \"$ref\": \"#\" }\n-        },\n-        \"positiveInteger\": {\n-            \"type\": \"integer\",\n-            \"minimum\": 0\n-        },\n-        \"positiveIntegerDefault0\": {\n-            \"allOf\": [ { \"$ref\": \"#/definitions/positiveInteger\" }, { \"default\": 0 } ]\n-        },\n-        \"simpleTypes\": {\n-            \"enum\": [ \"array\", \"boolean\", \"integer\", \"null\", \"number\", \"object\", \"string\" ]\n-        },\n-        \"stringArray\": {\n-            \"type\": \"array\",\n-            \"items\": { \"type\": \"string\" },\n-            \"minItems\": 1,\n-            \"uniqueItems\": true\n-        }\n-    },\n-    \"type\": \"object\",\n-    \"properties\": {\n-        \"id\": {\n-            \"type\": \"string\",\n-            \"format\": \"uri\"\n-        },\n-        \"$schema\": {\n-            \"type\": \"string\",\n-            \"format\": \"uri\"\n-        },\n-        \"title\": {\n-            \"type\": \"string\"\n-        },\n-        \"description\": {\n-            \"type\": \"string\"\n-        },\n-        \"default\": {},\n-        \"multipleOf\": {\n-            \"type\": \"number\",\n-            \"minimum\": 0,\n-            \"exclusiveMinimum\": true\n-        },\n-        \"maximum\": {\n-            \"type\": \"number\"\n-        },\n-        \"exclusiveMaximum\": {\n-            \"type\": \"boolean\",\n-            \"default\": false\n-        },\n-        \"minimum\": {\n-            \"type\": \"number\"\n-        },\n-        \"exclusiveMinimum\": {\n-            \"type\": \"boolean\",\n-            \"default\": false\n-        },\n-        \"maxLength\": { \"$ref\": \"#/definitions/positiveInteger\" },\n-        \"minLength\": { \"$ref\": \"#/definitions/positiveIntegerDefault0\" },\n-        \"pattern\": {\n-            \"type\": \"string\",\n-            \"format\": \"regex\"\n-        },\n-        \"additionalItems\": {\n-            \"anyOf\": [\n-                { \"type\": \"boolean\" },\n-                { \"$ref\": \"#\" }\n-            ],\n-            \"default\": {}\n-        },\n-        \"items\": {\n-            \"anyOf\": [\n-                { \"$ref\": \"#\" },\n-                { \"$ref\": \"#/definitions/schemaArray\" }\n-            ],\n-            \"default\": {}\n-        },\n-        \"maxItems\": { \"$ref\": \"#/definitions/positiveInteger\" },\n-        \"minItems\": { \"$ref\": \"#/definitions/positiveIntegerDefault0\" },\n-        \"uniqueItems\": {\n-            \"type\": \"boolean\",\n-            \"default\": false\n-        },\n-        \"maxProperties\": { \"$ref\": \"#/definitions/positiveInteger\" },\n-        \"minProperties\": { \"$ref\": \"#/definitions/positiveIntegerDefault0\" },\n-        \"required\": { \"$ref\": \"#/definitions/stringArray\" },\n-        \"additionalProperties\": {\n-            \"anyOf\": [\n-                { \"type\": \"boolean\" },\n-                { \"$ref\": \"#\" }\n-            ],\n-            \"default\": {}\n-        },\n-        \"definitions\": {\n-            \"type\": \"object\",\n-            \"additionalProperties\": { \"$ref\": \"#\" },\n-            \"default\": {}\n-        },\n-        \"properties\": {\n-            \"type\": \"object\",\n-            \"additionalProperties\": { \"$ref\": \"#\" },\n-            \"default\": {}\n-        },\n-        \"patternProperties\": {\n-            \"type\": \"object\",\n-            \"additionalProperties\": { \"$ref\": \"#\" },\n-            \"default\": {}\n-        },\n-        \"dependencies\": {\n-            \"type\": \"object\",\n-            \"additionalProperties\": {\n-                \"anyOf\": [\n-                    { \"$ref\": \"#\" },\n-                    { \"$ref\": \"#/definitions/stringArray\" }\n-                ]\n-            }\n-        },\n-        \"enum\": {\n-            \"type\": \"array\",\n-            \"minItems\": 1,\n-            \"uniqueItems\": true\n-        },\n-        \"type\": {\n-            \"anyOf\": [\n-                { \"$ref\": \"#/definitions/simpleTypes\" },\n-                {\n-                    \"type\": \"array\",\n-                    \"items\": { \"$ref\": \"#/definitions/simpleTypes\" },\n-                    \"minItems\": 1,\n-                    \"uniqueItems\": true\n-                }\n-            ]\n-        },\n-        \"allOf\": { \"$ref\": \"#/definitions/schemaArray\" },\n-        \"anyOf\": { \"$ref\": \"#/definitions/schemaArray\" },\n-        \"oneOf\": { \"$ref\": \"#/definitions/schemaArray\" },\n-        \"not\": { \"$ref\": \"#\" }\n-    },\n-    \"dependencies\": {\n-        \"exclusiveMaximum\": [ \"maximum\" ],\n-        \"exclusiveMinimum\": [ \"minimum\" ]\n-    },\n-    \"default\": {}\n-}"},{"sha":"fb5a9656413095e3f0c1b96db6655ec19712f96e","filename":"lib/config/config-validator.js","status":"modified","additions":19,"deletions":14,"changes":33,"blob_url":"https://github.com/eslint/eslint/blob/df5c039cbc73514939e4da67497adab029bdb450/lib%2Fconfig%2Fconfig-validator.js","raw_url":"https://github.com/eslint/eslint/raw/df5c039cbc73514939e4da67497adab029bdb450/lib%2Fconfig%2Fconfig-validator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fconfig%2Fconfig-validator.js?ref=df5c039cbc73514939e4da67497adab029bdb450","patch":"@@ -9,7 +9,7 @@\n // Requirements\n //------------------------------------------------------------------------------\n \n-const schemaValidator = require(\"is-my-json-valid\"),\n+const ajv = require(\"../util/ajv\"),\n     configSchema = require(\"../../conf/config-schema.js\"),\n     util = require(\"util\");\n \n@@ -20,6 +20,7 @@ const validators = {\n //------------------------------------------------------------------------------\n // Private\n //------------------------------------------------------------------------------\n+let validateSchema;\n \n /**\n  * Gets a complete options schema for a rule.\n@@ -79,15 +80,15 @@ function validateRuleSchema(id, localOptions, rulesContext) {\n     const schema = getRuleOptionsSchema(id, rulesContext);\n \n     if (!validators.rules[id] && schema) {\n-        validators.rules[id] = schemaValidator(schema, { verbose: true });\n+        validators.rules[id] = ajv.compile(schema);\n     }\n \n     const validateRule = validators.rules[id];\n \n     if (validateRule) {\n         validateRule(localOptions);\n         if (validateRule.errors) {\n-            throw new Error(validateRule.errors.map(error => `\\tValue \"${error.value}\" ${error.message}.\\n`).join(\"\"));\n+            throw new Error(validateRule.errors.map(error => `\\tValue \"${error.data}\" ${error.message}.\\n`).join(\"\"));\n         }\n     }\n }\n@@ -158,19 +159,23 @@ function validateRules(rulesConfig, source, rulesContext) {\n  * @returns {string} Formatted error message\n  */\n function formatErrors(errors) {\n-\n     return errors.map(error => {\n-        if (error.message === \"has additional properties\") {\n-            return `Unexpected top-level property \"${error.value.replace(/^data\\./, \"\")}\"`;\n+        if (error.keyword === \"additionalProperties\") {\n+            const formattedPropertyPath = error.dataPath.length ? `${error.dataPath.slice(1)}.${error.params.additionalProperty}` : error.params.additionalProperty;\n+\n+            return `Unexpected top-level property \"${formattedPropertyPath}\"`;\n         }\n-        if (error.message === \"is the wrong type\") {\n-            const formattedField = error.field.replace(/^data\\./, \"\");\n-            const formattedExpectedType = typeof error.type === \"string\" ? error.type : error.type.join(\"/\");\n-            const formattedValue = JSON.stringify(error.value);\n+        if (error.keyword === \"type\") {\n+            const formattedField = error.dataPath.slice(1);\n+            const formattedExpectedType = Array.isArray(error.schema) ? error.schema.join(\"/\") : error.schema;\n+            const formattedValue = JSON.stringify(error.data);\n \n             return `Property \"${formattedField}\" is the wrong type (expected ${formattedExpectedType} but got \\`${formattedValue}\\`)`;\n         }\n-        return `\"${error.field.replace(/^(data\\.)/, \"\")}\" ${error.message}. Value: ${JSON.stringify(error.value)}`;\n+\n+        const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n+\n+        return `\"${field}\" ${error.message}. Value: ${JSON.stringify(error.data)}`;\n     }).map(message => `\\t- ${message}.\\n`).join(\"\");\n }\n \n@@ -181,10 +186,10 @@ function formatErrors(errors) {\n  * @returns {void}\n  */\n function validateConfigSchema(config, source) {\n-    const validator = schemaValidator(configSchema, { verbose: true });\n+    validateSchema = validateSchema || ajv.compile(configSchema);\n \n-    if (!validator(config)) {\n-        throw new Error(`${source}:\\n\\tESLint configuration is invalid:\\n${formatErrors(validator.errors)}`);\n+    if (!validateSchema(config)) {\n+        throw new Error(`${source}:\\n\\tESLint configuration is invalid:\\n${formatErrors(validateSchema.errors)}`);\n     }\n }\n "},{"sha":"fc6781fdcfc7ce5825a3b5b259862748afbec585","filename":"lib/testers/rule-tester.js","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/eslint/eslint/blob/df5c039cbc73514939e4da67497adab029bdb450/lib%2Ftesters%2Frule-tester.js","raw_url":"https://github.com/eslint/eslint/raw/df5c039cbc73514939e4da67497adab029bdb450/lib%2Ftesters%2Frule-tester.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ftesters%2Frule-tester.js?ref=df5c039cbc73514939e4da67497adab029bdb450","patch":"@@ -44,10 +44,9 @@ const lodash = require(\"lodash\"),\n     assert = require(\"assert\"),\n     util = require(\"util\"),\n     validator = require(\"../config/config-validator\"),\n-    validate = require(\"is-my-json-valid\"),\n+    ajv = require(\"../util/ajv\"),\n     Linter = require(\"../linter\"),\n     Environments = require(\"../config/environments\"),\n-    metaSchema = require(\"../../conf/json-schema-schema.json\"),\n     SourceCodeFixer = require(\"../util/source-code-fixer\");\n \n //------------------------------------------------------------------------------\n@@ -73,8 +72,6 @@ const RuleTesterParameters = [\n     \"output\"\n ];\n \n-const validateSchema = validate(metaSchema, { verbose: true });\n-\n const hasOwnProperty = Function.call.bind(Object.hasOwnProperty);\n \n /**\n@@ -318,12 +315,16 @@ class RuleTester {\n             const schema = validator.getRuleOptionsSchema(ruleName, linter.rules);\n \n             if (schema) {\n-                validateSchema(schema);\n+                ajv.validateSchema(schema);\n+\n+                if (ajv.errors) {\n+                    const errors = ajv.errors.map(error => {\n+                        const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n+\n+                        return `\\t${field}: ${error.message}`;\n+                    }).join(\"\\n\");\n \n-                if (validateSchema.errors) {\n-                    throw new Error([\n-                        `Schema for rule ${ruleName} is invalid:`\n-                    ].concat(validateSchema.errors.map(error => `\\t${error.field}: ${error.message}`)).join(\"\\n\"));\n+                    throw new Error([`Schema for rule ${ruleName} is invalid:`, errors]);\n                 }\n             }\n "},{"sha":"f9e8b9853569eab142fbd6157d011c295bb774f1","filename":"lib/util/ajv.js","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/eslint/eslint/blob/df5c039cbc73514939e4da67497adab029bdb450/lib%2Futil%2Fajv.js","raw_url":"https://github.com/eslint/eslint/raw/df5c039cbc73514939e4da67497adab029bdb450/lib%2Futil%2Fajv.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Futil%2Fajv.js?ref=df5c039cbc73514939e4da67497adab029bdb450","patch":"@@ -0,0 +1,29 @@\n+/**\n+ * @fileoverview The instance of Ajv validator.\n+ * @author Evgeny Poberezkin\n+ */\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+const Ajv = require(\"ajv\"),\n+    metaSchema = require(\"ajv/lib/refs/json-schema-draft-04.json\");\n+\n+//------------------------------------------------------------------------------\n+// Public Interface\n+//------------------------------------------------------------------------------\n+\n+const ajv = new Ajv({\n+    meta: false,\n+    validateSchema: false,\n+    missingRefs: \"ignore\",\n+    verbose: true\n+});\n+\n+ajv.addMetaSchema(metaSchema);\n+// eslint-disable-next-line no-underscore-dangle\n+ajv._opts.defaultMeta = metaSchema.id;\n+\n+module.exports = ajv;"},{"sha":"950125090c9f2f573e240f62f887bc4f20bbd04f","filename":"package.json","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/df5c039cbc73514939e4da67497adab029bdb450/package.json","raw_url":"https://github.com/eslint/eslint/raw/df5c039cbc73514939e4da67497adab029bdb450/package.json","contents_url":"https://api.github.com/repos/eslint/eslint/contents/package.json?ref=df5c039cbc73514939e4da67497adab029bdb450","patch":"@@ -34,6 +34,7 @@\n   \"homepage\": \"http://eslint.org\",\n   \"bugs\": \"https://github.com/eslint/eslint/issues/\",\n   \"dependencies\": {\n+    \"ajv\": \"^5.2.0\",\n     \"babel-code-frame\": \"^6.22.0\",\n     \"chalk\": \"^1.1.3\",\n     \"concat-stream\": \"^1.6.0\",\n@@ -50,7 +51,6 @@\n     \"ignore\": \"^3.3.3\",\n     \"imurmurhash\": \"^0.1.4\",\n     \"inquirer\": \"^3.0.6\",\n-    \"is-my-json-valid\": \"^2.16.0\",\n     \"is-resolvable\": \"^1.0.0\",\n     \"js-yaml\": \"^3.8.4\",\n     \"json-stable-stringify\": \"^1.0.1\","},{"sha":"3fdb4bb0334413963bc72a24f9827423e7b1d17e","filename":"tests/conf/config-schema.js","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/eslint/eslint/blob/df5c039cbc73514939e4da67497adab029bdb450/tests%2Fconf%2Fconfig-schema.js","raw_url":"https://github.com/eslint/eslint/raw/df5c039cbc73514939e4da67497adab029bdb450/tests%2Fconf%2Fconfig-schema.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Fconf%2Fconfig-schema.js?ref=df5c039cbc73514939e4da67497adab029bdb450","patch":"@@ -0,0 +1,26 @@\n+/**\n+ * @fileoverview Tests for config-schema.\n+ * @author Evgeny Poberezkin\n+ */\n+\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+const ajv = require(\"../../lib/util/ajv\"),\n+    configSchema = require(\"../../conf/config-schema.js\"),\n+    assert = require(\"assert\");\n+\n+//------------------------------------------------------------------------------\n+// Tests\n+//------------------------------------------------------------------------------\n+\n+describe(\"config-schema\", () => {\n+    it(\"should be valid against meta-schema\", () => {\n+        const valid = ajv.validateSchema(configSchema);\n+\n+        assert.strictEqual(valid, true);\n+    });\n+});"},{"sha":"5e42823b2eb82516173d9c2bf4786e1d36eb3bf8","filename":"tests/lib/config/config-validator.js","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/eslint/eslint/blob/df5c039cbc73514939e4da67497adab029bdb450/tests%2Flib%2Fconfig%2Fconfig-validator.js","raw_url":"https://github.com/eslint/eslint/raw/df5c039cbc73514939e4da67497adab029bdb450/tests%2Flib%2Fconfig%2Fconfig-validator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fconfig%2Fconfig-validator.js?ref=df5c039cbc73514939e4da67497adab029bdb450","patch":"@@ -350,7 +350,7 @@ describe(\"Validator\", () => {\n \n                 const fn = validator.validate.bind(null, { rules: { \"mock-no-options-rule\": [2, \"extra\"] } }, \"tests\", linter.rules, linter.environments);\n \n-                assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-no-options-rule\\\" is invalid:\\n\\tValue \\\"extra\\\" has more items than allowed.\\n\");\n+                assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-no-options-rule\\\" is invalid:\\n\\tValue \\\"extra\\\" should NOT have more than 0 items.\\n\");\n             });\n         });\n \n@@ -370,31 +370,31 @@ describe(\"Validator\", () => {\n             it(\"should throw if override does not specify files\", () => {\n                 const fn = validator.validate.bind(null, { overrides: [{ rules: {} }] }, \"tests\", linter.rules, linter.environments);\n \n-                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- \\\"overrides.0.files\\\" is required. Value: {\\\"rules\\\":{}}.\\n\");\n+                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- \\\"overrides[0]\\\" should have required property 'files'. Value: {\\\"rules\\\":{}}.\\n\");\n             });\n \n             it(\"should throw if override has an empty files array\", () => {\n                 const fn = validator.validate.bind(null, { overrides: [{ files: [] }] }, \"tests\", linter.rules, linter.environments);\n \n-                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- \\\"overrides.0.files\\\" no (or more than one) schemas match. Value: [].\\n\");\n+                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- Property \\\"overrides[0].files\\\" is the wrong type (expected string but got `[]`).\\n\\t- \\\"overrides[0].files\\\" should NOT have less than 1 items. Value: [].\\n\\t- \\\"overrides[0].files\\\" should match exactly one schema in oneOf. Value: [].\\n\");\n             });\n \n             it(\"should throw if override has nested overrides\", () => {\n                 const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", overrides: [{ files: \"*\", rules: {} }] }] }, \"tests\", linter.rules, linter.environments);\n \n-                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- Unexpected top-level property \\\"overrides[j].overrides\\\".\\n\");\n+                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- Unexpected top-level property \\\"overrides[0].overrides\\\".\\n\");\n             });\n \n             it(\"should throw if override extends\", () => {\n                 const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", extends: \"eslint-recommended\" }] }, \"tests\", linter.rules, linter.environments);\n \n-                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- Unexpected top-level property \\\"overrides[j].extends\\\".\\n\");\n+                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- Unexpected top-level property \\\"overrides[0].extends\\\".\\n\");\n             });\n \n             it(\"should throw if override tries to set root\", () => {\n                 const fn = validator.validate.bind(null, { overrides: [{ files: \"*\", root: \"true\" }] }, \"tests\", linter.rules, linter.environments);\n \n-                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- Unexpected top-level property \\\"overrides[j].root\\\".\\n\");\n+                assert.throws(fn, \"tests:\\n\\tESLint configuration is invalid:\\n\\t- Unexpected top-level property \\\"overrides[0].root\\\".\\n\");\n             });\n         });\n \n@@ -450,13 +450,13 @@ describe(\"Validator\", () => {\n         it(\"should throw for incorrect configuration values\", () => {\n             const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", [2, \"frist\"], \"tests\", linter.rules);\n \n-            assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tValue \\\"frist\\\" must be an enum value.\\n\");\n+            assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tValue \\\"frist\\\" should be equal to one of the allowed values.\\n\");\n         });\n \n         it(\"should throw for too many configuration values\", () => {\n             const fn = validator.validateRuleOptions.bind(null, \"mock-rule\", [2, \"first\", \"second\"], \"tests\", linter.rules);\n \n-            assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tValue \\\"first,second\\\" has more items than allowed.\\n\");\n+            assert.throws(fn, \"tests:\\n\\tConfiguration for rule \\\"mock-rule\\\" is invalid:\\n\\tValue \\\"first,second\\\" should NOT have more than 1 items.\\n\");\n         });\n \n     });"},{"sha":"86bf40cde0ce5f08b99cb607936df48092bd7a03","filename":"tests/lib/testers/rule-tester.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/df5c039cbc73514939e4da67497adab029bdb450/tests%2Flib%2Ftesters%2Frule-tester.js","raw_url":"https://github.com/eslint/eslint/raw/df5c039cbc73514939e4da67497adab029bdb450/tests%2Flib%2Ftesters%2Frule-tester.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Ftesters%2Frule-tester.js?ref=df5c039cbc73514939e4da67497adab029bdb450","patch":"@@ -619,7 +619,7 @@ describe(\"RuleTester\", () => {\n                     { code: \"var answer = 6 * 7;\", options: [\"bar\"], errors: [{ message: \"Expected nothing.\" }] }\n                 ]\n             });\n-        }, /Schema for rule .* is invalid/);\n+        }, \"Schema for rule no-invalid-schema is invalid:,\\titems: should be object\\n\\titems[0].enum: should NOT have less than 1 items\\n\\titems: should match some schema in anyOf\");\n \n     });\n \n@@ -635,7 +635,7 @@ describe(\"RuleTester\", () => {\n                     { code: \"var answer = 6 * 7;\", options: [\"bar\"], errors: [{ message: \"Expected foo.\" }] }\n                 ]\n             });\n-        }, /Value \"bar\" must be an enum value./);\n+        }, /Value \"bar\" should be equal to one of the allowed values./);\n \n     });\n "}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/8035","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/8035/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/8035/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/8035/events","html_url":"https://github.com/eslint/eslint/pull/8035","id":205788220,"node_id":"MDExOlB1bGxSZXF1ZXN0MTA0OTM4MTA0","number":8035,"title":"Chore: simplify and improve performance for autofix","user":{"login":"mysticatea","id":1937871,"node_id":"MDQ6VXNlcjE5Mzc4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1937871?v=4","gravatar_id":"","url":"https://api.github.com/users/mysticatea","html_url":"https://github.com/mysticatea","followers_url":"https://api.github.com/users/mysticatea/followers","following_url":"https://api.github.com/users/mysticatea/following{/other_user}","gists_url":"https://api.github.com/users/mysticatea/gists{/gist_id}","starred_url":"https://api.github.com/users/mysticatea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mysticatea/subscriptions","organizations_url":"https://api.github.com/users/mysticatea/orgs","repos_url":"https://api.github.com/users/mysticatea/repos","events_url":"https://api.github.com/users/mysticatea/events{/privacy}","received_events_url":"https://api.github.com/users/mysticatea/received_events","type":"User","site_admin":false},"labels":[{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":255319420,"node_id":"MDU6TGFiZWwyNTUzMTk0MjA=","url":"https://api.github.com/repos/eslint/eslint/labels/evaluating","name":"evaluating","color":"fef2c0","default":false,"description":"The team will evaluate this issue to decide whether it meets the criteria for inclusion"},{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":{"login":"mysticatea","id":1937871,"node_id":"MDQ6VXNlcjE5Mzc4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1937871?v=4","gravatar_id":"","url":"https://api.github.com/users/mysticatea","html_url":"https://github.com/mysticatea","followers_url":"https://api.github.com/users/mysticatea/followers","following_url":"https://api.github.com/users/mysticatea/following{/other_user}","gists_url":"https://api.github.com/users/mysticatea/gists{/gist_id}","starred_url":"https://api.github.com/users/mysticatea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mysticatea/subscriptions","organizations_url":"https://api.github.com/users/mysticatea/orgs","repos_url":"https://api.github.com/users/mysticatea/repos","events_url":"https://api.github.com/users/mysticatea/events{/privacy}","received_events_url":"https://api.github.com/users/mysticatea/received_events","type":"User","site_admin":false},"assignees":[{"login":"mysticatea","id":1937871,"node_id":"MDQ6VXNlcjE5Mzc4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1937871?v=4","gravatar_id":"","url":"https://api.github.com/users/mysticatea","html_url":"https://github.com/mysticatea","followers_url":"https://api.github.com/users/mysticatea/followers","following_url":"https://api.github.com/users/mysticatea/following{/other_user}","gists_url":"https://api.github.com/users/mysticatea/gists{/gist_id}","starred_url":"https://api.github.com/users/mysticatea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mysticatea/subscriptions","organizations_url":"https://api.github.com/users/mysticatea/orgs","repos_url":"https://api.github.com/users/mysticatea/repos","events_url":"https://api.github.com/users/mysticatea/events{/privacy}","received_events_url":"https://api.github.com/users/mysticatea/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2017-02-07T05:10:35Z","updated_at":"2018-02-06T21:17:50Z","closed_at":"2017-02-11T03:55:53Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/8035","html_url":"https://github.com/eslint/eslint/pull/8035","diff_url":"https://github.com/eslint/eslint/pull/8035.diff","patch_url":"https://github.com/eslint/eslint/pull/8035.patch","merged_at":"2017-02-11T03:55:53Z"},"body":"**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[X] Other, please explain:\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis PR refactors the way of autofix.\r\n\r\nThe current way is:\r\n\r\n1. Makes the array of characters.\r\n    - This creates many string instances.\r\n2. Applies fixes to the array with `Array#splice` in reverse.\r\n    - `Array#splice` is a `O(n)` operation, then it's repeated as many times as the number of fixes.\r\n3. Joins the array.\r\n\r\nThe new way of this PR is:\r\n\r\n1. Makes the fixed string by concatenation (`+=`). It concatenates \"the part followed by a fix\" and \"the text of the fix\" by turns.\r\n\r\nAs a result, the performance of autofix improved from `O(n×m)` to `O(n+m)`. (`n` is the number of characters, `m` is the number of fixes)\r\nI measured it by [this script](https://gist.github.com/mysticatea/fee91a313d8a201764047ee1be18f1e0) then I saw the new way gets 25% faster than the current way.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\n- This PR changes the order of fixing. This is reverse of the current order. So I needed to modify tests for overlapped fixes. However, we are doing multipass fixing, so I think it's no problem.\r\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/8035/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/8035/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"8b8936204c465482f2c30babef66f67e3735c406","filename":"lib/util/source-code-fixer.js","status":"modified","additions":35,"deletions":39,"changes":74,"blob_url":"https://github.com/eslint/eslint/blob/059199bf1c576700fce8b8e9ceda3df243446c3e/lib%2Futil%2Fsource-code-fixer.js","raw_url":"https://github.com/eslint/eslint/raw/059199bf1c576700fce8b8e9ceda3df243446c3e/lib%2Futil%2Fsource-code-fixer.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Futil%2Fsource-code-fixer.js?ref=059199bf1c576700fce8b8e9ceda3df243446c3e","patch":"@@ -16,6 +16,17 @@ const debug = require(\"debug\")(\"eslint:text-fixer\");\n \n const BOM = \"\\uFEFF\";\n \n+/**\n+ * Compares items in a messages array by range.\n+ * @param {Message} a The first message.\n+ * @param {Message} b The second message.\n+ * @returns {int} -1 if a comes before b, 1 if a comes after b, 0 if equal.\n+ * @private\n+ */\n+function compareMessagesByFixRange(a, b) {\n+    return a.fix.range[0] - b.fix.range[0] || a.fix.range[1] - b.fix.range[1];\n+}\n+\n /**\n  * Compares items in a messages array by line and column.\n  * @param {Message} a The first message.\n@@ -24,13 +35,7 @@ const BOM = \"\\uFEFF\";\n  * @private\n  */\n function compareMessagesByLocation(a, b) {\n-    const lineDiff = a.line - b.line;\n-\n-    if (lineDiff === 0) {\n-        return a.column - b.column;\n-    }\n-    return lineDiff;\n-\n+    return a.line - b.line || a.column - b.column;\n }\n \n //------------------------------------------------------------------------------\n@@ -68,9 +73,10 @@ SourceCodeFixer.applyFixes = function(sourceCode, messages) {\n     // clone the array\n     const remainingMessages = [],\n         fixes = [],\n+        bom = (sourceCode.hasBOM ? BOM : \"\"),\n         text = sourceCode.text;\n-    let lastFixPos = text.length + 1,\n-        prefix = (sourceCode.hasBOM ? BOM : \"\");\n+    let lastPos = Number.NEGATIVE_INFINITY,\n+        output = bom;\n \n     messages.forEach(problem => {\n         if (problem.hasOwnProperty(\"fix\")) {\n@@ -83,51 +89,41 @@ SourceCodeFixer.applyFixes = function(sourceCode, messages) {\n     if (fixes.length) {\n         debug(\"Found fixes to apply\");\n \n-        // sort in reverse order of occurrence\n-        fixes.sort((a, b) => b.fix.range[1] - a.fix.range[1] || b.fix.range[0] - a.fix.range[0]);\n-\n-        // split into array of characters for easier manipulation\n-        const chars = text.split(\"\");\n-\n-        fixes.forEach(problem => {\n+        for (const problem of fixes.sort(compareMessagesByFixRange)) {\n             const fix = problem.fix;\n-            let start = fix.range[0];\n+            const start = fix.range[0];\n             const end = fix.range[1];\n-            let insertionText = fix.text;\n-\n-            if (end < lastFixPos) {\n-                if (start < 0) {\n-\n-                    // Remove BOM.\n-                    prefix = \"\";\n-                    start = 0;\n-                }\n-\n-                if (start === 0 && insertionText[0] === BOM) {\n-\n-                    // Set BOM.\n-                    prefix = BOM;\n-                    insertionText = insertionText.slice(1);\n-                }\n \n-                chars.splice(start, end - start, insertionText);\n-                lastFixPos = start;\n-            } else {\n+            // Remain it as a problem if it's overlapped.\n+            if (lastPos >= start) {\n                 remainingMessages.push(problem);\n+                continue;\n             }\n-        });\n+\n+            // Remove BOM.\n+            if ((start < 0 && end >= 0) || (start === 0 && fix.text.startsWith(BOM))) {\n+                output = \"\";\n+            }\n+\n+            // Make output to this fix.\n+            output += text.slice(Math.max(0, lastPos), Math.max(0, start));\n+            output += fix.text;\n+            lastPos = end;\n+        }\n+        output += text.slice(Math.max(0, lastPos));\n \n         return {\n             fixed: true,\n             messages: remainingMessages.sort(compareMessagesByLocation),\n-            output: prefix + chars.join(\"\")\n+            output\n         };\n     }\n+\n     debug(\"No fixes to apply\");\n     return {\n         fixed: false,\n         messages,\n-        output: prefix + text\n+        output: bom + text\n     };\n \n };"},{"sha":"dad6ece64ee0402c46a8c3d9a79debc425c343ef","filename":"tests/lib/util/source-code-fixer.js","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/eslint/eslint/blob/059199bf1c576700fce8b8e9ceda3df243446c3e/tests%2Flib%2Futil%2Fsource-code-fixer.js","raw_url":"https://github.com/eslint/eslint/raw/059199bf1c576700fce8b8e9ceda3df243446c3e/tests%2Flib%2Futil%2Fsource-code-fixer.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Futil%2Fsource-code-fixer.js?ref=059199bf1c576700fce8b8e9ceda3df243446c3e","patch":"@@ -272,28 +272,28 @@ describe(\"SourceCodeFixer\", () => {\n             it(\"should only apply one fix when ranges overlap\", () => {\n                 const result = SourceCodeFixer.applyFixes(sourceCode, [REMOVE_MIDDLE, REPLACE_ID]);\n \n-                assert.equal(result.output, TEST_CODE.replace(\"answer\", \"a\"));\n+                assert.equal(result.output, TEST_CODE.replace(\"answer\", \"foo\"));\n                 assert.equal(result.messages.length, 1);\n-                assert.equal(result.messages[0].message, \"foo\");\n+                assert.equal(result.messages[0].message, \"removemiddle\");\n                 assert.isTrue(result.fixed);\n             });\n \n             it(\"should apply one fix when the end of one range is the same as the start of a previous range overlap\", () => {\n                 const result = SourceCodeFixer.applyFixes(sourceCode, [REMOVE_START, REPLACE_ID]);\n \n-                assert.equal(result.output, TEST_CODE.replace(\"answer\", \"foo\"));\n+                assert.equal(result.output, TEST_CODE.replace(\"var \", \"\"));\n                 assert.equal(result.messages.length, 1);\n-                assert.equal(result.messages[0].message, \"removestart\");\n+                assert.equal(result.messages[0].message, \"foo\");\n                 assert.isTrue(result.fixed);\n             });\n \n             it(\"should only apply one fix when ranges overlap and one message has no fix\", () => {\n                 const result = SourceCodeFixer.applyFixes(sourceCode, [REMOVE_MIDDLE, REPLACE_ID, NO_FIX]);\n \n-                assert.equal(result.output, TEST_CODE.replace(\"answer\", \"a\"));\n+                assert.equal(result.output, TEST_CODE.replace(\"answer\", \"foo\"));\n                 assert.equal(result.messages.length, 2);\n                 assert.equal(result.messages[0].message, \"nofix\");\n-                assert.equal(result.messages[1].message, \"foo\");\n+                assert.equal(result.messages[1].message, \"removemiddle\");\n                 assert.isTrue(result.fixed);\n             });\n \n@@ -493,28 +493,28 @@ describe(\"SourceCodeFixer\", () => {\n             it(\"should only apply one fix when ranges overlap\", () => {\n                 const result = SourceCodeFixer.applyFixes(sourceCode, [REMOVE_MIDDLE, REPLACE_ID]);\n \n-                assert.equal(result.output, `\\uFEFF${TEST_CODE.replace(\"answer\", \"a\")}`);\n+                assert.equal(result.output, `\\uFEFF${TEST_CODE.replace(\"answer\", \"foo\")}`);\n                 assert.equal(result.messages.length, 1);\n-                assert.equal(result.messages[0].message, \"foo\");\n+                assert.equal(result.messages[0].message, \"removemiddle\");\n                 assert.isTrue(result.fixed);\n             });\n \n             it(\"should apply one fix when the end of one range is the same as the start of a previous range overlap\", () => {\n                 const result = SourceCodeFixer.applyFixes(sourceCode, [REMOVE_START, REPLACE_ID]);\n \n-                assert.equal(result.output, `\\uFEFF${TEST_CODE.replace(\"answer\", \"foo\")}`);\n+                assert.equal(result.output, `\\uFEFF${TEST_CODE.replace(\"var \", \"\")}`);\n                 assert.equal(result.messages.length, 1);\n-                assert.equal(result.messages[0].message, \"removestart\");\n+                assert.equal(result.messages[0].message, \"foo\");\n                 assert.isTrue(result.fixed);\n             });\n \n             it(\"should only apply one fix when ranges overlap and one message has no fix\", () => {\n                 const result = SourceCodeFixer.applyFixes(sourceCode, [REMOVE_MIDDLE, REPLACE_ID, NO_FIX]);\n \n-                assert.equal(result.output, `\\uFEFF${TEST_CODE.replace(\"answer\", \"a\")}`);\n+                assert.equal(result.output, `\\uFEFF${TEST_CODE.replace(\"answer\", \"foo\")}`);\n                 assert.equal(result.messages.length, 2);\n                 assert.equal(result.messages[0].message, \"nofix\");\n-                assert.equal(result.messages[1].message, \"foo\");\n+                assert.equal(result.messages[1].message, \"removemiddle\");\n                 assert.isTrue(result.fixed);\n             });\n "}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/8270","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/8270/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/8270/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/8270/events","html_url":"https://github.com/eslint/eslint/pull/8270","id":214888208,"node_id":"MDExOlB1bGxSZXF1ZXN0MTExMjAwNjk5","number":8270,"title":"Fix: Ignore hidden folders when resolving globs (fixes #8259)","user":{"login":"IanVS","id":4616705,"node_id":"MDQ6VXNlcjQ2MTY3MDU=","avatar_url":"https://avatars.githubusercontent.com/u/4616705?v=4","gravatar_id":"","url":"https://api.github.com/users/IanVS","html_url":"https://github.com/IanVS","followers_url":"https://api.github.com/users/IanVS/followers","following_url":"https://api.github.com/users/IanVS/following{/other_user}","gists_url":"https://api.github.com/users/IanVS/gists{/gist_id}","starred_url":"https://api.github.com/users/IanVS/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/IanVS/subscriptions","organizations_url":"https://api.github.com/users/IanVS/orgs","repos_url":"https://api.github.com/users/IanVS/repos","events_url":"https://api.github.com/users/IanVS/events{/privacy}","received_events_url":"https://api.github.com/users/IanVS/received_events","type":"User","site_admin":false},"labels":[{"id":45711350,"node_id":"MDU6TGFiZWw0NTcxMTM1MA==","url":"https://api.github.com/repos/eslint/eslint/labels/bug","name":"bug","color":"fc2929","default":true,"description":"ESLint is working incorrectly"},{"id":82922548,"node_id":"MDU6TGFiZWw4MjkyMjU0OA==","url":"https://api.github.com/repos/eslint/eslint/labels/core","name":"core","color":"c7def8","default":false,"description":"Relates to ESLint's core APIs and features"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-03-17T02:03:17Z","updated_at":"2018-02-06T21:10:38Z","closed_at":"2017-03-17T21:35:56Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/8270","html_url":"https://github.com/eslint/eslint/pull/8270","diff_url":"https://github.com/eslint/eslint/pull/8270.diff","patch_url":"https://github.com/eslint/eslint/pull/8270.patch","merged_at":"2017-03-17T21:35:56Z"},"body":"**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[ ] Documentation update\r\n[X] Bug fix ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/bug-report.md))\r\n[ ] New rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-proposal.md))\r\n[ ] Changes an existing rule ([template](https://raw.githubusercontent.com/eslint/eslint/master/templates/rule-change-proposal.md))\r\n[ ] Add autofixing to a rule\r\n[ ] Add a CLI option\r\n[ ] Add something to the core\r\n[ ] Other, please explain:\r\n\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis is a performance improvement, but should not be a change to linting functionality.  This is similar to avoiding glob resolution within `node_modules`.  With this change, `node-glob` will not attempt to  find all files within `.dotfolder` folders.  Similar to `node_modules`, this can be overridden in a user’s ignore file or in an ignore-pattern, and is also prevented if the `dotfiles` option is `true`.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nIt would be good to double-check our tests around hidden files and folders, as well as perhaps manually trying a few situations.  From everything I tested, this works exactly like before, except faster. 🐎 ","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/8270/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/8270/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"cfca7fa4ff1c3b17aba303209dfbef050df0dcfb","filename":"lib/ignored-paths.js","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/eslint/eslint/blob/14778a2d394a50d003e7ae9d9172e86351aa5775/lib%2Fignored-paths.js","raw_url":"https://github.com/eslint/eslint/raw/14778a2d394a50d003e7ae9d9172e86351aa5775/lib%2Fignored-paths.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fignored-paths.js?ref=14778a2d394a50d003e7ae9d9172e86351aa5775","patch":"@@ -201,6 +201,12 @@ class IgnoredPaths {\n \n         const ig = ignore().add(DEFAULT_IGNORE_DIRS);\n \n+        if (this.options.dotfiles !== true) {\n+\n+            // Ignore hidden folders.  (This cannot be \".*\", or else it's not possible to unignore hidden files)\n+            ig.add([\".*/*\", \"!../\"]);\n+        }\n+\n         if (this.options.ignore) {\n             ig.add(this.ig.custom);\n         }"},{"sha":"ca93372b2e3bc22102c7f7d9e2d5fb1f3ac3ccd0","filename":"tests/fixtures/ignored-paths/.eslintignoreWithUnignoredDefaults","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/14778a2d394a50d003e7ae9d9172e86351aa5775/tests%2Ffixtures%2Fignored-paths%2F.eslintignoreWithUnignoredDefaults","raw_url":"https://github.com/eslint/eslint/raw/14778a2d394a50d003e7ae9d9172e86351aa5775/tests%2Ffixtures%2Fignored-paths%2F.eslintignoreWithUnignoredDefaults","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Ffixtures%2Fignored-paths%2F.eslintignoreWithUnignoredDefaults?ref=14778a2d394a50d003e7ae9d9172e86351aa5775","patch":"@@ -1,2 +1,3 @@\n !/node_modules/package\n !/bower_components/package\n+!.hidden/package"},{"sha":"643a11adad7bf5dfb468de8458b8a28dded626ce","filename":"tests/lib/ignored-paths.js","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/eslint/eslint/blob/14778a2d394a50d003e7ae9d9172e86351aa5775/tests%2Flib%2Fignored-paths.js","raw_url":"https://github.com/eslint/eslint/raw/14778a2d394a50d003e7ae9d9172e86351aa5775/tests%2Flib%2Fignored-paths.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fignored-paths.js?ref=14778a2d394a50d003e7ae9d9172e86351aa5775","patch":"@@ -550,9 +550,10 @@ describe(\"IgnoredPaths\", () => {\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a\")));\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a/b\")));\n             assert.isFalse(shouldIgnore(resolve(\".hidden\")));\n+            assert.isTrue(shouldIgnore(resolve(\".hidden/a\")));\n         });\n \n-        it(\"should ignore default folders there is an ignore file without unignored defaults\", () => {\n+        it(\"should ignore default folders when there is an ignore file without unignored defaults\", () => {\n             const cwd = getFixturePath();\n             const ignoredPaths = new IgnoredPaths({ ignore: true, ignorePath: getFixturePath(\".eslintignore\"), cwd });\n \n@@ -564,6 +565,7 @@ describe(\"IgnoredPaths\", () => {\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a\")));\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a/b\")));\n             assert.isFalse(shouldIgnore(resolve(\".hidden\")));\n+            assert.isTrue(shouldIgnore(resolve(\".hidden/a\")));\n         });\n \n         it(\"should not ignore things which are re-included in ignore file\", () => {\n@@ -578,8 +580,10 @@ describe(\"IgnoredPaths\", () => {\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a\")));\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a/b\")));\n             assert.isFalse(shouldIgnore(resolve(\".hidden\")));\n+            assert.isTrue(shouldIgnore(resolve(\".hidden/a\")));\n             assert.isFalse(shouldIgnore(resolve(\"node_modules/package\")));\n             assert.isFalse(shouldIgnore(resolve(\"bower_components/package\")));\n+            assert.isFalse(shouldIgnore(resolve(\".hidden/package\")));\n         });\n \n         it(\"should ignore files which we try to re-include in ignore file when ignore option is disabled\", () => {\n@@ -594,8 +598,10 @@ describe(\"IgnoredPaths\", () => {\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a\")));\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a/b\")));\n             assert.isFalse(shouldIgnore(resolve(\".hidden\")));\n+            assert.isTrue(shouldIgnore(resolve(\".hidden/a\")));\n             assert.isTrue(shouldIgnore(resolve(\"node_modules/package\")));\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/package\")));\n+            assert.isTrue(shouldIgnore(resolve(\".hidden/package\")));\n         });\n \n         it(\"should not ignore dirs which are re-included by ignorePattern\", () => {\n@@ -610,9 +616,21 @@ describe(\"IgnoredPaths\", () => {\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a\")));\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/a/b\")));\n             assert.isFalse(shouldIgnore(resolve(\".hidden\")));\n+            assert.isTrue(shouldIgnore(resolve(\".hidden/a\")));\n             assert.isFalse(shouldIgnore(resolve(\"node_modules/package\")));\n             assert.isTrue(shouldIgnore(resolve(\"bower_components/package\")));\n         });\n+\n+        it(\"should not ignore hidden dirs when dotfiles is enabled\", () => {\n+            const cwd = getFixturePath(\"no-ignore-file\");\n+            const ignoredPaths = new IgnoredPaths({ ignore: true, cwd, dotfiles: true });\n+\n+            const shouldIgnore = ignoredPaths.getIgnoredFoldersGlobChecker();\n+            const resolve = createResolve(cwd);\n+\n+            assert.isFalse(shouldIgnore(resolve(\".hidden\")));\n+            assert.isFalse(shouldIgnore(resolve(\".hidden/a\")));\n+        });\n     });\n \n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/8232","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/8232/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/8232/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/8232/events","html_url":"https://github.com/eslint/eslint/pull/8232","id":213553366,"node_id":"MDExOlB1bGxSZXF1ZXN0MTEwMjcxMTcw","number":8232,"title":"Chore: convert Traverser to ES6 class (refs #7849)","user":{"login":"not-an-aardvark","id":11638619,"node_id":"MDQ6VXNlcjExNjM4NjE5","avatar_url":"https://avatars.githubusercontent.com/u/11638619?v=4","gravatar_id":"","url":"https://api.github.com/users/not-an-aardvark","html_url":"https://github.com/not-an-aardvark","followers_url":"https://api.github.com/users/not-an-aardvark/followers","following_url":"https://api.github.com/users/not-an-aardvark/following{/other_user}","gists_url":"https://api.github.com/users/not-an-aardvark/gists{/gist_id}","starred_url":"https://api.github.com/users/not-an-aardvark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/not-an-aardvark/subscriptions","organizations_url":"https://api.github.com/users/not-an-aardvark/orgs","repos_url":"https://api.github.com/users/not-an-aardvark/repos","events_url":"https://api.github.com/users/not-an-aardvark/events{/privacy}","received_events_url":"https://api.github.com/users/not-an-aardvark/received_events","type":"User","site_admin":false},"labels":[{"id":360091515,"node_id":"MDU6TGFiZWwzNjAwOTE1MTU=","url":"https://api.github.com/repos/eslint/eslint/labels/chore","name":"chore","color":"c2e0c6","default":false,"description":"This change is not user-facing"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2017-03-11T19:33:37Z","updated_at":"2018-02-06T21:11:50Z","closed_at":"2017-03-16T13:23:10Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/8232","html_url":"https://github.com/eslint/eslint/pull/8232","diff_url":"https://github.com/eslint/eslint/pull/8232.diff","patch_url":"https://github.com/eslint/eslint/pull/8232.patch","merged_at":"2017-03-16T13:23:10Z"},"body":"**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[x] Other, please explain:\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nThis converts `Traverser` (our wrapper around estraverse) into an ES6 class. Since `Traverser` is not a public API, this should not be a breaking change.\r\n\r\nThis also adds tests for `Traverser` (there were no tests before).\r\n\r\nBased on `npm run perf` numbers, this improves end-to-end performance by 4%. :tada:\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nLooking at the history of the `Traverser` wrapper, I see that it was introduced to fix https://github.com/eslint/eslint/issues/5476 (a bug which broke a lot of projects that used babel-eslint). I'm not sure I understand the exact circumstances that caused that bug, but we should make sure this change isn't doing anything that will cause the bug to reappear. Pinging @hzoo since he probably knows more about this.\r\n\r\nThe regression build reports no errors with this change.","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/8232/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/8232/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"fc070186b3b60e4bbba9e61180b43d802eadcd3a","filename":"lib/util/traverser.js","status":"modified","additions":16,"deletions":25,"changes":41,"blob_url":"https://github.com/eslint/eslint/blob/40d5f338a4b12b32c6358f16f9dafff9ba6af4f7/lib%2Futil%2Ftraverser.js","raw_url":"https://github.com/eslint/eslint/raw/40d5f338a4b12b32c6358f16f9dafff9ba6af4f7/lib%2Futil%2Ftraverser.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Futil%2Ftraverser.js?ref=40d5f338a4b12b32c6358f16f9dafff9ba6af4f7","patch":"@@ -14,41 +14,32 @@ const estraverse = require(\"estraverse\");\n // Helpers\n //------------------------------------------------------------------------------\n \n-const KEY_BLACKLIST = [\n+const KEY_BLACKLIST = new Set([\n     \"parent\",\n     \"leadingComments\",\n     \"trailingComments\"\n-];\n+]);\n \n /**\n  * Wrapper around an estraverse controller that ensures the correct keys\n  * are visited.\n  * @constructor\n  */\n-function Traverser() {\n-\n-    const controller = Object.create(new estraverse.Controller()),\n-        originalTraverse = controller.traverse;\n-\n-    // intercept call to traverse() and add the fallback key to the visitor\n-    controller.traverse = function(node, visitor) {\n+class Traverser extends estraverse.Controller {\n+    traverse(node, visitor) {\n         visitor.fallback = Traverser.getKeys;\n-        return originalTraverse.call(this, node, visitor);\n-    };\n-\n-    return controller;\n+        return super.traverse(node, visitor);\n+    }\n+\n+    /**\n+     * Calculates the keys to use for traversal.\n+     * @param {ASTNode} node The node to read keys from.\n+     * @returns {string[]} An array of keys to visit on the node.\n+     * @private\n+     */\n+    static getKeys(node) {\n+        return Object.keys(node).filter(key => !KEY_BLACKLIST.has(key));\n+    }\n }\n \n-/**\n- * Calculates the keys to use for traversal.\n- * @param {ASTNode} node The node to read keys from.\n- * @returns {string[]} An array of keys to visit on the node.\n- * @private\n- */\n-Traverser.getKeys = function(node) {\n-    return Object.keys(node).filter(key => KEY_BLACKLIST.indexOf(key) === -1);\n-};\n-\n module.exports = Traverser;\n-\n-"},{"sha":"68be3977a980c52ff943c2e8789c92ff5aff7bdb","filename":"tests/lib/util/traverser.js","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/eslint/eslint/blob/40d5f338a4b12b32c6358f16f9dafff9ba6af4f7/tests%2Flib%2Futil%2Ftraverser.js","raw_url":"https://github.com/eslint/eslint/raw/40d5f338a4b12b32c6358f16f9dafff9ba6af4f7/tests%2Flib%2Futil%2Ftraverser.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Futil%2Ftraverser.js?ref=40d5f338a4b12b32c6358f16f9dafff9ba6af4f7","patch":"@@ -0,0 +1,43 @@\n+\"use strict\";\n+\n+const assert = require(\"chai\").assert;\n+const Traverser = require(\"../../../lib/util/traverser\");\n+\n+describe(\"Traverser\", () => {\n+    it(\"traverses all keys except 'parent', 'leadingComments', and 'trailingComments'\", () => {\n+        const traverser = new Traverser();\n+        const fakeAst = {\n+            type: \"Program\",\n+            body: [\n+                {\n+                    type: \"ExpressionStatement\",\n+                    leadingComments: {\n+                        type: \"Line\"\n+                    },\n+                    trailingComments: {\n+                        type: \"Block\"\n+                    }\n+                },\n+                {\n+                    type: \"FooStatement\",\n+                    foo: {\n+                        type: \"BarStatement\"\n+                    }\n+                }\n+            ]\n+        };\n+\n+        fakeAst.body[0].parent = fakeAst;\n+\n+        const enteredNodes = [];\n+        const exitedNodes = [];\n+\n+        traverser.traverse(fakeAst, {\n+            enter: node => enteredNodes.push(node),\n+            leave: node => exitedNodes.push(node)\n+        });\n+\n+        assert.deepEqual(enteredNodes, [fakeAst, fakeAst.body[0], fakeAst.body[1], fakeAst.body[1].foo]);\n+        assert.deepEqual(exitedNodes, [fakeAst.body[0], fakeAst.body[1].foo, fakeAst.body[1], fakeAst]);\n+    });\n+});"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/7966","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/7966/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/7966/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/7966/events","html_url":"https://github.com/eslint/eslint/pull/7966","id":202441965,"node_id":"MDExOlB1bGxSZXF1ZXN0MTAyNjU1MDk2","number":7966,"title":"Update: no-undefined handles properties/classes/modules (fixes #7964)","user":{"login":"platinumazure","id":284282,"node_id":"MDQ6VXNlcjI4NDI4Mg==","avatar_url":"https://avatars.githubusercontent.com/u/284282?v=4","gravatar_id":"","url":"https://api.github.com/users/platinumazure","html_url":"https://github.com/platinumazure","followers_url":"https://api.github.com/users/platinumazure/followers","following_url":"https://api.github.com/users/platinumazure/following{/other_user}","gists_url":"https://api.github.com/users/platinumazure/gists{/gist_id}","starred_url":"https://api.github.com/users/platinumazure/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/platinumazure/subscriptions","organizations_url":"https://api.github.com/users/platinumazure/orgs","repos_url":"https://api.github.com/users/platinumazure/repos","events_url":"https://api.github.com/users/platinumazure/events{/privacy}","received_events_url":"https://api.github.com/users/platinumazure/received_events","type":"User","site_admin":false},"labels":[{"id":45711350,"node_id":"MDU6TGFiZWw0NTcxMTM1MA==","url":"https://api.github.com/repos/eslint/eslint/labels/bug","name":"bug","color":"fc2929","default":true,"description":"ESLint is working incorrectly"},{"id":45798639,"node_id":"MDU6TGFiZWw0NTc5ODYzOQ==","url":"https://api.github.com/repos/eslint/eslint/labels/rule","name":"rule","color":"fbca04","default":false,"description":"Relates to ESLint's core rules"},{"id":131106229,"node_id":"MDU6TGFiZWwxMzExMDYyMjk=","url":"https://api.github.com/repos/eslint/eslint/labels/accepted","name":"accepted","color":"0052cc","default":false,"description":"There is consensus among the team that this change meets the criteria for inclusion"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":34,"created_at":"2017-01-23T04:06:07Z","updated_at":"2018-02-06T21:19:58Z","closed_at":"2017-02-07T05:36:54Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/7966","html_url":"https://github.com/eslint/eslint/pull/7966","diff_url":"https://github.com/eslint/eslint/pull/7966.diff","patch_url":"https://github.com/eslint/eslint/pull/7966.patch","merged_at":"2017-02-07T05:36:54Z"},"body":"**What is the purpose of this pull request? (put an \"X\" next to item)**\r\n\r\n[x] Bug fix\r\n\r\nSee #7964.\r\n\r\n<!--\r\n    Please ensure your pull request is ready:\r\n\r\n    - Read the pull request guide (http://eslint.org/docs/developer-guide/contributing/pull-requests)\r\n    - Include tests for this change\r\n    - Update documentation for this change (if appropriate)\r\n-->\r\n\r\n<!--\r\n    The following is required for all pull requests:\r\n-->\r\n\r\n**What changes did you make? (Give an overview)**\r\n\r\nFixed no-undefined to ensure that property keys (non-computed) were not incorrectly flagged. Although property keys are Identifier nodes, non-computed property keys are really strings at the end of the day.\r\n\r\nWell, that's where we started, but then we decided to ensure that destructuring and import/export were handled correctly. In order to do that more reliably and (hopefully) ensure the rule keeps up with no syntax, I decided to refactor to use escope variables. This ended up improving performance by about 80% (at least when the rule is run on our codebase), so that's a huge win. (Identifer visitor was hit a lot, so even the performance penalty of iterating over scopes again still made this rule much faster overall.)\r\n\r\nLabeling as \"Update\" in case more warnings are introduced in destructuring or import/export cases.\r\n\r\n**Is there anything you'd like reviewers to focus on?**\r\n\r\nDoes this need a documentation update?","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/7966/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/7966/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"d29ac1e720f2c6f6a28a62ff6fc2e5e1adad5d1a","filename":"lib/rules/no-undefined.js","status":"modified","additions":45,"deletions":6,"changes":51,"blob_url":"https://github.com/eslint/eslint/blob/58512acece3c22eea03c18bc774dc1bae128a8d1/lib%2Frules%2Fno-undefined.js","raw_url":"https://github.com/eslint/eslint/raw/58512acece3c22eea03c18bc774dc1bae128a8d1/lib%2Frules%2Fno-undefined.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-undefined.js?ref=58512acece3c22eea03c18bc774dc1bae128a8d1","patch":"@@ -21,15 +21,54 @@ module.exports = {\n \n     create(context) {\n \n+        /**\n+         * Report an invalid \"undefined\" identifier node.\n+         * @param {ASTNode} node The node to report.\n+         * @returns {void}\n+         */\n+        function report(node) {\n+            context.report({\n+                node,\n+                message: \"Unexpected use of undefined.\"\n+            });\n+        }\n+\n+        /**\n+         * Checks the given scope for references to `undefined` and reports\n+         * all references found.\n+         * @param {escope.Scope} scope The scope to check.\n+         * @returns {void}\n+         */\n+        function checkScope(scope) {\n+            const undefinedVar = scope.set.get(\"undefined\");\n+\n+            if (!undefinedVar) {\n+                return;\n+            }\n+\n+            const references = undefinedVar.references;\n+\n+            const defs = undefinedVar.defs;\n+\n+            // Report non-initializing references (those are covered in defs below)\n+            references\n+                .filter(ref => !ref.init)\n+                .forEach(ref => report(ref.identifier));\n+\n+            defs.forEach(def => report(def.name));\n+        }\n+\n         return {\n+            \"Program:exit\"() {\n+                const globalScope = context.getScope();\n+\n+                const stack = [globalScope];\n \n-            Identifier(node) {\n-                if (node.name === \"undefined\") {\n-                    const parent = context.getAncestors().pop();\n+                while (stack.length) {\n+                    const scope = stack.pop();\n \n-                    if (!parent || parent.type !== \"MemberExpression\" || node !== parent.property || parent.computed) {\n-                        context.report({ node, message: \"Unexpected use of undefined.\" });\n-                    }\n+                    stack.push.apply(stack, scope.childScopes);\n+                    checkScope(scope);\n                 }\n             }\n         };"},{"sha":"bc5706854162e5b33ba3fb1e0a5558ebc5d0d40e","filename":"tests/lib/rules/no-undefined.js","status":"modified","additions":77,"deletions":3,"changes":80,"blob_url":"https://github.com/eslint/eslint/blob/58512acece3c22eea03c18bc774dc1bae128a8d1/tests%2Flib%2Frules%2Fno-undefined.js","raw_url":"https://github.com/eslint/eslint/raw/58512acece3c22eea03c18bc774dc1bae128a8d1/tests%2Flib%2Frules%2Fno-undefined.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-undefined.js?ref=58512acece3c22eea03c18bc774dc1bae128a8d1","patch":"@@ -12,13 +12,20 @@\n const rule = require(\"../../../lib/rules/no-undefined\"),\n     RuleTester = require(\"../../../lib/testers/rule-tester\");\n \n+//------------------------------------------------------------------------------\n+// Helpers\n+//------------------------------------------------------------------------------\n+\n+const ES6_SCRIPT = { ecmaVersion: 6 };\n+const ES6_MODULE = { ecmaVersion: 6, sourceType: \"module\" };\n+\n //------------------------------------------------------------------------------\n // Tests\n //------------------------------------------------------------------------------\n \n const errors = [{ message: \"Unexpected use of undefined.\", type: \"Identifier\" }];\n \n-const ruleTester = new RuleTester();\n+const ruleTester = new RuleTester({ parserOptions: ES6_SCRIPT });\n \n ruleTester.run(\"no-undefined\", rule, {\n     valid: [\n@@ -31,7 +38,18 @@ ruleTester.run(\"no-undefined\", rule, {\n         \"ndefined\",\n         \"a.undefined\",\n         \"this.undefined\",\n-        \"global['undefined']\"\n+        \"global['undefined']\",\n+\n+        // https://github.com/eslint/eslint/issues/7964\n+        \"({ undefined: bar })\",\n+        \"({ undefined: bar } = foo)\",\n+        \"({ undefined() {} })\",\n+        \"class Foo { undefined() {} }\",\n+        \"(class { undefined() {} })\",\n+        { code: \"import { undefined as a } from 'foo'\", parserOptions: ES6_MODULE },\n+        { code: \"export { undefined } from 'foo'\", parserOptions: ES6_MODULE },\n+        { code: \"export { undefined as a } from 'foo'\", parserOptions: ES6_MODULE },\n+        { code: \"export { a as undefined } from 'foo'\", parserOptions: ES6_MODULE }\n     ],\n     invalid: [\n         { code: \"undefined\", errors },\n@@ -40,10 +58,66 @@ ruleTester.run(\"no-undefined\", rule, {\n         { code: \"undefined[0]\", errors },\n         { code: \"f(undefined)\", errors },\n         { code: \"function f(undefined) {}\", errors },\n+        { code: \"function f() { var undefined; }\", errors },\n+        { code: \"function f() { undefined = true; }\", errors },\n         { code: \"var undefined;\", errors },\n         { code: \"try {} catch(undefined) {}\", errors },\n+        { code: \"function undefined() {}\", errors },\n         { code: \"(function undefined(){}())\", errors },\n+        { code: \"var foo = function undefined() {}\", errors },\n+        { code: \"foo = function undefined() {}\", errors },\n         { code: \"undefined = true\", errors },\n-        { code: \"var undefined = true\", errors }\n+        { code: \"var undefined = true\", errors },\n+        { code: \"({ undefined })\", errors },\n+        { code: \"({ [undefined]: foo })\", errors },\n+        { code: \"({ bar: undefined })\", errors },\n+        { code: \"({ bar: undefined } = foo)\", errors },\n+        { code: \"var { undefined } = foo\", errors },\n+        { code: \"var { bar: undefined } = foo\", errors },\n+        {\n+            code: \"({ undefined: function undefined() {} })\",\n+            errors: [Object.assign({}, errors[0], { column: 24 })]\n+        },\n+        { code: \"({ foo: function undefined() {} })\", errors },\n+        { code: \"class Foo { [undefined]() {} }\", errors },\n+        { code: \"(class { [undefined]() {} })\", errors },\n+        {\n+            code: \"var undefined = true; undefined = false;\",\n+            errors: [{\n+                message: \"Unexpected use of undefined.\",\n+                column: 5\n+            }, {\n+                message: \"Unexpected use of undefined.\",\n+                column: 23\n+            }]\n+        },\n+        {\n+            code: \"import undefined from 'foo'\",\n+            parserOptions: ES6_MODULE,\n+            errors\n+        },\n+        {\n+            code: \"import * as undefined from 'foo'\",\n+            parserOptions: ES6_MODULE,\n+            errors\n+        },\n+        {\n+            code: \"import { undefined } from 'foo'\",\n+            parserOptions: ES6_MODULE,\n+            errors\n+        },\n+        {\n+            code: \"import { a as undefined } from 'foo'\",\n+            parserOptions: ES6_MODULE,\n+            errors\n+        },\n+        {\n+            code: \"export { undefined }\",\n+            parserOptions: ES6_MODULE,\n+            errors\n+        },\n+        { code: \"let a = [b, ...undefined]\", errors },\n+        { code: \"[a, ...undefined] = b\", errors },\n+        { code: \"[a = undefined] = b\", errors }\n     ]\n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/5117","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/5117/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/5117/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/5117/events","html_url":"https://github.com/eslint/eslint/pull/5117","id":130220714,"node_id":"MDExOlB1bGxSZXF1ZXN0NTc3ODY4MDc=","number":5117,"title":"Fix: Allow same-line comments in padded-blocks (fixes #5055)","user":{"login":"btmills","id":1709537,"node_id":"MDQ6VXNlcjE3MDk1Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/1709537?v=4","gravatar_id":"","url":"https://api.github.com/users/btmills","html_url":"https://github.com/btmills","followers_url":"https://api.github.com/users/btmills/followers","following_url":"https://api.github.com/users/btmills/following{/other_user}","gists_url":"https://api.github.com/users/btmills/gists{/gist_id}","starred_url":"https://api.github.com/users/btmills/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/btmills/subscriptions","organizations_url":"https://api.github.com/users/btmills/orgs","repos_url":"https://api.github.com/users/btmills/repos","events_url":"https://api.github.com/users/btmills/events{/privacy}","received_events_url":"https://api.github.com/users/btmills/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2016-02-01T00:48:56Z","updated_at":"2018-02-06T23:34:27Z","closed_at":"2016-02-06T16:46:19Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/5117","html_url":"https://github.com/eslint/eslint/pull/5117","diff_url":"https://github.com/eslint/eslint/pull/5117.diff","patch_url":"https://github.com/eslint/eslint/pull/5117.patch","merged_at":"2016-02-06T16:46:19Z"},"body":"This allows comments that occur on the same line as the opening or closing brace.\n\nBy refactoring the `getCommentsInNode` method as part of this change, I was able to throw in a slight (~6%) performance bump. Before:\n\n```\nSingle File:\n  CPU Speed is 2200 with multiplier 13000000\n  Performance Run #1:  4078.844035ms\n  Performance Run #2:  4145.123632ms\n  Performance Run #3:  4228.349988ms\n  Performance Run #4:  4022.783567ms\n  Performance Run #5:  4196.384683ms\n\n  Performance budget ok:  4145.123632ms (limit: 5909.090909090909ms)\n\n\nMulti Files (450 files):\n  CPU Speed is 2200 with multiplier 39000000\n  Performance Run #1:  10260.395154ms\n  Performance Run #2:  10054.932538ms\n  Performance Run #3:  9980.401873ms\n  Performance Run #4:  10205.057365ms\n  Performance Run #5:  10123.912088ms\n\n  Performance budget ok:  10123.912088ms (limit: 17727.272727272728ms)\n```\n\nAfter:\n\n```\nSingle File:\n  CPU Speed is 2200 with multiplier 13000000\n  Performance Run #1:  3957.185828ms\n  Performance Run #2:  3982.306874ms\n  Performance Run #3:  3888.848636ms\n  Performance Run #4:  3814.4996730000003ms\n  Performance Run #5:  3891.909929ms\n\n  Performance budget ok:  3891.909929ms (limit: 5909.090909090909ms)\n\n\nMulti Files (450 files):\n  CPU Speed is 2200 with multiplier 39000000\n  Performance Run #1:  10070.100405ms\n  Performance Run #2:  10050.302239ms\n  Performance Run #3:  10265.260417ms\n  Performance Run #4:  10013.769042ms\n  Performance Run #5:  10078.269855ms\n\n  Performance budget ok:  10070.100405ms (limit: 17727.272727272728ms)\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/5117/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/5117/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"d8edfafa121a5a27a635ed7d8e66c50df3ff3a79","filename":"lib/rules/padded-blocks.js","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/eslint/eslint/blob/fae1884d23fada3c9c2fb9d2d7d08d20b888e7e1/lib%2Frules%2Fpadded-blocks.js","raw_url":"https://github.com/eslint/eslint/raw/fae1884d23fada3c9c2fb9d2d7d08d20b888e7e1/lib%2Frules%2Fpadded-blocks.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fpadded-blocks.js?ref=fae1884d23fada3c9c2fb9d2d7d08d20b888e7e1","patch":"@@ -16,20 +16,6 @@ module.exports = function(context) {\n     var ALWAYS_MESSAGE = \"Block must be padded by blank lines.\",\n         NEVER_MESSAGE = \"Block must not be padded by blank lines.\";\n \n-    /**\n-     * Retrieves an array of all comments defined inside the given node.\n-     * @param {ASTNode} node The AST node.\n-     * @returns {ASTNode[]} An array of comment nodes.\n-     */\n-    function getCommentsInNode(node) {\n-        var allComments = context.getAllComments();\n-\n-        return allComments.filter(function(comment) {\n-            return node.range[0] < comment.range[0] &&\n-                node.range[1] > comment.range[1];\n-        });\n-    }\n-\n     /**\n      * Checks if the location of a node or token is before the location of another node or token\n      * @param {ASTNode|Token} a The node or token to check if its location is before b.\n@@ -50,8 +36,15 @@ module.exports = function(context) {\n             first = node.body[0],\n             firstLine = first.loc.start.line,\n             expectedFirstLine = blockStart + 2,\n-            comments = getCommentsInNode(node),\n-            firstComment = comments[0];\n+            leadingComments = (node.body[0].leadingComments || []).slice(),\n+            firstComment;\n+\n+        while (leadingComments.length > 0 &&\n+                leadingComments[0].loc.start.line <= node.loc.start.line) {\n+            leadingComments.shift();\n+        }\n+\n+        firstComment = leadingComments[0];\n \n         if (firstComment && isLocatedBefore(firstComment, first)) {\n             firstLine = firstComment.loc.start.line;\n@@ -71,8 +64,15 @@ module.exports = function(context) {\n             lastToken = context.getLastToken(last),\n             lastLine = lastToken.loc.end.line,\n             expectedLastLine = blockEnd - 2,\n-            comments = getCommentsInNode(node),\n-            lastComment = comments[comments.length - 1];\n+            trailingComments = (node.body[node.body.length - 1].trailingComments || []).slice(),\n+            lastComment;\n+\n+        while (trailingComments.length > 0 &&\n+                trailingComments[trailingComments.length - 1].loc.end.line >= node.loc.end.line) {\n+            trailingComments.pop();\n+        }\n+\n+        lastComment = trailingComments[trailingComments.length - 1];\n \n         if (lastComment && isLocatedBefore(lastToken, lastComment)) {\n             lastLine = lastComment.loc.end.line;"},{"sha":"45b0f35149ec653f2d6efc393f0e493b05a021bd","filename":"tests/lib/rules/padded-blocks.js","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/fae1884d23fada3c9c2fb9d2d7d08d20b888e7e1/tests%2Flib%2Frules%2Fpadded-blocks.js","raw_url":"https://github.com/eslint/eslint/raw/fae1884d23fada3c9c2fb9d2d7d08d20b888e7e1/tests%2Flib%2Frules%2Fpadded-blocks.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fpadded-blocks.js?ref=fae1884d23fada3c9c2fb9d2d7d08d20b888e7e1","patch":"@@ -30,6 +30,8 @@ ruleTester.run(\"padded-blocks\", rule, {\n         {code: \"{\\n\\na();\\n//comment\\n\\n}\" },\n         {code: \"{\\n\\na()\\n//comment\\n\\n}\" },\n         {code: \"{\\n\\na = 1\\n\\n}\" },\n+        {code: \"{//comment\\n\\na();\\n\\n}\" },\n+        {code: \"{\\n\\na();\\n\\n/* comment */ }\" },\n         {code: \"{\\na();\\n}\", options: [\"never\"]},\n         {code: \"{\\na();}\", options: [\"never\"]},\n         {code: \"{a();\\n}\", options: [\"never\"]},"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/4428","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/4428/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/4428/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/4428/events","html_url":"https://github.com/eslint/eslint/pull/4428","id":116965249,"node_id":"MDExOlB1bGxSZXF1ZXN0NTA3MzY3Nzg=","number":4428,"title":"Fix: Improves performance (refs #3530)","user":{"login":"mysticatea","id":1937871,"node_id":"MDQ6VXNlcjE5Mzc4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1937871?v=4","gravatar_id":"","url":"https://api.github.com/users/mysticatea","html_url":"https://github.com/mysticatea","followers_url":"https://api.github.com/users/mysticatea/followers","following_url":"https://api.github.com/users/mysticatea/following{/other_user}","gists_url":"https://api.github.com/users/mysticatea/gists{/gist_id}","starred_url":"https://api.github.com/users/mysticatea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mysticatea/subscriptions","organizations_url":"https://api.github.com/users/mysticatea/orgs","repos_url":"https://api.github.com/users/mysticatea/repos","events_url":"https://api.github.com/users/mysticatea/events{/privacy}","received_events_url":"https://api.github.com/users/mysticatea/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-11-15T01:09:31Z","updated_at":"2018-02-07T00:06:11Z","closed_at":"2015-11-19T17:25:58Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/4428","html_url":"https://github.com/eslint/eslint/pull/4428","diff_url":"https://github.com/eslint/eslint/pull/4428.diff","patch_url":"https://github.com/eslint/eslint/pull/4428.patch","merged_at":"2015-11-19T17:25:58Z"},"body":"This was separated from #3559 \n- `RuleContext` method definitions are moved to outside of the constructor. `RuleContext` object is created many times, so that constructor should be as simple as possible. (`lib/rule-context.js`)\n- Construction of a regular expression object which depends on rule's options is moved to outside of `getNodeIndent` function. The function is called many times and to create dynamic regular expression object is slow. (`lib/rules/indent.js`)\n- Avoid calling `Function#apply` as possible. (`lib/eslint.js` and `lib/rule-context.js`)\n- Avoid calling `SourceCode#getTokens`. A CPU Profiler said that function is slow a bit. (`lib/rules/no-spaced-func.js` and `lib/rules/space-before-function-paren.js`)\n\n**Before** (`npm run perf` for multiple files)\n\n```\nCPU Speed is 3392 with multiplier 7500000\nPerformance Run #1:  3882.190459ms\nPerformance Run #2:  3767.144016ms\nPerformance Run #3:  3813.567308ms\nPerformance Run #4:  3784.897383ms\nPerformance Run #5:  3768.8099039999997ms\nPerformance budget exceeded: 3784.897383ms (limit: 2211.0849056603774ms)\n\n\nLoad performance Run #1:  252.483815ms\nLoad performance Run #2:  251.585219ms\nLoad performance Run #3:  248.925052ms\nLoad performance Run #4:  252.786566ms\nLoad performance Run #5:  253.870494ms\n\nLoad Performance median :  252.483815ms\n```\n\n**After**\n\n```\nCPU Speed is 3392 with multiplier 7500000\nPerformance Run #1:  3075.235085ms\nPerformance Run #2:  3030.254616ms\nPerformance Run #3:  3057.690596ms\nPerformance Run #4:  3047.723645ms\nPerformance Run #5:  3016.89371ms\nPerformance budget exceeded: 3047.723645ms (limit: 2211.0849056603774ms)\n\n\nLoad performance Run #1:  254.633259ms\nLoad performance Run #2:  250.226913ms\nLoad performance Run #3:  253.68184ms\nLoad performance Run #4:  252.021688ms\nLoad performance Run #5:  251.831827ms\n\nLoad Performance median :  252.021688ms\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/4428/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/4428/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"397d8da429e74884cfa8e288c9a8c7e28f351e05","filename":"lib/ast-utils.js","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Fast-utils.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Fast-utils.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fast-utils.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -129,5 +129,26 @@ module.exports = {\n      * @param {ASTNode} A node to get.\n      * @returns {ASTNode|null} The trailing statement's node.\n      */\n-    getTrailingStatement: esutils.ast.trailingStatement\n+    getTrailingStatement: esutils.ast.trailingStatement,\n+\n+    /**\n+     * Finds the variable by a given name in a given scope and its upper scopes.\n+     *\n+     * @param {escope.Scope} initScope - A scope to start find.\n+     * @param {string} name - A variable name to find.\n+     * @returns {escope.Variable|null} A found variable or `null`.\n+     */\n+    getVariableByName: function(initScope, name) {\n+        var scope = initScope;\n+        while (scope) {\n+            var variable = scope.set.get(name);\n+            if (variable) {\n+                return variable;\n+            }\n+\n+            scope = scope.upper;\n+        }\n+\n+        return null;\n+    }\n };"},{"sha":"78851856ae4918f04b2eac2292ec72f35274bbb2","filename":"lib/eslint.js","status":"modified","additions":13,"deletions":24,"changes":37,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Feslint.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -112,25 +112,6 @@ function parseListConfig(string) {\n     return items;\n }\n \n-/**\n- * @param {Scope} scope The scope object to check.\n- * @param {string} name The name of the variable to look up.\n- * @returns {Variable} The variable object if found or null if not.\n- */\n-function getVariable(scope, name) {\n-    var variable = null;\n-    scope.variables.some(function(v) {\n-        if (v.name === name) {\n-            variable = v;\n-            return true;\n-        } else {\n-            return false;\n-        }\n-\n-    });\n-    return variable;\n-}\n-\n /**\n  * Ensures that variables representing built-in properties of the Global Object,\n  * and any globals declared by special block comments, are present in the global\n@@ -162,29 +143,31 @@ function addDeclaredGlobals(program, globalScope, config) {\n     assign(explicitGlobals, config.astGlobals);\n \n     Object.keys(declaredGlobals).forEach(function(name) {\n-        var variable = getVariable(globalScope, name);\n+        var variable = globalScope.set.get(name);\n         if (!variable) {\n             variable = new escope.Variable(name, globalScope);\n             variable.eslintExplicitGlobal = false;\n             globalScope.variables.push(variable);\n+            globalScope.set.set(name, variable);\n         }\n         variable.writeable = declaredGlobals[name];\n     });\n \n     Object.keys(explicitGlobals).forEach(function(name) {\n-        var variable = getVariable(globalScope, name);\n+        var variable = globalScope.set.get(name);\n         if (!variable) {\n             variable = new escope.Variable(name, globalScope);\n             variable.eslintExplicitGlobal = true;\n             variable.eslintExplicitGlobalComment = explicitGlobals[name].comment;\n             globalScope.variables.push(variable);\n+            globalScope.set.set(name, variable);\n         }\n         variable.writeable = explicitGlobals[name].value;\n     });\n \n     // mark all exported variables as such\n     Object.keys(exportedGlobals).forEach(function(name) {\n-        var variable = getVariable(globalScope, name);\n+        var variable = globalScope.set.get(name);\n         if (variable) {\n             variable.eslintUsed = true;\n         }\n@@ -891,8 +874,14 @@ module.exports = (function() {\n \n     // copy over methods\n     Object.keys(externalMethods).forEach(function(methodName) {\n-        api[methodName] = function() {\n-            return sourceCode ? sourceCode[externalMethods[methodName]].apply(sourceCode, arguments) : null;\n+        var exMethodName = externalMethods[methodName];\n+\n+        // All functions expected to have less arguments than 5.\n+        api[methodName] = function(a, b, c, d, e) {\n+            if (sourceCode) {\n+                return sourceCode[exMethodName](a, b, c, d, e);\n+            }\n+            return null;\n         };\n     });\n "},{"sha":"aeed1e2a17ab5e3c41a2e9c775260f72c2628e5d","filename":"lib/rule-context.js","status":"modified","additions":41,"deletions":49,"changes":90,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frule-context.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frule-context.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frule-context.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -72,42 +72,29 @@ var PASSTHROUGHS = [\n  * @param {object} ecmaFeatures The ecmaFeatures settings passed from the config file.\n  */\n function RuleContext(ruleId, eslint, severity, options, settings, ecmaFeatures) {\n+    // public.\n+    this.id = ruleId;\n+    this.options = options;\n+    this.settings = settings;\n+    this.ecmaFeatures = ecmaFeatures;\n \n-    /**\n-     * The read-only ID of the rule.\n-     */\n-    Object.defineProperty(this, \"id\", {\n-        value: ruleId\n-    });\n+    // private.\n+    this.eslint = eslint;\n+    this.severity = severity;\n \n-    /**\n-     * The read-only options of the rule\n-     */\n-    Object.defineProperty(this, \"options\", {\n-        value: options\n-    });\n+    Object.freeze(this);\n+}\n \n-    /**\n-     * The read-only settings shared between all rules\n-     */\n-    Object.defineProperty(this, \"settings\", {\n-        value: settings\n-    });\n+RuleContext.prototype = {\n+    constructor: RuleContext,\n \n     /**\n-     * The read-only ecmaFeatures shared across all rules\n+     * Passthrough to eslint.getSourceCode().\n+     * @returns {SourceCode} The SourceCode object for the code.\n      */\n-    Object.defineProperty(this, \"ecmaFeatures\", {\n-        value: Object.create(ecmaFeatures)\n-    });\n-    Object.freeze(this.ecmaFeatures);\n-\n-    // copy over passthrough methods\n-    PASSTHROUGHS.forEach(function(name) {\n-        this[name] = function() {\n-            return eslint[name].apply(eslint, arguments);\n-        };\n-    }, this);\n+    getSourceCode: function() {\n+        return this.eslint.getSourceCode();\n+    },\n \n     /**\n      * Passthrough to eslint.report() that automatically assigns the rule ID and severity.\n@@ -119,8 +106,7 @@ function RuleContext(ruleId, eslint, severity, options, settings, ecmaFeatures)\n      *     with symbols being replaced by this object's values.\n      * @returns {void}\n      */\n-    this.report = function(nodeOrDescriptor, location, message, opts) {\n-\n+    report: function(nodeOrDescriptor, location, message, opts) {\n         var descriptor,\n             fix = null;\n \n@@ -133,31 +119,37 @@ function RuleContext(ruleId, eslint, severity, options, settings, ecmaFeatures)\n                 fix = descriptor.fix(new RuleFixer());\n             }\n \n-            eslint.report(\n-                ruleId, severity, descriptor.node,\n+            this.eslint.report(\n+                this.id,\n+                this.severity,\n+                descriptor.node,\n                 descriptor.loc || descriptor.node.loc.start,\n-                descriptor.message, descriptor.data, fix\n+                descriptor.message,\n+                descriptor.data,\n+                fix\n             );\n \n             return;\n         }\n \n         // old style call\n-        eslint.report(ruleId, severity, nodeOrDescriptor, location, message, opts);\n-    };\n+        this.eslint.report(\n+            this.id,\n+            this.severity,\n+            nodeOrDescriptor,\n+            location,\n+            message,\n+            opts\n+        );\n+    }\n+};\n \n-    /**\n-     * Passthrough to eslint.getSourceCode().\n-     * @returns {SourceCode} The SourceCode object for the code.\n-     */\n-    this.getSourceCode = function() {\n-        return eslint.getSourceCode();\n+// copy over passthrough methods\n+PASSTHROUGHS.forEach(function(name) {\n+    // All functions expected to have less arguments than 5.\n+    this[name] = function(a, b, c, d, e) {\n+        return this.eslint[name](a, b, c, d, e);\n     };\n-\n-}\n-\n-RuleContext.prototype = {\n-    constructor: RuleContext\n-};\n+}, RuleContext.prototype);\n \n module.exports = RuleContext;"},{"sha":"81dc8473e625a8e19698eb4f330333698e4e8761","filename":"lib/rules/consistent-this.js","status":"modified","additions":25,"deletions":29,"changes":54,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fconsistent-this.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fconsistent-this.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fconsistent-this.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -53,39 +53,35 @@ module.exports = function(context) {\n      */\n     function ensureWasAssigned() {\n         var scope = context.getScope();\n+        var variable = scope.set.get(alias);\n+        if (!variable) {\n+            return;\n+        }\n+\n+        if (variable.defs.some(function(def) {\n+            return def.node.type === \"VariableDeclarator\" &&\n+                def.node.init !== null;\n+        })) {\n+            return;\n+        }\n \n-        scope.variables.some(function(variable) {\n-            var lookup;\n-\n-            if (variable.name === alias) {\n-                if (variable.defs.some(function(def) {\n-                    return def.node.type === \"VariableDeclarator\" &&\n-                        def.node.init !== null;\n-                })) {\n-                    return true;\n-                }\n-\n-                lookup = scope.type === \"global\" ? scope : variable;\n-\n-                // The alias has been declared and not assigned: check it was\n-                // assigned later in the same scope.\n-                if (!lookup.references.some(function(reference) {\n-                    var write = reference.writeExpr;\n-\n-                    if (reference.from === scope &&\n-                            write && write.type === \"ThisExpression\" &&\n-                            write.parent.operator === \"=\") {\n-                        return true;\n-                    }\n-                })) {\n-                    variable.defs.map(function(def) {\n-                        return def.node;\n-                    }).forEach(reportBadAssignment);\n-                }\n+        var lookup = (variable.references.length === 0 && scope.type === \"global\") ? scope : variable;\n \n+        // The alias has been declared and not assigned: check it was\n+        // assigned later in the same scope.\n+        if (!lookup.references.some(function(reference) {\n+            var write = reference.writeExpr;\n+\n+            if (reference.from === scope &&\n+                    write && write.type === \"ThisExpression\" &&\n+                    write.parent.operator === \"=\") {\n                 return true;\n             }\n-        });\n+        })) {\n+            variable.defs.map(function(def) {\n+                return def.node;\n+            }).forEach(reportBadAssignment);\n+        }\n     }\n \n     return {"},{"sha":"b69539b227a60291860b1b0bb6fb11764be3348d","filename":"lib/rules/indent.js","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Findent.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Findent.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Findent.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -75,6 +75,11 @@ module.exports = function(context) {\n         }\n     }\n \n+    var indentPattern = {\n+        normal: indentType === \"space\" ? /^ +/ : /^\\t+/,\n+        excludeCommas: indentType === \"space\" ? /^[ ,]+/ : /^[\\t,]+/\n+    };\n+\n     var caseIndentStore = {};\n \n     /**\n@@ -168,17 +173,9 @@ module.exports = function(context) {\n     function getNodeIndent(node, byLastLine, excludeCommas) {\n         var token = byLastLine ? context.getLastToken(node) : context.getFirstToken(node);\n         var src = context.getSource(token, token.loc.start.column);\n-\n-        var skip = excludeCommas ? \",\" : \"\";\n-\n-        var regExp;\n-        if (indentType === \"space\") {\n-            regExp = new RegExp(\"^[ \" + skip + \"]+\");\n-        } else {\n-            regExp = new RegExp(\"^[\\t\" + skip + \"]+\");\n-        }\n-\n+        var regExp = excludeCommas ? indentPattern.excludeCommas : indentPattern.normal;\n         var indent = regExp.exec(src);\n+\n         return indent ? indent[0].length : 0;\n     }\n "},{"sha":"b73b009b8a33a0ce5d0e8e88c02bca29ea374a0b","filename":"lib/rules/lines-around-comment.js","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Flines-around-comment.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Flines-around-comment.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Flines-around-comment.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -7,6 +7,16 @@\n  */\n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var assign = require(\"object-assign\");\n+\n+//------------------------------------------------------------------------------\n+// Helpers\n+//------------------------------------------------------------------------------\n+\n /**\n  * Return an array with with any line numbers that are empty.\n  * @param {Array} lines An array of each line of the file.\n@@ -57,7 +67,7 @@ function contains(val, array) {\n \n module.exports = function(context) {\n \n-    var options = context.options[0] || {};\n+    var options = context.options[0] ? assign({}, context.options[0]) : {};\n     options.beforeLineComment = options.beforeLineComment || false;\n     options.afterLineComment = options.afterLineComment || false;\n     options.beforeBlockComment = typeof options.beforeBlockComment !== \"undefined\" ? options.beforeBlockComment : true;"},{"sha":"9518b1eff0c0aa0a483e9708ff657882ad58709f","filename":"lib/rules/new-cap.js","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fnew-cap.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fnew-cap.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fnew-cap.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -7,6 +7,16 @@\n \n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var assign = require(\"object-assign\");\n+\n+//------------------------------------------------------------------------------\n+// Helpers\n+//------------------------------------------------------------------------------\n+\n var CAPS_ALLOWED = [\n     \"Array\",\n     \"Boolean\",\n@@ -67,7 +77,7 @@ function calculateCapIsNewExceptions(config) {\n \n module.exports = function(context) {\n \n-    var config = context.options[0] || {};\n+    var config = context.options[0] ? assign({}, context.options[0]) : {};\n     config.newIsCap = config.newIsCap !== false;\n     config.capIsNew = config.capIsNew !== false;\n     var skipProperties = config.properties === false;"},{"sha":"bfe834b44a9af2141e25884f714117a228ad8d34","filename":"lib/rules/no-alert.js","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-alert.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-alert.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-alert.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -69,9 +69,8 @@ function findReference(scope, node) {\n  * @returns {boolean} Whether or not the name is shadowed globally.\n  */\n function isGloballyShadowed(globalScope, identifierName) {\n-    return globalScope.variables.some(function(variable) {\n-        return variable.name === identifierName && variable.defs.length > 0;\n-    });\n+    var variable = globalScope.set.get(identifierName);\n+    return Boolean(variable && variable.defs.length > 0);\n }\n \n /**"},{"sha":"88eeb02fa6182c1e9e7340ce6173de39ece81507","filename":"lib/rules/no-catch-shadow.js","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-catch-shadow.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-catch-shadow.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-catch-shadow.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -5,6 +5,12 @@\n \n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -22,19 +28,7 @@ module.exports = function(context) {\n      * @returns {boolean} True is its been shadowed\n      */\n     function paramIsShadowing(scope, name) {\n-        var found = scope.variables.some(function(variable) {\n-            return variable.name === name;\n-        });\n-\n-        if (found) {\n-            return true;\n-        }\n-\n-        if (scope.upper) {\n-            return paramIsShadowing(scope.upper, name);\n-        }\n-\n-        return false;\n+        return astUtils.getVariableByName(scope, name) !== null;\n     }\n \n     //--------------------------------------------------------------------------"},{"sha":"20fbfc182df41f0170bfa7b4300d8bc41a31b57e","filename":"lib/rules/no-label-var.js","status":"modified","additions":9,"deletions":23,"changes":32,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-label-var.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-label-var.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-label-var.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -5,6 +5,12 @@\n \n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -18,32 +24,12 @@ module.exports = function(context) {\n     /**\n      * Check if the identifier is present inside current scope\n      * @param {object} scope current scope\n-     * @param {ASTNode} identifier To evaluate\n+     * @param {string} name To evaluate\n      * @returns {boolean} True if its present\n      * @private\n      */\n-    function findIdentifier(scope, identifier) {\n-        var found = false;\n-\n-        scope.variables.forEach(function(variable) {\n-            if (variable.name === identifier) {\n-                found = true;\n-            }\n-        });\n-\n-        scope.references.forEach(function(reference) {\n-            if (reference.identifier.name === identifier) {\n-                found = true;\n-            }\n-        });\n-\n-        // If we have not found the identifier in this scope, check the parent\n-        // scope.\n-        if (scope.upper && !found) {\n-            return findIdentifier(scope.upper, identifier);\n-        }\n-\n-        return found;\n+    function findIdentifier(scope, name) {\n+        return astUtils.getVariableByName(scope, name) !== null;\n     }\n \n     //--------------------------------------------------------------------------"},{"sha":"35c5a04f2e6e082d5d7dced0dfb4c8872dc2a1bf","filename":"lib/rules/no-shadow.js","status":"modified","additions":31,"deletions":58,"changes":89,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-shadow.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-shadow.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-shadow.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -6,6 +6,12 @@\n \n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -99,70 +105,37 @@ module.exports = function(context) {\n         );\n     }\n \n-    /**\n-     * Checks if a variable is contained in the list of given scope variables.\n-     * @param {Object} variable The variable to check.\n-     * @param {Array} scopeVars The scope variables to look for.\n-     * @returns {boolean} Whether or not the variable is contains in the list of scope variables.\n-     */\n-    function isContainedInScopeVars(variable, scopeVars) {\n-        return scopeVars.some(function(scopeVar) {\n-            return (\n-                (scopeVar.identifiers.length > 0 || (options.builtinGlobals && \"writeable\" in scopeVar)) &&\n-                variable.name === scopeVar.name &&\n-                !isDuplicatedClassNameVariable(scopeVar) &&\n-                !isOnInitializer(variable, scopeVar) &&\n-                !(options.hoist !== \"all\" && isInTdz(variable, scopeVar))\n-            );\n-        });\n-    }\n-\n-    /**\n-     * Checks if the given variables are shadowed in the given scope.\n-     * @param {Array} variables The variables to look for\n-     * @param {Object} scope The scope to be checked.\n-     * @returns {Array} Variables which are not declared in the given scope.\n-     */\n-    function checkShadowsInScope(variables, scope) {\n-\n-        var passedVars = [];\n-\n-        variables.forEach(function(variable) {\n-            // \"arguments\" is a special case that has no identifiers (#1759)\n-            if (variable.identifiers.length > 0 && isContainedInScopeVars(variable, scope.variables)) {\n-                context.report(\n-                    variable.identifiers[0],\n-                    \"\\\"{{name}}\\\" is already declared in the upper scope.\",\n-                    {name: variable.name});\n-            } else {\n-                passedVars.push(variable);\n-            }\n-        });\n-\n-        return passedVars;\n-    }\n-\n     /**\n      * Checks the current context for shadowed variables.\n      * @param {Scope} scope - Fixme\n      * @returns {void}\n      */\n     function checkForShadows(scope) {\n-        var variables = scope.variables.filter(function(variable) {\n-            return (\n-                // Skip \"arguments\".\n-                variable.identifiers.length > 0 &&\n-                // Skip variables of a class name in the class scope of ClassDeclaration.\n-                !isDuplicatedClassNameVariable(variable) &&\n-                !isAllowed(variable)\n-            );\n-        });\n-\n-        // iterate through the array of variables and find duplicates with the upper scope\n-        var upper = scope.upper;\n-        while (upper && variables.length) {\n-            variables = checkShadowsInScope(variables, upper);\n-            upper = upper.upper;\n+        var variables = scope.variables;\n+        for (var i = 0; i < variables.length; ++i) {\n+            var variable = variables[i];\n+\n+            // Skips \"arguments\" or variables of a class name in the class scope of ClassDeclaration.\n+            if (variable.identifiers.length === 0 ||\n+                isDuplicatedClassNameVariable(variable) ||\n+                isAllowed(variable)\n+            ) {\n+                continue;\n+            }\n+\n+            // Gets shadowed variable.\n+            var shadowed = astUtils.getVariableByName(scope.upper, variable.name);\n+            if (shadowed &&\n+                (shadowed.identifiers.length > 0 || (options.builtinGlobals && \"writeable\" in shadowed)) &&\n+                !isOnInitializer(variable, shadowed) &&\n+                !(options.hoist !== \"all\" && isInTdz(variable, shadowed))\n+            ) {\n+                context.report({\n+                    node: variable.identifiers[0],\n+                    message: \"\\\"{{name}}\\\" is already declared in the upper scope.\",\n+                    data: variable\n+                });\n+            }\n         }\n     }\n "},{"sha":"4513d80472d285482e68efdf6dc7a5a9308b5393","filename":"lib/rules/no-spaced-func.js","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-spaced-func.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-spaced-func.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-spaced-func.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -21,26 +21,26 @@ module.exports = function(context) {\n      */\n     function detectOpenSpaces(node) {\n         var lastCalleeToken = sourceCode.getLastToken(node.callee),\n-            tokens = sourceCode.getTokens(node),\n-            i = tokens.indexOf(lastCalleeToken),\n-            l = tokens.length;\n+            prevToken = lastCalleeToken,\n+            parenToken = sourceCode.getTokenAfter(lastCalleeToken);\n \n-        while (i < l && tokens[i].value !== \"(\") {\n-            ++i;\n+        if (sourceCode.getLastToken(node).value !== \")\") {\n+            return;\n         }\n \n-        if (i >= l) {\n-            return;\n+        while (parenToken.value !== \"(\") {\n+            prevToken = parenToken;\n+            parenToken = sourceCode.getTokenAfter(parenToken);\n         }\n \n         // look for a space between the callee and the open paren\n-        if (sourceCode.isSpaceBetweenTokens(tokens[i - 1], tokens[i])) {\n+        if (sourceCode.isSpaceBetweenTokens(prevToken, parenToken)) {\n             context.report({\n                 node: node,\n                 loc: lastCalleeToken.loc.start,\n                 message: \"Unexpected space between function name and paren.\",\n                 fix: function(fixer) {\n-                    return fixer.removeRange([tokens[i - 1].range[1], tokens[i].range[0]]);\n+                    return fixer.removeRange([prevToken.range[1], parenToken.range[0]]);\n                 }\n             });\n         }"},{"sha":"988d677cd72e0223c61dfb51bf0ca55c9bc05ea4","filename":"lib/rules/no-undef.js","status":"modified","additions":10,"deletions":13,"changes":23,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-undef.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-undef.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-undef.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -10,12 +10,14 @@\n // Requirements\n //------------------------------------------------------------------------------\n \n-// none!\n+var astUtils = require(\"../ast-utils\");\n \n //------------------------------------------------------------------------------\n // Helpers\n //------------------------------------------------------------------------------\n \n+var hasOwnProperty = Object.prototype.hasOwnProperty;\n+\n /**\n  * Check if a variable is an implicit declaration\n  * @param {ASTNode} variable node to evaluate\n@@ -35,18 +37,13 @@ function isImplicitGlobal(variable) {\n  * @returns {Variable} The variable, or null if ref refers to an undeclared variable.\n  */\n function getDeclaredGlobalVariable(scope, ref) {\n-    var declaredGlobal = null;\n-    scope.variables.some(function(variable) {\n-        if (variable.name === ref.identifier.name) {\n-            // If it's an implicit global, it must have a `writeable` field (indicating it was declared)\n-            if (!isImplicitGlobal(variable) || {}.hasOwnProperty.call(variable, \"writeable\")) {\n-                declaredGlobal = variable;\n-                return true;\n-            }\n-        }\n-        return false;\n-    });\n-    return declaredGlobal;\n+    var variable = astUtils.getVariableByName(scope, ref.identifier.name);\n+\n+    // If it's an implicit global, it must have a `writeable` field (indicating it was declared)\n+    if (variable && (!isImplicitGlobal(variable) || hasOwnProperty.call(variable, \"writeable\"))) {\n+        return variable;\n+    }\n+    return null;\n }\n \n /**"},{"sha":"9518d9e50b1fab7f1166d5373748e5dcf8eb6644","filename":"lib/rules/no-use-before-define.js","status":"modified","additions":7,"deletions":21,"changes":28,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-use-before-define.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fno-use-before-define.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-use-before-define.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -6,6 +6,12 @@\n \n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var astUtils = require(\"../ast-utils\");\n+\n //------------------------------------------------------------------------------\n // Constants\n //------------------------------------------------------------------------------\n@@ -18,26 +24,6 @@ var NO_FUNC = \"nofunc\";\n \n module.exports = function(context) {\n \n-    /**\n-     * Finds variable declarations in a given scope.\n-     * @param {string} name The variable name to find.\n-     * @param {Scope} scope The scope to search in.\n-     * @returns {Object} The variable declaration object.\n-     * @private\n-     */\n-    function findDeclaration(name, scope) {\n-        // try searching in the current scope first\n-        for (var i = 0, l = scope.variables.length; i < l; i++) {\n-            if (scope.variables[i].name === name) {\n-                return scope.variables[i];\n-            }\n-        }\n-        // check if there's upper scope and call recursivly till we find the variable\n-        if (scope.upper) {\n-            return findDeclaration(name, scope.upper);\n-        }\n-    }\n-\n     /**\n      * Finds and validates all variables in a given scope.\n      * @param {Scope} scope The scope object.\n@@ -68,7 +54,7 @@ module.exports = function(context) {\n             if (reference.resolved && reference.resolved.identifiers.length > 0) {\n                 checkLocationAndReport(reference, reference.resolved);\n             } else {\n-                var declaration = findDeclaration(reference.identifier.name, scope);\n+                var declaration = astUtils.getVariableByName(scope, reference.identifier.name);\n                 // if there're no identifiers, this is a global environment variable\n                 if (declaration && declaration.identifiers.length !== 0) {\n                     checkLocationAndReport(reference, declaration);"},{"sha":"d23032ea4a70fb3fa4afdc1c1759cd49e449fe86","filename":"lib/rules/operator-linebreak.js","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Foperator-linebreak.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Foperator-linebreak.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Foperator-linebreak.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -6,7 +6,8 @@\n \n \"use strict\";\n \n-var astUtils = require(\"../ast-utils\");\n+var assign = require(\"object-assign\"),\n+    astUtils = require(\"../ast-utils\");\n \n //------------------------------------------------------------------------------\n // Rule Definition\n@@ -17,7 +18,7 @@ module.exports = function(context) {\n     var usedDefaultGlobal = !context.options[0];\n     var globalStyle = context.options[0] || \"after\";\n     var options = context.options[1] || {};\n-    var styleOverrides = options.overrides || {};\n+    var styleOverrides = options.overrides ? assign({}, options.overrides) : {};\n \n     if (usedDefaultGlobal && !styleOverrides[\"?\"]) {\n         styleOverrides[\"?\"] = \"before\";"},{"sha":"b96acb6678c42ed4c5fe26480dffb8b112f7374a","filename":"lib/rules/space-before-function-paren.js","status":"modified","additions":5,"deletions":26,"changes":31,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fspace-before-function-paren.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fspace-before-function-paren.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fspace-before-function-paren.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -37,7 +37,7 @@ module.exports = function(context) {\n             return true;\n         }\n \n-        parent = context.getAncestors().pop();\n+        parent = node.parent;\n         return parent.type === \"MethodDefinition\" ||\n             (parent.type === \"Property\" &&\n                 (\n@@ -55,7 +55,6 @@ module.exports = function(context) {\n      */\n     function validateSpacingBeforeParentheses(node) {\n         var isNamed = isNamedFunction(node),\n-            tokens,\n             leftToken,\n             rightToken,\n             location;\n@@ -64,31 +63,11 @@ module.exports = function(context) {\n             return;\n         }\n \n-        tokens = context.getTokens(node);\n-\n-        if (node.generator) {\n-            if (node.id) {\n-                leftToken = tokens[2];\n-                rightToken = tokens[3];\n-            } else {\n-                // Object methods are named but don't have an id\n-                leftToken = context.getTokenBefore(node);\n-                rightToken = tokens[0];\n-            }\n-        } else if (isNamed) {\n-            if (node.id) {\n-                leftToken = tokens[1];\n-                rightToken = tokens[2];\n-            } else {\n-                // Object methods are named but don't have an id\n-                leftToken = context.getTokenBefore(node);\n-                rightToken = tokens[0];\n-            }\n-        } else {\n-            leftToken = tokens[0];\n-            rightToken = tokens[1];\n+        rightToken = sourceCode.getFirstToken(node);\n+        while (rightToken.value !== \"(\") {\n+            rightToken = sourceCode.getTokenAfter(rightToken);\n         }\n-\n+        leftToken = context.getTokenBefore(rightToken);\n         location = leftToken.loc.end;\n \n         if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {"},{"sha":"585dc7aec1b017f8617484d0d4e26725702e712c","filename":"lib/rules/spaced-comment.js","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fspaced-comment.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Frules%2Fspaced-comment.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fspaced-comment.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -41,9 +41,7 @@ function escapeAndRepeat(s) {\n  * @returns {string[]} A marker list.\n  */\n function parseMarkersOption(markers) {\n-    if (!markers) {\n-        markers = [];\n-    }\n+    markers = markers ? markers.slice(0) : [];\n \n     // `*` is a marker for JSDoc comments.\n     if (markers.indexOf(\"*\") === -1) {"},{"sha":"8966327b3c5e5c21cc6e5fc1317c328f42b6af88","filename":"lib/testers/rule-tester.js","status":"modified","additions":47,"deletions":6,"changes":53,"blob_url":"https://github.com/eslint/eslint/blob/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Ftesters%2Frule-tester.js","raw_url":"https://github.com/eslint/eslint/raw/65c33d85268790a095210c0d6d587ed636ebd2d3/lib%2Ftesters%2Frule-tester.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ftesters%2Frule-tester.js?ref=65c33d85268790a095210c0d6d587ed636ebd2d3","patch":"@@ -56,6 +56,7 @@ var assert = require(\"assert\"),\n     validator = require(\"../config-validator\"),\n     validate = require(\"is-my-json-valid\"),\n     eslint = require(\"../eslint\"),\n+    rules = require(\"../rules\"),\n     metaSchema = require(\"../../conf/json-schema-schema.json\"),\n     SourceCodeFixer = require(\"../util/source-code-fixer\");\n \n@@ -106,6 +107,27 @@ function cloneDeeplyExcludesParent(x) {\n     return x;\n }\n \n+/**\n+ * Freezes a given value deeply.\n+ *\n+ * @param {any} x - A value to freeze.\n+ * @returns {void}\n+ */\n+function freezeDeeply(x) {\n+    if (typeof x === \"object\" && x !== null) {\n+        if (Array.isArray(x)) {\n+            x.forEach(freezeDeeply);\n+        } else {\n+            for (var key in x) {\n+                if (key !== \"parent\" && hasOwnProperty(x, key)) {\n+                    freezeDeeply(x[key]);\n+                }\n+            }\n+        }\n+        Object.freeze(x);\n+    }\n+}\n+\n //------------------------------------------------------------------------------\n // Public Interface\n //------------------------------------------------------------------------------\n@@ -251,7 +273,8 @@ RuleTester.prototype = {\n \n             validator.validate(config, \"rule-tester\");\n \n-            // To cache AST.\n+            // Setup AST getters.\n+            // To check whether or not AST was not modified in verify.\n             eslint.reset();\n             eslint.on(\"Program\", function(node) {\n                 beforeAST = cloneDeeplyExcludesParent(node);\n@@ -261,11 +284,29 @@ RuleTester.prototype = {\n                 });\n             });\n \n-            return {\n-                messages: eslint.verify(code, config, filename, true),\n-                beforeAST: beforeAST,\n-                afterAST: afterAST\n-            };\n+            // Freezes rule-context properties.\n+            var originalGet = rules.get;\n+            try {\n+                rules.get = function(ruleId) {\n+                    var rule = originalGet(ruleId);\n+                    return function(context) {\n+                        Object.freeze(context);\n+                        freezeDeeply(context.options);\n+                        freezeDeeply(context.settings);\n+                        freezeDeeply(context.ecmaFeatures);\n+\n+                        return rule(context);\n+                    };\n+                };\n+\n+                return {\n+                    messages: eslint.verify(code, config, filename, true),\n+                    beforeAST: beforeAST,\n+                    afterAST: afterAST\n+                };\n+            } finally {\n+                rules.get = originalGet;\n+            }\n         }\n \n         /**"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/3710","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/3710/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/3710/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/3710/events","html_url":"https://github.com/eslint/eslint/pull/3710","id":105557748,"node_id":"MDExOlB1bGxSZXF1ZXN0NDQ1MjcyNTI=","number":3710,"title":"Update: Refactors the traversing logic with the decorator pattern","user":{"login":"mysticatea","id":1937871,"node_id":"MDQ6VXNlcjE5Mzc4NzE=","avatar_url":"https://avatars.githubusercontent.com/u/1937871?v=4","gravatar_id":"","url":"https://api.github.com/users/mysticatea","html_url":"https://github.com/mysticatea","followers_url":"https://api.github.com/users/mysticatea/followers","following_url":"https://api.github.com/users/mysticatea/following{/other_user}","gists_url":"https://api.github.com/users/mysticatea/gists{/gist_id}","starred_url":"https://api.github.com/users/mysticatea/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mysticatea/subscriptions","organizations_url":"https://api.github.com/users/mysticatea/orgs","repos_url":"https://api.github.com/users/mysticatea/repos","events_url":"https://api.github.com/users/mysticatea/events{/privacy}","received_events_url":"https://api.github.com/users/mysticatea/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-09-09T09:22:08Z","updated_at":"2018-02-07T00:31:07Z","closed_at":"2015-09-14T15:45:14Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/3710","html_url":"https://github.com/eslint/eslint/pull/3710","diff_url":"https://github.com/eslint/eslint/pull/3710.diff","patch_url":"https://github.com/eslint/eslint/pull/3710.patch","merged_at":"2015-09-14T15:45:14Z"},"body":"From #3559.\n\nI refactored the traversing logic with the decorator pattern.\nThis modification can conflict with other features, so I separated PR.\n\n---\n\nBefore:\n\n```\n> node Makefile.js perf\n\nCPU Speed is 3392 with multiplier 7500000\nPerformance Run #1:  4449.28339ms\nPerformance Run #2:  4483.965085ms\nPerformance Run #3:  4434.058325ms\nPerformance Run #4:  4471.048229ms\nPerformance Run #5:  4430.7715339999995ms\nPerformance budget exceeded: 4449.28339ms (limit: 2211.0849056603774ms)\n```\n\nAfter:\n\n```\n> node Makefile.js perf\n\nCPU Speed is 3392 with multiplier 7500000\nPerformance Run #1:  4459.112069ms\nPerformance Run #2:  4460.901406ms\nPerformance Run #3:  4406.947205ms\nPerformance Run #4:  4435.939423ms\nPerformance Run #5:  4476.988842ms\nPerformance budget exceeded: 4459.112069ms (limit: 2211.0849056603774ms)\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/3710/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/3710/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"924c80fc5b173c7ab8ab0bc9c50c1bb66545e333","filename":"lib/eslint.js","status":"modified","additions":7,"deletions":56,"changes":63,"blob_url":"https://github.com/eslint/eslint/blob/d87f55bf11ef2737d30d6de6a39118e02e44e609/lib%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/d87f55bf11ef2737d30d6de6a39118e02e44e609/lib%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Feslint.js?ref=d87f55bf11ef2737d30d6de6a39118e02e44e609","patch":"@@ -20,6 +20,8 @@ var estraverse = require(\"estraverse-fb\"),\n     RuleContext = require(\"./rule-context\"),\n     timing = require(\"./timing\"),\n     SourceCode = require(\"./util/source-code\"),\n+    NodeEventGenerator = require(\"./util/node-event-generator\"),\n+    CommentEventGenerator = require(\"./util/comment-event-generator\"),\n     EventEmitter = require(\"events\").EventEmitter,\n     validator = require(\"./config-validator\"),\n     replacements = require(\"../conf/replacements.json\");\n@@ -498,8 +500,6 @@ module.exports = (function() {\n         currentFilename = null,\n         controller = null,\n         reportingConfig = [],\n-        commentLocsEnter = [],\n-        commentLocsExit = [],\n         sourceCode = null;\n \n     /**\n@@ -564,46 +564,6 @@ module.exports = (function() {\n         }\n     }\n \n-    /**\n-     * Check collection of comments to prevent double event for comment as\n-     * leading and trailing, then emit event if passing\n-     * @param {ASTNode[]} comments Collection of comment nodes\n-     * @param {Object[]} locs List of locations of previous comment nodes\n-     * @param {string} eventName Event name postfix\n-     * @returns {void}\n-     */\n-    function emitComments(comments, locs, eventName) {\n-\n-        if (comments.length) {\n-            comments.forEach(function(node) {\n-                if (locs.indexOf(node.loc) >= 0) {\n-                    locs.splice(locs.indexOf(node.loc), 1);\n-                } else {\n-                    locs.push(node.loc);\n-                    api.emit(node.type + eventName, node);\n-                }\n-            });\n-        }\n-    }\n-\n-    /**\n-     * Shortcut to check and emit enter of comment nodes\n-     * @param {ASTNode[]} comments Collection of comment nodes\n-     * @returns {void}\n-     */\n-    function emitCommentsEnter(comments) {\n-        emitComments(comments, commentLocsEnter, \"Comment\");\n-    }\n-\n-    /**\n-     * Shortcut to check and emit exit of comment nodes\n-     * @param {ASTNode[]} comments Collection of comment nodes\n-     * @returns {void}\n-     */\n-    function emitCommentsExit(comments) {\n-        emitComments(comments, commentLocsExit, \"Comment:exit\");\n-    }\n-\n     /**\n      * Get the severity level of a rule (0 - none, 1 - warning, 2 - error)\n      * Returns 0 if the rule config is not valid (an Array or a number)\n@@ -649,8 +609,6 @@ module.exports = (function() {\n         scopeManager = null;\n         controller = null;\n         reportingConfig = [];\n-        commentLocsEnter = [];\n-        commentLocsExit = [];\n         sourceCode = null;\n     };\n \n@@ -811,28 +769,21 @@ module.exports = (function() {\n                 }\n             }\n \n+            var eventGenerator = new NodeEventGenerator(api);\n+            eventGenerator = new CommentEventGenerator(eventGenerator, sourceCode);\n+\n             /*\n              * Each node has a type property. Whenever a particular type of node is found,\n              * an event is fired. This allows any listeners to automatically be informed\n              * that this type of node has been found and react accordingly.\n              */\n             controller.traverse(ast, {\n                 enter: function(node, parent) {\n-\n-                    var comments = api.getComments(node);\n-\n-                    emitCommentsEnter(comments.leading);\n                     node.parent = parent;\n-                    api.emit(node.type, node);\n-                    emitCommentsEnter(comments.trailing);\n+                    eventGenerator.enterNode(node);\n                 },\n                 leave: function(node) {\n-\n-                    var comments = api.getComments(node);\n-\n-                    emitCommentsExit(comments.trailing);\n-                    api.emit(node.type + \":exit\", node);\n-                    emitCommentsExit(comments.leading);\n+                    eventGenerator.leaveNode(node);\n                 }\n             });\n "},{"sha":"ce2f3c8cc1f1d8f16faa6987025d15a4dbae2568","filename":"lib/testers/event-generator-tester.js","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/eslint/eslint/blob/d87f55bf11ef2737d30d6de6a39118e02e44e609/lib%2Ftesters%2Fevent-generator-tester.js","raw_url":"https://github.com/eslint/eslint/raw/d87f55bf11ef2737d30d6de6a39118e02e44e609/lib%2Ftesters%2Fevent-generator-tester.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ftesters%2Fevent-generator-tester.js?ref=d87f55bf11ef2737d30d6de6a39118e02e44e609","patch":"@@ -0,0 +1,63 @@\n+/**\n+ * @fileoverview Helpers to test EventGenerator interface.\n+ * @author Toru Nagashima\n+ * @copyright 2015 Toru Nagashima. All rights reserved.\n+ * See LICENSE file in root directory for full license.\n+ */\n+\"use strict\";\n+\n+/* global describe, it */\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var assert = require(\"assert\");\n+\n+//------------------------------------------------------------------------------\n+// Public Interface\n+//------------------------------------------------------------------------------\n+\n+module.exports = {\n+    /**\n+     * Overrideable `describe` function to test.\n+     * @param {string} text - A description.\n+     * @param {function} method - A test logic.\n+     * @returns {any} The returned value with the test logic.\n+     */\n+    describe: (typeof describe === \"function\") ? describe : function(text, method) {\n+        return method.apply(this);\n+    },\n+\n+    /**\n+     * Overrideable `it` function to test.\n+     * @param {string} text - A description.\n+     * @param {function} method - A test logic.\n+     * @returns {any} The returned value with the test logic.\n+     */\n+    it: (typeof it === \"function\") ? it : function(text, method) {\n+        return method.apply(this);\n+    },\n+\n+    /**\n+     * Does some tests to check a given object implements the EventGenerator interface.\n+     * @param {object} instance - An object to check.\n+     * @returns {void}\n+     */\n+    testEventGeneratorInterface: function(instance) {\n+        this.describe(\"should implement EventGenerator interface\", function() {\n+            this.it(\"should have `emitter` property.\", function() {\n+                assert.equal(typeof instance.emitter, \"object\");\n+                assert.equal(typeof instance.emitter.emit, \"function\");\n+            });\n+\n+            this.it(\"should have `enterNode` property.\", function() {\n+                assert.equal(typeof instance.enterNode, \"function\");\n+            });\n+\n+            this.it(\"should have `leaveNode` property.\", function() {\n+                assert.equal(typeof instance.leaveNode, \"function\");\n+            });\n+        }.bind(this));\n+    }\n+};"},{"sha":"fb56ee1c05141a5a82156a086e0bd959f7261794","filename":"lib/util/comment-event-generator.js","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/eslint/eslint/blob/d87f55bf11ef2737d30d6de6a39118e02e44e609/lib%2Futil%2Fcomment-event-generator.js","raw_url":"https://github.com/eslint/eslint/raw/d87f55bf11ef2737d30d6de6a39118e02e44e609/lib%2Futil%2Fcomment-event-generator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Futil%2Fcomment-event-generator.js?ref=d87f55bf11ef2737d30d6de6a39118e02e44e609","patch":"@@ -0,0 +1,116 @@\n+/**\n+ * @fileoverview The event generator for comments.\n+ * @author Toru Nagashima\n+ * @copyright 2015 Toru Nagashima. All rights reserved.\n+ * See LICENSE file in root directory for full license.\n+ */\n+\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Helpers\n+//------------------------------------------------------------------------------\n+\n+/**\n+ * Check collection of comments to prevent double event for comment as\n+ * leading and trailing, then emit event if passing\n+ * @param {ASTNode[]} comments - Collection of comment nodes\n+ * @param {EventEmitter} emitter - The event emitter which is the destination of events.\n+ * @param {Object[]} locs - List of locations of previous comment nodes\n+ * @param {string} eventName - Event name postfix\n+ * @returns {void}\n+ */\n+function emitComments(comments, emitter, locs, eventName) {\n+    if (comments.length > 0) {\n+        comments.forEach(function(node) {\n+            var index = locs.indexOf(node.loc);\n+            if (index >= 0) {\n+                locs.splice(index, 1);\n+            } else {\n+                locs.push(node.loc);\n+                emitter.emit(node.type + eventName, node);\n+            }\n+        });\n+    }\n+}\n+\n+/**\n+ * Shortcut to check and emit enter of comment nodes\n+ * @param {CommentEventGenerator} generator - A generator to emit.\n+ * @param {ASTNode[]} comments - Collection of comment nodes\n+ * @returns {void}\n+ */\n+function emitCommentsEnter(generator, comments) {\n+    emitComments(\n+        comments,\n+        generator.emitter,\n+        generator.commentLocsEnter,\n+        \"Comment\");\n+}\n+\n+/**\n+ * Shortcut to check and emit exit of comment nodes\n+ * @param {CommentEventGenerator} generator - A generator to emit.\n+ * @param {ASTNode[]} comments Collection of comment nodes\n+ * @returns {void}\n+ */\n+function emitCommentsExit(generator, comments) {\n+    emitComments(\n+        comments,\n+        generator.emitter,\n+        generator.commentLocsExit,\n+        \"Comment:exit\");\n+}\n+\n+//------------------------------------------------------------------------------\n+// Public Interface\n+//------------------------------------------------------------------------------\n+\n+/**\n+ * The event generator for comments.\n+ * This is the decorator pattern.\n+ * This generates events of comments before/after events which are generated the original generator.\n+ *\n+ * @param {EventGenerator} originalEventGenerator - An event generator which is the decoration target.\n+ * @param {SourceCode} sourceCode - A source code which has comments.\n+ * @returns {CommentEventGenerator} new instance.\n+ */\n+function CommentEventGenerator(originalEventGenerator, sourceCode) {\n+    this.original = originalEventGenerator;\n+    this.emitter = originalEventGenerator.emitter;\n+    this.sourceCode = sourceCode;\n+    this.commentLocsEnter = [];\n+    this.commentLocsExit = [];\n+}\n+\n+CommentEventGenerator.prototype = {\n+    constructor: CommentEventGenerator,\n+\n+    /**\n+     * Emits an event of entering comments.\n+     * @param {ASTNode} node - A node which was entered.\n+     * @returns {void}\n+     */\n+    enterNode: function enterNode(node) {\n+        var comments = this.sourceCode.getComments(node);\n+\n+        emitCommentsEnter(this, comments.leading);\n+        this.original.enterNode(node);\n+        emitCommentsEnter(this, comments.trailing);\n+    },\n+\n+    /**\n+     * Emits an event of leaving comments.\n+     * @param {ASTNode} node - A node which was left.\n+     * @returns {void}\n+     */\n+    leaveNode: function leaveNode(node) {\n+        var comments = this.sourceCode.getComments(node);\n+\n+        emitCommentsExit(this, comments.trailing);\n+        this.original.leaveNode(node);\n+        emitCommentsExit(this, comments.leading);\n+    }\n+};\n+\n+module.exports = CommentEventGenerator;"},{"sha":"002bd29dfe3ed0095d20427cae93223a8ebc577c","filename":"lib/util/node-event-generator.js","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/eslint/eslint/blob/d87f55bf11ef2737d30d6de6a39118e02e44e609/lib%2Futil%2Fnode-event-generator.js","raw_url":"https://github.com/eslint/eslint/raw/d87f55bf11ef2737d30d6de6a39118e02e44e609/lib%2Futil%2Fnode-event-generator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Futil%2Fnode-event-generator.js?ref=d87f55bf11ef2737d30d6de6a39118e02e44e609","patch":"@@ -0,0 +1,55 @@\n+/**\n+ * @fileoverview The event generator for AST nodes.\n+ * @author Toru Nagashima\n+ * @copyright 2015 Toru Nagashima. All rights reserved.\n+ * See LICENSE file in root directory for full license.\n+ */\n+\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Public Interface\n+//------------------------------------------------------------------------------\n+\n+/**\n+ * The event generator for AST nodes.\n+ * This implements below interface.\n+ *\n+ * ```ts\n+ * interface EventGenerator {\n+ *     emitter: EventEmitter;\n+ *     enterNode(node: ASTNode): void;\n+ *     leaveNode(node: ASTNode): void;\n+ * }\n+ * ```\n+ *\n+ * @param {EventEmitter} emitter - An event emitter which is the destination of events.\n+ * @returns {NodeEventGenerator} new instance.\n+ */\n+function NodeEventGenerator(emitter) {\n+    this.emitter = emitter;\n+}\n+\n+NodeEventGenerator.prototype = {\n+    constructor: NodeEventGenerator,\n+\n+    /**\n+     * Emits an event of entering AST node.\n+     * @param {ASTNode} node - A node which was entered.\n+     * @returns {void}\n+     */\n+    enterNode: function enterNode(node) {\n+        this.emitter.emit(node.type, node);\n+    },\n+\n+    /**\n+     * Emits an event of leaving AST node.\n+     * @param {ASTNode} node - A node which was left.\n+     * @returns {void}\n+     */\n+    leaveNode: function leaveNode(node) {\n+        this.emitter.emit(node.type + \":exit\", node);\n+    }\n+};\n+\n+module.exports = NodeEventGenerator;"},{"sha":"3946f073f672f263e415ffaa0c56b1cec9e37e4f","filename":"tests/lib/util/comment-event-generator.js","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/eslint/eslint/blob/d87f55bf11ef2737d30d6de6a39118e02e44e609/tests%2Flib%2Futil%2Fcomment-event-generator.js","raw_url":"https://github.com/eslint/eslint/raw/d87f55bf11ef2737d30d6de6a39118e02e44e609/tests%2Flib%2Futil%2Fcomment-event-generator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Futil%2Fcomment-event-generator.js?ref=d87f55bf11ef2737d30d6de6a39118e02e44e609","patch":"@@ -0,0 +1,81 @@\n+/**\n+ * @fileoverview Tests for CommentEventGenerator.\n+ * @author Toru Nagashima\n+ * @copyright 2015 Toru Nagashima. All rights reserved.\n+ * See LICENSE file in root directory for full license.\n+ */\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var assert = require(\"assert\"),\n+    EventEmitter = require(\"events\").EventEmitter,\n+    sinon = require(\"sinon\"),\n+    espree = require(\"espree\"),\n+    estraverse = require(\"estraverse\"),\n+    EventGeneratorTester = require(\"../../../lib/testers/event-generator-tester\"),\n+    SourceCode = require(\"../../../lib/util/source-code\"),\n+    NodeEventGenerator = require(\"../../../lib/util/node-event-generator\"),\n+    CommentEventGenerator = require(\"../../../lib/util/comment-event-generator\");\n+\n+//------------------------------------------------------------------------------\n+// Tests\n+//------------------------------------------------------------------------------\n+\n+describe(\"NodeEventGenerator\", function() {\n+    EventGeneratorTester.testEventGeneratorInterface(\n+        new CommentEventGenerator(new NodeEventGenerator(new EventEmitter()))\n+    );\n+\n+    it(\"should generate comment events without duplicate.\", function() {\n+        var emitter = new EventEmitter();\n+        var generator = new NodeEventGenerator(emitter);\n+        var code = \"//foo\\nvar zzz /*aaa*/ = 777\\n//bar\";\n+        var ast = espree.parse(code, {\n+            range: true,\n+            loc: true,\n+            comments: true,\n+            attachComment: true,\n+            tokens: true\n+        });\n+        var sourceCode = new SourceCode(code, ast);\n+        var expected = [\n+            [\"Program\", ast],\n+            [\"LineComment\", ast.comments[0]], // foo\n+            [\"VariableDeclaration\", ast.body[0]],\n+            [\"VariableDeclarator\", ast.body[0].declarations[0]],\n+            [\"LineComment\", ast.comments[2]], // bar\n+            [\"Identifier\", ast.body[0].declarations[0].id],\n+            [\"BlockComment\", ast.comments[1]], /* aaa */\n+            [\"BlockComment:exit\", ast.comments[1]], /* aaa */\n+            [\"Identifier:exit\", ast.body[0].declarations[0].id],\n+            [\"Literal\", ast.body[0].declarations[0].init],\n+            [\"Literal:exit\", ast.body[0].declarations[0].init],\n+            [\"LineComment:exit\", ast.comments[0]], // foo\n+            [\"LineComment:exit\", ast.comments[2]], // bar\n+            [\"VariableDeclarator:exit\", ast.body[0].declarations[0]],\n+            [\"VariableDeclaration:exit\", ast.body[0]],\n+            [\"Program:exit\", ast]\n+        ];\n+\n+        emitter.emit = sinon.spy(emitter.emit);\n+        generator = new CommentEventGenerator(generator, sourceCode);\n+\n+        estraverse.traverse(ast, {\n+            enter: function(node) {\n+                generator.enterNode(node);\n+            },\n+            leave: function(node) {\n+                generator.leaveNode(node);\n+            }\n+        });\n+\n+        assert.equal(emitter.emit.callCount, expected.length);\n+        for (var i = 0; i < expected.length; ++i) {\n+            assert.equal(emitter.emit.args[i][0], expected[i][0]);\n+            assert.equal(emitter.emit.args[i][1], expected[i][1]);\n+        }\n+    });\n+});"},{"sha":"5fa5baf98a09311780677c647ef5ab46a4945ec5","filename":"tests/lib/util/node-event-generator.js","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/eslint/eslint/blob/d87f55bf11ef2737d30d6de6a39118e02e44e609/tests%2Flib%2Futil%2Fnode-event-generator.js","raw_url":"https://github.com/eslint/eslint/raw/d87f55bf11ef2737d30d6de6a39118e02e44e609/tests%2Flib%2Futil%2Fnode-event-generator.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Futil%2Fnode-event-generator.js?ref=d87f55bf11ef2737d30d6de6a39118e02e44e609","patch":"@@ -0,0 +1,53 @@\n+/**\n+ * @fileoverview Tests for NodeEventGenerator.\n+ * @author Toru Nagashima\n+ * @copyright 2015 Toru Nagashima. All rights reserved.\n+ * See LICENSE file in root directory for full license.\n+ */\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var assert = require(\"assert\"),\n+    EventEmitter = require(\"events\").EventEmitter,\n+    sinon = require(\"sinon\"),\n+    EventGeneratorTester = require(\"../../../lib/testers/event-generator-tester\"),\n+    NodeEventGenerator = require(\"../../../lib/util/node-event-generator\");\n+\n+//------------------------------------------------------------------------------\n+// Tests\n+//------------------------------------------------------------------------------\n+\n+describe(\"NodeEventGenerator\", function() {\n+    EventGeneratorTester.testEventGeneratorInterface(\n+        new NodeEventGenerator(new EventEmitter())\n+    );\n+\n+    var emitter, generator;\n+\n+    beforeEach(function() {\n+        emitter = new EventEmitter();\n+        emitter.emit = sinon.spy(emitter.emit);\n+        generator = new NodeEventGenerator(emitter);\n+    });\n+\n+    it(\"should generate events for entering AST node.\", function() {\n+        var dummyNode = {type: \"Foo\", value: 1};\n+\n+        generator.enterNode(dummyNode);\n+\n+        assert(emitter.emit.calledOnce);\n+        assert(emitter.emit.calledWith(\"Foo\", dummyNode));\n+    });\n+\n+    it(\"should generate events for exitting AST node.\", function() {\n+        var dummyNode = {type: \"Foo\", value: 1};\n+\n+        generator.leaveNode(dummyNode);\n+\n+        assert(emitter.emit.calledOnce);\n+        assert(emitter.emit.calledWith(\"Foo:exit\", dummyNode));\n+    });\n+});"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/4624","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/4624/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/4624/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/4624/events","html_url":"https://github.com/eslint/eslint/pull/4624","id":120680299,"node_id":"MDExOlB1bGxSZXF1ZXN0NTI3OTcxODE=","number":4624,"title":"Breaking: Treat package.json like the rest of configs (fixes #4451)","user":{"login":"ilyavolodin","id":1380062,"node_id":"MDQ6VXNlcjEzODAwNjI=","avatar_url":"https://avatars.githubusercontent.com/u/1380062?v=4","gravatar_id":"","url":"https://api.github.com/users/ilyavolodin","html_url":"https://github.com/ilyavolodin","followers_url":"https://api.github.com/users/ilyavolodin/followers","following_url":"https://api.github.com/users/ilyavolodin/following{/other_user}","gists_url":"https://api.github.com/users/ilyavolodin/gists{/gist_id}","starred_url":"https://api.github.com/users/ilyavolodin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilyavolodin/subscriptions","organizations_url":"https://api.github.com/users/ilyavolodin/orgs","repos_url":"https://api.github.com/users/ilyavolodin/repos","events_url":"https://api.github.com/users/ilyavolodin/events{/privacy}","received_events_url":"https://api.github.com/users/ilyavolodin/received_events","type":"User","site_admin":false},"labels":[{"id":185518888,"node_id":"MDU6TGFiZWwxODU1MTg4ODg=","url":"https://api.github.com/repos/eslint/eslint/labels/breaking","name":"breaking","color":"e11d21","default":false,"description":"This change is backwards-incompatible"},{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2015-12-07T01:17:04Z","updated_at":"2018-02-06T23:59:41Z","closed_at":"2015-12-08T16:58:18Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/4624","html_url":"https://github.com/eslint/eslint/pull/4624","diff_url":"https://github.com/eslint/eslint/pull/4624.diff","patch_url":"https://github.com/eslint/eslint/pull/4624.patch","merged_at":"2015-12-08T16:58:18Z"},"body":"- Added `package.json` as a lowest priority configuration file\n- Changed signature of `FileFinder` constructor to only take one parameter (either a string or an array of strings)\n- Modified the logic for `FileFinder`. Before it would retrieve directory listing for every configuration file type, which can add up quickly for deeply nested directory without configuration files. Performance improvement is negligible on a small project, but can be noticeable on large projects with a lot of subfolders.\n- Modified documentation and added a step into migration guide.\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/4624/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/4624/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"7cb16104d8d8a09bffc4594bdb6dadd548ff07c0","filename":"docs/user-guide/configuring.md","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/eslint/eslint/blob/0986c68a063569f6ffc82826ca5781fee0f177b2/docs%2Fuser-guide%2Fconfiguring.md","raw_url":"https://github.com/eslint/eslint/raw/0986c68a063569f6ffc82826ca5781fee0f177b2/docs%2Fuser-guide%2Fconfiguring.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Fuser-guide%2Fconfiguring.md?ref=0986c68a063569f6ffc82826ca5781fee0f177b2","patch":"@@ -378,7 +378,7 @@ There are two ways to use configuration files. The first is to save the file whe\n \n     eslint -c myconfig.json myfiletotest.js\n \n-The second way to use configuration files is via `.eslintrc` and `package.json` files. ESLint will automatically look for them in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem. This option is useful when you want different configurations for different parts of a project or when you want others to be able to use ESLint directly without needing to remember to pass in the configuration file.\n+The second way to use configuration files is via `.eslintrc.*` and `package.json` files. ESLint will automatically look for them in the directory of the file to be linted, and in successive parent directories all the way up to the root directory of the filesystem. This option is useful when you want different configurations for different parts of a project or when you want others to be able to use ESLint directly without needing to remember to pass in the configuration file.\n \n In each case, the settings in the configuration file override default settings.\n \n@@ -389,21 +389,22 @@ ESLint supports configuration files in several formats:\n * **JavaScript** - use `.eslintrc.js` and export an object containing your configuration.\n * **YAML** - use `.eslintrc.yaml` or `.eslintrc.yml` to define the configuration structure.\n * **JSON** - use `.eslintrc.json` to define the configuration structure. ESLint's JSON files also allow JavaScript-style comments.\n-* **package.json** - create an `eslintConfig` property in your `package.json` file and define your configuration there.\n * **Deprecated** - use `.eslintrc`, which can be either JSON or YAML.\n+* **package.json** - create an `eslintConfig` property in your `package.json` file and define your configuration there.\n \n-If there are multiple `.eslintrc.*` files in the same directory, ESLint will only use one. The priority order is:\n+If there are multiple configuration files in the same directory, ESLint will only use one. The priority order is:\n \n 1. `.eslintrc.js`\n 1. `.eslintrc.yaml`\n 1. `.eslintrc.yml`\n 1. `.eslintrc.json`\n 1. `.eslintrc`\n+1. `package.json`\n \n \n ## Configuration Cascading and Hierarchy\n \n-When using `.eslintrc` and `package.json` files for configuration, you can take advantage of configuration cascading. For instance, suppose you have the following structure:\n+When using `.eslintrc.*` and `package.json` files for configuration, you can take advantage of configuration cascading. For instance, suppose you have the following structure:\n \n ```text\n your-project\n@@ -429,11 +430,11 @@ your-project\n   └── test.js\n ```\n \n-If there is an `.eslintrc` and a `package.json` file found in the same directory, both will be used, with the `.eslintrc` having the higher precendence.\n+If there is an `.eslintrc` and a `package.json` file found in the same directory, `.eslintrc` will take a priority and `package.json` file will not be used.\n \n **Note:** If you have a personal configuration file in your home directory (`~/.eslintrc`), it will only be used if no other configuration files are found. Since a personal configuration would apply to everything inside of a user's directory, including third-party code, this could cause problems when running ESLint.\n \n-By default, ESLint will look for configuration files in all parent folders up to the root directory. This can be useful if you want all of your projects to follow a certain convention, but can sometimes lead to unexpected results. To limit ESLint to a specific project, place `\"root\": true` inside the `eslintConfig` field of the `package.json` file or in the `.eslintrc` file at your project's root level.  ESLint will stop looking in parent folders once it finds a configuration with `\"root\": true`.\n+By default, ESLint will look for configuration files in all parent folders up to the root directory. This can be useful if you want all of your projects to follow a certain convention, but can sometimes lead to unexpected results. To limit ESLint to a specific project, place `\"root\": true` inside the `eslintConfig` field of the `package.json` file or in the `.eslintrc.*` file at your project's root level.  ESLint will stop looking in parent folders once it finds a configuration with `\"root\": true`.\n \n ```js\n {\n@@ -474,8 +475,7 @@ The complete configuration hierarchy, from highest precedence to lowest preceden\n     1. `--env`\n     1. `-c`, `--config`\n 3. Project-level configuration:\n-    1. `.eslintrc` file in same directory as linted file\n-    1. `package.json` file in same directory as linted file\n+    1. `.eslintrc.*` or `package.json` file in same directory as linted file\n     1. Continue searching for `.eslintrc` and `package.json` files in ancestor directories (parent has highest precedence, then grandparent, etc.), up to and including the root directory or until a config with `\"root\": true` is found.\n     1. In the absence of any configuration from (1) thru (3), fall back to a personal default configuration in  `~/.eslintrc`.\n "},{"sha":"6940b54cdebf20e43c9c6f673a3da0aac1a09b91","filename":"docs/user-guide/migrating-to-2.0.0.md","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/eslint/eslint/blob/0986c68a063569f6ffc82826ca5781fee0f177b2/docs%2Fuser-guide%2Fmigrating-to-2.0.0.md","raw_url":"https://github.com/eslint/eslint/raw/0986c68a063569f6ffc82826ca5781fee0f177b2/docs%2Fuser-guide%2Fmigrating-to-2.0.0.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Fuser-guide%2Fmigrating-to-2.0.0.md?ref=0986c68a063569f6ffc82826ca5781fee0f177b2","patch":"@@ -47,6 +47,11 @@ module.exports = {\n };\n ```\n \n+## Configuration cascading changes\n+\n+If you previously relied on the fact that ESLint will merge configurations from `.eslintrc` and `package.json` files located in the same directory you will have to choose either `.eslintrc` or `package.json` file\n+and move all of your configuration into one or the other. In 2.0.0 `package.json` will be treated just like any other configuration file and will have the lowest priority.\n+\n ## Built-In Global Variables\n \n Prior to 2.0.0, new global variables that were standardized as part of ES6 such as `Promise`, `Map`, `Set`, and `Symbol` were included in the built-in global environment. This could lead to potential issues when, for example, `no-undef` permitted use of the `Promise` constructor even in ES5 code where promises are unavailable. In 2.0.0, the built-in environment only includes the standard ES5 global variables, and the new ES6 global variables have been moved to the `es6` environment."},{"sha":"17855024d80efa614aa6ad33eb43a184d1e6f033","filename":"lib/config.js","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/eslint/eslint/blob/0986c68a063569f6ffc82826ca5781fee0f177b2/lib%2Fconfig.js","raw_url":"https://github.com/eslint/eslint/raw/0986c68a063569f6ffc82826ca5781fee0f177b2/lib%2Fconfig.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fconfig.js?ref=0986c68a063569f6ffc82826ca5781fee0f177b2","patch":"@@ -26,8 +26,7 @@ var path = require(\"path\"),\n // Constants\n //------------------------------------------------------------------------------\n \n-var PACKAGE_CONFIG_FILENAME = \"package.json\",\n-    PERSONAL_CONFIG_DIR = userHome || null;\n+var PERSONAL_CONFIG_DIR = userHome || null;\n \n //------------------------------------------------------------------------------\n // Private\n@@ -327,7 +326,7 @@ Config.prototype.getConfig = function(filePath) {\n Config.prototype.findLocalConfigFiles = function(directory) {\n \n     if (!this.localConfigFinder) {\n-        this.localConfigFinder = new FileFinder(ConfigFile.CONFIG_FILES, PACKAGE_CONFIG_FILENAME);\n+        this.localConfigFinder = new FileFinder(ConfigFile.CONFIG_FILES);\n     }\n \n     return this.localConfigFinder.findAllInDirectoryAndParents(directory);"},{"sha":"8ebf277cb1759ccbda7866dedb7dca2fc92014d4","filename":"lib/config/config-file.js","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/eslint/eslint/blob/0986c68a063569f6ffc82826ca5781fee0f177b2/lib%2Fconfig%2Fconfig-file.js","raw_url":"https://github.com/eslint/eslint/raw/0986c68a063569f6ffc82826ca5781fee0f177b2/lib%2Fconfig%2Fconfig-file.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fconfig%2Fconfig-file.js?ref=0986c68a063569f6ffc82826ca5781fee0f177b2","patch":"@@ -28,7 +28,8 @@ var CONFIG_FILES = [\n     \".eslintrc.yaml\",\n     \".eslintrc.yml\",\n     \".eslintrc.json\",\n-    \".eslintrc\"\n+    \".eslintrc\",\n+    \"package.json\"\n ];\n \n debug = debug(\"eslint:config-file\");"},{"sha":"9d942c226395b604a63c873dc8927a2c81754262","filename":"lib/file-finder.js","status":"modified","additions":39,"deletions":28,"changes":67,"blob_url":"https://github.com/eslint/eslint/blob/0986c68a063569f6ffc82826ca5781fee0f177b2/lib%2Ffile-finder.js","raw_url":"https://github.com/eslint/eslint/raw/0986c68a063569f6ffc82826ca5781fee0f177b2/lib%2Ffile-finder.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ffile-finder.js?ref=0986c68a063569f6ffc82826ca5781fee0f177b2","patch":"@@ -40,20 +40,40 @@ function getDirectoryEntries(directory) {\n /**\n  * FileFinder\n  * @constructor\n- * @param {...string} arguments The basename(s) of the file(s) to find.\n+ * @param {string[]} files The basename(s) of the file(s) to find.\n  */\n-function FileFinder() {\n-    this.fileNames = Array.prototype.slice.call(arguments);\n+function FileFinder(files) {\n+    this.fileNames = Array.isArray(files) ? files : [files];\n     this.cache = {};\n }\n \n+/**\n+ * Create a hash of filenames from a directory listing\n+ * @param {string[]} entries Array of directory entries.\n+ * @param {string} directory Path to a current directory.\n+ * @param {string[]} supportedConfigs List of support filenames.\n+ * @returns {Object} Hashmap of filenames\n+ */\n+function normalizeDirectoryEntries(entries, directory, supportedConfigs) {\n+    var fileHash = {};\n+    entries.forEach(function(entry) {\n+        if (supportedConfigs.indexOf(entry) >= 0) {\n+            var resolvedEntry = path.resolve(directory, entry);\n+            if (fs.statSync(resolvedEntry).isFile()) {\n+                fileHash[entry] = resolvedEntry;\n+            }\n+        }\n+    });\n+    return fileHash;\n+}\n+\n /**\n  * Find one instance of a specified file name in directory or in a parent directory.\n  * Cache the results.\n  * Does not check if a matching directory entry is a file, and intentionally\n  * only searches for the first file name in this.fileNames.\n  * Is currently used by lib/ignored_paths.js to find an .eslintignore file.\n- * @param  {string} directory The directory to start the search from.\n+ * @param {string} directory The directory to start the search from.\n  * @returns {string} Path of the file found, or an empty string if not found.\n  */\n FileFinder.prototype.findInDirectoryOrParents = function(directory) {\n@@ -62,7 +82,6 @@ FileFinder.prototype.findInDirectoryOrParents = function(directory) {\n         dirs,\n         filePath,\n         i,\n-        name,\n         names,\n         searched;\n \n@@ -76,18 +95,18 @@ FileFinder.prototype.findInDirectoryOrParents = function(directory) {\n \n     dirs = [];\n     searched = 0;\n-    name = this.fileNames[0];\n-    names = Array.isArray(name) ? name : [name];\n+    names = this.fileNames;\n \n     (function() {\n         while (directory !== child) {\n             dirs[searched++] = directory;\n-\n-            for (var k = 0, found = false; k < names.length && !found; k++) {\n-\n-                if (getDirectoryEntries(directory).indexOf(names[k]) !== -1 && fs.statSync(path.resolve(directory, names[k])).isFile()) {\n-                    filePath = path.resolve(directory, names[k]);\n-                    return;\n+            var filesMap = normalizeDirectoryEntries(getDirectoryEntries(directory), directory, names);\n+            if (Object.keys(filesMap).length) {\n+                for (var k = 0; k < names.length; k++) {\n+                    if (filesMap[names[k]]) {\n+                        filePath = filesMap[names[k]];\n+                        return;\n+                    }\n                 }\n             }\n \n@@ -118,9 +137,7 @@ FileFinder.prototype.findAllInDirectoryAndParents = function(directory) {\n     var cache = this.cache,\n         child,\n         dirs,\n-        name,\n         fileNames,\n-        fileNamesCount,\n         filePath,\n         i,\n         j,\n@@ -137,33 +154,27 @@ FileFinder.prototype.findAllInDirectoryAndParents = function(directory) {\n     dirs = [];\n     searched = 0;\n     fileNames = this.fileNames;\n-    fileNamesCount = fileNames.length;\n \n     do {\n         dirs[searched++] = directory;\n         cache[directory] = [];\n \n-        for (i = 0; i < fileNamesCount; i++) {\n-            name = fileNames[i];\n+        var filesMap = normalizeDirectoryEntries(getDirectoryEntries(directory), directory, fileNames);\n \n-            // convert to an array for easier handling\n-            if (!Array.isArray(name)) {\n-                name = [name];\n-            }\n+        if (Object.keys(filesMap).length) {\n+            for (var k = 0; k < fileNames.length; k++) {\n \n-            for (var k = 0, found = false; k < name.length && !found; k++) {\n-\n-                if (getDirectoryEntries(directory).indexOf(name[k]) !== -1 && fs.statSync(path.resolve(directory, name[k])).isFile()) {\n-                    filePath = path.resolve(directory, name[k]);\n-                    found = true;\n+                if (filesMap[fileNames[k]]) {\n+                    filePath = filesMap[fileNames[k]];\n \n                     // Add the file path to the cache of each directory searched.\n                     for (j = 0; j < searched; j++) {\n                         cache[dirs[j]].push(filePath);\n                     }\n+\n+                    break;\n                 }\n             }\n-\n         }\n         child = directory;\n "},{"sha":"00a5d7c52a42ce03091dc8f2f7dbc1d8ae7964b6","filename":"tests/lib/config.js","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/eslint/eslint/blob/0986c68a063569f6ffc82826ca5781fee0f177b2/tests%2Flib%2Fconfig.js","raw_url":"https://github.com/eslint/eslint/raw/0986c68a063569f6ffc82826ca5781fee0f177b2/tests%2Flib%2Fconfig.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fconfig.js?ref=0986c68a063569f6ffc82826ca5781fee0f177b2","patch":"@@ -124,13 +124,26 @@ describe(\"Config\", function() {\n             assert.lengthOf(actual, 0);\n         });\n \n-        it(\"should return the path when a package.json file is found\", function() {\n+        it(\"should return package.json only when no other config files are found\", function() {\n             var configHelper = new Config(),\n-                expected = getFixturePath(\"broken\", \"package.json\"),\n+                expected0 = getFixturePath(\"packagejson\", \"subdir\", \"package.json\"),\n+                expected1 = getFixturePath(\"packagejson\", \".eslintrc\"),\n+                actual = configHelper.findLocalConfigFiles(getFixturePath(\"packagejson\", \"subdir\"));\n+\n+            assert.isArray(actual);\n+            assert.lengthOf(actual, 2);\n+            assert.equal(actual[0], expected0);\n+            assert.equal(actual[1], expected1);\n+        });\n+\n+        it(\"should return the only one config file even if there are multiple found\", function() {\n+            var configHelper = new Config(),\n+                expected = getFixturePath(\"broken\", \".eslintrc\"),\n \n                 // The first element of the array is the .eslintrc in the same directory.\n-                actual = configHelper.findLocalConfigFiles(getFixturePath(\"broken\"))[1];\n+                actual = configHelper.findLocalConfigFiles(getFixturePath(\"broken\"));\n \n+            assert.equal(actual.length, 1);\n             assert.equal(actual, expected);\n         });\n "},{"sha":"683bfa7ae95d9b874d5c0352945c3d7a55446fc1","filename":"tests/lib/file-finder.js","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/eslint/eslint/blob/0986c68a063569f6ffc82826ca5781fee0f177b2/tests%2Flib%2Ffile-finder.js","raw_url":"https://github.com/eslint/eslint/raw/0986c68a063569f6ffc82826ca5781fee0f177b2/tests%2Flib%2Ffile-finder.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Ffile-finder.js?ref=0986c68a063569f6ffc82826ca5781fee0f177b2","patch":"@@ -183,12 +183,12 @@ describe(\"FileFinder\", function() {\n \n             it(\"should return multiple files when the first is missing and more than one filename is requested\", function() {\n                 var firstExpected = path.join(fileFinderDir, \"subdir\", uniqueFileName),\n-                    secondExpected = path.join(fileFinderDir, \"subdir\", \"empty2\");\n+                    secondExpected = path.join(fileFinderDir, uniqueFileName);\n \n-                finder = new FileFinder([\"notreal\", uniqueFileName], \"empty2\");\n+                finder = new FileFinder([\"notreal\", uniqueFileName, \"empty2\"]);\n                 actual = finder.findAllInDirectoryAndParents(subdir);\n \n-                assert.equal(actual.length, 3);\n+                assert.equal(actual.length, 2);\n                 assert.equal(actual[0], firstExpected);\n                 assert.equal(actual[1], secondExpected);\n             });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/4440","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/4440/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/4440/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/4440/events","html_url":"https://github.com/eslint/eslint/pull/4440","id":117057733,"node_id":"MDExOlB1bGxSZXF1ZXN0NTA3NzQ1MzQ=","number":4440,"title":"Update: Add JSX exceptions to no-extra-parens (fixes #4229)","user":{"login":"btmills","id":1709537,"node_id":"MDQ6VXNlcjE3MDk1Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/1709537?v=4","gravatar_id":"","url":"https://api.github.com/users/btmills","html_url":"https://github.com/btmills","followers_url":"https://api.github.com/users/btmills/followers","following_url":"https://api.github.com/users/btmills/following{/other_user}","gists_url":"https://api.github.com/users/btmills/gists{/gist_id}","starred_url":"https://api.github.com/users/btmills/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/btmills/subscriptions","organizations_url":"https://api.github.com/users/btmills/orgs","repos_url":"https://api.github.com/users/btmills/repos","events_url":"https://api.github.com/users/btmills/events{/privacy}","received_events_url":"https://api.github.com/users/btmills/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-11-16T06:08:17Z","updated_at":"2018-02-07T00:05:47Z","closed_at":"2015-11-16T16:35:18Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/4440","html_url":"https://github.com/eslint/eslint/pull/4440","diff_url":"https://github.com/eslint/eslint/pull/4440.diff","patch_url":"https://github.com/eslint/eslint/pull/4440.patch","merged_at":"2015-11-16T16:35:18Z"},"body":"While the options themselves are unchanged from the proposal in #4229, the behavior of the schema in this PR differs slightly from that of the example in the issue thread. The proposed schema would have allowed configuring the JSX exception in conjunction with `\"function\"` mode, which would never check JSX elements in the first place and could lead to confusion. The schema in this PR only permits configuring the JSX exception when the rule is in `\"all\"` mode and actually checking JSX elements.\n\nI observed no performance difference of this PR compared to master.\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/4440/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/4440/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"44bb69da6a05450f258dedc8b52667793745c99d","filename":"docs/rules/no-extra-parens.md","status":"modified","additions":48,"deletions":1,"changes":49,"blob_url":"https://github.com/eslint/eslint/blob/169bd96e1c56dabe2bcd9e90a2dbaa65ba3939f1/docs%2Frules%2Fno-extra-parens.md","raw_url":"https://github.com/eslint/eslint/raw/169bd96e1c56dabe2bcd9e90a2dbaa65ba3939f1/docs%2Frules%2Fno-extra-parens.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2Fno-extra-parens.md?ref=169bd96e1c56dabe2bcd9e90a2dbaa65ba3939f1","patch":"@@ -1,6 +1,6 @@\n # Disallow Extra Parens (no-extra-parens)\n \n-This rule restricts the use of parentheses to only where they are necessary. It may be restricted to report only function expressions.\n+This rule restricts the use of parentheses to only where they are necessary. It may be restricted to report only function expressions. It can also be configured to allow parentheses around JSX elements.\n \n ## Rule Details\n \n@@ -69,6 +69,53 @@ a = (b * c);\n typeof (a);\n ```\n \n+#### JSX\n+\n+The second, optional configuration parameter for the rule is an exceptions object. There is one configurable exception for JSX elements, with possible values `\"never\"`, `\"all\"`, or `\"multiline\"`.\n+\n+By default, the rule will warn about parentheses around JSX elements:\n+\n+```jsx\n+/*eslint no-extra-parens: [2, \"all\"]*/\n+\n+var app = (<App />); /*error Gratuitous parentheses around expression.*/\n+```\n+\n+This is equivalent to explicitly setting the JSX exception to `\"never\"`:\n+\n+```jsx\n+/*eslint no-extra-parens: [2, \"all\", { \"jsx\": \"never\" }]*/\n+\n+var app = (<App />); /*error Gratuitous parentheses around expression.*/\n+```\n+\n+If those parentheses are considered acceptable, set the JSX exception to `\"all\"` to allow parentheses around all JSX elements:\n+\n+```jsx\n+/*eslint no-extra-parens: [2, \"all\", { \"jsx\": \"all\" }]*/\n+\n+var app = (<App />);\n+```\n+\n+Set the JSX exception `\"multiline\"` to allow parentheses only around JSX elements that span multiple lines:\n+\n+```jsx\n+/*eslint no-extra-parens: [2, \"all\", { \"jsx\": \"multiline\" }]*/\n+\n+var app = (\n+    <App>\n+        Hello, world!\n+    </App>\n+);\n+```\n+\n+The JSX `\"multiline\"` exception mode will still warn about parentheses around JSX elements that do not span more than one line:\n+\n+```jsx\n+/*eslint no-extra-parens: [2, \"all\", { \"jsx\": \"multiline\" }]*/\n+\n+var app = (<App>Hello world</App>); /*error Gratuitous parentheses around expression.*/\n+```\n \n ## Further Reading\n "},{"sha":"95a2c29ba5a35e914baf5af9ca2fd6fcabe9cd90","filename":"lib/rules/no-extra-parens.js","status":"modified","additions":62,"deletions":5,"changes":67,"blob_url":"https://github.com/eslint/eslint/blob/169bd96e1c56dabe2bcd9e90a2dbaa65ba3939f1/lib%2Frules%2Fno-extra-parens.js","raw_url":"https://github.com/eslint/eslint/raw/169bd96e1c56dabe2bcd9e90a2dbaa65ba3939f1/lib%2Frules%2Fno-extra-parens.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-extra-parens.js?ref=169bd96e1c56dabe2bcd9e90a2dbaa65ba3939f1","patch":"@@ -6,13 +6,30 @@\n  */\n \"use strict\";\n \n+//------------------------------------------------------------------------------\n+// Helpers\n+//------------------------------------------------------------------------------\n+\n+/**\n+ * Determines whether a node spans multiple lines.\n+ * @param {ASTNode} node - The node to check.\n+ * @returns {boolean} True if the node spans multiple lines.\n+ * @private\n+ */\n+function isMultiline(node) {\n+    return node.loc.end.line - node.loc.start.line > 0;\n+}\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n \n module.exports = function(context) {\n \n     var ALL_NODES = context.options[0] !== \"functions\";\n+    var ALLOW_JSX = context.options[1] && context.options[1].jsx === \"all\";\n+    var ALLOW_MULTILINE_JSX = ALLOW_JSX ||\n+        (context.options[1] && context.options[1].jsx === \"multiline\");\n \n     /**\n      * Determines if this rule should be enforced for a node given the current configuration.\n@@ -21,6 +38,12 @@ module.exports = function(context) {\n      * @private\n      */\n     function ruleApplies(node) {\n+        if (node.type === \"JSXElement\" && (ALLOW_JSX ||\n+                (ALLOW_MULTILINE_JSX && isMultiline(node))\n+        )) {\n+            return false;\n+        }\n+\n         return ALL_NODES || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\";\n     }\n \n@@ -474,8 +497,42 @@ module.exports = function(context) {\n \n };\n \n-module.exports.schema = [\n-    {\n-        \"enum\": [\"all\", \"functions\"]\n-    }\n-];\n+module.exports.schema = {\n+    \"anyOf\": [\n+        {\n+            \"type\": \"array\",\n+            \"items\": [\n+                {\n+                    \"enum\": [0, 1, 2]\n+                },\n+                {\n+                    \"enum\": [\"functions\"]\n+                }\n+            ],\n+            \"minItems\": 1,\n+            \"maxItems\": 2\n+        },\n+        {\n+            \"type\": \"array\",\n+            \"items\": [\n+                {\n+                    \"enum\": [0, 1, 2]\n+                },\n+                {\n+                    \"enum\": [\"all\"]\n+                },\n+                {\n+                    \"type\": \"object\",\n+                    \"properties\": {\n+                        \"jsx\": {\n+                            \"enum\": [\"never\", \"all\", \"multiline\"]\n+                        }\n+                    },\n+                    \"additionalProperties\": false\n+                }\n+            ],\n+            \"minItems\": 1,\n+            \"maxItems\": 3\n+        }\n+    ]\n+};"},{"sha":"3fd2391e7c47a10927178c11823ee33e2ae38ecd","filename":"tests/lib/rules/no-extra-parens.js","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/eslint/eslint/blob/169bd96e1c56dabe2bcd9e90a2dbaa65ba3939f1/tests%2Flib%2Frules%2Fno-extra-parens.js","raw_url":"https://github.com/eslint/eslint/raw/169bd96e1c56dabe2bcd9e90a2dbaa65ba3939f1/tests%2Flib%2Frules%2Fno-extra-parens.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-extra-parens.js?ref=169bd96e1c56dabe2bcd9e90a2dbaa65ba3939f1","patch":"@@ -195,7 +195,13 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         {code: \"(class{}).foo() ? bar : baz;\", ecmaFeatures: {classes: true}},\n         {code: \"(class{}).foo.bar();\", ecmaFeatures: {classes: true}},\n         {code: \"(class{}.foo());\", ecmaFeatures: {classes: true}},\n-        {code: \"(class{}.foo.bar);\", ecmaFeatures: {classes: true}}\n+        {code: \"(class{}.foo.bar);\", ecmaFeatures: {classes: true}},\n+\n+        {code: \"<foo />\", ecmaFeatures: {jsx: true}},\n+        {code: \"<foo>\\n    Hello\\n</foo>\", ecmaFeatures: {jsx: true}},\n+        {code: \"(<foo />)\", options: [\"all\", { \"jsx\": \"all\" }], ecmaFeatures: { jsx: true }},\n+        {code: \"(<foo>\\n    Hello\\n</foo>)\", options: [\"all\", { \"jsx\": \"all\" }], ecmaFeatures: {jsx: true}},\n+        {code: \"(<foo>\\n    Hello\\n</foo>)\", options: [\"all\", { \"jsx\": \"multiline\" }], ecmaFeatures: {jsx: true}}\n     ],\n     invalid: [\n         invalid(\"(0)\", \"Literal\"),\n@@ -291,6 +297,12 @@ ruleTester.run(\"no-extra-parens\", rule, {\n         invalid(\"bar ? baz : (class{}).foo();\", \"ClassExpression\", null, {ecmaFeatures: {classes: true}}),\n         invalid(\"bar((class{}).foo(), 0);\", \"ClassExpression\", null, {ecmaFeatures: {classes: true}}),\n         invalid(\"bar[(class{}).foo()];\", \"ClassExpression\", null, {ecmaFeatures: {classes: true}}),\n-        invalid(\"var bar = (class{}).foo();\", \"ClassExpression\", null, {ecmaFeatures: {classes: true}})\n+        invalid(\"var bar = (class{}).foo();\", \"ClassExpression\", null, {ecmaFeatures: {classes: true}}),\n+\n+        invalid(\"(<foo />)\", \"JSXElement\", null, {ecmaFeatures: {jsx: true}}),\n+        invalid(\"(<foo>\\n    Hello\\n</foo>)\", \"JSXElement\", null, {ecmaFeatures: {jsx: true}}),\n+        invalid(\"(<foo />)\", \"JSXElement\", null, {ecmaFeatures: {jsx: true}, options: [\"all\", {\"jsx\": \"never\"}]}),\n+        invalid(\"(<foo>\\n    Hello\\n</foo>)\", \"JSXElement\", null, {ecmaFeatures: {jsx: true}, options: [\"all\", {\"jsx\": \"never\"}]}),\n+        invalid(\"(<foo />)\", \"JSXElement\", null, {ecmaFeatures: {jsx: true}, options: [\"all\", {\"jsx\": \"multiline\"}]})\n     ]\n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/3989","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/3989/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/3989/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/3989/events","html_url":"https://github.com/eslint/eslint/pull/3989","id":109156963,"node_id":"MDExOlB1bGxSZXF1ZXN0NDY0NDE5MjQ=","number":3989,"title":"Ignored files should not throw errors during CLI","user":{"login":"dominicbarnes","id":160197,"node_id":"MDQ6VXNlcjE2MDE5Nw==","avatar_url":"https://avatars.githubusercontent.com/u/160197?v=4","gravatar_id":"","url":"https://api.github.com/users/dominicbarnes","html_url":"https://github.com/dominicbarnes","followers_url":"https://api.github.com/users/dominicbarnes/followers","following_url":"https://api.github.com/users/dominicbarnes/following{/other_user}","gists_url":"https://api.github.com/users/dominicbarnes/gists{/gist_id}","starred_url":"https://api.github.com/users/dominicbarnes/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/dominicbarnes/subscriptions","organizations_url":"https://api.github.com/users/dominicbarnes/orgs","repos_url":"https://api.github.com/users/dominicbarnes/repos","events_url":"https://api.github.com/users/dominicbarnes/events{/privacy}","received_events_url":"https://api.github.com/users/dominicbarnes/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":5,"created_at":"2015-09-30T18:58:38Z","updated_at":"2018-02-07T00:20:48Z","closed_at":"2015-10-02T02:02:42Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/3989","html_url":"https://github.com/eslint/eslint/pull/3989","diff_url":"https://github.com/eslint/eslint/pull/3989.diff","patch_url":"https://github.com/eslint/eslint/pull/3989.patch","merged_at":"2015-10-02T02:02:42Z"},"body":"Sorry in advance for a PR that does not include any tests. The problem I came across was an extremely weird edge-case that I have not been able to reproduce manually. However, I think my fix is pretty simple and the rationale should make sense regardless.\n\nAt the point where my change has been made (ie: `executeOnFile()`), there is a `fs.realpathSync()` call that was throwing in the case described by #3978. The file in question was known by ESLint to be ignored, but the realpath call was happening before the early return. I've changed it to exit early once the file is known to be ignored, before running the risk of `fs.realpathSync()` throwing an uncaught exception.\n\nI'm sure there are other (edge) cases where this `fs.realpathSync()` could throw in this small window, but this prevents errors happening for files that should be ignored in the first place. Not to mention, there's no reason to add the performance penalty of a sync fs call for a file that will just be ignored anyways.\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/3989/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/3989/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"4cb1aae856538c3f8934b0d725c6b40a45184e50","filename":"lib/cli-engine.js","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/eslint/eslint/blob/564051d4bd5ef58f11282e59a9a02da056f48975/lib%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/564051d4bd5ef58f11282e59a9a02da056f48975/lib%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fcli-engine.js?ref=564051d4bd5ef58f11282e59a9a02da056f48975","patch":"@@ -556,9 +556,12 @@ CLIEngine.prototype = {\n          */\n         function executeOnFile(filename) {\n             var shouldIgnore = ignoredPaths.contains(filename);\n-            filename = fs.realpathSync(filename);\n+            if (shouldIgnore) {\n+                return;\n+            }\n \n-            if (processed[filename] || shouldIgnore) {\n+            filename = fs.realpathSync(filename);\n+            if (processed[filename]) {\n                 return;\n             }\n "},{"sha":"9f82929445d17c0b25a6bcdee17d5690712a520f","filename":"tests/lib/cli-engine.js","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/eslint/eslint/blob/564051d4bd5ef58f11282e59a9a02da056f48975/tests%2Flib%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/564051d4bd5ef58f11282e59a9a02da056f48975/tests%2Flib%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Fcli-engine.js?ref=564051d4bd5ef58f11282e59a9a02da056f48975","patch":"@@ -712,6 +712,27 @@ describe(\"CLIEngine\", function() {\n             assert.equal(report.results[0].messages.length, 0);\n         });\n \n+        it(\"should not fail if an ignored file cannot be resolved\", function() {\n+\n+            var fakeFS = leche.fake(fs),\n+                LocalCLIEngine = proxyquire(\"../../lib/cli-engine\", {\n+                    fs: fakeFS\n+                });\n+\n+            fakeFS.realpathSync = function() {\n+                throw new Error(\"this error should not happen\");\n+            };\n+\n+            engine = new LocalCLIEngine({\n+                ignorePattern: \"tests\"\n+            });\n+\n+            assert.doesNotThrow(function() {\n+                engine.executeOnFiles([\"tests/fixtures/single-quoted.js\"]);\n+            });\n+\n+        });\n+\n         describe(\"Fix Mode\", function() {\n \n             it(\"should return fixed text on multiple files when in fix mode\", function() {"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/2709","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/2709/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/2709/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/2709/events","html_url":"https://github.com/eslint/eslint/pull/2709","id":85645967,"node_id":"MDExOlB1bGxSZXF1ZXN0MzcwNzUzNjE=","number":2709,"title":"Fix: no-trailing-spaces now handles skipBlankLines (fixes #2575)","user":{"login":"gcochard","id":2836237,"node_id":"MDQ6VXNlcjI4MzYyMzc=","avatar_url":"https://avatars.githubusercontent.com/u/2836237?v=4","gravatar_id":"","url":"https://api.github.com/users/gcochard","html_url":"https://github.com/gcochard","followers_url":"https://api.github.com/users/gcochard/followers","following_url":"https://api.github.com/users/gcochard/following{/other_user}","gists_url":"https://api.github.com/users/gcochard/gists{/gist_id}","starred_url":"https://api.github.com/users/gcochard/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gcochard/subscriptions","organizations_url":"https://api.github.com/users/gcochard/orgs","repos_url":"https://api.github.com/users/gcochard/repos","events_url":"https://api.github.com/users/gcochard/events{/privacy}","received_events_url":"https://api.github.com/users/gcochard/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-06-05T22:22:08Z","updated_at":"2018-02-07T01:06:27Z","closed_at":"2015-06-06T18:34:29Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/2709","html_url":"https://github.com/eslint/eslint/pull/2709","diff_url":"https://github.com/eslint/eslint/pull/2709.diff","patch_url":"https://github.com/eslint/eslint/pull/2709.patch","merged_at":"2015-06-06T18:34:29Z"},"body":"This does potentially two regexp tests per line. With this change, the performance does not seem to be impacted in a statistically significant way.\n\nWith: \n\n```\nnode Makefile.js perf\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  2177.437605ms\nPerformance Run #2:  2095.757845ms\nPerformance Run #3:  2085.389922ms\nPerformance Run #4:  2096.332165ms\nPerformance Run #5:  2082.197974ms\nPerformance budget ok:  2095.757845ms (limit: 3409.090909090909ms)\n```\n\nWithout:\n\n```\nnode Makefile.js perf\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  2085.415068ms\nPerformance Run #2:  2181.624126ms\nPerformance Run #3:  2082.826633ms\nPerformance Run #4:  2136.809016ms\nPerformance Run #5:  2126.298463ms\nPerformance budget ok:  2126.298463ms (limit: 3409.090909090909ms)\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/2709/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/2709/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"a54cfe8cce80339321d81bcf1dd98090c13d97bf","filename":"lib/rules/no-trailing-spaces.js","status":"modified","additions":27,"deletions":16,"changes":43,"blob_url":"https://github.com/eslint/eslint/blob/8e5bfcad3b0ad056944d1cb7bf6858bdcabf9a8c/lib%2Frules%2Fno-trailing-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/8e5bfcad3b0ad056944d1cb7bf6858bdcabf9a8c/lib%2Frules%2Fno-trailing-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-trailing-spaces.js?ref=8e5bfcad3b0ad056944d1cb7bf6858bdcabf9a8c","patch":"@@ -1,6 +1,7 @@\n /**\n  * @fileoverview Disallow trailing spaces at the end of lines.\n  * @author Nodeca Team <https://github.com/nodeca>\n+ * @copyright 2015 Greg Cochard\n  */\n \"use strict\";\n \n@@ -10,8 +11,9 @@\n \n module.exports = function(context) {\n \n-    var BLANK_PREFIX = \"[^( |\\t)]\",\n-        TRAILER = \"[ \\t\\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]$\";\n+    var BLANK_CLASS = \"[ \\t\\u00a0\\u2000-\\u200b\\u2028\\u2029\\u3000]\",\n+        SKIP_BLANK = \"^\" + BLANK_CLASS + \"*$\",\n+        NONBLANK = BLANK_CLASS + \"$\";\n \n     var options = context.options[0] || {},\n         skipBlankLines = options.skipBlankLines || false;\n@@ -25,25 +27,34 @@ module.exports = function(context) {\n \n         \"Program\": function checkTrailingSpaces(node) {\n \n-            // Let's hack. Since Esprima does not return whitespace nodes,\n-            // fetch the source code and do black magic via regexps.\n+            // Let's hack. Since Espree does not return whitespace nodes,\n+            // fetch the source code and do matching via regexps.\n \n             var src = context.getSource(),\n-                re = new RegExp((skipBlankLines ? BLANK_PREFIX : \"\") + TRAILER, \"mg\"),\n-                match, lines, location;\n+                re = new RegExp(NONBLANK),\n+                skipMatch = new RegExp(SKIP_BLANK),\n+                matches, lines = src.split(/\\r?\\n/), location;\n \n-            while ((match = re.exec(src)) !== null) {\n-                lines = src.slice(0, re.lastIndex).split(/\\r?\\n/g);\n+            for (var i = 0, ii = lines.length; i < ii; i++) {\n \n-                location = {\n-                    line: lines.length,\n-                    column: lines[lines.length - 1].length - match[0].length + 1\n-                };\n+                matches = re.exec(lines[i]);\n+                if (matches) {\n \n-                // Passing node is a bit dirty, because message data will contain\n-                // big text in `source`. But... who cares :) ?\n-                // One more kludge will not make worse the bloody wizardry of this plugin.\n-                context.report(node, location, \"Trailing spaces not allowed.\");\n+                    // If the line has only whitespace, and skipBlankLines\n+                    // is true, don't report it\n+                    if (skipBlankLines && skipMatch.test(lines[i])) {\n+                        continue;\n+                    }\n+                    location = {\n+                        line: i + 1,\n+                        column: lines[i].length - matches[0].length + 1\n+                    };\n+\n+                    // Passing node is a bit dirty, because message data will contain\n+                    // big text in `source`. But... who cares :) ?\n+                    // One more kludge will not make worse the bloody wizardry of this plugin.\n+                    context.report(node, location, \"Trailing spaces not allowed.\");\n+                }\n             }\n         }\n "},{"sha":"5013aac95feedd62423cda1864878f12ef4c8596","filename":"tests/lib/rules/no-trailing-spaces.js","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/eslint/eslint/blob/8e5bfcad3b0ad056944d1cb7bf6858bdcabf9a8c/tests%2Flib%2Frules%2Fno-trailing-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/8e5bfcad3b0ad056944d1cb7bf6858bdcabf9a8c/tests%2Flib%2Frules%2Fno-trailing-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-trailing-spaces.js?ref=8e5bfcad3b0ad056944d1cb7bf6858bdcabf9a8c","patch":"@@ -1,6 +1,7 @@\n /**\n  * @fileoverview Disallow trailing spaces at the end of lines.\n  * @author Nodeca Team <https://github.com/nodeca>\n+ * @copyright 2015 Patrick McElhaney\n  */\n \"use strict\";\n \n@@ -144,6 +145,18 @@ eslintTester.addRuleTest(\"lib/rules/no-trailing-spaces\", {\n                 type: \"Program\"\n             }],\n             options: [{}]\n+        },\n+        {\n+            code: \"var a = 'bar';  \\n \\n\\t\",\n+            errors: [{\n+                message: \"Trailing spaces not allowed.\",\n+                type: \"Program\",\n+                line: 1,\n+                column: 16 // there are invalid spaces in columns 15 and 16\n+            }],\n+            options: [{\n+                skipBlankLines: true\n+            }]\n         }\n     ]\n "}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/2527","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/2527/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/2527/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/2527/events","html_url":"https://github.com/eslint/eslint/pull/2527","id":76081401,"node_id":"MDExOlB1bGxSZXF1ZXN0MzUzNTY5MTA=","number":2527,"title":"Fix: forced no-shadow to check all scopes (fixes #2294)","user":{"login":"jrvidal","id":1636604,"node_id":"MDQ6VXNlcjE2MzY2MDQ=","avatar_url":"https://avatars.githubusercontent.com/u/1636604?v=4","gravatar_id":"","url":"https://api.github.com/users/jrvidal","html_url":"https://github.com/jrvidal","followers_url":"https://api.github.com/users/jrvidal/followers","following_url":"https://api.github.com/users/jrvidal/following{/other_user}","gists_url":"https://api.github.com/users/jrvidal/gists{/gist_id}","starred_url":"https://api.github.com/users/jrvidal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jrvidal/subscriptions","organizations_url":"https://api.github.com/users/jrvidal/orgs","repos_url":"https://api.github.com/users/jrvidal/repos","events_url":"https://api.github.com/users/jrvidal/events{/privacy}","received_events_url":"https://api.github.com/users/jrvidal/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2015-05-13T18:36:03Z","updated_at":"2018-02-07T01:12:32Z","closed_at":"2015-05-14T03:09:17Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/2527","html_url":"https://github.com/eslint/eslint/pull/2527","diff_url":"https://github.com/eslint/eslint/pull/2527.diff","patch_url":"https://github.com/eslint/eslint/pull/2527.patch","merged_at":"2015-05-14T03:09:17Z"},"body":"Instead of listing all the nodes that could potentially create a scope in ES6, I just built a stack to traverse the scopes tree top-down.\n\nPerformance looks OK in my machine:\n- Before:\n  \n  ```\n  CPU Speed is 800 with multiplier 7500000\n  Performance Run #1:  1276.091608ms\n  Performance Run #2:  1313.046001ms\n  Performance Run #3:  1282.84558ms\n  Performance Run #4:  1280.500036ms\n  Performance Run #5:  1308.158333ms\n  Performance budget ok:  1282.84558ms (limit: 9375ms)\n  ```\n- After:\n  \n  ```\n  CPU Speed is 800 with multiplier 7500000\n  Performance Run #1:  1264.320176ms\n  Performance Run #2:  1256.536445ms\n  Performance Run #3:  1258.839234ms\n  Performance Run #4:  1276.002489ms\n  Performance Run #5:  1273.202285ms\n  Performance budget ok:  1264.320176ms (limit: 9375ms)\n  ```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/2527/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/2527/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"f8320c5e499250fc452cd1a0a671455095203fb3","filename":"docs/rules/no-shadow.md","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/eslint/eslint/blob/3fb9fcea02f2c72c3ae41615eef91e338e12e89e/docs%2Frules%2Fno-shadow.md","raw_url":"https://github.com/eslint/eslint/raw/3fb9fcea02f2c72c3ae41615eef91e338e12e89e/docs%2Frules%2Fno-shadow.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2Fno-shadow.md?ref=3fb9fcea02f2c72c3ae41615eef91e338e12e89e","patch":"@@ -39,6 +39,14 @@ function b(a) {\n b(a);\n ```\n \n+```js\n+var a = 3;\n+\n+if (true) {\n+    let a = 5;\n+}\n+```\n+\n ## Further Reading\n \n * [Variable Shadowing](http://en.wikipedia.org/wiki/Variable_shadowing)"},{"sha":"34c52d9755ebe3d043a21790c80d4e894361d336","filename":"lib/rules/no-shadow.js","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/eslint/eslint/blob/3fb9fcea02f2c72c3ae41615eef91e338e12e89e/lib%2Frules%2Fno-shadow.js","raw_url":"https://github.com/eslint/eslint/raw/3fb9fcea02f2c72c3ae41615eef91e338e12e89e/lib%2Frules%2Fno-shadow.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-shadow.js?ref=3fb9fcea02f2c72c3ae41615eef91e338e12e89e","patch":"@@ -49,11 +49,11 @@ module.exports = function(context) {\n \n     /**\n      * Checks the current context for shadowed variables.\n+     * @param {Scope} scope - Fixme\n      * @returns {void}\n      */\n-    function checkForShadows() {\n-        var scope = context.getScope(),\n-            variables = scope.variables;\n+    function checkForShadows(scope) {\n+        var variables = scope.variables;\n \n         // iterate through the array of variables and find duplicates with the upper scope\n         var upper = scope.upper;\n@@ -64,9 +64,17 @@ module.exports = function(context) {\n     }\n \n     return {\n-        \"FunctionDeclaration\": checkForShadows,\n-        \"FunctionExpression\": checkForShadows,\n-        \"ArrowFunctionExpression\": checkForShadows\n+        \"Program:exit\": function () {\n+            var globalScope = context.getScope(),\n+                stack = globalScope.childScopes.slice(),\n+                scope;\n+\n+            while (stack.length) {\n+                scope = stack.pop();\n+                stack.push.apply(stack, scope.childScopes);\n+                checkForShadows(scope);\n+            }\n+        }\n     };\n \n };"},{"sha":"0388df99bad95721bec1462839b0d755bf958396","filename":"tests/lib/rules/no-shadow.js","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/eslint/eslint/blob/3fb9fcea02f2c72c3ae41615eef91e338e12e89e/tests%2Flib%2Frules%2Fno-shadow.js","raw_url":"https://github.com/eslint/eslint/raw/3fb9fcea02f2c72c3ae41615eef91e338e12e89e/tests%2Flib%2Frules%2Fno-shadow.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-shadow.js?ref=3fb9fcea02f2c72c3ae41615eef91e338e12e89e","patch":"@@ -76,6 +76,16 @@ eslintTester.addRuleTest(\"lib/rules/no-shadow\", {\n         {\n             code: \"var a=3; function b() { var a=10; var b=0; }; setTimeout(function() { b(); }, 0);\",\n             errors: [{ message: \"a is already declared in the upper scope.\", type: \"Identifier\" }, { message: \"b is already declared in the upper scope.\", type: \"Identifier\" }]\n+        },\n+        {\n+            code: \"var x = 1; { let x = 2; }\",\n+            ecmaFeatures: {blockBindings: true},\n+            errors: [{ message: \"x is already declared in the upper scope.\", type: \"Identifier\"}]\n+        },\n+        {\n+            code: \"let x = 1; { const x = 2; }\",\n+            ecmaFeatures: {blockBindings: true},\n+            errors: [{ message: \"x is already declared in the upper scope.\", type: \"Identifier\"}]\n         }\n     ]\n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/1721","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/1721/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/1721/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/1721/events","html_url":"https://github.com/eslint/eslint/pull/1721","id":55386721,"node_id":"MDExOlB1bGxSZXF1ZXN0Mjc5ODMyMTE=","number":1721,"title":"Fix: Make no-multi-spaces work for every case (fixes #1603, fixes #1659)","user":{"login":"nzakas","id":38546,"node_id":"MDQ6VXNlcjM4NTQ2","avatar_url":"https://avatars.githubusercontent.com/u/38546?v=4","gravatar_id":"","url":"https://api.github.com/users/nzakas","html_url":"https://github.com/nzakas","followers_url":"https://api.github.com/users/nzakas/followers","following_url":"https://api.github.com/users/nzakas/following{/other_user}","gists_url":"https://api.github.com/users/nzakas/gists{/gist_id}","starred_url":"https://api.github.com/users/nzakas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/nzakas/subscriptions","organizations_url":"https://api.github.com/users/nzakas/orgs","repos_url":"https://api.github.com/users/nzakas/repos","events_url":"https://api.github.com/users/nzakas/events{/privacy}","received_events_url":"https://api.github.com/users/nzakas/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2015-01-24T22:09:50Z","updated_at":"2018-02-07T01:39:30Z","closed_at":"2015-01-31T00:19:07Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/1721","html_url":"https://github.com/eslint/eslint/pull/1721","diff_url":"https://github.com/eslint/eslint/pull/1721.diff","patch_url":"https://github.com/eslint/eslint/pull/1721.patch","merged_at":"2015-01-31T00:19:07Z"},"body":"This was an absolute monster to work through and it's still not quite there. One edge case remaining. Just posting to share.\n\nI had to create a map of where all tokens are, and that subsequently slowed things down a bit. I think the slowdown is worth it for the tradeoff.\n\n$ npm run perf\n\n> eslint@0.12.0 perf c:\\Users\\Nicholas\\projects\\personal\\jscheck\n> node Makefile.js perf\n\n```\n# Before\n\nCPU Speed is 3093 with multiplier 7500000\nPerformance Run #1:  1501.513292ms\nPerformance Run #2:  1516.6144359999998ms\nPerformance Run #3:  1522.233913ms\nPerformance Run #4:  1537.468143ms\nPerformance Run #5:  1510.7205079999999ms\nPerformance budget ok:  1516.6144359999998ms (limit: 2424.8302618816683ms)\n\n# After\n\nCPU Speed is 3093 with multiplier 7500000\nPerformance Run #1:  1573.712675ms\nPerformance Run #2:  1545.923181ms\nPerformance Run #3:  1556.752278ms\nPerformance Run #4:  1558.050048ms\nPerformance Run #5:  1550.235287ms\nPerformance budget ok:  1556.752278ms (limit: 2424.8302618816683ms)\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/1721/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/1721/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"509cc85a4b6b5756cde4286d342db3ff88119f8f","filename":"lib/eslint.js","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/eslint/eslint/blob/8144f13c97f892261c437925dc306aea5341d842/lib%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/8144f13c97f892261c437925dc306aea5341d842/lib%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Feslint.js?ref=8144f13c97f892261c437925dc306aea5341d842","patch":"@@ -370,7 +370,8 @@ module.exports = (function() {\n         controller = null,\n         reportingConfig = [],\n         commentLocsEnter = [],\n-        commentLocsExit = [];\n+        commentLocsExit = [],\n+        currentAST = null;\n \n     /**\n      * Parses text into an AST. Moved out here because the try-catch prevents\n@@ -495,6 +496,7 @@ module.exports = (function() {\n     api.reset = function() {\n         this.removeAllListeners();\n         messages = [];\n+        currentAST = null;\n         currentConfig = null;\n         currentText = null;\n         currentTextLines = [];\n@@ -537,6 +539,9 @@ module.exports = (function() {\n \n         // if espree failed to parse the file, there's no sense in setting up rules\n         if (ast) {\n+\n+            currentAST = ast;\n+\n             // process initial config to make it safe to extend\n             config = prepareConfig(config);\n \n@@ -738,6 +743,14 @@ module.exports = (function() {\n         return currentTextLines;\n     };\n \n+    /**\n+     * Retrieves an array containing all comments in the source code.\n+     * @returns {ASTNode[]} An array of comment nodes.\n+     */\n+    api.getAllComments = function() {\n+        return currentAST.comments;\n+    };\n+\n     /**\n      * Gets all comments for the given node.\n      * @param {ASTNode} node The AST node to get the comments for."},{"sha":"d9e6ff35c1142339296da8e553cd90d93978874a","filename":"lib/rule-context.js","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/8144f13c97f892261c437925dc306aea5341d842/lib%2Frule-context.js","raw_url":"https://github.com/eslint/eslint/raw/8144f13c97f892261c437925dc306aea5341d842/lib%2Frule-context.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frule-context.js?ref=8144f13c97f892261c437925dc306aea5341d842","patch":"@@ -25,7 +25,9 @@ var PASSTHROUGHS = [\n         \"getAncestors\",\n         \"getScope\",\n         \"getJSDocComment\",\n-        \"getFilename\"\n+        \"getFilename\",\n+        \"getTokenByRangeIndex\",\n+        \"getAllComments\"\n     ];\n \n //------------------------------------------------------------------------------"},{"sha":"bcff4961e8d593ab57c785c8eb2da65fb03dfb28","filename":"lib/rules/no-multi-spaces.js","status":"modified","additions":51,"deletions":184,"changes":235,"blob_url":"https://github.com/eslint/eslint/blob/8144f13c97f892261c437925dc306aea5341d842/lib%2Frules%2Fno-multi-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/8144f13c97f892261c437925dc306aea5341d842/lib%2Frules%2Fno-multi-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-multi-spaces.js?ref=8144f13c97f892261c437925dc306aea5341d842","patch":"@@ -1,215 +1,82 @@\n /**\n  * @fileoverview Disallow use of multiple spaces.\n- * @author Vignesh Anand aka vegetableman.\n- * @copyright 2014 Vignesh Anand. All rights reserved.\n- * @copyright 2014 Brandon Mills. All rights reserved.\n+ * @author Nicholas C. Zakas\n+ * @copyright 2015 Nicholas C. Zakas. All rights reserved.\n  */\n \"use strict\";\n \n-//------------------------------------------------------------------------------\n-// Helpers\n-//------------------------------------------------------------------------------\n-\n-var OPERATORS = {\n-    \"Punctuator\": {\n-        \"*\": true, \"/\": true, \"%\": true, \"+\": true, \"-\": true, \"<<\": true,\n-        \">>\": true, \">>>\": true, \"<\": true, \"<=\": true, \">\": true, \">=\": true,\n-        \"==\": true, \"!=\": true, \"===\": true, \"!==\": true, \"&\": true, \"^\": true,\n-        \"|\": true, \"&&\": true, \"||\": true, \"=\": true, \"+=\": true, \"-=\": true,\n-        \"*=\": true, \"/=\": true, \"%=\": true, \"<<=\": true, \">>=\": true,\n-        \">>>=\": true, \"&=\": true, \"^=\": true, \"|=\": true, \"?\": true, \":\": true,\n-        \",\": true\n-    },\n-    \"Keyword\": {\n-        \"in\": true,\n-        \"instanceof\": true\n-    }\n-};\n-\n-/**\n- * Determines whether a token is a binary operator.\n- * @param   {Token}   token The token.\n- * @returns {Boolean}       Whether the token is a binary operator.\n- */\n-function isOperator(token) {\n-    var type = OPERATORS[token.type];\n-    return (type && type[token.value]) || false;\n-}\n-\n-/**\n- * Gets the index of the first element of an array that satisfies a predicate.\n- * Like Array.prototype.indexOf(), but with a predicate instead of equality.\n- * @param   {Array}    array     An array to search.\n- * @param   {Function} predicate A function returning true if its argument\n- *                               satisfies a condition.\n- * @returns {Number}             The index of the first element that satisifies\n- *                               the predicate, or -1 if no elements match.\n- */\n-function findIndex(array, predicate) {\n-    for (var i = 0, l = array.length; i < l; i++) {\n-        if (predicate(array[i])) {\n-            return i;\n-        }\n-    }\n-    return -1;\n-}\n-\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n \n module.exports = function(context) {\n \n-    /**\n-     * Validates that two adjacent tokens are separated by less than two spaces.\n-     * @param   {Token} left  Token on the left side.\n-     * @param   {Token} right Token on the right side.\n-     * @returns {void}\n-     */\n-    function validate(left, right) {\n-        var op;\n-\n-        if (\n-            left.loc.end.line === right.loc.start.line &&\n-            right.range[0] - left.range[1] > 1\n-        ) {\n-            op = isOperator(left) ? left : right;\n-            context.report(op, \"Multiple spaces found {{side}} '{{op}}'.\", {\n-                side: op === right ? \"before\" : \"after\",\n-                op: op.value\n-            });\n-        }\n-    }\n-\n-    /**\n-     * Validates the spacing of two nodes with an operator between them.\n-     * @param   {ASTNode} left  Node left of the operator.\n-     * @param   {ASTNode} right Node right of the operator.\n-     * @returns {void}\n-     */\n-    function validateBetween(left, right) {\n-        var tokens = context.getTokensBetween(left, right, 1),\n-            operatorIndex = findIndex(tokens.slice(1, -1), isOperator) + 1,\n-            op = tokens[operatorIndex];\n-\n-        validate(tokens[operatorIndex - 1], op);\n-        validate(op, tokens[operatorIndex + 1]);\n-    }\n+    // the index of the last comment that was checked\n+    var lastCommentIndex = 0;\n \n     /**\n-     * Report if there are multiple spaces on the expression.\n-     * @param {ASTNode} node The node to check.\n-     * @returns {void}\n+     * Determines if a given source index is in a comment or not by checking\n+     * the index against the comment range. Since the check goes straight\n+     * through the file, once an index is passed a certain comment, we can\n+     * go to the next comment to check that.\n+     * @param {int} index The source index to check.\n+     * @param {ASTNode[]} comments An array of comment nodes.\n+     * @returns {boolean} True if the index is within a comment, false if not.\n      * @private\n      */\n-    function checkExpression(node) {\n-        validateBetween(node.left, node.right);\n-    }\n+    function isIndexInComment(index, comments) {\n \n-    /**\n-     * Report if there are multiple spaces around conditional ternary operators.\n-     * @param {ASTNode} node The node to check.\n-     * @returns {void}\n-     * @private\n-     */\n-    function checkConditional(node) {\n-        validateBetween(node.test, node.consequent);\n-        validateBetween(node.consequent, node.alternate);\n-    }\n+        var comment;\n \n-    /**\n-     * Report if there are multiple spaces around equal operator in variable declaration.\n-     * @param {ASTNode} node The node to check.\n-     * @returns {void}\n-     * @private\n-     */\n-    function checkVar(node) {\n-        if (node.init) {\n-            validateBetween(node.id, node.init);\n-        }\n-    }\n+        while (lastCommentIndex < comments.length) {\n \n-    /**\n-     * Generates a function to check object literals and other list-like nodes.\n-     * @param {String} property Name of the node's collection property.\n-     * @returns {Function} A function that checks spacing within list-like node.\n-     * @private\n-     */\n-    function checkList(property) {\n-        /**\n-         * Report if there are multiple spaces around list of items in objects,\n-         * function parameters, sequences and declarations.\n-         * @param {ASTNode} node The node to check.\n-         * @returns {void}\n-         * @private\n-         */\n-        return function(node) {\n-            var items = node[property];\n-\n-            for (var i = 0, l = items.length; i < l - 1; i++) {\n-                validateBetween(items[i], items[i + 1]);\n-            }\n-        };\n-    }\n+            comment = comments[lastCommentIndex];\n \n-    /**\n-     * Checks arrays literals, allowing that some elements may be empty.\n-     * @param {ASTNode} node An ArrayExpression.\n-     * @returns {void}\n-     * @private\n-     */\n-    function checkArray(node) {\n-        var elements = node.elements,\n-            elementIndex = 0,\n-            tokens = context.getTokens(node),\n-            tokenIndex = 0,\n-            length = tokens.length,\n-            dest;\n-\n-        // Check spacing at the beginning, around commas, and at the end\n-        while (tokenIndex < length - 1) {\n-            validate(tokens[tokenIndex], tokens[++tokenIndex]);\n-\n-            // Don't advance to the next element until both sides of the comma\n-            // have been checked\n-            if (tokens[tokenIndex].value !== \",\") {\n-                // Skip to just before the end of the array or the next comma\n-                if (elements[elementIndex]) {\n-                    dest = elements[elementIndex].range[1];\n-                    // Move to the end of the element\n-                    while (tokens[tokenIndex].range[1] < dest) {\n-                        ++tokenIndex;\n-                    }\n-                    // Move past anything (like closing parens) between the end\n-                    // of the node and the following comma or end brace.\n-                    while (\n-                        tokenIndex + 1 < tokens.length &&\n-                        tokens[tokenIndex + 1].value !== \",\"\n-                    ) {\n-                        ++tokenIndex;\n-                    }\n-                }\n-                ++elementIndex;\n+            if (comment.range[0] <= index && index <= comment.range[1]) {\n+                return true;\n+            } else if (index > comment.range[1]) {\n+                lastCommentIndex++;\n+            } else {\n+                break;\n             }\n+\n         }\n+\n+        return false;\n     }\n \n     //--------------------------------------------------------------------------\n     // Public\n     //--------------------------------------------------------------------------\n \n     return {\n-        \"AssignmentExpression\": checkExpression,\n-        \"BinaryExpression\": checkExpression,\n-        \"LogicalExpression\": checkExpression,\n-        \"ConditionalExpression\": checkConditional,\n-        \"VariableDeclarator\": checkVar,\n-        \"ArrayExpression\": checkArray,\n-        \"ObjectExpression\": checkList(\"properties\"),\n-        \"SequenceExpression\": checkList(\"expressions\"),\n-        \"FunctionExpression\": checkList(\"params\"),\n-        \"FunctionDeclaration\": checkList(\"params\"),\n-        \"VariableDeclaration\": checkList(\"declarations\")\n+        \"Program\": function() {\n+\n+            var source = context.getSource(),\n+                allComments = context.getAllComments(),\n+                pattern = /[^\\n\\r\\u2028\\u2029 ] {2,}/g,  // note: repeating space\n+                prevToken,\n+                token;\n+\n+            while (pattern.test(source)) {\n+\n+                // do not flag anything inside of comments\n+                if (!isIndexInComment(pattern.lastIndex, allComments)) {\n+\n+                    token = context.getTokenByRangeIndex(pattern.lastIndex);\n+\n+                    // see if there's a token that contains the whitespace, might be a string\n+                    prevToken = context.getTokenByRangeIndex(pattern.lastIndex - 1);\n+\n+                    if (!prevToken || (prevToken.type !== \"String\" && prevToken.type !== \"Template\")) {\n+                        context.report(token, token.loc.start,\n+                            \"Multiple spaces found before '{{value}}'.\",\n+                            { value: token.value });\n+                    }\n+\n+                }\n+            }\n+        }\n     };\n \n };"},{"sha":"721f8a6565183db5fe404fd3d834abb0c66eb08c","filename":"lib/token-store.js","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/eslint/eslint/blob/8144f13c97f892261c437925dc306aea5341d842/lib%2Ftoken-store.js","raw_url":"https://github.com/eslint/eslint/raw/8144f13c97f892261c437925dc306aea5341d842/lib%2Ftoken-store.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ftoken-store.js?ref=8144f13c97f892261c437925dc306aea5341d842","patch":"@@ -14,6 +14,7 @@ module.exports = function(tokens) {\n     var api = {},\n         starts = Object.create(null),\n         ends = Object.create(null),\n+        ranges = Object.create(null),\n         index, length, range;\n \n     /**\n@@ -64,6 +65,11 @@ module.exports = function(tokens) {\n         range = tokens[index].range;\n         starts[range[0]] = index;\n         ends[range[1]] = index;\n+\n+        // allows fast lookup of any source index\n+        for (var j = range[0]; j < range[1]; j++) {\n+            ranges[j] = index;\n+        }\n     }\n \n     /**\n@@ -182,5 +188,14 @@ module.exports = function(tokens) {\n         );\n     };\n \n+    /**\n+     * Returns the token within with the given source index occurs.\n+     * @param {int} rangeIndex The index at which to look for the token.\n+     * @returns {Token} The token at that position or null if not found.\n+     */\n+    api.getTokenByRangeIndex = function(rangeIndex) {\n+        return tokens[ranges[rangeIndex]] || null;\n+    };\n+\n     return api;\n };"},{"sha":"dc9db2bac25d7e8a13aca70e30d4356ab4edf7fd","filename":"tests/lib/rules/no-multi-spaces.js","status":"modified","additions":145,"deletions":38,"changes":183,"blob_url":"https://github.com/eslint/eslint/blob/8144f13c97f892261c437925dc306aea5341d842/tests%2Flib%2Frules%2Fno-multi-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/8144f13c97f892261c437925dc306aea5341d842/tests%2Flib%2Frules%2Fno-multi-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-multi-spaces.js?ref=8144f13c97f892261c437925dc306aea5341d842","patch":"@@ -43,46 +43,68 @@ eslintTester.addRuleTest(\"lib/rules/no-multi-spaces\", {\n         \"var foo = bar === 1 ? 2: 3\",\n         \"[1, , 3]\",\n         \"[1, ]\",\n-        \"[ (  1  ) , (  2  ) ]\",\n+        \"[ ( 1 ) , ( 2 ) ]\",\n         \"a = 1, b = 2;\",\n         \"(function(a, b){})\",\n-        \"x.in = 0;\"\n+        \"x.in = 0;\",\n+        \"(function(a,/* b, */c){})\",\n+        \"(function(a,/*b,*/c){})\",\n+        \"(function(a, /*b,*/c){})\",\n+        \"(function(a,/*b,*/ c){})\",\n+        \"(function(a, /*b,*/ c){})\",\n+        \"(function(/*a, b, */c){})\",\n+        \"(function(/*a, */b, c){})\",\n+        \"(function(a, b/*, c*/){})\",\n+        \"(function(a, b/*,c*/){})\",\n+        \"(function(a, b /*,c*/){})\",\n+        \"(function(a/*, b ,c*/){})\",\n+        \"(function(a /*, b ,c*/){})\",\n+        \"(function(a /*, b        ,c*/){})\",\n+        \"/**\\n * hello\\n * @param {foo} int hi\\n *      set.\\n * @private\\n*/\",\n+        \"/**\\n * hello\\n * @param {foo} int hi\\n *      set.\\n *      set.\\n * @private\\n*/\",\n+        \"var a,/* b,*/c;\",\n+        \"var foo = [1,/* 2,*/3];\",\n+        \"var bar = {a: 1,/* b: 2*/c: 3};\",\n+        \"var foo = \\\"hello     world\\\";\",\n+        \"function foo() {\\n    return;\\n}\",\n+        \"function foo() {\\n    if (foo) {\\n        return;\\n    }\\n}\",\n+        { code: \"var foo = `hello     world`;\", ecmaFeatures: { templateStrings: true }}\n     ],\n \n     invalid: [\n         {\n             code: \"var a =  1\",\n             errors: [{\n-                message: \"Multiple spaces found after '='.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before '1'.\",\n+                type: \"Numeric\"\n             }]\n         },\n         {\n             code: \"var a = 1,  b = 2;\",\n             errors: [{\n-                message: \"Multiple spaces found after ','.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before 'b'.\",\n+                type: \"Identifier\"\n             }]\n         },\n         {\n             code: \"a <<  b\",\n             errors: [{\n-                message: \"Multiple spaces found after '<<'.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before 'b'.\",\n+                type: \"Identifier\"\n             }]\n         },\n         {\n             code: \"var arr = {'a': 1,  'b': 2};\",\n             errors: [{\n-                message: \"Multiple spaces found after ','.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before ''b''.\",\n+                type: \"String\"\n             }]\n         },\n         {\n             code: \"if (a &  b) { }\",\n             errors: [{\n-                message: \"Multiple spaces found after '&'.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before 'b'.\",\n+                type: \"Identifier\"\n             }]\n         },\n         {\n@@ -91,38 +113,38 @@ eslintTester.addRuleTest(\"lib/rules/no-multi-spaces\", {\n                 message: \"Multiple spaces found before '&&'.\",\n                 type: \"Punctuator\"\n             }, {\n-                message: \"Multiple spaces found after '&&'.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before 'b'.\",\n+                type: \"Identifier\"\n             }]\n         },\n         {\n             code: \"var foo = bar === 1 ?  2:  3\",\n             errors: [{\n-                message: \"Multiple spaces found after '?'.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before '2'.\",\n+                type: \"Numeric\"\n             }, {\n-                message: \"Multiple spaces found after ':'.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before '3'.\",\n+                type: \"Numeric\"\n             }]\n         },\n         {\n             code: \"var a = [1,  2,  3,  4]\",\n             errors: [{\n-                message: \"Multiple spaces found after ','.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before '2'.\",\n+                type: \"Numeric\"\n             }, {\n-                message: \"Multiple spaces found after ','.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before '3'.\",\n+                type: \"Numeric\"\n             }, {\n-                message: \"Multiple spaces found after ','.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before '4'.\",\n+                type: \"Numeric\"\n             }]\n         },\n         {\n             code: \"var arr = [1,  2];\",\n             errors: [{\n-                message: \"Multiple spaces found after ','.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before '2'.\",\n+                type: \"Numeric\"\n             }]\n         },\n         {\n@@ -131,46 +153,131 @@ eslintTester.addRuleTest(\"lib/rules/no-multi-spaces\", {\n                 message: \"Multiple spaces found before ','.\",\n                 type: \"Punctuator\"\n             }, {\n-                message: \"Multiple spaces found after ','.\",\n+                message: \"Multiple spaces found before ','.\",\n                 type: \"Punctuator\"\n             }, {\n-                message: \"Multiple spaces found after ','.\",\n+                message: \"Multiple spaces found before ','.\",\n                 type: \"Punctuator\"\n             }, {\n-                message: \"Multiple spaces found after ','.\",\n+                message: \"Multiple spaces found before ']'.\",\n                 type: \"Punctuator\"\n             }]\n         },\n         {\n             code: \"a >>>  b\",\n             errors: [{\n-                message: \"Multiple spaces found after '>>>'.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before 'b'.\",\n+                type: \"Identifier\"\n             }]\n         },\n         {\n             code: \"a = 1,  b =  2;\",\n             errors: [{\n-                message: \"Multiple spaces found after ','.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before 'b'.\",\n+                type: \"Identifier\"\n             }, {\n-                message: \"Multiple spaces found after '='.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before '2'.\",\n+                type: \"Numeric\"\n             }]\n         },\n         {\n             code: \"(function(a,  b){})\",\n             errors: [{\n-                message: \"Multiple spaces found after ','.\",\n-                type: \"Punctuator\"\n+                message: \"Multiple spaces found before 'b'.\",\n+                type: \"Identifier\"\n             }]\n         },\n         {\n             code: \"function foo(a,  b){}\",\n             errors: [{\n-                message: \"Multiple spaces found after ','.\",\n+                message: \"Multiple spaces found before 'b'.\",\n+                type: \"Identifier\"\n+            }]\n+        },\n+        {\n+            code: \"var o = { fetch: function    () {} };\",\n+            errors: [{\n+                message: \"Multiple spaces found before '('.\",\n+                type: \"Punctuator\"\n+            }]\n+        },\n+        {\n+            code: \"var o = { fetch: function    () {} };\",\n+            errors: [{\n+                message: \"Multiple spaces found before '('.\",\n+                type: \"Punctuator\"\n+            }]\n+        },\n+        {\n+            code: \"function foo      () {}\",\n+            errors: [{\n+                message: \"Multiple spaces found before '('.\",\n+                type: \"Punctuator\"\n+            }]\n+        },\n+        {\n+            code: \"if (foo)      {}\",\n+            errors: [{\n+                message: \"Multiple spaces found before '{'.\",\n+                type: \"Punctuator\"\n+            }]\n+        },\n+        {\n+            code: \"function    foo(){}\",\n+            errors: [{\n+                message: \"Multiple spaces found before 'foo'.\",\n+                type: \"Identifier\"\n+            }]\n+        },\n+        {\n+            code: \"if    (foo) {}\",\n+            errors: [{\n+                message: \"Multiple spaces found before '('.\",\n+                type: \"Punctuator\"\n+            }]\n+        },\n+        {\n+            code: \"try    {} catch(ex) {}\",\n+            errors: [{\n+                message: \"Multiple spaces found before '{'.\",\n+                type: \"Punctuator\"\n+            }]\n+        },\n+        {\n+            code: \"try {} catch    (ex) {}\",\n+            errors: [{\n+                message: \"Multiple spaces found before '('.\",\n+                type: \"Punctuator\"\n+            }]\n+        },\n+        {\n+            code: \"var o = { fetch: function    () {} };\",\n+            errors: [{\n+                message: \"Multiple spaces found before '('.\",\n+                type: \"Punctuator\"\n+            }]\n+        },\n+        {\n+            code: \"throw  error;\",\n+            errors: [{\n+                message: \"Multiple spaces found before 'error'.\",\n+                type: \"Identifier\"\n+            }]\n+        },\n+        {\n+            code: \"function foo() { return      bar; }\",\n+            errors: [{\n+                message: \"Multiple spaces found before 'bar'.\",\n+                type: \"Identifier\"\n+            }]\n+        },\n+        {\n+            code: \"switch   (a) {default: foo(); break;}\",\n+            errors: [{\n+                message: \"Multiple spaces found before '('.\",\n                 type: \"Punctuator\"\n             }]\n         }\n+\n     ]\n });"},{"sha":"6fe8dab4169d8c4d171ad0ee8e52c2bb0aaa33bf","filename":"tests/lib/token-store.js","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/eslint/eslint/blob/8144f13c97f892261c437925dc306aea5341d842/tests%2Flib%2Ftoken-store.js","raw_url":"https://github.com/eslint/eslint/raw/8144f13c97f892261c437925dc306aea5341d842/tests%2Flib%2Ftoken-store.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Ftoken-store.js?ref=8144f13c97f892261c437925dc306aea5341d842","patch":"@@ -346,4 +346,27 @@ describe(\"TokenStore\", function() {\n \n     });\n \n+    describe(\"when calling getTokenByRangeIndex\", function() {\n+\n+        it(\"should return identifier token\", function() {\n+            var result = store.getTokenByRangeIndex(4);\n+\n+            assert.equal(result.type, \"Identifier\");\n+            assert.equal(result.value, \"answer\");\n+        });\n+\n+        it(\"should return identifier token\", function() {\n+            var result = store.getTokenByRangeIndex(5);\n+\n+            assert.equal(result.type, \"Identifier\");\n+            assert.equal(result.value, \"answer\");\n+        });\n+\n+        it(\"should return null when token doesn't exist\", function() {\n+            var result = store.getTokenByRangeIndex(3);\n+            assert.isNull(result);\n+        });\n+\n+    });\n+\n });"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/1514","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/1514/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/1514/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/1514/events","html_url":"https://github.com/eslint/eslint/pull/1514","id":50266737,"node_id":"MDExOlB1bGxSZXF1ZXN0MjUxMzYyMTE=","number":1514,"title":"Update: refactor tokens API (refs #1212)","user":{"login":"btmills","id":1709537,"node_id":"MDQ6VXNlcjE3MDk1Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/1709537?v=4","gravatar_id":"","url":"https://api.github.com/users/btmills","html_url":"https://github.com/btmills","followers_url":"https://api.github.com/users/btmills/followers","following_url":"https://api.github.com/users/btmills/following{/other_user}","gists_url":"https://api.github.com/users/btmills/gists{/gist_id}","starred_url":"https://api.github.com/users/btmills/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/btmills/subscriptions","organizations_url":"https://api.github.com/users/btmills/orgs","repos_url":"https://api.github.com/users/btmills/repos","events_url":"https://api.github.com/users/btmills/events{/privacy}","received_events_url":"https://api.github.com/users/btmills/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2014-11-27T08:40:42Z","updated_at":"2018-02-07T01:46:10Z","closed_at":"2014-11-27T21:29:08Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/1514","html_url":"https://github.com/eslint/eslint/pull/1514","diff_url":"https://github.com/eslint/eslint/pull/1514.diff","patch_url":"https://github.com/eslint/eslint/pull/1514.patch","merged_at":"2014-11-27T21:29:08Z"},"body":"This is a second attempt at the changes to the tokens API that had to be reverted a while back. It's a from-scratch rewrite, without looking at any of the old code.\n\nIt splits all of the token handling out of the core and into a new `TokenStore` class. This also greatly simplifies the token-handling tests.\n\nRather than searching linearly through ranges until hitting upon a matching token, `TokenStore` indexes based on the start and end of every token. This greatly simplifies logic inside of the API methods and improves performance because every token is accessible directly, no searching required. Furthermore, because tokens are still stored in the original array, there's no traversal required to reconstruct a contiguous array from the sparse array that was used before; all that's required is a call to `slice`.\n\nNow for the performance data. All of this was obtained on a MacBook Pro with a 2nd-generation i7 running OS X Yosemite. Last time there was a performance regression on at least one machine, so help testing this on a variety of configurations is appreciated.\n\n``` sh\n$ git co master && npm run perf\n\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  1499.543745ms\nPerformance Run #2:  1489.026796ms\nPerformance Run #3:  1489.335957ms\nPerformance Run #4:  1493.5138259999999ms\nPerformance Run #5:  1480.386587ms\nPerformance budget ok:  1489.335957ms (limit: 3409.090909090909ms)\n\n$ git co token-store && npm run perf\n\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  1404.387172ms\nPerformance Run #2:  1366.972328ms\nPerformance Run #3:  1364.019312ms\nPerformance Run #4:  1369.947872ms\nPerformance Run #5:  1353.955682ms\nPerformance budget ok:  1366.972328ms (limit: 3409.090909090909ms)\n```\n\nI created a custom config to enable only the rules that call the tokens API, and the performance difference in some of the rules between master (time 1) and this PR (time 2) is significant:\n\n| Rule | Time 1 (ms) | Time 2 (ms) | Difference |\n| :-- | --: | --: | --: |\n| no-extra-parens | 115.493 | 102.774 | -11% |\n| no-multi-spaces | 54.537 | 43.220 | -21% |\n| no-spaced-func | 53.051 | 24.109 | -55% |\n| space-in-brackets | 46.095 | 16.625 | -64% |\n| space-infix-ops | 27.661 | 24.942 | -9.8% |\n| no-empty-class | 26.492 | 14.497 | -45% |\n| no-div-regex | 19.175 | 18.509 | -3.4% |\n| brace-style | 18.792 | 18.292 | -2.7% |\n| semi | 17.413 | n/a | n/a |\n| no-regex-spaces | 15.793 | 14.131 | -11% |\n| wrap-regex | n/a | 14.940 | n/a |\n\n_Edit: I tested this on an Ubuntu VM in Azure that I happen to have handy, and the performance results showed improvement there too: 5499.9859ms on `master`, dropping to 5237.867ms for this PR._\n\n_Edit 2: One more change, just a tiny bit faster._\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/1514/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/1514/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"6ae680f15b7bcb36be3e4a36fbf927556fa70f08","filename":"lib/eslint.js","status":"modified","additions":4,"deletions":229,"changes":233,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Feslint.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -17,6 +17,7 @@ var esprima = require(\"esprima\"),\n     util = require(\"./util\"),\n     RuleContext = require(\"./rule-context\"),\n     timing = require(\"./timing\"),\n+    createTokenStore = require(\"./token-store.js\"),\n     EventEmitter = require(\"events\").EventEmitter;\n \n //------------------------------------------------------------------------------\n@@ -602,13 +603,9 @@ module.exports = (function() {\n             // Freezing so array isn't accidentally changed by a rule.\n             Object.freeze(currentTextLines);\n \n-            /* get all tokens from the ast and store them as a hashtable to\n-             * improve traversal speed when wanting to find tokens for a given\n-             * node\n-             */\n-            currentTokens = [];\n-            ast.tokens.forEach(function(token) {\n-                currentTokens[token.range[0]] = token;\n+            currentTokens = createTokenStore(ast.tokens);\n+            Object.keys(currentTokens).forEach(function(method) {\n+                api[method] = currentTokens[method];\n             });\n \n             // augment global scope with declared global variables\n@@ -813,228 +810,6 @@ module.exports = (function() {\n         }\n     };\n \n-    /**\n-     * Gets a number of tokens that precede a given node's tokens in the token stream.\n-     * @param {ASTNode} node The AST node.\n-     * @param {int} [beforeCount=0] The number of tokens before the node to retrieve.\n-     * @returns {[Token]} Array of objects representing tokens.\n-     */\n-    api.getTokensBefore = function(node, beforeCount) {\n-        var beforeTokens = [], cursor = node.range[0] - 1;\n-        while (beforeCount > 0 && cursor >= 0) {\n-            if (currentTokens[cursor]) {\n-                beforeTokens.unshift(currentTokens[cursor]);\n-                --beforeCount;\n-            }\n-            --cursor;\n-        }\n-        return beforeTokens;\n-    };\n-\n-    /**\n-     * Gets the token that precedes a given node's tokens in the token stream.\n-     * @param {ASTNode} node The AST node.\n-     * @param {int} [skip=0] A number of tokens to skip before the given node.\n-     * @returns {Token} An object representing the token.\n-     */\n-    api.getTokenBefore = function(node, skip) {\n-        for (var cursor = node.range[0] - 1; cursor >= 0; --cursor) {\n-            if (currentTokens[cursor]) {\n-                if (skip > 0) {\n-                    --skip;\n-                } else {\n-                    return currentTokens[cursor];\n-                }\n-            }\n-        }\n-    };\n-\n-    /**\n-     * Gets a number of tokens that precede a given node's tokens in the token stream.\n-     * @param {ASTNode} node The AST node.\n-     * @param {int} [afterCount=0] The number of tokens after the node to retrieve.\n-     * @returns {[Token]} Array of objects representing tokens.\n-     */\n-    api.getTokensAfter = function(node, afterCount) {\n-        var afterTokens = [], cursor = node.range[1];\n-        while (afterCount > 0 && cursor < currentTokens.length) {\n-            if (currentTokens[cursor]) {\n-                afterTokens.push(currentTokens[cursor]);\n-                --afterCount;\n-                cursor = currentTokens[cursor].range[1];\n-            } else {\n-                ++cursor;\n-            }\n-        }\n-        return afterTokens;\n-    };\n-\n-    /**\n-     * Gets the token that follows a given node's tokens in the token stream.\n-     * @param {ASTNode} node The AST node.\n-     * @param {int} [skip=0] A number of tokens to skip after the given node.\n-     * @returns {Token} An object representing the token.\n-     */\n-    api.getTokenAfter = function(node, skip) {\n-        for (var cursor = node.range[1]; cursor < currentTokens.length; ++cursor) {\n-            if (currentTokens[cursor]) {\n-                if (skip > 0) {\n-                    --skip;\n-                } else {\n-                    return currentTokens[cursor];\n-                }\n-            }\n-        }\n-    };\n-\n-    /**\n-     * Gets all tokens that are related to the given node.\n-     * @param {ASTNode} node The AST node.\n-     * @param {int} [beforeCount=0] The number of tokens before the node to retrieve.\n-     * @param {int} [afterCount=0] The number of tokens after the node to retrieve.\n-     * @returns {[Token]} Array of objects representing tokens.\n-     */\n-    api.getTokens = function(node, beforeCount, afterCount) {\n-        var beforeTokens = api.getTokensBefore(node, beforeCount),\n-            afterTokens = api.getTokensAfter(node, afterCount),\n-            tokens = [],\n-            cursor = node.range[0];\n-        while (cursor < node.range[1]) {\n-            if (currentTokens[cursor]) {\n-                tokens.push(currentTokens[cursor]);\n-                cursor = currentTokens[cursor].range[1];\n-            } else {\n-                ++cursor;\n-            }\n-        }\n-        return beforeTokens.concat(tokens, afterTokens);\n-    };\n-\n-    /**\n-     * Gets the first `count` tokens of the given node's token stream.\n-     * @param {ASTNode} node The AST node.\n-     * @param {int} [count=0] The number of tokens of the node to retrieve.\n-     * @returns {[Token]} Array of objects representing tokens.\n-     */\n-    api.getFirstTokens = function(node, count) {\n-        var tokens = [], cursor = node.range[0];\n-        while (count > 0 && cursor < node.range[1]) {\n-            if (currentTokens[cursor]) {\n-                tokens.push(currentTokens[cursor]);\n-                --count;\n-                cursor = currentTokens[cursor].range[1];\n-            } else {\n-                ++cursor;\n-            }\n-        }\n-        return tokens;\n-    };\n-\n-    /**\n-     * Gets the first token of the given node's token stream.\n-     * @param {ASTNode} node The AST node.\n-     * @param {int} [skip=0] A number of tokens to skip.\n-     * @returns {Token} An object representing the token.\n-     */\n-    api.getFirstToken = function(node, skip) {\n-        for (var cursor = node.range[0]; cursor < node.range[1]; ++cursor) {\n-            if (currentTokens[cursor]) {\n-                if (skip > 0) {\n-                    --skip;\n-                } else {\n-                    return currentTokens[cursor];\n-                }\n-            }\n-        }\n-    };\n-\n-    /**\n-     * Gets the last `count` tokens of the given node.\n-     * @param {ASTNode} node The AST node.\n-     * @param {int} [count=0] The number of tokens of the node to retrieve.\n-     * @returns {[Token]} Array of objects representing tokens.\n-     */\n-    api.getLastTokens = function(node, count) {\n-        var tokens = [], cursor = node.range[1] - 1;\n-        while (count > 0 && cursor >= node.range[0]) {\n-            if (currentTokens[cursor]) {\n-                tokens.unshift(currentTokens[cursor]);\n-                --count;\n-            }\n-            --cursor;\n-        }\n-        return tokens;\n-    };\n-\n-    /**\n-     * Gets the last token of the given node's token stream.\n-     * @param {ASTNode} node The AST node.\n-     * @param {int} [skip=0] A number of tokens to skip.\n-     * @returns {Token} An object representing the token.\n-     */\n-    api.getLastToken = function(node, skip) {\n-        for (var cursor = node.range[1] - 1; cursor >= node.range[0]; --cursor) {\n-            if (currentTokens[cursor]) {\n-                if (skip > 0) {\n-                    --skip;\n-                } else {\n-                    return currentTokens[cursor];\n-                }\n-            }\n-        }\n-    };\n-\n-    /**\n-     * Gets all of the tokens between two non-overlapping nodes.\n-     * @param {ASTNode} left Node before the desired token range.\n-     * @param {ASTNode} right Node after the desired token range.\n-     * @param {int} [padding=0] Number of extra tokens on either side of center.\n-     * @returns {Token[]} Tokens between left and right plus padding.\n-     */\n-    api.getTokensBetween = function(left, right, padding) {\n-        var count,\n-            cursor,\n-            token,\n-            tokens = [];\n-\n-        padding = padding || 0; // Defaults to 0\n-\n-        left = left.range[1];\n-        right = right.range[0];\n-\n-        // Get {{padding}} tokens before first\n-        for (cursor = left - 1, count = 0; count < padding && cursor >= 0; --cursor) {\n-            token = currentTokens[cursor];\n-            if (token) {\n-                tokens.unshift(token);\n-                ++count;\n-            }\n-        }\n-\n-        // Get the tokens between left and right\n-        cursor = left;\n-        while (cursor < right) {\n-            token = currentTokens[cursor];\n-            if (token) {\n-                tokens.push(token);\n-                cursor = token.range[1];\n-            } else {\n-                ++cursor;\n-            }\n-        }\n-\n-        // Get {{padding}} tokens after last\n-        for (count = 0; count < padding && cursor < currentTokens.length; ++cursor) {\n-            token = currentTokens[cursor];\n-            if (token) {\n-                tokens.push(token);\n-                ++count;\n-            }\n-        }\n-\n-        return tokens;\n-    };\n-\n     /**\n      * Gets nodes that are ancestors of current node.\n      * @returns {ASTNode[]} Array of objects representing ancestors."},{"sha":"247760c2ac7d676a43bde7ab0ab6245b5c07a28e","filename":"lib/rules/eqeqeq.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Feqeqeq.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Feqeqeq.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Feqeqeq.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -53,7 +53,7 @@ module.exports = function(context) {\n      * @private\n      */\n     function getOperatorLocation(node) {\n-        var opToken = context.getTokens(node)[context.getTokens(node.left).length];\n+        var opToken = context.getTokenAfter(node.left);\n         return {line: opToken.loc.start.line, column: opToken.loc.start.column};\n     }\n "},{"sha":"03a523be9cc3c63f5b0ede7b2a11506ad635ea50","filename":"lib/rules/no-comma-dangle.js","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fno-comma-dangle.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fno-comma-dangle.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-comma-dangle.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -16,14 +16,18 @@ module.exports = function(context) {\n      //-------------------------------------------------------------------------\n \n     function checkForTrailingComma(node) {\n-        var secondToLastToken = context.getLastTokens(node, 2)[0];\n-\n         var items = node.properties || node.elements,\n-            lastItem = items[items.length - 1];\n-        // The last token in an object/array literal will always be a closing\n-        // curly, so we check the second to last token for a comma.\n-        if (secondToLastToken.value === \",\" && items.length && lastItem) {\n-            context.report(lastItem, secondToLastToken.loc.start, \"Trailing comma.\");\n+            length = items.length,\n+            lastItem, penultimateToken;\n+\n+        if (length) {\n+            lastItem = items[length - 1];\n+            if (lastItem) {\n+                penultimateToken = context.getLastToken(node, 1);\n+                if (penultimateToken.value === \",\") {\n+                    context.report(lastItem, penultimateToken.loc.start, \"Trailing comma.\");\n+                }\n+            }\n         }\n     }\n "},{"sha":"172ff1e2a950a29da2b63e24639befbc4206233a","filename":"lib/rules/no-div-regex.js","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fno-div-regex.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fno-div-regex.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-div-regex.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -14,16 +14,10 @@ module.exports = function(context) {\n     return {\n \n         \"Literal\": function(node) {\n-            var token = context.getFirstTokens(node, 1)[0],\n-                nodeType = token.type,\n-                source;\n+            var token = context.getFirstToken(node);\n \n-            if (nodeType === \"RegularExpression\") {\n-                source = context.getFirstTokens(node, 1)[0].value;\n-\n-                if (source[1] === \"=\") {\n-                    context.report(node, \"A regular expression literal can be confused with '/='.\");\n-                }\n+            if (token.type === \"RegularExpression\" && token.value[1] === \"=\") {\n+                context.report(node, \"A regular expression literal can be confused with '/='.\");\n             }\n         }\n     };"},{"sha":"1afc6730535b4460755144d5cae7c377dc0f1409","filename":"lib/rules/no-empty-class.js","status":"modified","additions":22,"deletions":19,"changes":41,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fno-empty-class.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fno-empty-class.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-empty-class.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -3,6 +3,24 @@\n  * @author Ian Christian Myers\n  */\n \n+//------------------------------------------------------------------------------\n+// Helpers\n+//------------------------------------------------------------------------------\n+\n+/*\n+plain-English description of the following regexp:\n+0. `^` fix the match at the beginning of the string\n+1. `\\/`: the `/` that begins the regexp\n+2. `([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*`: regexp contents; 0 or more of the following\n+  2.0. `[^\\\\[]`: any character that's not a `\\` or a `[` (anything but escape sequences and character classes)\n+  2.1. `\\\\.`: an escape sequence\n+  2.2. `\\[([^\\\\\\]]|\\\\.)+\\]`: a character class that isn't empty\n+3. `\\/` the `/` that ends the regexp\n+4. `[gimy]*`: optional regexp flags\n+5. `$`: fix the match at the end of the string\n+*/\n+var regex = /^\\/([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*\\/[gimy]*$/;\n+\n //------------------------------------------------------------------------------\n // Rule Definition\n //------------------------------------------------------------------------------\n@@ -14,25 +32,10 @@ module.exports = function(context) {\n     return {\n \n         \"Literal\": function(node) {\n-            var tokens = context.getTokens(node);\n-            tokens.forEach(function (token) {\n-                /*\n-                plain-English description of the following regexp:\n-                0. `^` fix the match at the beginning of the string\n-                1. `\\/`: the `/` that begins the regexp\n-                2. `([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*`: regexp contents; 0 or more of the following\n-                  2.0. `[^\\\\[]`: any character that's not a `\\` or a `[` (anything but escape sequences and character classes)\n-                  2.1. `\\\\.`: an escape sequence\n-                  2.2. `\\[([^\\\\\\]]|\\\\.)+\\]`: a character class that isn't empty\n-                3. `\\/` the `/` that ends the regexp\n-                4. `[gimy]*`: optional regexp flags\n-                5. `$`: fix the match at the end of the string\n-                */\n-                if (token.type === \"RegularExpression\" &&\n-                !/^\\/([^\\\\[]|\\\\.|\\[([^\\\\\\]]|\\\\.)+\\])*\\/[gimy]*$/.test(token.value)) {\n-                    context.report(node, \"Empty class.\");\n-                }\n-            });\n+            var token = context.getFirstToken(node);\n+            if (token.type === \"RegularExpression\" && !regex.test(token.value)) {\n+                context.report(node, \"Empty class.\");\n+            }\n         }\n \n     };"},{"sha":"afb27102d9be46769d90178e2898ad892cd93a50","filename":"lib/rules/no-regex-spaces.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fno-regex-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fno-regex-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-regex-spaces.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -14,7 +14,7 @@ module.exports = function(context) {\n     return {\n \n         \"Literal\": function(node) {\n-            var token = context.getFirstTokens(node, 1)[0],\n+            var token = context.getFirstToken(node),\n                 nodeType = token.type,\n                 nodeValue = token.value,\n                 multipleSpacesRegex = /( {2,})+?/,"},{"sha":"d67f5c7581c8a01616c35655338ed04f3ae839ce","filename":"lib/rules/space-in-brackets.js","status":"modified","additions":67,"deletions":59,"changes":126,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fspace-in-brackets.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fspace-in-brackets.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fspace-in-brackets.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -62,45 +62,45 @@ module.exports = function(context) {\n     /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node - The node to report in the event of an error.\n-    * @param {Object[]} tokens - The tokens to be checked for spacing.\n+    * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n-    function reportNoBeginningSpace(node, tokens) {\n-        context.report(node, tokens[0].loc.start,\n-                    \"There should be no space after '\" + tokens[0].value + \"'\");\n+    function reportNoBeginningSpace(node, token) {\n+        context.report(node, token.loc.start,\n+            \"There should be no space after '\" + token.value + \"'\");\n     }\n \n     /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node - The node to report in the event of an error.\n-    * @param {Object[]} tokens - The tokens to be checked for spacing.\n+    * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n-    function reportNoEndingSpace(node, tokens) {\n-        context.report(node, tokens[tokens.length - 1].loc.start,\n-                    \"There should be no space before '\" + tokens[tokens.length - 1].value + \"'\");\n+    function reportNoEndingSpace(node, token) {\n+        context.report(node, token.loc.start,\n+            \"There should be no space before '\" + token.value + \"'\");\n     }\n \n     /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node - The node to report in the event of an error.\n-    * @param {Object[]} tokens - The tokens to be checked for spacing.\n+    * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n-    function reportRequiredBeginningSpace(node, tokens) {\n-        context.report(node, tokens[0].loc.start,\n-                    \"A space is required after '\" + tokens[0].value + \"'\");\n+    function reportRequiredBeginningSpace(node, token) {\n+        context.report(node, token.loc.start,\n+            \"A space is required after '\" + token.value + \"'\");\n     }\n \n     /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node - The node to report in the event of an error.\n-    * @param {Object[]} tokens - The tokens to be checked for spacing.\n+    * @param {Token} token - The token to use for the report.\n     * @returns {void}\n     */\n-    function reportRequiredEndingSpace(node, tokens) {\n-        context.report(node, tokens[tokens.length - 1].loc.start,\n-                    \"A space is required before '\" + tokens[tokens.length - 1].value + \"'\");\n+    function reportRequiredEndingSpace(node, token) {\n+        context.report(node, token.loc.start,\n+                    \"A space is required before '\" + token.value + \"'\");\n     }\n \n \n@@ -110,67 +110,73 @@ module.exports = function(context) {\n \n     return {\n \n-        MemberExpression: function checkMember(node) {\n+        MemberExpression: function(node) {\n             if (!node.computed) {\n                 return;\n             }\n-            var tokens = context.getTokens(node.property, 1, 1);\n-            var tokenA = tokens[0], tokenB = tokens[1],\n-                tokenC = tokens[tokens.length - 2], tokenD = tokens[tokens.length - 1];\n+\n+            var property = node.property,\n+                before = context.getTokenBefore(property),\n+                first = context.getFirstToken(property),\n+                last = context.getLastToken(property),\n+                after = context.getTokenAfter(property);\n \n             var propertyNameMustBeSpaced = options.propertyNameException ?\n                                     !options.spaced : options.spaced;\n \n-            if (isSameLine(tokenA, tokenB) || isSameLine(tokenC, tokenD)) {\n+            if (isSameLine(before, first) || isSameLine(last, after)) {\n                 if (propertyNameMustBeSpaced) {\n-                    if (!isSpaced(tokenA, tokenB) && isSameLine(tokenA, tokenB)) {\n-                        reportRequiredBeginningSpace(node, tokens);\n+                    if (!isSpaced(before, first) && isSameLine(before, first)) {\n+                        reportRequiredBeginningSpace(node, before);\n                     }\n-                    if (!isSpaced(tokenC, tokenD) && isSameLine(tokenC, tokenD)) {\n-                        reportRequiredEndingSpace(node, tokens);\n+                    if (!isSpaced(last, after) && isSameLine(last, after)) {\n+                        reportRequiredEndingSpace(node, after);\n                     }\n                 } else {\n-                    if (isSpaced(tokenA, tokenB)) {\n-                        reportNoBeginningSpace(node, tokens);\n+                    if (isSpaced(before, first)) {\n+                        reportNoBeginningSpace(node, before);\n                     }\n-                    if (isSpaced(tokenC, tokenD)) {\n-                        reportNoEndingSpace(node, tokens);\n+                    if (isSpaced(last, after)) {\n+                        reportNoEndingSpace(node, after);\n                     }\n                 }\n             }\n         },\n+\n         ArrayExpression: function(node) {\n             if (node.elements.length === 0) {\n                 return;\n             }\n-            var tokens = context.getTokens(node);\n-            var tokenA = tokens[0], tokenB = tokens[1],\n-                tokenC = tokens[tokens.length - 2], tokenD = tokens[tokens.length - 1];\n+\n+            var first = context.getFirstToken(node),\n+                second = context.getFirstToken(node, 1),\n+                penultimate = context.getLastToken(node, 1),\n+                last = context.getLastToken(node);\n \n             var openingBracketMustBeSpaced =\n-                options.objectsInArraysException && tokenB.value === \"{\" ||\n-                options.arraysInArraysException && tokenB.value === \"[\" ||\n+                options.objectsInArraysException && second.value === \"{\" ||\n+                options.arraysInArraysException && second.value === \"[\" ||\n                 options.singleElementException && node.elements.length === 1\n                 ? !options.spaced : options.spaced;\n \n             var closingBracketMustBeSpaced =\n-                options.objectsInArraysException && tokenC.value === \"}\" ||\n-                options.arraysInArraysException && tokenC.value === \"]\" ||\n+                options.objectsInArraysException && penultimate.value === \"}\" ||\n+                options.arraysInArraysException && penultimate.value === \"]\" ||\n                 options.singleElementException && node.elements.length === 1\n                 ? !options.spaced : options.spaced;\n \n-            if (isSameLine(tokenA, tokenB) || isSameLine(tokenC, tokenD)) {\n-                if (openingBracketMustBeSpaced && !isSpaced(tokenA, tokenB)) {\n-                    reportRequiredBeginningSpace(node, tokens);\n+            if (isSameLine(first, second) || isSameLine(penultimate, last)) {\n+                if (openingBracketMustBeSpaced && !isSpaced(first, second)) {\n+                    reportRequiredBeginningSpace(node, first);\n                 }\n-                if (!openingBracketMustBeSpaced && isSpaced(tokenA, tokenB)) {\n-                    reportNoBeginningSpace(node, tokens);\n+                if (!openingBracketMustBeSpaced && isSpaced(first, second)) {\n+                    reportNoBeginningSpace(node, first);\n                 }\n-                if (closingBracketMustBeSpaced && !isSpaced(tokenC, tokenD)) {\n-                    reportRequiredEndingSpace(node, tokens);\n+                if (closingBracketMustBeSpaced && !isSpaced(penultimate, last)) {\n+                    reportRequiredEndingSpace(node, last);\n                 }\n-                if (!closingBracketMustBeSpaced && isSpaced(tokenC, tokenD)) {\n-                    reportNoEndingSpace(node, tokens);\n+                if (!closingBracketMustBeSpaced && isSpaced(penultimate, last)) {\n+                    reportNoEndingSpace(node, last);\n                 }\n             }\n         },\n@@ -179,27 +185,29 @@ module.exports = function(context) {\n             if (node.properties.length === 0) {\n                 return;\n             }\n-            var tokens = context.getTokens(node);\n-            var tokenA = tokens[0], tokenB = tokens[1],\n-                tokenC = tokens[tokens.length - 2], tokenD = tokens[tokens.length - 1];\n+\n+            var first = context.getFirstToken(node),\n+                second = context.getFirstToken(node, 1),\n+                penultimate = context.getLastToken(node, 1),\n+                last = context.getLastToken(node);\n \n             var closingCurlyBraceMustBeSpaced =\n-                options.arraysInObjectsException && tokenC.value === \"]\" ||\n-                options.objectsInObjectsException && tokenC.value === \"}\"\n+                options.arraysInObjectsException && penultimate.value === \"]\" ||\n+                options.objectsInObjectsException && penultimate.value === \"}\"\n                 ? !options.spaced : options.spaced;\n \n-            if (isSameLine(tokenA, tokenB) || isSameLine(tokenC, tokenD)) {\n-                if (options.spaced && !isSpaced(tokenA, tokenB)) {\n-                    reportRequiredBeginningSpace(node, tokens);\n+            if (isSameLine(first, second) || isSameLine(penultimate, last)) {\n+                if (options.spaced && !isSpaced(first, second)) {\n+                    reportRequiredBeginningSpace(node, first);\n                 }\n-                if (!options.spaced && isSpaced(tokenA, tokenB)) {\n-                    reportNoBeginningSpace(node, tokens);\n+                if (!options.spaced && isSpaced(first, second)) {\n+                    reportNoBeginningSpace(node, first);\n                 }\n-                if (closingCurlyBraceMustBeSpaced && !isSpaced(tokenC, tokenD)) {\n-                    reportRequiredEndingSpace(node, tokens);\n+                if (closingCurlyBraceMustBeSpaced && !isSpaced(penultimate, last)) {\n+                    reportRequiredEndingSpace(node, last);\n                 }\n-                if (!closingCurlyBraceMustBeSpaced && isSpaced(tokenC, tokenD)) {\n-                    reportNoEndingSpace(node, tokens);\n+                if (!closingCurlyBraceMustBeSpaced && isSpaced(penultimate, last)) {\n+                    reportNoEndingSpace(node, last);\n                 }\n             }\n         }"},{"sha":"77244f03cf4cd682b839c25c75be9014b651a573","filename":"lib/rules/space-infix-ops.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fspace-infix-ops.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Frules%2Fspace-infix-ops.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fspace-infix-ops.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -18,7 +18,7 @@ module.exports = function(context) {\n     ];\n \n     function isSpaced(left, right) {\n-        var op, tokens = context.getTokens({range: [left.range[1], right.range[0]]}, 1, 1);\n+        var op, tokens = context.getTokensBetween(left, right, 1);\n         for (var i = 1, l = tokens.length - 1; i < l; ++i) {\n             op = tokens[i];\n             if ("},{"sha":"5d8570d11247c216df3d40874f343eb647bb9e98","filename":"lib/token-store.js","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Ftoken-store.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/lib%2Ftoken-store.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Ftoken-store.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -0,0 +1,186 @@\n+/**\n+ * @fileoverview Object to handle access and retrieval of tokens.\n+ * @author Brandon Mills\n+ * @copyright 2014 Nicholas C. Zakas. All rights reserved.\n+ * @copyright 2014 Brandon Mills. All rights reserved.\n+ */\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Implementation\n+//------------------------------------------------------------------------------\n+\n+module.exports = function(tokens) {\n+    var api = {},\n+        starts = Object.create(null),\n+        ends = Object.create(null),\n+        index, length, range;\n+\n+    /**\n+     * Gets tokens in a given interval.\n+     * @param {int} start Inclusive index of the first token. 0 if negative.\n+     * @param {int} end Exclusive index of the last token.\n+     * @returns {[Token]} Tokens in the interval.\n+     */\n+    function get(start, end) {\n+        var result = [],\n+            i;\n+\n+        for (i = Math.max(0, start); i < end && i < length; i++) {\n+            result.push(tokens[i]);\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Gets the index in the tokens array of the last token belonging to a node.\n+     * Usually a node ends exactly at a token, but due to ASI, sometimes a\n+     * node's range extends beyond its last token.\n+     * @param {ASTNode} node The node for which to find the last token's index.\n+     * @returns {int} Index in the tokens array of the node's last token.\n+     */\n+    function lastTokenIndex(node) {\n+        var end = node.range[1],\n+            cursor = ends[end];\n+\n+        // If the node extends beyond its last token, get the token before the\n+        // next token\n+        if (typeof cursor === \"undefined\") {\n+            cursor = starts[end] - 1;\n+        }\n+\n+        // If there isn't a next token, the desired token is the last one in the\n+        // array\n+        if (isNaN(cursor)) {\n+            cursor = length - 1;\n+        }\n+\n+        return cursor;\n+    }\n+\n+    // Map tokens' start and end range to the index in the tokens array\n+    for (index = 0, length = tokens.length; index < length; index++) {\n+        range = tokens[index].range;\n+        starts[range[0]] = index;\n+        ends[range[1]] = index;\n+    }\n+\n+    /**\n+     * Gets a number of tokens that precede a given node's tokens in the token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [beforeCount=0] The number of tokens before the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n+     */\n+    api.getTokensBefore = function(node, beforeCount) {\n+        var first = starts[node.range[0]];\n+        return get(first - (beforeCount || 0), first);\n+    };\n+\n+    /**\n+     * Gets the token that precedes a given node's tokens in the token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [skip=0] A number of tokens to skip before the given node.\n+     * @returns {Token} An object representing the token.\n+     */\n+    api.getTokenBefore = function(node, skip) {\n+        return tokens[starts[node.range[0]] - (skip || 0) - 1];\n+    };\n+\n+    /**\n+     * Gets a number of tokens that precede a given node's tokens in the token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [afterCount=0] The number of tokens after the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n+     */\n+    api.getTokensAfter = function(node, afterCount) {\n+        var start = lastTokenIndex(node) + 1;\n+        return get(start, start + (afterCount || 0));\n+    };\n+\n+    /**\n+     * Gets the token that follows a given node's tokens in the token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [skip=0] A number of tokens to skip after the given node.\n+     * @returns {Token} An object representing the token.\n+     */\n+    api.getTokenAfter = function(node, skip) {\n+        return tokens[lastTokenIndex(node) + (skip || 0) + 1];\n+    };\n+\n+    /**\n+     * Gets all tokens that are related to the given node.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [beforeCount=0] The number of tokens before the node to retrieve.\n+     * @param {int} [afterCount=0] The number of tokens after the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n+     */\n+    api.getTokens = function(node, beforeCount, afterCount) {\n+        return get(\n+            starts[node.range[0]] - (beforeCount || 0),\n+            lastTokenIndex(node) + (afterCount || 0) + 1\n+        );\n+    };\n+\n+    /**\n+     * Gets the first `count` tokens of the given node's token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [count=0] The number of tokens of the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n+     */\n+    api.getFirstTokens = function(node, count) {\n+        var first = starts[node.range[0]];\n+        return get(\n+            first,\n+            Math.min(lastTokenIndex(node) + 1, first + (count || 0))\n+        );\n+    };\n+\n+    /**\n+     * Gets the first token of the given node's token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [skip=0] A number of tokens to skip.\n+     * @returns {Token} An object representing the token.\n+     */\n+    api.getFirstToken = function(node, skip) {\n+        return tokens[starts[node.range[0]] + (skip || 0)];\n+    };\n+\n+    /**\n+     * Gets the last `count` tokens of the given node.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [count=0] The number of tokens of the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n+     */\n+    api.getLastTokens = function(node, count) {\n+        var last = lastTokenIndex(node) + 1;\n+        return get(Math.max(starts[node.range[0]], last - (count || 0)), last);\n+    };\n+\n+    /**\n+     * Gets the last token of the given node's token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [skip=0] A number of tokens to skip.\n+     * @returns {Token} An object representing the token.\n+     */\n+    api.getLastToken = function(node, skip) {\n+        return tokens[lastTokenIndex(node) - (skip || 0)];\n+    };\n+\n+    /**\n+     * Gets all of the tokens between two non-overlapping nodes.\n+     * @param {ASTNode} left Node before the desired token range.\n+     * @param {ASTNode} right Node after the desired token range.\n+     * @param {int} [padding=0] Number of extra tokens on either side of center.\n+     * @returns {Token[]} Tokens between left and right plus padding.\n+     */\n+    api.getTokensBetween = function(left, right, padding) {\n+        padding = padding || 0;\n+        return get(\n+            lastTokenIndex(left) + 1 - padding,\n+            starts[right.range[0]] + padding\n+        );\n+    };\n+\n+    return api;\n+};"},{"sha":"43f9455e7b871cf94711d85602e4e0804d4e0867","filename":"tests/lib/eslint.js","status":"modified","additions":0,"deletions":489,"changes":489,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/tests%2Flib%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/tests%2Flib%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Feslint.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -182,495 +182,6 @@ describe(\"eslint\", function() {\n \n     });\n \n-    describe(\"when calling getTokens\", function() {\n-        var code = TEST_CODE;\n-\n-        it(\"should retrieve all tokens for root node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"Program\", function(node) {\n-                var tokens = eslint.getTokens(node);\n-                assert.equal(tokens.length, 7);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve all tokens for binary expression\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getTokens(node);\n-                assert.equal(tokens.length, 3);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve all tokens plus one before for binary expression\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getTokens(node, 1);\n-                assert.equal(tokens.length, 4);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve all tokens plus one after for binary expression\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getTokens(node, 0, 1);\n-                assert.equal(tokens.length, 4);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve all tokens plus two before and one after for binary expression\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getTokens(node, 2, 1);\n-                assert.equal(tokens.length, 6);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n-    describe(\"when calling getTokensBefore\", function() {\n-        var code = TEST_CODE;\n-\n-        it(\"should retrieve zero tokens before a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getTokensBefore(node, 0);\n-                assert.equal(tokens.length, 0);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve one token before a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getTokensBefore(node, 1);\n-                assert.equal(tokens.length, 1);\n-\t\t\t\tassert.equal(tokens[0].value, \"=\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve more than one token before a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getTokensBefore(node, 2);\n-                assert.equal(tokens.length, 2);\n-\t\t\t\tassert.equal(tokens[0].value, \"answer\");\n-\t\t\t\tassert.equal(tokens[1].value, \"=\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve all tokens before a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getTokensBefore(node, 9e9);\n-                assert.equal(tokens.length, 3);\n-\t\t\t\tassert.equal(tokens[0].value, \"var\");\n-\t\t\t\tassert.equal(tokens[1].value, \"answer\");\n-\t\t\t\tassert.equal(tokens[2].value, \"=\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n-    describe(\"when calling getTokenBefore\", function() {\n-        var code = TEST_CODE;\n-\n-        it(\"should retrieve one token before a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var token = eslint.getTokenBefore(node);\n-\t\t\t\tassert.equal(token.value, \"=\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should skip a given number of tokens\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var token = eslint.getTokenBefore(node, 1);\n-\t\t\t\tassert.equal(token.value, \"answer\");\n-            });\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var token = eslint.getTokenBefore(node, 2);\n-\t\t\t\tassert.equal(token.value, \"var\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n-    describe(\"when calling getTokensAfter\", function() {\n-        var code = TEST_CODE;\n-\n-        it(\"should retrieve zero tokens after a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"Identifier\", function(node) {\n-                var tokens = eslint.getTokensAfter(node, 0);\n-                assert.equal(tokens.length, 0);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve one token after a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"Identifier\", function(node) {\n-                var tokens = eslint.getTokensAfter(node, 1);\n-                assert.equal(tokens.length, 1);\n-\t\t\t\tassert.equal(tokens[0].value, \"=\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve more than one token after a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"Identifier\", function(node) {\n-                var tokens = eslint.getTokensAfter(node, 2);\n-                assert.equal(tokens.length, 2);\n-\t\t\t\tassert.equal(tokens[0].value, \"=\");\n-\t\t\t\tassert.equal(tokens[1].value, \"6\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve all tokens after a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"Identifier\", function(node) {\n-                var tokens = eslint.getTokensAfter(node, 9e9);\n-                assert.equal(tokens.length, 5);\n-\t\t\t\tassert.equal(tokens[0].value, \"=\");\n-\t\t\t\tassert.equal(tokens[1].value, \"6\");\n-\t\t\t\tassert.equal(tokens[2].value, \"*\");\n-\t\t\t\tassert.equal(tokens[3].value, \"7\");\n-\t\t\t\tassert.equal(tokens[4].value, \";\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n-    describe(\"when calling getTokenAfter\", function() {\n-        var code = TEST_CODE;\n-\n-        it(\"should retrieve one token after a node\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"Identifier\", function(node) {\n-                var token = eslint.getTokenAfter(node);\n-\t\t\t\tassert.equal(token.value, \"=\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should skip a given number of tokens\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"Identifier\", function(node) {\n-                var token = eslint.getTokenAfter(node, 1);\n-\t\t\t\tassert.equal(token.value, \"6\");\n-            });\n-            eslint.on(\"Identifier\", function(node) {\n-                var token = eslint.getTokenAfter(node, 2);\n-\t\t\t\tassert.equal(token.value, \"*\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n-    describe(\"when calling getFirstTokens\", function() {\n-        var code = TEST_CODE;\n-\n-        it(\"should retrieve zero tokens from a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getFirstTokens(node, 0);\n-                assert.equal(tokens.length, 0);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve one token from a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getFirstTokens(node, 1);\n-                assert.equal(tokens.length, 1);\n-\t\t\t\tassert.equal(tokens[0].value, \"6\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve more than one token from a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getFirstTokens(node, 2);\n-                assert.equal(tokens.length, 2);\n-\t\t\t\tassert.equal(tokens[0].value, \"6\");\n-\t\t\t\tassert.equal(tokens[1].value, \"*\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve all tokens from a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getFirstTokens(node, 9e9);\n-                assert.equal(tokens.length, 3);\n-\t\t\t\tassert.equal(tokens[0].value, \"6\");\n-\t\t\t\tassert.equal(tokens[1].value, \"*\");\n-\t\t\t\tassert.equal(tokens[2].value, \"7\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n-    describe(\"when calling getFirstToken\", function() {\n-        var code = TEST_CODE;\n-\n-        it(\"should retrieve the first token of a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var token = eslint.getFirstToken(node);\n-\t\t\t\tassert.equal(token.value, \"6\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should skip a given number of tokens\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var token = eslint.getFirstToken(node, 1);\n-\t\t\t\tassert.equal(token.value, \"*\");\n-            });\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var token = eslint.getFirstToken(node, 2);\n-\t\t\t\tassert.equal(token.value, \"7\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n-    describe(\"when calling getLastTokens\", function() {\n-        var code = TEST_CODE;\n-\n-        it(\"should retrieve zero tokens from the end of a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getLastTokens(node, 0);\n-                assert.equal(tokens.length, 0);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve one token from the end of a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getLastTokens(node, 1);\n-                assert.equal(tokens.length, 1);\n-\t\t\t\tassert.equal(tokens[0].value, \"7\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve more than one token from the end of a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getLastTokens(node, 2);\n-                assert.equal(tokens.length, 2);\n-\t\t\t\tassert.equal(tokens[0].value, \"*\");\n-\t\t\t\tassert.equal(tokens[1].value, \"7\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve all tokens from the end of a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getLastTokens(node, 9e9);\n-                assert.equal(tokens.length, 3);\n-\t\t\t\tassert.equal(tokens[0].value, \"6\");\n-\t\t\t\tassert.equal(tokens[1].value, \"*\");\n-\t\t\t\tassert.equal(tokens[2].value, \"7\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n-    describe(\"when calling getLastToken\", function() {\n-        var code = TEST_CODE;\n-\n-        it(\"should retrieve the last token of a node's token stream\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var token = eslint.getLastToken(node);\n-                assert.equal(token.value, \"7\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should skip a given number of tokens\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var token = eslint.getLastToken(node, 1);\n-                assert.equal(token.value, \"*\");\n-            });\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var token = eslint.getLastToken(node, 2);\n-                assert.equal(token.value, \"6\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n-    describe(\"when calling getTokensBetween\", function() {\n-        var code = \"typeof foo;\";\n-\n-        it(\"should retrieve zero tokens between adjacent nodes\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"UnaryExpression\", function(node) {\n-                var tokens = eslint.getTokensBetween(node.operator, node.argument);\n-                assert.equal(tokens.length, 0);\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        code = TEST_CODE;\n-\n-        it(\"should retrieve one token between nodes\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"BinaryExpression\", function(node) {\n-                var tokens = eslint.getTokensBetween(node.left, node.right);\n-                assert.equal(tokens.length, 1);\n-                assert.equal(tokens[0].value, \"*\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve multiple tokens between non-adjacent nodes\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"VariableDeclarator\", function(node) {\n-                var tokens = eslint.getTokensBetween(node.id, node.init.right);\n-                assert.equal(tokens.length, 3);\n-                assert.equal(tokens[0].value, \"=\");\n-                assert.equal(tokens[1].value, \"6\");\n-                assert.equal(tokens[2].value, \"*\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-\n-        it(\"should retrieve surrounding tokens when asked for padding\", function() {\n-            var config = { rules: {} };\n-\n-            eslint.reset();\n-            eslint.on(\"VariableDeclarator\", function(node) {\n-                var tokens = eslint.getTokensBetween(node.id, node.init.left, 2);\n-                assert.equal(tokens.length, 5);\n-                assert.equal(tokens[0].value, \"var\");\n-                assert.equal(tokens[1].value, \"answer\");\n-                assert.equal(tokens[2].value, \"=\");\n-                assert.equal(tokens[3].value, \"6\");\n-                assert.equal(tokens[4].value, \"*\");\n-            });\n-\n-            eslint.verify(code, config, filename, true);\n-        });\n-    });\n-\n     describe(\"getJSDocComment()\", function() {\n         var sandbox;\n "},{"sha":"e155a950e804a97423452e7d56737e6556c8dbbc","filename":"tests/lib/token-store.js","status":"added","additions":347,"deletions":0,"changes":347,"blob_url":"https://github.com/eslint/eslint/blob/58358ccd1a77139a41d021b66320b8e52600ad5f/tests%2Flib%2Ftoken-store.js","raw_url":"https://github.com/eslint/eslint/raw/58358ccd1a77139a41d021b66320b8e52600ad5f/tests%2Flib%2Ftoken-store.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Ftoken-store.js?ref=58358ccd1a77139a41d021b66320b8e52600ad5f","patch":"@@ -0,0 +1,347 @@\n+/**\n+ * @fileoverview Tests for TokenStore class.\n+ * @author Brandon Mills\n+ * @copyright 2014 Nicholas C. Zakas. All rights reserved.\n+ * @copyright 2014 Brandon Mills. All rights reserved.\n+ */\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var assert = require(\"chai\").assert,\n+    esprima = require(\"esprima\"),\n+    TokenStore = require(\"../../lib/token-store\");\n+\n+//------------------------------------------------------------------------------\n+// Constants\n+//------------------------------------------------------------------------------\n+\n+var SOURCE_CODE = \"var answer = a * b\\n    call();\\n\",\n+    AST = esprima.parse(SOURCE_CODE, { loc: true, range: true, tokens: true }),\n+    TOKENS = AST.tokens,\n+    Program = AST,\n+    VariableDeclaration = Program.body[0],\n+    VariableDeclarator = VariableDeclaration.declarations[0],\n+    BinaryExpression = VariableDeclarator.init,\n+    CallExpression = Program.body[1].expression;\n+\n+//------------------------------------------------------------------------------\n+// Helpers\n+//------------------------------------------------------------------------------\n+\n+/**\n+ * Checks the values of tokens against an array of expected values.\n+ * @param {[Token]} tokens Tokens returned from the API.\n+ * @param {[String]} expected Expected token values\n+ * @returns {void}\n+ */\n+function check(tokens, expected) {\n+    var length = tokens.length,\n+        i;\n+\n+    assert.equal(length, expected.length);\n+    for (i = 0; i < length; i++) {\n+        assert.equal(tokens[i].value, expected[i]);\n+    }\n+}\n+\n+//------------------------------------------------------------------------------\n+// Tests\n+//------------------------------------------------------------------------------\n+\n+describe(\"TokenStore\", function() {\n+    var store = new TokenStore(TOKENS);\n+\n+    describe(\"when calling getTokens\", function() {\n+\n+        it(\"should retrieve all tokens for root node\", function() {\n+            check(\n+                store.getTokens(Program),\n+                [\"var\", \"answer\", \"=\", \"a\", \"*\", \"b\", \"call\", \"(\", \")\", \";\"]\n+            );\n+        });\n+\n+        it(\"should retrieve all tokens for binary expression\", function() {\n+            check(\n+                store.getTokens(BinaryExpression),\n+                [\"a\", \"*\", \"b\"]\n+            );\n+        });\n+\n+        it(\"should retrieve all tokens plus one before for binary expression\", function() {\n+            check(\n+                store.getTokens(BinaryExpression, 1),\n+                [\"=\", \"a\", \"*\", \"b\"]\n+            );\n+        });\n+\n+        it(\"should retrieve all tokens plus one after for binary expression\", function() {\n+            check(\n+                store.getTokens(BinaryExpression, 0, 1),\n+                [\"a\", \"*\", \"b\", \"call\"]\n+            );\n+        });\n+\n+        it(\"should retrieve all tokens plus two before and one after for binary expression\", function() {\n+            check(\n+                store.getTokens(BinaryExpression, 2, 1),\n+                [\"answer\", \"=\", \"a\", \"*\", \"b\", \"call\"]\n+            );\n+        });\n+\n+    });\n+\n+    describe(\"when calling getTokensBefore\", function() {\n+\n+        it(\"should retrieve zero tokens before a node\", function() {\n+            check(\n+                store.getTokensBefore(BinaryExpression, 0),\n+                []\n+            );\n+        });\n+\n+        it(\"should retrieve one token before a node\", function() {\n+            check(\n+                store.getTokensBefore(BinaryExpression, 1),\n+                [\"=\"]\n+            );\n+        });\n+\n+        it(\"should retrieve more than one token before a node\", function() {\n+            check(\n+                store.getTokensBefore(BinaryExpression, 2),\n+                [\"answer\", \"=\"]\n+            );\n+        });\n+\n+        it(\"should retrieve all tokens before a node\", function() {\n+            check(\n+                store.getTokensBefore(BinaryExpression, 9e9),\n+                [\"var\", \"answer\", \"=\"]\n+            );\n+        });\n+\n+    });\n+\n+    describe(\"when calling getTokenBefore\", function() {\n+\n+        it(\"should retrieve one token before a node\", function() {\n+            assert.equal(\n+                store.getTokenBefore(BinaryExpression).value,\n+                \"=\"\n+            );\n+        });\n+\n+        it(\"should skip a given number of tokens\", function() {\n+            assert.equal(\n+                store.getTokenBefore(BinaryExpression, 1).value,\n+                \"answer\"\n+            );\n+            assert.equal(\n+                store.getTokenBefore(BinaryExpression, 2).value,\n+                \"var\"\n+            );\n+        });\n+\n+    });\n+\n+    describe(\"when calling getTokensAfter\", function() {\n+\n+        it(\"should retrieve zero tokens after a node\", function() {\n+            check(\n+                store.getTokensAfter(VariableDeclarator.id, 0),\n+                []\n+            );\n+        });\n+\n+        it(\"should retrieve one token after a node\", function() {\n+            check(\n+                store.getTokensAfter(VariableDeclarator.id, 1),\n+                [\"=\"]\n+            );\n+        });\n+\n+        it(\"should retrieve more than one token after a node\", function() {\n+            check(\n+                store.getTokensAfter(VariableDeclarator.id, 2),\n+                [\"=\", \"a\"]\n+            );\n+        });\n+\n+        it(\"should retrieve all tokens after a node\", function() {\n+            check(\n+                store.getTokensAfter(VariableDeclarator.id, 9e9),\n+                [\"=\", \"a\", \"*\", \"b\", \"call\", \"(\", \")\", \";\"]\n+            );\n+        });\n+\n+    });\n+\n+    describe(\"when calling getTokenAfter\", function() {\n+\n+        it(\"should retrieve one token after a node\", function() {\n+            assert.equal(\n+                store.getTokenAfter(VariableDeclarator.id).value,\n+                \"=\"\n+            );\n+        });\n+\n+        it(\"should skip a given number of tokens\", function() {\n+            assert.equal(\n+                store.getTokenAfter(VariableDeclarator.id, 1).value,\n+                \"a\"\n+            );\n+            assert.equal(\n+                store.getTokenAfter(VariableDeclarator.id, 2).value,\n+                \"*\"\n+            );\n+        });\n+\n+    });\n+\n+    describe(\"when calling getFirstTokens\", function() {\n+\n+        it(\"should retrieve zero tokens from a node's token stream\", function() {\n+            check(\n+                store.getFirstTokens(BinaryExpression, 0),\n+                []\n+            );\n+        });\n+\n+        it(\"should retrieve one token from a node's token stream\", function() {\n+            check(\n+                store.getFirstTokens(BinaryExpression, 1),\n+                [\"a\"]\n+            );\n+        });\n+\n+        it(\"should retrieve more than one token from a node's token stream\", function() {\n+            check(\n+                store.getFirstTokens(BinaryExpression, 2),\n+                [\"a\", \"*\"]\n+            );\n+        });\n+\n+        it(\"should retrieve all tokens from a node's token stream\", function() {\n+            check(\n+                store.getFirstTokens(BinaryExpression, 9e9),\n+                [\"a\", \"*\", \"b\"]\n+            );\n+        });\n+\n+    });\n+\n+    describe(\"when calling getFirstToken\", function() {\n+\n+        it(\"should retrieve the first token of a node's token stream\", function() {\n+            assert.equal(\n+                store.getFirstToken(BinaryExpression).value,\n+                \"a\"\n+            );\n+        });\n+\n+        it(\"should skip a given number of tokens\", function() {\n+            assert.equal(\n+                store.getFirstToken(BinaryExpression, 1).value,\n+                \"*\"\n+            );\n+            assert.equal(\n+                store.getFirstToken(BinaryExpression, 2).value,\n+                \"b\"\n+            );\n+        });\n+\n+    });\n+\n+    describe(\"when calling getLastTokens\", function() {\n+\n+        it(\"should retrieve zero tokens from the end of a node's token stream\", function() {\n+            check(\n+                store.getLastTokens(BinaryExpression, 0),\n+                []\n+            );\n+        });\n+\n+        it(\"should retrieve one token from the end of a node's token stream\", function() {\n+            check(\n+                store.getLastTokens(BinaryExpression, 1),\n+                [\"b\"]\n+            );\n+        });\n+\n+        it(\"should retrieve more than one token from the end of a node's token stream\", function() {\n+            check(\n+                store.getLastTokens(BinaryExpression, 2),\n+                [\"*\", \"b\"]\n+            );\n+        });\n+\n+        it(\"should retrieve all tokens from the end of a node's token stream\", function() {\n+            check(\n+                store.getLastTokens(BinaryExpression, 9e9),\n+                [\"a\", \"*\", \"b\"]\n+            );\n+        });\n+\n+    });\n+\n+    describe(\"when calling getLastToken\", function() {\n+\n+        it(\"should retrieve the last token of a node's token stream\", function() {\n+            assert.equal(\n+                store.getLastToken(BinaryExpression).value,\n+                \"b\"\n+            );\n+            assert.equal(\n+                store.getLastToken(VariableDeclaration).value,\n+                \"b\"\n+            );\n+        });\n+\n+        it(\"should skip a given number of tokens\", function() {\n+            assert.equal(\n+                store.getLastToken(BinaryExpression, 1).value,\n+                \"*\"\n+            );\n+            assert.equal(\n+                store.getLastToken(BinaryExpression, 2).value,\n+                \"a\"\n+            );\n+        });\n+\n+    });\n+\n+    describe(\"when calling getTokensBetween\", function() {\n+\n+        it(\"should retrieve zero tokens between adjacent nodes\", function() {\n+            check(\n+                store.getTokensBetween(BinaryExpression, CallExpression),\n+                []\n+            );\n+        });\n+\n+        it(\"should retrieve one token between nodes\", function() {\n+            check(\n+                store.getTokensBetween(BinaryExpression.left, BinaryExpression.right),\n+                [\"*\"]\n+            );\n+        });\n+\n+        it(\"should retrieve multiple tokens between non-adjacent nodes\", function() {\n+            check(\n+                store.getTokensBetween(VariableDeclarator.id, BinaryExpression.right),\n+                [\"=\", \"a\", \"*\"]\n+            );\n+        });\n+\n+        it(\"should retrieve surrounding tokens when asked for padding\", function() {\n+            check(\n+                store.getTokensBetween(VariableDeclarator.id, BinaryExpression.left, 2),\n+                [\"var\", \"answer\", \"=\", \"a\", \"*\"]\n+            );\n+        });\n+\n+    });\n+\n+});"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/1219","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/1219/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/1219/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/1219/events","html_url":"https://github.com/eslint/eslint/pull/1219","id":42024526,"node_id":"MDExOlB1bGxSZXF1ZXN0MjA3OTQwODE=","number":1219,"title":"Fix: rewrite no-unused-vars rule (refs #1212)","user":{"login":"michaelficarra","id":218840,"node_id":"MDQ6VXNlcjIxODg0MA==","avatar_url":"https://avatars.githubusercontent.com/u/218840?v=4","gravatar_id":"","url":"https://api.github.com/users/michaelficarra","html_url":"https://github.com/michaelficarra","followers_url":"https://api.github.com/users/michaelficarra/followers","following_url":"https://api.github.com/users/michaelficarra/following{/other_user}","gists_url":"https://api.github.com/users/michaelficarra/gists{/gist_id}","starred_url":"https://api.github.com/users/michaelficarra/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/michaelficarra/subscriptions","organizations_url":"https://api.github.com/users/michaelficarra/orgs","repos_url":"https://api.github.com/users/michaelficarra/repos","events_url":"https://api.github.com/users/michaelficarra/events{/privacy}","received_events_url":"https://api.github.com/users/michaelficarra/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2014-09-05T08:24:27Z","updated_at":"2018-02-07T01:55:34Z","closed_at":"2014-09-05T15:36:09Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/1219","html_url":"https://github.com/eslint/eslint/pull/1219","diff_url":"https://github.com/eslint/eslint/pull/1219.diff","patch_url":"https://github.com/eslint/eslint/pull/1219.patch","merged_at":"2014-09-05T15:36:09Z"},"body":"Before:\n\n```\n$ npm run perf\n\n> eslint@0.7.4 perf /Users/michael/projects/eslint\n> node Makefile.js perf\n\nCPU Speed is 2600 with multiplier 7500000\nPerformance Run #1:  1299.1717899999999ms\nPerformance Run #2:  1338.114744ms\nPerformance Run #3:  1288.453107ms\nPerformance Run #4:  1292.191793ms\nPerformance Run #5:  1307.2589520000001ms\nPerformance budget ok:  1299.1717899999999ms (limit: 2884.6153846153848ms)\n```\n\nAfter:\n\n```\n npm run perf\n\n> eslint@0.7.4 perf /Users/michael/projects/eslint\n> node Makefile.js perf\n\nCPU Speed is 2600 with multiplier 7500000\nPerformance Run #1:  1165.686332ms\nPerformance Run #2:  1185.946108ms\nPerformance Run #3:  1170.5925320000001ms\nPerformance Run #4:  1173.558406ms\nPerformance Run #5:  1189.729579ms\nPerformance budget ok:  1173.558406ms (limit: 2884.6153846153848ms)\n```\n\nRef. #1212.\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/1219/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/1219/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"3438f00d8777ea305c20274decc0e0023b751d26","filename":"lib/rules/no-unused-vars.js","status":"modified","additions":56,"deletions":188,"changes":244,"blob_url":"https://github.com/eslint/eslint/blob/06ee9ccd2e6931fbda9d83da0ffda2754836edf1/lib%2Frules%2Fno-unused-vars.js","raw_url":"https://github.com/eslint/eslint/raw/06ee9ccd2e6931fbda9d83da0ffda2754836edf1/lib%2Frules%2Fno-unused-vars.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-unused-vars.js?ref=06ee9ccd2e6931fbda9d83da0ffda2754836edf1","patch":"@@ -25,211 +25,79 @@ module.exports = function(context) {\n         }\n     }\n \n-    var allowUnusedGlobals = (config.vars !== \"all\"),\n-        variables = {};\n-\n-\n-    function lookupVariableName(name) {\n-\n-        // Convoluted check in case name is \"hasOwnProperty\"\n-        if (!Object.prototype.hasOwnProperty.call(variables, name)) {\n-            return null;\n-        }\n-        return variables[name];\n-    }\n-\n-    function lookupVariable(variable) {\n-        var candidates = lookupVariableName(variable.name);\n-        if (candidates) {\n-            return candidates.filter(function (candidate) {\n-                return variable.identifiers.indexOf(candidate.node) > -1 || variable.eslintExplicitGlobal;\n-            })[0];\n-        }\n-        return candidates;\n-    }\n+    var MESSAGE = \"{{name}} is defined but never used\";\n \n     /**\n-     * Check if funcNode has paramNode as an identifier of one of its params.\n-     *\n-     * @param {FunctionExpression|FunctionDeclaration} funcNode Node which to\n-     *                                                          check for param\n-     * @param {Identifier} paramNode Node which can be an identifier for a param\n-     * @returns {boolean} If funcNode has paramNode as an identifier of one of\n-     *                    its params\n+     * @param {Reference} ref - an escope Reference\n+     * @returns {Boolean} whether the given reference represents a read operation\n      */\n-    function functionHasParam(funcNode, paramNode) {\n-        for (var i = 0, len = funcNode.params.length; i < len; i++) {\n-            if (funcNode.params[i] === paramNode) {\n-                return true;\n-            }\n-        }\n-        return false;\n+    function isReadRef(ref) {\n+        return ref.isRead();\n     }\n \n-    function populateVariables(node) {\n-        var scope = context.getScope(),\n-            functionName = node && node.id && node.id.name;\n-\n-        scope.variables.forEach(function(variable) {\n-\n-            //filter out global variables that are part of default environment globals\n-            if (variable.eslintExplicitGlobal || variable.identifiers.length > 0) {\n-\n-                //make sure that this variable is not already in the array\n-                if (!lookupVariable(variable)) {\n-\n-                    if (!lookupVariableName(variable.name)) {\n-                        variables[variable.name] = [];\n-                    }\n-                    variables[variable.name].push({\n-                        name: variable.name,\n-                        node: variable.identifiers[0] || node,\n-                        used: (variable.name === functionName),\n-                        ignorable: (config.args === \"none\") && node.params && functionHasParam(node, variable.identifiers[0])\n-                    });\n+    /**\n+     * @param {Scope} scope - an escope Scope object\n+     * @returns {Variable[]} most of the local variables with no read references\n+     */\n+    function unusedLocals(scope) {\n+        var unused = [];\n+        var variables = scope.variables;\n+        if (scope.type !== \"global\") {\n+            for (var i = 0, l = variables.length; i < l; ++i) {\n+                // skip function expression names\n+                if (scope.functionExpressionScope) {\n+                    continue;\n                 }\n-            }\n-        });\n-    }\n-\n-    function populateGlobalVariables(node) {\n-        if (!allowUnusedGlobals) {\n-            populateVariables(node);\n-        }\n-    }\n-\n-    function findVariable(name) {\n-        var scope = context.getScope();\n-        var scopeVariable = [];\n-\n-        function filter(variable) {\n-            return variable.name === name;\n-        }\n-\n-        while (scopeVariable.length === 0) {\n-            scopeVariable = scope.variables.filter(filter);\n-            if (scopeVariable.length === 0) {\n-                if (!scope.upper) {\n-                    return null;\n+                // skip implicit \"arguments\" variable\n+                if (scope.type === \"function\" && variables[i].name === \"arguments\" && variables[i].identifiers.length === 0) {\n+                    continue;\n+                }\n+                var type = variables[i].defs[0].type;\n+                // skip catch variables\n+                if (type === \"CatchClause\") {\n+                    continue;\n+                }\n+                // if \"args\" option is \"none\", skip any parameter\n+                if (config.args === \"none\" && type === \"Parameter\") {\n+                    continue;\n+                }\n+                // if \"args\" option is \"after-used\", skip all but the last parameter\n+                if (config.args === \"after-used\" && type === \"Parameter\" && variables[i].defs[0].index < variables[i].defs[0].node.params.length - 1) {\n+                    continue;\n+                }\n+                if (variables[i].references.filter(isReadRef).length === 0) {\n+                    unused.push(variables[i]);\n                 }\n-                scope = scope.upper;\n             }\n         }\n-\n-        return lookupVariable(scopeVariable[0]);\n+        return [].concat.apply(unused, [].map.call(scope.childScopes, unusedLocals));\n     }\n \n-    /**\n-     * Determines if the given node represents a function.\n-     * @param {ASTNode} node The node to check.\n-     * @returns {boolean} True if the node represents a function, false if not.\n-     * @private\n-     */\n-    function isFunction(node) {\n-        return node && node.type && (node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\");\n-    }\n-\n-    function markIgnorableUnusedVariables(usedVariable) {\n-\n-        /* When variables are declared as parameters in a FunctionExpression or\n-         * FunctionDeclaration, they can go unused so long as at least one\n-         * to the right of them is used.\n-         */\n-\n-        // Find the FunctionExpressions and FunctionDeclarations in which this used variable\n-        // may be a parameter\n-        var parent = usedVariable.node.parent;\n-        if (isFunction(parent)) {\n-\n-            var ignorableVariables;\n-            var fnParamNames;\n-\n-            if (config.args !== \"all\") {\n-                // Get a list of the param names used in the ancestor Function\n-                fnParamNames = parent.params.map(function(param){\n-                    return param.name;\n+    return {\n+        \"Program\": function(programNode) {\n+            var globalScope = context.getScope();\n+            var unused = unusedLocals(globalScope);\n+            var i, l;\n+\n+            // determine unused globals\n+            if (config.vars === \"all\") {\n+                var unresolvedRefs = globalScope.through.filter(isReadRef).map(function(ref) {\n+                    return ref.identifier.name;\n                 });\n-            }\n-\n-            switch (config.args) {\n-\n-                case \"all\":\n-                    break;\n-\n-                case \"none\":\n-                    ignorableVariables = fnParamNames;\n-                    break;\n-\n-                case \"after-used\":\n-                default:\n-\n-                    // Check if the used variable exists among those params\n-                    var variableIndex = fnParamNames.indexOf(usedVariable.name);\n-\n-                    // This will be true if this variable appears in the param list of an ancestor Function Expression\n-                    // or FunctionDeclaration.\n-                    if (variableIndex !== -1) {\n-                        // All params left of the used variables are ignorable.\n-                        ignorableVariables = fnParamNames.slice(0, variableIndex);\n+                for (i = 0, l = globalScope.variables.length; i < l; ++i) {\n+                    if (unresolvedRefs.indexOf(globalScope.variables[i].name) < 0) {\n+                        unused.push(globalScope.variables[i]);\n                     }\n-                    break;\n-            }\n-\n-            if (ignorableVariables) {\n-                // Mark them as ignorable.\n-                ignorableVariables.forEach(function(ignorableVariable){\n-\n-                    lookupVariableName(ignorableVariable).forEach(function(variable){\n-                        variable.ignorable = true;\n-                    });\n-                });\n+                }\n             }\n-        }\n-    }\n \n-    return {\n-        \"FunctionDeclaration\": populateVariables,\n-        \"FunctionExpression\": populateVariables,\n-        \"Program\": populateGlobalVariables,\n-        \"Identifier\": function(node) {\n-            var ancestors = context.getAncestors(node);\n-            var parent = ancestors.pop();\n-            var grandparent = ancestors.pop();\n-\n-            /*\n-             * if it's not an assignment expression find corresponding\n-             * variable in the array and mark it as used\n-             */\n-            if ((parent.type !== \"AssignmentExpression\" || node !== parent.left || grandparent.type !== \"ExpressionStatement\" && parent.operator !== \"=\") &&\n-                (parent.type !== \"VariableDeclarator\" || (parent.init && parent.init === node)) &&\n-                parent.type !== \"FunctionDeclaration\" &&\n-                !(parent.type === \"MemberExpression\" && parent.property === node && !parent.computed) &&\n-                !(parent.type === \"Property\" && parent.kind === \"init\" && parent.key === node) &&\n-                !(parent.type === \"FunctionExpression\" && functionHasParam(parent, node)) &&\n-                (parent.type !== \"FunctionExpression\" ||\n-                    (grandparent !== null &&\n-                    (grandparent.type === \"CallExpression\" || grandparent.type === \"AssignmentExpression\")))) {\n-\n-                var variable = findVariable(node.name);\n-\n-                if (variable) {\n-                    variable.used = true;\n-                    markIgnorableUnusedVariables(variable, ancestors);\n+            for (i = 0, l = unused.length; i < l; ++i) {\n+                if (unused[i].eslintExplicitGlobal) {\n+                    context.report(programNode, MESSAGE, unused[i]);\n+                } else if (unused[i].defs.length > 0) {\n+                    context.report(unused[i].identifiers[0], MESSAGE, unused[i]);\n                 }\n-\n             }\n-        },\n-\n-        \"Program:exit\": function() {\n-            Object.keys(variables)\n-                .forEach(function (name) {\n-                    variables[name].forEach(function (variable) {\n-                        if (variable.used || variable.ignorable) {\n-                            return;\n-                        }\n-                        context.report(variable.node, \"{{var}} is defined but never used\", {\"var\": variable.name});\n-                    });\n-                });\n         }\n     };\n "},{"sha":"395d74445f197103b7a13589fd6577c22c77f881","filename":"tests/lib/rules/no-unused-vars.js","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/eslint/eslint/blob/06ee9ccd2e6931fbda9d83da0ffda2754836edf1/tests%2Flib%2Frules%2Fno-unused-vars.js","raw_url":"https://github.com/eslint/eslint/raw/06ee9ccd2e6931fbda9d83da0ffda2754836edf1/tests%2Flib%2Frules%2Fno-unused-vars.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-unused-vars.js?ref=06ee9ccd2e6931fbda9d83da0ffda2754836edf1","patch":"@@ -17,6 +17,7 @@ var eslint = require(\"../../../lib/eslint\"),\n var eslintTester = new ESLintTester(eslint);\n eslintTester.addRuleTest(\"lib/rules/no-unused-vars\", {\n     valid: [\n+        { code: \"a; var a;\", args: [1, \"all\"] },\n         { code: \"var a=10; alert(a);\", args: [1, \"all\"] },\n         { code: \"var a=10; (function() { alert(a); })();\", args: [1, \"all\"] },\n         { code: \"var a=10; (function() { setTimeout(function() { alert(a); }, 0); })();\", args: [1, \"all\"] },\n@@ -35,6 +36,8 @@ eslintTester.addRuleTest(\"lib/rules/no-unused-vars\", {\n         \"function foo(first, second) {\\ndoStuff(function() {\\nconsole.log(second);});}; foo()\",\n         \"(function() { var doSomething = function doSomething() {}; doSomething() }())\",\n         \"function f() { var a = 1; return function(){ f(a *= 2); }; }\",\n+        \"function f() { var a = 1; return function(){ f(++a); }; }\",\n+        \"try {} catch(e) {}\",\n         \"/*global a */ a;\",\n         { code: \"var a=10; (function() { alert(a); })();\", args: [1, {vars: \"all\"}] },\n         { code: \"function g(bar, baz) { return baz; }; g();\", args: [1, {\"vars\": \"all\"}] },"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/1218","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/1218/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/1218/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/1218/events","html_url":"https://github.com/eslint/eslint/pull/1218","id":41960601,"node_id":"MDExOlB1bGxSZXF1ZXN0MjA3NTc4NjM=","number":1218,"title":"Fix: rewrite no-spaced-func rule (refs #1212)","user":{"login":"michaelficarra","id":218840,"node_id":"MDQ6VXNlcjIxODg0MA==","avatar_url":"https://avatars.githubusercontent.com/u/218840?v=4","gravatar_id":"","url":"https://api.github.com/users/michaelficarra","html_url":"https://github.com/michaelficarra","followers_url":"https://api.github.com/users/michaelficarra/followers","following_url":"https://api.github.com/users/michaelficarra/following{/other_user}","gists_url":"https://api.github.com/users/michaelficarra/gists{/gist_id}","starred_url":"https://api.github.com/users/michaelficarra/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/michaelficarra/subscriptions","organizations_url":"https://api.github.com/users/michaelficarra/orgs","repos_url":"https://api.github.com/users/michaelficarra/repos","events_url":"https://api.github.com/users/michaelficarra/events{/privacy}","received_events_url":"https://api.github.com/users/michaelficarra/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2014-09-04T17:03:48Z","updated_at":"2018-02-07T01:55:36Z","closed_at":"2014-09-04T19:15:19Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/1218","html_url":"https://github.com/eslint/eslint/pull/1218","diff_url":"https://github.com/eslint/eslint/pull/1218.diff","patch_url":"https://github.com/eslint/eslint/pull/1218.patch","merged_at":"2014-09-04T19:15:19Z"},"body":"Before:\n\n```\n$ npm run perf\n\n> eslint@0.7.4 perf /Users/michael/projects/eslint\n> node Makefile.js perf\n\nCPU Speed is 2600 with multiplier 7500000\nPerformance Run #1:  1618.9791850000001ms\nPerformance Run #2:  1584.846229ms\nPerformance Run #3:  1643.8295779999999ms\nPerformance Run #4:  1608.190126ms\nPerformance Run #5:  1620.71616ms\nPerformance budget ok:  1618.9791850000001ms (limit: 2884.6153846153848ms)\n```\n\nAfter:\n\n```\n$ npm run perf\n\n> eslint@0.7.4 perf /Users/michael/projects/eslint\n> node Makefile.js perf\n\nCPU Speed is 2600 with multiplier 7500000\nPerformance Run #1:  1577.5375589999999ms\nPerformance Run #2:  1616.653781ms\nPerformance Run #3:  1515.187082ms\nPerformance Run #4:  1508.76889ms\nPerformance Run #5:  1515.655062ms\nPerformance budget ok:  1515.655062ms (limit: 2884.6153846153848ms)\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/1218/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/1218/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"0db10ea36bd6d7e3f5c0857a5438cfe8f2af9286","filename":"lib/rules/no-spaced-func.js","status":"modified","additions":8,"deletions":27,"changes":35,"blob_url":"https://github.com/eslint/eslint/blob/550dcc9b80b7b846351cdb886e7efe0b80d2f28b/lib%2Frules%2Fno-spaced-func.js","raw_url":"https://github.com/eslint/eslint/raw/550dcc9b80b7b846351cdb886e7efe0b80d2f28b/lib%2Frules%2Fno-spaced-func.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-spaced-func.js?ref=550dcc9b80b7b846351cdb886e7efe0b80d2f28b","patch":"@@ -11,37 +11,18 @@ module.exports = function(context) {\n \n     \"use strict\";\n \n-    function findOpenParen(tokens) {\n-        var i, token, hasArgumentList = false, numOpen = 0;\n-\n-        // start at the end of the token stream; skip over argument list contents\n-        for (i = tokens.length - 1; i >= 0; --i) {\n-            token = tokens[i];\n-            if (token.value === \"(\") {\n-                --numOpen;\n-            } else if (token.value === \")\") {\n-                hasArgumentList = true;\n-                ++numOpen;\n-            }\n-            if (hasArgumentList && numOpen <= 0) {\n-                return i;\n-            }\n-        }\n-    }\n-\n     function detectOpenSpaces(node) {\n-        var tokens = context.getTokens(node),\n-            openParenIndex = findOpenParen(tokens),\n-            openParen = tokens[openParenIndex],\n-            callee = tokens[openParenIndex - 1];\n-\n-        // openParenIndex will be undefined for a NewExpression with no argument list\n-        if (!openParenIndex) {\n+        var lastCalleeToken = context.getLastToken(node.callee);\n+        var tokens = context.getTokens(node);\n+        var i = tokens.indexOf(lastCalleeToken), l = tokens.length;\n+        while (i < l && tokens[i].value !== \"(\") {\n+            ++i;\n+        }\n+        if (i >= l) {\n             return;\n         }\n-\n         // look for a space between the callee and the open paren\n-        if (callee.range[1] !== openParen.range[0]) {\n+        if (tokens[i - 1].range[1] !== tokens[i].range[0]) {\n             context.report(node, \"Unexpected space between function name and paren.\");\n         }\n     }"},{"sha":"9ed4915c947fc10ef50929ca2fba6347083eea9b","filename":"tests/lib/rules/no-spaced-func.js","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/550dcc9b80b7b846351cdb886e7efe0b80d2f28b/tests%2Flib%2Frules%2Fno-spaced-func.js","raw_url":"https://github.com/eslint/eslint/raw/550dcc9b80b7b846351cdb886e7efe0b80d2f28b/tests%2Flib%2Frules%2Fno-spaced-func.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-spaced-func.js?ref=550dcc9b80b7b846351cdb886e7efe0b80d2f28b","patch":"@@ -28,6 +28,7 @@ eslintTester.addRuleTest(\"lib/rules/no-spaced-func\", {\n         \"f( (0) )\",\n         \"( f )( 0 )\",\n         \"( (f) )( (0) )\",\n+        \"( f()() )(0)\",\n         \"(function(){ if (foo) { bar(); } }());\",\n         \"f(0, (1))\"\n     ],"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/1136","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/1136/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/1136/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/1136/events","html_url":"https://github.com/eslint/eslint/pull/1136","id":39353665,"node_id":"MDExOlB1bGxSZXF1ZXN0MTkyNDgxMDI=","number":1136,"title":"Fix: Speed up no-unreachable (fixes #1135)","user":{"login":"btmills","id":1709537,"node_id":"MDQ6VXNlcjE3MDk1Mzc=","avatar_url":"https://avatars.githubusercontent.com/u/1709537?v=4","gravatar_id":"","url":"https://api.github.com/users/btmills","html_url":"https://github.com/btmills","followers_url":"https://api.github.com/users/btmills/followers","following_url":"https://api.github.com/users/btmills/following{/other_user}","gists_url":"https://api.github.com/users/btmills/gists{/gist_id}","starred_url":"https://api.github.com/users/btmills/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/btmills/subscriptions","organizations_url":"https://api.github.com/users/btmills/orgs","repos_url":"https://api.github.com/users/btmills/repos","events_url":"https://api.github.com/users/btmills/events{/privacy}","received_events_url":"https://api.github.com/users/btmills/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2014-08-02T17:48:43Z","updated_at":"2018-02-07T01:58:17Z","closed_at":"2014-08-05T19:52:05Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/1136","html_url":"https://github.com/eslint/eslint/pull/1136","diff_url":"https://github.com/eslint/eslint/pull/1136.diff","patch_url":"https://github.com/eslint/eslint/pull/1136.patch","merged_at":"2014-08-05T19:52:05Z"},"body":"Rather than iterating forward through every statement of a BlockStatement's body or SwitchCase's consequent, this change iterates backwards so that no nodes are checked unnecessarily. Starting at the end checks only hoisted declarations and the return/throw/break/continue itself, immediately reporting any unreachable statements without looping through every other child first.\n\n`npm run perf` on `master`:\n\n```\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  1990.606506ms\nPerformance Run #2:  1994.0910669999998ms\nPerformance Run #3:  1901.250357ms\nPerformance Run #4:  1992.7809849999999ms\nPerformance Run #5:  1918.564006ms\nPerformance budget ok:  1990.606506ms (limit: 3409.090909090909ms)\n```\n\nwith this change:\n\n```\nCPU Speed is 2200 with multiplier 7500000\nPerformance Run #1:  797.273161ms\nPerformance Run #2:  819.342614ms\nPerformance Run #3:  790.95953ms\nPerformance Run #4:  793.833308ms\nPerformance Run #5:  791.022419ms\nPerformance budget ok:  793.833308ms (limit: 3409.090909090909ms)\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/1136/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/1136/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"7eaa3928fe12d42685598c4ac08b80576db4343a","filename":"lib/rules/no-unreachable.js","status":"modified","additions":49,"deletions":33,"changes":82,"blob_url":"https://github.com/eslint/eslint/blob/9734b147673c577b087f2257d8ffdf2c871463bf/lib%2Frules%2Fno-unreachable.js","raw_url":"https://github.com/eslint/eslint/raw/9734b147673c577b087f2257d8ffdf2c871463bf/lib%2Frules%2Fno-unreachable.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-unreachable.js?ref=9734b147673c577b087f2257d8ffdf2c871463bf","patch":"@@ -10,7 +10,24 @@\n \n \n function report(context, node, unreachableType) {\n-    context.report(node, \"Found unexpected statement after a {{type}}.\", { type: unreachableType });\n+    var keyword;\n+    switch (unreachableType) {\n+        case \"BreakStatement\":\n+            keyword = \"break\";\n+            break;\n+        case \"ContinueStatement\":\n+            keyword = \"continue\";\n+            break;\n+        case \"ReturnStatement\":\n+            keyword = \"return\";\n+            break;\n+        case \"ThrowStatement\":\n+            keyword = \"throw\";\n+            break;\n+        default:\n+            return;\n+    }\n+    context.report(node, \"Found unexpected statement after a {{type}}.\", { type: keyword });\n }\n \n \n@@ -20,21 +37,6 @@ function report(context, node, unreachableType) {\n \n module.exports = function(context) {\n \n-    function checkForUnreachable(node) {\n-        switch (node.type) {\n-        case \"ReturnStatement\":\n-            return \"return\";\n-        case \"ThrowStatement\":\n-            return \"throw\";\n-        case \"ContinueStatement\":\n-            return \"continue\";\n-        case \"BreakStatement\":\n-            return \"break\";\n-        default:\n-            return false;\n-        }\n-    }\n-\n     /**\n      * Checks if a node is an exception for no-unreachable because of variable/function hoisting\n      * @param {ASTNode} node The AST node to check.\n@@ -49,31 +51,45 @@ module.exports = function(context) {\n             });\n     }\n \n-    /**\n-     * Loops through a field of a node and checks if its children fulfill conditions to trigger the unreachable report.\n-     * @param {ASTNode} node The AST node to check.\n-     * @param {string} field The field that represents the children of the node.\n+    /*\n+     * Verifies that the given node is the last node or followed exclusively by\n+     * hoisted declarations\n+     * @param {ASTNode} node Node that should be the last node\n      * @returns {void}\n      * @private\n      */\n-    function checkNodeFieldForUnreachable(node, field) {\n-        var i, unreachableType = false;\n-        for (i = 1; i < node[field].length; i++) {\n-            unreachableType = unreachableType || checkForUnreachable(node[field][i - 1]);\n-            if (unreachableType && !isUnreachableAllowed(node[field][i])) {\n-                report(context, node[field][i], unreachableType);\n+    function checkNode(node) {\n+        var parent = context.getAncestors().pop();\n+        var field, i, sibling;\n+\n+        switch (parent.type) {\n+            case \"SwitchCase\":\n+                field = \"consequent\";\n+                break;\n+            case \"BlockStatement\":\n+                field = \"body\";\n+                break;\n+            default:\n+                return;\n+        }\n+\n+        for (i = parent[field].length - 1; i >= 0; i--) {\n+            sibling = parent[field][i];\n+            if (sibling === node) {\n+                return; // Found the last reachable statement, all done\n+            }\n+\n+            if (!isUnreachableAllowed(sibling)) {\n+                report(context, sibling, node.type);\n             }\n         }\n     }\n \n     return {\n-        \"BlockStatement\": function(node) {\n-            checkNodeFieldForUnreachable(node, \"body\");\n-        },\n-\n-        \"SwitchCase\": function(node) {\n-            checkNodeFieldForUnreachable(node, \"consequent\");\n-        }\n+        \"ReturnStatement\": checkNode,\n+        \"ThrowStatement\": checkNode,\n+        \"ContinueStatement\": checkNode,\n+        \"BreakStatement\": checkNode\n     };\n \n };"},{"sha":"ba620818bb2d344866da53aa1f8b4cdeca70a2c3","filename":"tests/lib/rules/no-unreachable.js","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/eslint/eslint/blob/9734b147673c577b087f2257d8ffdf2c871463bf/tests%2Flib%2Frules%2Fno-unreachable.js","raw_url":"https://github.com/eslint/eslint/raw/9734b147673c577b087f2257d8ffdf2c871463bf/tests%2Flib%2Frules%2Fno-unreachable.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-unreachable.js?ref=9734b147673c577b087f2257d8ffdf2c871463bf","patch":"@@ -26,7 +26,11 @@ eslintTester.addRuleTest(\"lib/rules/no-unreachable\", {\n         \"while (true) { break; var x; }\",\n         \"while (true) { continue; var x, y; }\",\n         \"while (true) { throw 'message'; var x; }\",\n-        \"switch (foo) { case 1: break; var x; }\"\n+        \"while (true) { if (true) break; var x = 1; }\",\n+        \"while (true) continue;\",\n+        \"switch (foo) { case 1: break; var x; }\",\n+        \"var x = 1; y = 2; throw 'uh oh'; var y;\",\n+        \"var x = 1; throw 'uh oh'; var y = 2;\"\n     ],\n     invalid: [\n         { code: \"function foo() { return x; var x = 1; }\", errors: [{ message: \"Found unexpected statement after a return.\", type: \"VariableDeclaration\"}] },"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/998","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/998/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/998/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/998/events","html_url":"https://github.com/eslint/eslint/pull/998","id":36125827,"node_id":"MDExOlB1bGxSZXF1ZXN0MTczODA5NzI=","number":998,"title":"New: Added no-trailing-spaces rule (fixes #995)","user":{"login":"puzrin","id":319465,"node_id":"MDQ6VXNlcjMxOTQ2NQ==","avatar_url":"https://avatars.githubusercontent.com/u/319465?v=4","gravatar_id":"","url":"https://api.github.com/users/puzrin","html_url":"https://github.com/puzrin","followers_url":"https://api.github.com/users/puzrin/followers","following_url":"https://api.github.com/users/puzrin/following{/other_user}","gists_url":"https://api.github.com/users/puzrin/gists{/gist_id}","starred_url":"https://api.github.com/users/puzrin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/puzrin/subscriptions","organizations_url":"https://api.github.com/users/puzrin/orgs","repos_url":"https://api.github.com/users/puzrin/repos","events_url":"https://api.github.com/users/puzrin/events{/privacy}","received_events_url":"https://api.github.com/users/puzrin/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2014-06-19T22:49:57Z","updated_at":"2018-02-07T02:02:45Z","closed_at":"2014-06-25T00:38:56Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/998","html_url":"https://github.com/eslint/eslint/pull/998","diff_url":"https://github.com/eslint/eslint/pull/998.diff","patch_url":"https://github.com/eslint/eslint/pull/998.patch","merged_at":"2014-06-25T00:38:56Z"},"body":"`on` perf:\n\n```\nCPU Speed is 2261 with multiplier 7500000\nPerformance Run #1:  2922.464079ms\nPerformance Run #2:  2915.99096ms\nPerformance Run #3:  2871.693ms\nPerformance Run #4:  2842.881841ms\nPerformance Run #5:  2869.45368ms\nPerformance budget ok:  2871.693ms (limit: 3317.1163202122952ms)\n```\n\n`off` perf:\n\n```\nCPU Speed is 2261 with multiplier 7500000\nPerformance Run #1:  2874.2219999999998ms\nPerformance Run #2:  2815.7648ms\nPerformance Run #3:  2869.23876ms\nPerformance Run #4:  2908.95748ms\nPerformance Run #5:  2862.79916ms\nPerformance budget ok:  2869.23876ms (limit: 3317.1163202122952ms)\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/998/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/998/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"8462f396473497b085fd0d6a565d868446a0e5b8","filename":"conf/eslint.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/e080e9240ab29254b99f59df0e00584d49fffe14/conf%2Feslint.json","raw_url":"https://github.com/eslint/eslint/raw/e080e9240ab29254b99f59df0e00584d49fffe14/conf%2Feslint.json","contents_url":"https://api.github.com/repos/eslint/eslint/contents/conf%2Feslint.json?ref=e080e9240ab29254b99f59df0e00584d49fffe14","patch":"@@ -76,6 +76,7 @@\n         \"no-sparse-arrays\": 2,\n         \"no-sync\": 0,\n         \"no-ternary\": 0,\n+        \"no-trailing-spaces\": 0,\n         \"no-undef\": 2,\n         \"no-undef-init\": 2,\n         \"no-underscore-dangle\": 2,"},{"sha":"782f063363cddea64d38e1fd791268b0f0b4ec44","filename":"docs/rules/README.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/e080e9240ab29254b99f59df0e00584d49fffe14/docs%2Frules%2FREADME.md","raw_url":"https://github.com/eslint/eslint/raw/e080e9240ab29254b99f59df0e00584d49fffe14/docs%2Frules%2FREADME.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2FREADME.md?ref=e080e9240ab29254b99f59df0e00584d49fffe14","patch":"@@ -131,6 +131,7 @@ These rules are purely matters of style and are quite subjective.\n * [no-spaced-func](no-spaced-func.md) - disallow space between function identifier and application\n * [no-space-before-semi](no-space-before-semi.md) - disallow space before semicolon\n * [no-ternary](no-ternary.md) - disallow the use of ternary operators (off by default)\n+* [no-trailing-spaces](no-trailing-spaces.md) - disallow trailing whitespace at the end of lines (off by default)\n * [no-underscore-dangle](no-underscore-dangle.md) - disallow dangling underscores in identifiers\n * [no-wrap-func](no-wrap-func.md) - disallow wrapping of none IIFE statements in parents\n * [quotes](quotes.md) - specify whether double or single quotes should be used"},{"sha":"d0aa9d80214495fdc1b5b1e046c45b142de08310","filename":"docs/rules/no-trailing-spaces.md","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/eslint/eslint/blob/e080e9240ab29254b99f59df0e00584d49fffe14/docs%2Frules%2Fno-trailing-spaces.md","raw_url":"https://github.com/eslint/eslint/raw/e080e9240ab29254b99f59df0e00584d49fffe14/docs%2Frules%2Fno-trailing-spaces.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2Fno-trailing-spaces.md?ref=e080e9240ab29254b99f59df0e00584d49fffe14","patch":"@@ -0,0 +1,28 @@\n+# Disallow trailing spaces at the end of lines (no-trailing-spaces)\n+\n+Whitespaces at the end of lines are not a bug, but those can be not convenient.\n+When a developer moves the cursor to the end of the line, they expect to see the\n+cursor at the end of visible text. Also, additional spaces can be inconvenient when\n+you select text with mouse. And finally, it's just a good idea to keep your\n+code clear.\n+\n+## Rule Details\n+\n+The following patterns are considered warnings:\n+\n+```js\n+    // spaces, tabs and unicode whitespaces\n+    // are not allowed at the end of lines\n+    var foo = 0;•\n+••••\n+    var baz = 5;\n+••\n+```\n+\n+The following patterns are not warnings:\n+\n+```js\n+    var foo = 0;\n+\n+    var baz = 5;\n+```"},{"sha":"3facdc0d2083ab63db3838783aa35977af66d232","filename":"lib/rules/no-trailing-spaces.js","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/eslint/eslint/blob/e080e9240ab29254b99f59df0e00584d49fffe14/lib%2Frules%2Fno-trailing-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/e080e9240ab29254b99f59df0e00584d49fffe14/lib%2Frules%2Fno-trailing-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-trailing-spaces.js?ref=e080e9240ab29254b99f59df0e00584d49fffe14","patch":"@@ -0,0 +1,46 @@\n+/**\n+ * @fileoverview Disallow trailing spaces at the end of lines.\n+ * @author Nodeca Team <https://github.com/nodeca>\n+ */\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Rule Definition\n+//------------------------------------------------------------------------------\n+\n+module.exports = function(context) {\n+\n+    var TRAILER = \"[ \\t\\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]+$\";\n+\n+    //--------------------------------------------------------------------------\n+    // Public\n+    //--------------------------------------------------------------------------\n+\n+    return {\n+\n+        \"Program\": function checkTrailingSpaces(node) {\n+\n+            // Let's hack. Since Esprima does not return whitespace nodes,\n+            // fetch the source code and do black magic via regexps.\n+\n+            var src = context.getSource(),\n+                re = new RegExp(TRAILER, \"mg\"),\n+                match, lines, location;\n+\n+            while ((match = re.exec(src)) !== null) {\n+                lines = src.slice(0, re.lastIndex).split(/\\r?\\n/g);\n+\n+                location = {\n+                    line:   lines.length,\n+                    column: lines[lines.length - 1].length - match[0].length + 1\n+                };\n+\n+                // Passing node is a bit dirty, because message data will contain\n+                // big text in `source`. But... who cares :) ?\n+                // One more kludge will not make worse the bloody wizardry of this plugin.\n+                context.report(node, location, \"Trailing spaces not allowed.\");\n+            }\n+        }\n+\n+    };\n+};"},{"sha":"3b9813f5b29f61297afb47e13e576f00402435cb","filename":"tests/lib/rules/no-trailing-spaces.js","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/eslint/eslint/blob/e080e9240ab29254b99f59df0e00584d49fffe14/tests%2Flib%2Frules%2Fno-trailing-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/e080e9240ab29254b99f59df0e00584d49fffe14/tests%2Flib%2Frules%2Fno-trailing-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-trailing-spaces.js?ref=e080e9240ab29254b99f59df0e00584d49fffe14","patch":"@@ -0,0 +1,52 @@\n+/**\n+ * @fileoverview Disallow trailing spaces at the end of lines.\n+ * @author Nodeca Team <https://github.com/nodeca>\n+ */\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var eslint = require(\"../../../lib/eslint\"),\n+    ESLintTester = require(\"eslint-tester\");\n+\n+//------------------------------------------------------------------------------\n+// Tests\n+//------------------------------------------------------------------------------\n+\n+var eslintTester = new ESLintTester(eslint);\n+eslintTester.addRuleTest(\"lib/rules/no-trailing-spaces\", {\n+\n+    valid: [\n+        \"var a = 5;\",\n+        \"var a = 5,\\n    b = 3;\"\n+    ],\n+\n+    invalid: [\n+        {\n+            code: \"var a = 5;      \\n\",\n+            errors: [{\n+                message: \"Trailing spaces not allowed.\",\n+                type: \"Program\"\n+            }]\n+        },\n+        {\n+            code: \"var a = 5; \\n b = 3; \",\n+            errors: [{\n+                message: \"Trailing spaces not allowed.\",\n+                type: \"Program\"\n+            }, {\n+                message: \"Trailing spaces not allowed.\",\n+                type: \"Program\"\n+            }]\n+        },\n+        {\n+            code: \"var a = 5;\\t\\n  b = 3;\",\n+            errors: [{\n+                message: \"Trailing spaces not allowed.\",\n+                type: \"Program\"\n+            }]\n+        }\n+    ]\n+});"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/997","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/997/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/997/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/997/events","html_url":"https://github.com/eslint/eslint/pull/997","id":36115320,"node_id":"MDExOlB1bGxSZXF1ZXN0MTczNzQ1MDQ=","number":997,"title":"New: Added eol-last rule (Fixes #996)","user":{"login":"puzrin","id":319465,"node_id":"MDQ6VXNlcjMxOTQ2NQ==","avatar_url":"https://avatars.githubusercontent.com/u/319465?v=4","gravatar_id":"","url":"https://api.github.com/users/puzrin","html_url":"https://github.com/puzrin","followers_url":"https://api.github.com/users/puzrin/followers","following_url":"https://api.github.com/users/puzrin/following{/other_user}","gists_url":"https://api.github.com/users/puzrin/gists{/gist_id}","starred_url":"https://api.github.com/users/puzrin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/puzrin/subscriptions","organizations_url":"https://api.github.com/users/puzrin/orgs","repos_url":"https://api.github.com/users/puzrin/repos","events_url":"https://api.github.com/users/puzrin/events{/privacy}","received_events_url":"https://api.github.com/users/puzrin/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2014-06-19T20:36:51Z","updated_at":"2018-02-07T02:02:47Z","closed_at":"2014-06-20T15:52:29Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/997","html_url":"https://github.com/eslint/eslint/pull/997","diff_url":"https://github.com/eslint/eslint/pull/997.diff","patch_url":"https://github.com/eslint/eslint/pull/997.patch","merged_at":"2014-06-20T15:52:29Z"},"body":"`on` perf:\n\n```\nCPU Speed is 2261 with multiplier 7500000\nPerformance Run #1:  2853.71584ms\nPerformance Run #2:  2879.87336ms\nPerformance Run #3:  2856.63708ms\nPerformance Run #4:  2879.23096ms\nPerformance Run #5:  2874.884919ms\nPerformance budget ok:  2874.884919ms (limit: 3317.1163202122952ms)\n```\n\n`off` perf:\n\n```\nCPU Speed is 2261 with multiplier 7500000\nPerformance Run #1:  2863.81108ms\nPerformance Run #2:  2892.5836ms\nPerformance Run #3:  2906.70604ms\nPerformance Run #4:  2866.610639ms\nPerformance Run #5:  2897.305481ms\nPerformance budget ok:  2892.5836ms (limit: 3317.1163202122952ms)\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/997/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/997/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"601ce8365daa9e7032bbc9414803f05558959b86","filename":"conf/eslint.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/d1272388a05b9a1109144ec1235f7a5d5dff0be3/conf%2Feslint.json","raw_url":"https://github.com/eslint/eslint/raw/d1272388a05b9a1109144ec1235f7a5d5dff0be3/conf%2Feslint.json","contents_url":"https://api.github.com/repos/eslint/eslint/contents/conf%2Feslint.json?ref=d1272388a05b9a1109144ec1235f7a5d5dff0be3","patch":"@@ -96,6 +96,7 @@\n         \"curly\": [2, \"all\"],\n         \"default-case\": 0,\n         \"dot-notation\": 2,\n+        \"eol-last\": 2,\n         \"eqeqeq\": 2,\n         \"func-names\": 0,\n         \"func-style\": [0, \"declaration\"],"},{"sha":"0c23b2de5a4a261e11fc00c6c980ff038b5fd42d","filename":"docs/rules/README.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/d1272388a05b9a1109144ec1235f7a5d5dff0be3/docs%2Frules%2FREADME.md","raw_url":"https://github.com/eslint/eslint/raw/d1272388a05b9a1109144ec1235f7a5d5dff0be3/docs%2Frules%2FREADME.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2FREADME.md?ref=d1272388a05b9a1109144ec1235f7a5d5dff0be3","patch":"@@ -119,6 +119,7 @@ These rules are purely matters of style and are quite subjective.\n * [brace-style](brace-style.md) - enforce one true brace style (off by default)\n * [camelcase](camelcase.md) - require camel case names\n * [consistent-this](consistent-this.md) - enforces consistent naming when capturing the current execution context (off by default)\n+* [eol-last](eol-last.md) - enforce newline at the end of file, with no multiple empty lines\n * [func-names](func-names.md) - require function expressions to have a name (off by default)\n * [func-style](func-style.md) - enforces use of function declarations or expressions (off by default)\n * [new-cap](new-cap.md) - require a capital letter for constructors"},{"sha":"b2423ecdc5e3f5cef379f57d6683d2dddd0710e0","filename":"docs/rules/eol-last.md","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/eslint/eslint/blob/d1272388a05b9a1109144ec1235f7a5d5dff0be3/docs%2Frules%2Feol-last.md","raw_url":"https://github.com/eslint/eslint/raw/d1272388a05b9a1109144ec1235f7a5d5dff0be3/docs%2Frules%2Feol-last.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2Feol-last.md?ref=d1272388a05b9a1109144ec1235f7a5d5dff0be3","patch":"@@ -0,0 +1,36 @@\n+# Require file to end with single newline (eol-last)\n+\n+Having newline at the end of file is not mandatory requirement, like in other\n+languages, but still a good practice. It protects you from side effects if\n+you ever decide to concatenate files in post-processors. Another practical\n+reason is removing red markers, when you look diffs at github.\n+\n+Also, this rule checks, that there a no tail of multiple empty lines at the end.\n+\n+## Rule Details\n+\n+The following patterns are considered warnings:\n+\n+```js\n+function doSmth() {\n+  ...\n+}\n+```\n+\n+```js\n+function doSmth() {\n+  ...\n+}\n+\n+\n+\n+```\n+\n+The following patterns are not warnings:\n+\n+```js\n+function doSmth() {\n+  ...\n+}\n+\n+```"},{"sha":"a4f7f7537a3786093b31a846e71c2cb3777f4117","filename":"lib/rules/eol-last.js","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/eslint/eslint/blob/d1272388a05b9a1109144ec1235f7a5d5dff0be3/lib%2Frules%2Feol-last.js","raw_url":"https://github.com/eslint/eslint/raw/d1272388a05b9a1109144ec1235f7a5d5dff0be3/lib%2Frules%2Feol-last.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Feol-last.js?ref=d1272388a05b9a1109144ec1235f7a5d5dff0be3","patch":"@@ -0,0 +1,43 @@\n+/**\n+ * @fileoverview Require file to end with single newline.\n+ * @author Nodeca Team <https://github.com/nodeca>\n+ */\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Rule Definition\n+//------------------------------------------------------------------------------\n+\n+module.exports = function(context) {\n+\n+    //--------------------------------------------------------------------------\n+    // Public\n+    //--------------------------------------------------------------------------\n+\n+    return {\n+\n+        \"Program\": function checkBadEOF(node) {\n+\n+            // Get the whole source code, not for node only.\n+            var src = context.getSource();\n+\n+            var lines = src.split(/\\r?\\n/g);\n+\n+            var location = {\n+                line:   lines.length,\n+                column: lines[lines.length - 1].length + 1\n+            };\n+\n+            // Check that file is ended with EOL\n+            if (lines[lines.length - 1] !== \"\") {\n+                context.report(node, location, \"Unexpected end of file - newline needed.\");\n+\n+            } else if (lines[lines.length - 2].trim().length === 0) {\n+                // Check if previous line is empty or contains spaces only\n+                context.report(node, location, \"Multiple empty lines at the end of file.\");\n+            }\n+        }\n+\n+    };\n+\n+};"},{"sha":"8a445414f6fb6af1f49af055d6615d8807972ed9","filename":"lib/rules/handle-callback-err.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/d1272388a05b9a1109144ec1235f7a5d5dff0be3/lib%2Frules%2Fhandle-callback-err.js","raw_url":"https://github.com/eslint/eslint/raw/d1272388a05b9a1109144ec1235f7a5d5dff0be3/lib%2Frules%2Fhandle-callback-err.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fhandle-callback-err.js?ref=d1272388a05b9a1109144ec1235f7a5d5dff0be3","patch":"@@ -86,4 +86,4 @@ module.exports = function(context) {\n         \"FunctionExpression:exit\": endFunction\n     };\n \n-};\n\\ No newline at end of file\n+};"},{"sha":"436b71ec25a2e2d3c47e75e6143f3b201471db01","filename":"lib/rules/no-nested-ternary.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/d1272388a05b9a1109144ec1235f7a5d5dff0be3/lib%2Frules%2Fno-nested-ternary.js","raw_url":"https://github.com/eslint/eslint/raw/d1272388a05b9a1109144ec1235f7a5d5dff0be3/lib%2Frules%2Fno-nested-ternary.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-nested-ternary.js?ref=d1272388a05b9a1109144ec1235f7a5d5dff0be3","patch":"@@ -19,4 +19,4 @@ module.exports = function(context) {\n             }   \n         }\n     };\n-};\n\\ No newline at end of file\n+};"},{"sha":"82c02024767cc859c44b4d25ba2faefc0b3a5eac","filename":"lib/rules/space-after-keywords.js","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/d1272388a05b9a1109144ec1235f7a5d5dff0be3/lib%2Frules%2Fspace-after-keywords.js","raw_url":"https://github.com/eslint/eslint/raw/d1272388a05b9a1109144ec1235f7a5d5dff0be3/lib%2Frules%2Fspace-after-keywords.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fspace-after-keywords.js?ref=d1272388a05b9a1109144ec1235f7a5d5dff0be3","patch":"@@ -61,4 +61,3 @@ module.exports = function(context) {\n         \"WithStatement\": check\n     };\n };\n-"},{"sha":"2c277ab1002fca672e33937cde36e4e45270f752","filename":"tests/lib/rules/eol-last.js","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/eslint/eslint/blob/d1272388a05b9a1109144ec1235f7a5d5dff0be3/tests%2Flib%2Frules%2Feol-last.js","raw_url":"https://github.com/eslint/eslint/raw/d1272388a05b9a1109144ec1235f7a5d5dff0be3/tests%2Flib%2Frules%2Feol-last.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Feol-last.js?ref=d1272388a05b9a1109144ec1235f7a5d5dff0be3","patch":"@@ -0,0 +1,39 @@\n+/**\n+ * @fileoverview Check, that file is ended with newline, and there are no multiple empty lines at the end.\n+ * @author Nodeca Team <https://github.com/nodeca>\n+ */\n+\"use strict\";\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var eslint = require(\"../../../lib/eslint\"),\n+    ESLintTester = require(\"eslint-tester\");\n+\n+//------------------------------------------------------------------------------\n+// Tests\n+//------------------------------------------------------------------------------\n+\n+var eslintTester = new ESLintTester(eslint);\n+eslintTester.addRuleTest(\"lib/rules/eol-last\", {\n+\n+    valid: [\n+        \"var a = 123;\\n\"\n+    ],\n+\n+    invalid: [\n+        {\n+            code: \"var a = 123;\",\n+            errors: [{ message: \"Unexpected end of file - newline needed.\", type: \"Program\" }]\n+        },\n+        {\n+            code: \"var a = 123;\\n\\n\",\n+            errors: [{ message: \"Multiple empty lines at the end of file.\", type: \"Program\" }]\n+        },\n+        {\n+            code: \"var a = 123;\\n   \\n\",\n+            errors: [{ message: \"Multiple empty lines at the end of file.\", type: \"Program\" }]\n+        }\n+    ]\n+});"},{"sha":"4f34acbafd4bf41b2db2f478ad97d689efb60d52","filename":"tests/lib/rules/handle-callback-err.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/d1272388a05b9a1109144ec1235f7a5d5dff0be3/tests%2Flib%2Frules%2Fhandle-callback-err.js","raw_url":"https://github.com/eslint/eslint/raw/d1272388a05b9a1109144ec1235f7a5d5dff0be3/tests%2Flib%2Frules%2Fhandle-callback-err.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fhandle-callback-err.js?ref=d1272388a05b9a1109144ec1235f7a5d5dff0be3","patch":"@@ -52,4 +52,4 @@ eslintTester.addRuleTest(\"lib/rules/handle-callback-err\", {\n \t\t{ code: \"function userHandler(err) {logThisAction(function(err) {if (err) { console.log(err); } })}\", errors: [{ message: \"Expected error to be handled.\"}]},\n \t\t{ code: \"function help() { function userHandler(err) {function tester(err) { err; process.nextTick(function() { err; }); } } }\",  errors: [{ message: \"Expected error to be handled.\"}]}\n \t]\n-});\n\\ No newline at end of file\n+});"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/203","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/203/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/203/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/203/events","html_url":"https://github.com/eslint/eslint/pull/203","id":17612781,"node_id":"MDExOlB1bGxSZXF1ZXN0NzM3NjA2Ng==","number":203,"title":"Rule: No unused variables (Closes #8)","user":{"login":"ilyavolodin","id":1380062,"node_id":"MDQ6VXNlcjEzODAwNjI=","avatar_url":"https://avatars.githubusercontent.com/u/1380062?v=4","gravatar_id":"","url":"https://api.github.com/users/ilyavolodin","html_url":"https://github.com/ilyavolodin","followers_url":"https://api.github.com/users/ilyavolodin/followers","following_url":"https://api.github.com/users/ilyavolodin/following{/other_user}","gists_url":"https://api.github.com/users/ilyavolodin/gists{/gist_id}","starred_url":"https://api.github.com/users/ilyavolodin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilyavolodin/subscriptions","organizations_url":"https://api.github.com/users/ilyavolodin/orgs","repos_url":"https://api.github.com/users/ilyavolodin/repos","events_url":"https://api.github.com/users/ilyavolodin/events{/privacy}","received_events_url":"https://api.github.com/users/ilyavolodin/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2013-08-04T20:44:36Z","updated_at":"2018-02-07T02:38:38Z","closed_at":"2013-08-05T01:25:08Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/203","html_url":"https://github.com/eslint/eslint/pull/203","diff_url":"https://github.com/eslint/eslint/pull/203.diff","patch_url":"https://github.com/eslint/eslint/pull/203.patch","merged_at":"2013-08-05T01:25:08Z"},"body":"Closes #8\nI can't say that I'm happy with this code, it affects performance way too much (increased performance test from 1.9s to 3s for me). But I already re-wrote this code 3 times from the scratch and I'm getting a bit tired looking at it. Maybe somebody else have ideas how to improve on this? I'm also pretty sure that I'm not thinking about all corner cases.\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/203/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/203/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"1db2cb6279c63060542784cc379eb2d3f0b9192f","filename":"conf/eslint.json","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/97bccabac5c8c100a59821bd573e97c98dbca4e9/conf%2Feslint.json","raw_url":"https://github.com/eslint/eslint/raw/97bccabac5c8c100a59821bd573e97c98dbca4e9/conf%2Feslint.json","contents_url":"https://api.github.com/repos/eslint/eslint/contents/conf%2Feslint.json?ref=97bccabac5c8c100a59821bd573e97c98dbca4e9","patch":"@@ -37,6 +37,7 @@\n         \"no-underscore-dangle\": 1,\n         \"no-loop-func\": 1,\n         \"no-empty-label\": 1,\n+        \"no-unused-vars\": 1,\n \n         \"smarter-eqeqeq\": 0,\n         \"brace-style\": 0,"},{"sha":"8ef10c509eab4987083bd962592b431d25cbd8b0","filename":"docs/rules/README.md","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/97bccabac5c8c100a59821bd573e97c98dbca4e9/docs%2Frules%2FREADME.md","raw_url":"https://github.com/eslint/eslint/raw/97bccabac5c8c100a59821bd573e97c98dbca4e9/docs%2Frules%2FREADME.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2FREADME.md?ref=97bccabac5c8c100a59821bd573e97c98dbca4e9","patch":"@@ -42,6 +42,7 @@ These are rules designed to prevent you from making mistakes. They either prescr\n * [no-loop-func](no-loop-func.md) - disallow creation of functions within loops\n * [no-empty-label](no-empty-label.md) - disallow use of labels for anything other then loops and switches\n * [unnecessary-strict](unnecessary-strict.md) - disallow unnecessary use of `\"use strict\";` when already in strict mode\n+* [no-unused-vars](no-unused-vars.md) - disallow declaration of variables that are not used in the code\n \n ## Stylistic Issues\n "},{"sha":"faebbafbb9d1fba30c36538b002d5a4459dce2dc","filename":"docs/rules/no-unused-vars.md","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/eslint/eslint/blob/97bccabac5c8c100a59821bd573e97c98dbca4e9/docs%2Frules%2Fno-unused-vars.md","raw_url":"https://github.com/eslint/eslint/raw/97bccabac5c8c100a59821bd573e97c98dbca4e9/docs%2Frules%2Fno-unused-vars.md","contents_url":"https://api.github.com/repos/eslint/eslint/contents/docs%2Frules%2Fno-unused-vars.md?ref=97bccabac5c8c100a59821bd573e97c98dbca4e9","patch":"@@ -0,0 +1,24 @@\n+# No unused variables\n+\n+Variables that are only declared and not used anywhere in the code are unnecessary complicating code base.\n+\n+\n+## Rule Details\n+\n+This error occurs when a variable is declared but never used\n+\n+The following patterns are considered warnings:\n+\n+```js\n+var x = 10;\n+```\n+```js\n+var x = 10; x = 5;\n+```\n+\n+The following patterns are not considered warnings:\n+\n+```js\n+var x = 10;\n+alert(x);\n+};"},{"sha":"62282e9ea592d3b956946c53fbba590a6869044f","filename":"lib/rules/no-unused-vars.js","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/eslint/eslint/blob/97bccabac5c8c100a59821bd573e97c98dbca4e9/lib%2Frules%2Fno-unused-vars.js","raw_url":"https://github.com/eslint/eslint/raw/97bccabac5c8c100a59821bd573e97c98dbca4e9/lib%2Frules%2Fno-unused-vars.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-unused-vars.js?ref=97bccabac5c8c100a59821bd573e97c98dbca4e9","patch":"@@ -0,0 +1,78 @@\n+/**\n+ * @fileoverview Rule to flag declared but unused variables\n+ * @author Ilya Volodin\n+ */\n+\n+//------------------------------------------------------------------------------\n+// Rule Definition\n+//------------------------------------------------------------------------------\n+\n+module.exports = function(context) {\n+\n+    \"use strict\";\n+\n+    var variables = [];\n+\n+    var populateVariables = function() {\n+        var scope = context.getScope();\n+        scope.variables.forEach(function(variable) {\n+            //filter out global variables that we add as part of eslint or arguments variable\n+            if (variable.identifiers.length > 0) {\n+                //make sure that this variable is not already in the array\n+                if (!variables.some(function(storedVariable) {\n+                    return storedVariable.name === variable.name && storedVariable.node === variable.identifiers[0];\n+                })) {\n+                    variables.push({name: variable.name, node: variable.identifiers[0]});\n+                }\n+            }\n+        });\n+    };\n+\n+    var findVariable = function(name) {\n+        var scope = context.getScope();\n+        var scopeVariable = [];\n+        var filter = function(variable) {\n+            return variable.name === name;\n+        };\n+        while (scopeVariable.length === 0) {\n+            scopeVariable = scope.variables.filter(filter);\n+            if (scopeVariable.length === 0) {\n+                if (!scope.upper) {\n+                    return null;\n+                }\n+                scope = scope.upper;\n+            }\n+        }\n+        return variables.filter(function(variable) {\n+            return variable.name === scopeVariable[0].name && variable.node === scopeVariable[0].identifiers[0];\n+        })[0];\n+    };\n+\n+    return {\n+        \"FunctionDeclaration\": populateVariables,\n+        \"FunctionExpression\": populateVariables,\n+        \"Program\": populateVariables,\n+        \"Identifier\": function(node) {\n+            var ancestors = context.getAncestors(node);\n+            var parent = ancestors.pop();\n+            /*if it's not an assignment expression find corresponding\n+              *variable in the array and mark it as used\n+              */\n+            if ((parent.type !== \"AssignmentExpression\" || node !== parent.left) && parent.type !== \"VariableDeclarator\") {\n+                var variable = findVariable(node.name);\n+                if (variable) {\n+                    variable.used = true;\n+                }\n+            }\n+        },\n+        \"Program:after\": function(node) {\n+            var unused = variables.filter(function(variable) {\n+                return !variable.used;\n+            });\n+            unused.forEach(function(variable) {\n+                context.report(node, \"{{var}} is defined but never used\", {\"var\": variable.name});\n+            });\n+        }\n+    };\n+\n+};"},{"sha":"d784f57e947fe454d70902f5a4eb8345baef42fc","filename":"tests/fixtures/passing.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/97bccabac5c8c100a59821bd573e97c98dbca4e9/tests%2Ffixtures%2Fpassing.js","raw_url":"https://github.com/eslint/eslint/raw/97bccabac5c8c100a59821bd573e97c98dbca4e9/tests%2Ffixtures%2Fpassing.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Ffixtures%2Fpassing.js?ref=97bccabac5c8c100a59821bd573e97c98dbca4e9","patch":"@@ -1 +1 @@\n-var foo = \"bar\";\n+var foo = \"bar\"; if (foo) { foo = \"bar2\"; }"},{"sha":"f0841880144e4ff0c817ac0cda15c5eb26ad08ef","filename":"tests/lib/rules/no-unused-vars.js","status":"added","additions":182,"deletions":0,"changes":182,"blob_url":"https://github.com/eslint/eslint/blob/97bccabac5c8c100a59821bd573e97c98dbca4e9/tests%2Flib%2Frules%2Fno-unused-vars.js","raw_url":"https://github.com/eslint/eslint/raw/97bccabac5c8c100a59821bd573e97c98dbca4e9/tests%2Flib%2Frules%2Fno-unused-vars.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Frules%2Fno-unused-vars.js?ref=97bccabac5c8c100a59821bd573e97c98dbca4e9","patch":"@@ -0,0 +1,182 @@\n+/**\n+ * @fileoverview Tests for no-unused-vars rule.\n+ * @author Ilya Volodin\n+ */\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var vows = require(\"vows\"),\n+    assert = require(\"assert\"),\n+    eslint = require(\"../../../lib/eslint\");\n+\n+//------------------------------------------------------------------------------\n+// Constants\n+//------------------------------------------------------------------------------\n+\n+var RULE_ID = \"no-unused-vars\";\n+\n+//------------------------------------------------------------------------------\n+// Tests\n+//------------------------------------------------------------------------------\n+\n+vows.describe(RULE_ID).addBatch({\n+    \"when evaluating 'var a=10;'\": {\n+\n+        topic: \"var a=10;\",\n+\n+        \"should report a violation\": function(topic) {\n+\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+\n+            var messages = eslint.verify(topic, config);\n+\n+            assert.equal(messages.length, 1);\n+            assert.equal(messages[0].ruleId, RULE_ID);\n+            assert.equal(messages[0].message, \"a is defined but never used\");\n+            assert.include(messages[0].node.type, \"Program\");\n+        }\n+    },\n+\n+    \"when evaluating a string 'var a=10; a=20;'\": {\n+\n+        topic: \"var a=10; a=20;\",\n+\n+        \"should report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+\n+            assert.equal(messages.length, 1);\n+            assert.equal(messages[0].ruleId, RULE_ID);\n+            assert.equal(messages[0].message, \"a is defined but never used\");\n+            assert.include(messages[0].node.type, \"Program\");\n+        }\n+    },\n+\n+    \"when evaluating a string 'var a=10; alert(a);'\": {\n+\n+        topic: \"var a=10; alert(a);\",\n+\n+        \"should not report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+            assert.equal(messages.length, 0);\n+        }\n+    },\n+\n+    \"when evaluating a string 'var a=10; (function() { alert(a); })()'\": {\n+\n+        topic: \"var a=10; (function() { alert(a); })();\",\n+\n+        \"should not report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+            assert.equal(messages.length, 0);\n+        }\n+    },\n+\n+    \"when evaluating a string 'var a=10; (function() { setTimeout(function() { alert(a); }, 0); })()'\": {\n+\n+        topic: \"var a=10; (function() { setTimeout(function() { alert(a); }, 0); })();\",\n+\n+        \"should not report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+            assert.equal(messages.length, 0);\n+        }\n+    },\n+\n+    \"when evaluating a string 'var a=10; (function() { var a = 1; alert(a); })()'\": {\n+\n+        topic: \"var a=10; (function() { var a = 1; alert(a); })();\",\n+\n+        \"should report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+\n+            assert.equal(messages.length, 1);\n+            assert.equal(messages[0].ruleId, RULE_ID);\n+            assert.equal(messages[0].message, \"a is defined but never used\");\n+            assert.include(messages[0].node.type, \"Program\");\n+        }\n+    },\n+\n+    \"when evaluating a string 'var a=10, b=0, c=null; alert(a+b)\": {\n+\n+        topic: \"var a=10, b=0, c=null; alert(a+b)\",\n+\n+        \"should report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+\n+            assert.equal(messages.length, 1);\n+            assert.equal(messages[0].ruleId, RULE_ID);\n+            assert.equal(messages[0].message, \"c is defined but never used\");\n+            assert.include(messages[0].node.type, \"Program\");\n+        }\n+    },\n+\n+    \"when evaluating a string 'var a=10, b=0, c=null; setTimeout(function() { var b=2; alert(a+b+c); }, 0);\": {\n+\n+        topic: \"var a=10, b=0, c=null; setTimeout(function() { var b=2; alert(a+b+c); }, 0);\",\n+\n+        \"should report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+\n+            assert.equal(messages.length, 1);\n+            assert.equal(messages[0].ruleId, RULE_ID);\n+            assert.equal(messages[0].message, \"b is defined but never used\");\n+            assert.include(messages[0].node.type, \"Program\");\n+        }\n+    },\n+\n+    \"when evaluating a string 'var a=10, b=0, c=null; setTimeout(function() { var b=2; var c=2; alert(a+b+c); }, 0);\": {\n+\n+        topic: \"var a=10, b=0, c=null; setTimeout(function() { var b=2; var c=2; alert(a+b+c); }, 0);\",\n+\n+        \"should report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+\n+            assert.equal(messages.length, 2);\n+            assert.equal(messages[0].ruleId, RULE_ID);\n+            assert.equal(messages[0].message, \"b is defined but never used\");\n+            assert.include(messages[0].node.type, \"Program\");\n+        }\n+    },\n+\n+    \"when evaluating a string 'var a=10; d[a] = 0;\": {\n+\n+        topic: \"var a=10; d[a] = 0;\",\n+\n+        \"should note report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+            assert.equal(messages.length, 0);\n+        }\n+    },\n+\n+    \"when evaluating a string '(function() { var a=10; return a; })();\": {\n+\n+        topic: \"(function() { var a=10; return a; })();\",\n+\n+        \"should note report a violation\": function(topic) {\n+            var config = { rules: {} };\n+            config.rules[RULE_ID] = 1;\n+            var messages = eslint.verify(topic, config);\n+            assert.equal(messages.length, 0);\n+        }\n+    },\n+}).export(module);"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/1081","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/1081/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/1081/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/1081/events","html_url":"https://github.com/eslint/eslint/pull/1081","id":37722466,"node_id":"MDExOlB1bGxSZXF1ZXN0MTgzMTUyNDE=","number":1081,"title":"Fix: skip dot files and ignored dirs on traverse (fixes #1077, related to #814)","user":{"login":"puzrin","id":319465,"node_id":"MDQ6VXNlcjMxOTQ2NQ==","avatar_url":"https://avatars.githubusercontent.com/u/319465?v=4","gravatar_id":"","url":"https://api.github.com/users/puzrin","html_url":"https://github.com/puzrin","followers_url":"https://api.github.com/users/puzrin/followers","following_url":"https://api.github.com/users/puzrin/following{/other_user}","gists_url":"https://api.github.com/users/puzrin/gists{/gist_id}","starred_url":"https://api.github.com/users/puzrin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/puzrin/subscriptions","organizations_url":"https://api.github.com/users/puzrin/orgs","repos_url":"https://api.github.com/users/puzrin/repos","events_url":"https://api.github.com/users/puzrin/events{/privacy}","received_events_url":"https://api.github.com/users/puzrin/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2014-07-12T15:53:08Z","updated_at":"2018-02-07T02:00:05Z","closed_at":"2014-07-13T00:06:20Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/1081","html_url":"https://github.com/eslint/eslint/pull/1081","diff_url":"https://github.com/eslint/eslint/pull/1081.diff","patch_url":"https://github.com/eslint/eslint/pull/1081.patch","merged_at":"2014-07-13T00:06:20Z"},"body":"This commit solves several problems.\n1. dot files/dirs are ignored now on traverse, as discussed in #1077\n2. Duplicated minimatch use removed. Now always use `ignoredPath.contains()`\n3. If directory is in ingnored list, nested traverse is not performed. Related to #814, make sense for big projects and projects with many dependencies in `./node_modules`.\n\nAlso added basic traverse tests.\n\nPerformance bonus (run on nodeca project with all modules / subprojects installed):\n\n**before**\n\n```\n$ time make lint\n\nreal    0m1.859s\nuser    0m1.620s\nsys 0m0.236s\n```\n\n**after**\n\n```\n$ time make lint\n\nreal    0m0.823s\nuser    0m0.432s\nsys 0m0.044s\n```\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/1081/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/1081/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"c4c482349494337e367d4022b321f2c0eeef2bf3","filename":"lib/cli-engine.js","status":"modified","additions":24,"deletions":22,"changes":46,"blob_url":"https://github.com/eslint/eslint/blob/5e601fb03dfada2189e37bccd231e2cd8c654198/lib%2Fcli-engine.js","raw_url":"https://github.com/eslint/eslint/raw/5e601fb03dfada2189e37bccd231e2cd8c654198/lib%2Fcli-engine.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Fcli-engine.js?ref=5e601fb03dfada2189e37bccd231e2cd8c654198","patch":"@@ -155,40 +155,42 @@ CLIEngine.prototype = {\n     executeOnFiles: function(files) {\n \n         var results = [],\n+            processed = [],\n             configHelper = new Config(this.options),\n-            ignoredPaths = IgnoredPaths.load(this.options);\n+            ignoredPaths = IgnoredPaths.load(this.options),\n+            exclude = ignoredPaths.contains.bind(ignoredPaths);\n \n         traverse({\n-            files: files\n+            files: files,\n+            exclude: this.options.ignore ? exclude : false\n         }, function(filename) {\n \n             debug(\"Processing \" + filename);\n \n             if (path.extname(filename) === \".js\") {\n-\n-                var shouldIgnore = this.options.ignore ? ignoredPaths.contains(filename) : false;\n-\n-                if (!shouldIgnore) {\n-                    results.push(processFile(filename, configHelper));\n-                } else if (files.indexOf(filename) > -1) {\n-\n-                    debug(\"Ignoring \" + filename);\n-\n-                    // only warn for files explicitly passes on the command line\n-                    results.push({\n-                        filePath: filename,\n-                        messages: [\n-                            {\n-                                fatal: false,\n-                                message: \"File ignored because of your .eslintignore file. Use --no-ignore to override.\"\n-                            }\n-                        ]\n-                    });\n-                }\n+                processed.push(filename);\n+                results.push(processFile(filename, configHelper));\n             }\n \n         }.bind(this));\n \n+        // only warn for files explicitly passes on the command line\n+        if (this.options.ignore) {\n+            files.forEach(function(file) {\n+                if (path.extname(file) === \".js\" && processed.indexOf(file) === -1) {\n+                     results.push({\n+                         filePath: file,\n+                         messages: [\n+                             {\n+                                 fatal: false,\n+                                 message: \"File ignored because of your .eslintignore file. Use --no-ignore to override.\"\n+                             }\n+                         ]\n+                     });\n+                }\n+            });\n+        }\n+\n         return {\n             results: results\n         };"},{"sha":"cd25bb47e3763d47f86f818e57c09020de881058","filename":"lib/util/traverse.js","status":"modified","additions":27,"deletions":22,"changes":49,"blob_url":"https://github.com/eslint/eslint/blob/5e601fb03dfada2189e37bccd231e2cd8c654198/lib%2Futil%2Ftraverse.js","raw_url":"https://github.com/eslint/eslint/raw/5e601fb03dfada2189e37bccd231e2cd8c654198/lib%2Futil%2Ftraverse.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Futil%2Ftraverse.js?ref=5e601fb03dfada2189e37bccd231e2cd8c654198","patch":"@@ -11,55 +11,51 @@\n \n var fs = require(\"fs\"),\n     path = require(\"path\"),\n-    minimatch = require(\"minimatch\");\n+    debug = require(\"debug\");\n \n //------------------------------------------------------------------------------\n // Helpers\n //------------------------------------------------------------------------------\n \n-/**\n- * Determines if a file or directory should be excluded from traversal.\n- * @param {string} name The path name to check.\n- * @param {string[]} exclude The paths to exclude.\n- * @returns {boolean} True if the file should be excluded, false if not.\n- * @private\n- */\n-function isExcluded(name, exclude) {\n-    return exclude.some(function(exclusion) {\n-        return minimatch(name, exclusion);\n-    });\n-}\n+debug = debug(\"eslint:traverse\");\n \n /**\n  * Walks a path recursively calling the callback on each file.\n  * @param {string} name The file or directory path.\n- * @param {string[]} exclude Array of glob patterns to exclude.\n+ * @param {Function} exclude The function to check if file/path should be excluded.\n  * @param {Function} callback The function to call on each file.\n  * @returns {void}\n  * @private\n  */\n function walk(name, exclude, callback){\n \n-    var stat;\n+    var stat, basename;\n \n     try {\n         stat = fs.statSync(name);\n     } catch (ex){\n         /* istanbul ignore next too hard to make fs.stat fail */\n-        return [];\n+        return;\n     }\n \n     function traverse(dir, stack){\n         stack.push(dir);\n \n+        fs.readdirSync(path.join.apply(path, stack)).forEach(function(file){\n+            var filePath, stat;\n \n+            // skip all hidded things (dirs, files, links)\n+            if (file[0] === \".\") {\n+                return;\n+            }\n \n-        fs.readdirSync(path.join.apply(path, stack)).forEach(function(file){\n-            var filePath = path.join.apply(path, stack.concat([file])),\n-                stat = fs.statSync(filePath);\n+            filePath = path.join.apply(path, stack.concat([file]));\n+            stat = fs.statSync(filePath);\n \n             //if this file or directory is excluded from linting, skip over it.\n-            if (isExcluded(filePath, exclude)) {\n+            if (exclude && exclude(filePath)) {\n+                //console.log(\"Ignoring \" + filePath);\n+                debug(\"Ignoring \" + filePath);\n                 return;\n             }\n \n@@ -72,12 +68,21 @@ function walk(name, exclude, callback){\n         stack.pop();\n     }\n \n+    basename = path.basename(name);\n+\n+    // don't ignore cases like 'eslint ./'\n+    if ((basename !== \".\" && basename !== \"..\" && basename[0] === \".\") ||\n+        (exclude && exclude(name))) {\n+\n+        debug(\"Ignoring \" + name);\n+        return;\n+    }\n+\n     if (stat.isFile()) {\n         callback(name);\n     } else {\n         traverse(name, []);\n     }\n-\n }\n \n /**\n@@ -91,7 +96,7 @@ function walk(name, exclude, callback){\n module.exports = function traverse(options, callback) {\n \n     var files = options.files,\n-        exclude = options.exclude || [];\n+        exclude = options.exclude;\n \n     files.forEach(function(file) {\n         walk(file, exclude, callback);"},{"sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","filename":"tests/fixtures/traverse/.hidden_dir/dummy.js","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/eslint/eslint/blob/5e601fb03dfada2189e37bccd231e2cd8c654198/tests%2Ffixtures%2Ftraverse%2F.hidden_dir%2Fdummy.js","raw_url":"https://github.com/eslint/eslint/raw/5e601fb03dfada2189e37bccd231e2cd8c654198/tests%2Ffixtures%2Ftraverse%2F.hidden_dir%2Fdummy.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Ffixtures%2Ftraverse%2F.hidden_dir%2Fdummy.js?ref=5e601fb03dfada2189e37bccd231e2cd8c654198"},{"sha":"e69de29bb2d1d6434b8b29ae775ad8c2e48c5391","filename":"tests/fixtures/traverse/.hidden_file.js","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/eslint/eslint/blob/5e601fb03dfada2189e37bccd231e2cd8c654198/tests%2Ffixtures%2Ftraverse%2F.hidden_file.js","raw_url":"https://github.com/eslint/eslint/raw/5e601fb03dfada2189e37bccd231e2cd8c654198/tests%2Ffixtures%2Ftraverse%2F.hidden_file.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Ffixtures%2Ftraverse%2F.hidden_file.js?ref=5e601fb03dfada2189e37bccd231e2cd8c654198"},{"sha":"50948c7c9da9e5abcb8963c7a0b4d9e20320bfc1","filename":"tests/fixtures/traverse/found.js","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/eslint/eslint/blob/5e601fb03dfada2189e37bccd231e2cd8c654198/tests%2Ffixtures%2Ftraverse%2Ffound.js","raw_url":"https://github.com/eslint/eslint/raw/5e601fb03dfada2189e37bccd231e2cd8c654198/tests%2Ffixtures%2Ftraverse%2Ffound.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Ffixtures%2Ftraverse%2Ffound.js?ref=5e601fb03dfada2189e37bccd231e2cd8c654198","patch":"@@ -0,0 +1 @@\n+'test.js'\n\\ No newline at end of file"},{"sha":"d72b5a62d26127338e5960d914d37f63f11e99be","filename":"tests/lib/traverse.js","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/eslint/eslint/blob/5e601fb03dfada2189e37bccd231e2cd8c654198/tests%2Flib%2Ftraverse.js","raw_url":"https://github.com/eslint/eslint/raw/5e601fb03dfada2189e37bccd231e2cd8c654198/tests%2Flib%2Ftraverse.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Ftraverse.js?ref=5e601fb03dfada2189e37bccd231e2cd8c654198","patch":"@@ -0,0 +1,60 @@\n+/**\n+ * @fileoverview Tests for traverse.\n+ */\n+\n+//------------------------------------------------------------------------------\n+// Requirements\n+//------------------------------------------------------------------------------\n+\n+var assert = require(\"chai\").assert,\n+    path = require(\"path\"),\n+    traverse = require(\"../../lib/util/traverse\");\n+\n+\n+//------------------------------------------------------------------------------\n+// Tests\n+//------------------------------------------------------------------------------\n+\n+describe(\"traverse\", function() {\n+\n+    it(\"should ignore dot files and dirs\", function() {\n+        traverse(\n+            { files: [ path.resolve(__dirname, \"..\", \"fixtures\", \"traverse\") ] },\n+            function(file) {\n+                assert.notEqual(file.indexOf(\".\"), -1);\n+            }\n+        );\n+    });\n+\n+    it(\"should ignore files by exclude option\", function() {\n+        var files = [];\n+\n+        traverse(\n+            {\n+                files: [ path.resolve(__dirname, \"..\", \"fixtures\", \"traverse\") ],\n+                exclude: function() {\n+                    return true;\n+                }\n+            },\n+            function(file) {\n+                files.push(file);\n+            }\n+        );\n+\n+        assert.equal(files.length, 0);\n+    });\n+\n+    it(\"should find normal files\", function() {\n+        var files = [];\n+\n+        traverse(\n+            { files: [ path.resolve(__dirname, \"..\", \"fixtures\", \"traverse\") ] },\n+            function(file) {\n+                files.push(file);\n+            }\n+        );\n+\n+        assert.notEqual(files.length, 0);\n+    });\n+\n+});"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/738","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/738/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/738/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/738/events","html_url":"https://github.com/eslint/eslint/pull/738","id":30468906,"node_id":"MDExOlB1bGxSZXF1ZXN0MTQxNTMyMDU=","number":738,"title":"fixes #735: add getTokensBefore, getTokensAfter, getTokensFirst, and getTokensLast interfaces","user":{"login":"michaelficarra","id":218840,"node_id":"MDQ6VXNlcjIxODg0MA==","avatar_url":"https://avatars.githubusercontent.com/u/218840?v=4","gravatar_id":"","url":"https://api.github.com/users/michaelficarra","html_url":"https://github.com/michaelficarra","followers_url":"https://api.github.com/users/michaelficarra/followers","following_url":"https://api.github.com/users/michaelficarra/following{/other_user}","gists_url":"https://api.github.com/users/michaelficarra/gists{/gist_id}","starred_url":"https://api.github.com/users/michaelficarra/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/michaelficarra/subscriptions","organizations_url":"https://api.github.com/users/michaelficarra/orgs","repos_url":"https://api.github.com/users/michaelficarra/repos","events_url":"https://api.github.com/users/michaelficarra/events{/privacy}","received_events_url":"https://api.github.com/users/michaelficarra/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":12,"created_at":"2014-03-30T16:44:53Z","updated_at":"2018-02-07T02:20:51Z","closed_at":"2014-04-01T16:05:41Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/738","html_url":"https://github.com/eslint/eslint/pull/738","diff_url":"https://github.com/eslint/eslint/pull/738.diff","patch_url":"https://github.com/eslint/eslint/pull/738.patch","merged_at":"2014-04-01T16:05:41Z"},"body":"Fixes #735. Once this is merged, I'll be able to change the rules to make use of these interfaces and see the performance gain. Rules that make use of `getTokens`:\n- `brace-style`\n- `new-parens`\n- `no-comma-dangle`\n- `no-cond-assign`\n- `no-div-regex`\n- `no-empty-class`\n- `no-extra-parens`\n- `no-regex-spaces`\n- `no-spaced-func`\n- `no-wrap-func`\n- `semi`\n- `space-in-brackets`\n- `space-infix-ops`\n- `space-return-throw-case`\n- `space-unary-word-ops`\n- `wrap-iife`\n- `wrap-regex`\n\nDoes anyone know how I can make eslint-tester use the eslint repo it's contained within instead of the latest from npm? I know @nzakas was running into this same problem before.\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/738/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/738/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"ced2017f78143cc34c4b0227dd755dfe41f5ea4e","filename":"lib/eslint.js","status":"modified","additions":146,"deletions":14,"changes":160,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Feslint.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -531,23 +531,91 @@ module.exports = (function() {\n     };\n \n     /**\n-     * Gets all tokens that are related to the given node.\n-     * @param {ASTNode=} node The AST node to get the text for.\n-     * @param {int=} beforeCount The number of tokens before the node to retrieve.\n-     * @param {int=} afterCount The number of tokens after the node to retrieve.\n-     * @returns {Object[]} Array of objects representing tokens.\n+     * Gets a number of tokens that precede a given node's tokens in the token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [beforeCount=0] The number of tokens before the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n      */\n-    api.getTokens = function(node, beforeCount, afterCount) {\n-        var beforeTokens = [], tokens = [], afterTokens = [], cursor;\n-        cursor = node.range[0] - 1;\n+    api.getTokensBefore = function(node, beforeCount) {\n+        var beforeTokens = [], cursor = node.range[0] - 1;\n         while (beforeCount > 0 && cursor >= 0) {\n             if(currentTokens[cursor]) {\n                 beforeTokens.unshift(currentTokens[cursor]);\n                 --beforeCount;\n             }\n             --cursor;\n         }\n-        cursor = node.range[0];\n+        return beforeTokens;\n+    };\n+\n+    /**\n+     * Gets the token that precedes a given node's tokens in the token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [skip=0] A number of tokens to skip before the given node.\n+     * @returns {Token} An object representing the token.\n+     */\n+    api.getTokenBefore = function(node, skip) {\n+        for (var cursor = node.range[0] - 1; cursor >= 0; --cursor) {\n+            if (currentTokens[cursor]) {\n+                if (skip > 0) {\n+                    --skip;\n+                } else {\n+                    return currentTokens[cursor];\n+                }\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Gets a number of tokens that precede a given node's tokens in the token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [afterCount=0] The number of tokens after the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n+     */\n+    api.getTokensAfter = function(node, afterCount) {\n+        var afterTokens = [], cursor = node.range[1];\n+        while (afterCount > 0 && cursor < currentTokens.length) {\n+            if(currentTokens[cursor]) {\n+                afterTokens.push(currentTokens[cursor]);\n+                --afterCount;\n+                cursor = currentTokens[cursor].range[1];\n+            } else {\n+                ++cursor;\n+            }\n+        }\n+        return afterTokens;\n+    };\n+\n+    /**\n+     * Gets the token that follows a given node's tokens in the token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [skip=0] A number of tokens to skip after the given node.\n+     * @returns {Token} An object representing the token.\n+     */\n+    api.getTokenAfter = function(node, skip) {\n+        for (var cursor = node.range[1]; cursor < currentTokens.length; ++cursor) {\n+            if (currentTokens[cursor]) {\n+                if (skip > 0) {\n+                    --skip;\n+                } else {\n+                    return currentTokens[cursor];\n+                }\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Gets all tokens that are related to the given node.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [beforeCount=0] The number of tokens before the node to retrieve.\n+     * @param {int} [afterCount=0] The number of tokens after the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n+     */\n+    api.getTokens = function(node, beforeCount, afterCount) {\n+        var beforeTokens = api.getTokensBefore(node, beforeCount),\n+            afterTokens = api.getTokensAfter(node, afterCount),\n+            tokens = [],\n+            cursor = node.range[0];\n         while (cursor < node.range[1]) {\n             if(currentTokens[cursor]) {\n                 tokens.push(currentTokens[cursor]);\n@@ -556,17 +624,81 @@ module.exports = (function() {\n                 ++cursor;\n             }\n         }\n-        cursor = node.range[1];\n-        while (afterCount > 0 && cursor < currentTokens.length) {\n+        return beforeTokens.concat(tokens, afterTokens);\n+    };\n+\n+    /**\n+     * Gets the first `count` tokens of the given node's token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [count=0] The number of tokens of the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n+     */\n+    api.getFirstTokens = function(node, count) {\n+        var tokens = [], cursor = node.range[0];\n+        while (count > 0 && cursor < node.range[1]) {\n             if(currentTokens[cursor]) {\n-                afterTokens.push(currentTokens[cursor]);\n-                --afterCount;\n+                tokens.push(currentTokens[cursor]);\n+                --count;\n                 cursor = currentTokens[cursor].range[1];\n             } else {\n                 ++cursor;\n             }\n         }\n-        return beforeTokens.concat(tokens, afterTokens);\n+        return tokens;\n+    };\n+\n+    /**\n+     * Gets the first token of the given node's token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [skip=0] A number of tokens to skip.\n+     * @returns {Token} An object representing the token.\n+     */\n+    api.getFirstToken = function(node, skip) {\n+        for (var cursor = node.range[0]; cursor < node.range[1]; ++cursor) {\n+            if (currentTokens[cursor]) {\n+                if (skip > 0) {\n+                    --skip;\n+                } else {\n+                    return currentTokens[cursor];\n+                }\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Gets the last `count` tokens of the given node.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [count=0] The number of tokens of the node to retrieve.\n+     * @returns {[Token]} Array of objects representing tokens.\n+     */\n+    api.getLastTokens = function(node, count) {\n+        var tokens = [], cursor = node.range[1] - 1;\n+        while (count > 0 && cursor >= node.range[0]) {\n+            if(currentTokens[cursor]) {\n+                tokens.unshift(currentTokens[cursor]);\n+                --count;\n+            }\n+            --cursor;\n+        }\n+        return tokens;\n+    };\n+\n+    /**\n+     * Gets the last token of the given node's token stream.\n+     * @param {ASTNode} node The AST node.\n+     * @param {int} [skip=0] A number of tokens to skip.\n+     * @returns {Token} An object representing the token.\n+     */\n+    api.getLastToken = function(node, skip) {\n+        for (var cursor = node.range[1] - 1; cursor >= node.range[0]; --cursor) {\n+            if (currentTokens[cursor]) {\n+                if (skip > 0) {\n+                    --skip;\n+                } else {\n+                    return currentTokens[cursor];\n+                }\n+            }\n+        }\n     };\n \n     /**"},{"sha":"21473920a731f82436f9a32d83aaa85c69c67b09","filename":"lib/rule-context.js","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frule-context.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frule-context.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frule-context.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -11,6 +11,14 @@\n var PASSTHROUGHS = [\n         \"getSource\",\n         \"getTokens\",\n+        \"getTokensBefore\",\n+        \"getTokenBefore\",\n+        \"getTokensAfter\",\n+        \"getTokenAfter\",\n+        \"getFirstTokens\",\n+        \"getFirstToken\",\n+        \"getLastTokens\",\n+        \"getLastToken\",\n         \"getComments\",\n         \"getAncestors\",\n         \"getScope\","},{"sha":"d8a3c1c471efa12f67d77df448acdcb2685e0c5a","filename":"lib/rules/brace-style.js","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fbrace-style.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fbrace-style.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fbrace-style.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -30,12 +30,13 @@ module.exports = function(context) {\n     function checkBlock() {\n         var blockProperties = arguments;\n         return function(node) {\n-            var tokens, block;\n             [].forEach.call(blockProperties, function(blockProp) {\n+                var block = node[blockProp], previousToken, curlyToken;\n                 block = node[blockProp];\n                 if(block && block.type === \"BlockStatement\") {\n-                    tokens = context.getTokens(block, 1);\n-                    if (tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n+                    previousToken = context.getTokenBefore(block);\n+                    curlyToken = context.getFirstToken(block);\n+                    if (previousToken.loc.start.line !== curlyToken.loc.start.line) {\n                         context.report(node, OPEN_MESSAGE);\n                     }\n                 }\n@@ -54,7 +55,7 @@ module.exports = function(context) {\n         checkBlock(\"consequent\", \"alternate\")(node);\n \n         if (node.alternate && node.alternate.type === \"BlockStatement\") {\n-            tokens = context.getTokens(node.alternate, 2);\n+            tokens = context.getTokensBefore(node.alternate, 2);\n             if (style === \"1tbs\") {\n                 if (tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n                     context.report(node.alternate, CLOSE_MESSAGE);\n@@ -78,7 +79,7 @@ module.exports = function(context) {\n         checkBlock(\"block\", \"finalizer\")(node);\n \n         if (node.finalizer && node.finalizer.type === \"BlockStatement\") {\n-            tokens = context.getTokens(node.finalizer, 2);\n+            tokens = context.getTokensBefore(node.finalizer, 2);\n             if (style === \"1tbs\") {\n                 if (tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n                     context.report(node.finalizer, CLOSE_MESSAGE);\n@@ -97,18 +98,18 @@ module.exports = function(context) {\n      * @returns {void}\n      */\n     function checkCatchClause(node) {\n-        var tokens;\n+        var previousToken = context.getTokenBefore(node),\n+            firstToken = context.getFirstToken(node);\n \n         checkBlock(\"body\")(node);\n \n         if (node.body && node.body.type === \"BlockStatement\") {\n-            tokens = context.getTokens(node, 1);\n             if (style === \"1tbs\") {\n-                if (tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n+                if (previousToken.loc.start.line !== firstToken.loc.start.line) {\n                     context.report(node, CLOSE_MESSAGE);\n                 }\n             } else if (style === \"stroustrup\") {\n-                if (tokens[0].loc.start.line === tokens[1].loc.start.line) {\n+                if (previousToken.loc.start.line === firstToken.loc.start.line) {\n                     context.report(node, CLOSE_MESSAGE_STROUSTRUP);\n                 }\n             }\n@@ -123,14 +124,13 @@ module.exports = function(context) {\n     function checkSwitchStatement(node) {\n         var tokens;\n         if(node.cases && node.cases.length) {\n-            tokens = context.getTokens(node.cases[0], 2);\n+            tokens = context.getTokensBefore(node.cases[0], 2);\n             if (tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n                 context.report(node, OPEN_MESSAGE);\n             }\n         } else {\n-            tokens = context.getTokens(node);\n-            tokens.pop();\n-            if (tokens.pop().loc.start.line !== tokens.pop().loc.start.line) {\n+            tokens = context.getLastTokens(node, 3);\n+            if (tokens[0].loc.start.line !== tokens[1].loc.start.line) {\n                 context.report(node, OPEN_MESSAGE);\n             }\n         }"},{"sha":"7adf82633c2155e95c8c5afc6d83595b440b094d","filename":"lib/rules/no-comma-dangle.js","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-comma-dangle.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-comma-dangle.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-comma-dangle.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -16,8 +16,7 @@ module.exports = function(context) {\n      //-------------------------------------------------------------------------\n \n     function checkForTrailingComma(node) {\n-        var tokens = context.getTokens(node),\n-            secondToLastToken = tokens[tokens.length - 2];\n+        var secondToLastToken = context.getLastTokens(node, 2)[0];\n \n         var items = node.properties || node.elements,\n             lastItem = items[items.length - 1];"},{"sha":"5cebccd45de40ac5926691cd57c019f75e2d4931","filename":"lib/rules/no-cond-assign.js","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-cond-assign.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-cond-assign.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-cond-assign.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -11,22 +11,20 @@\n module.exports = function(context) {\n \n     function isParenthesised(node) {\n-        var tokens = context.getTokens(node, 1, 1),\n-            firstToken = tokens[0],\n-            lastToken = tokens[tokens.length - 1];\n+        var previousToken = context.getTokenBefore(node),\n+            nextToken = context.getTokenAfter(node);\n \n-        return firstToken.value === \"(\" && firstToken.range[1] <= node.range[0] &&\n-            lastToken.value === \")\" && lastToken.range[0] >= node.range[1];\n+        return previousToken.value === \"(\" && previousToken.range[1] <= node.range[0] &&\n+            nextToken.value === \")\" && nextToken.range[0] >= node.range[1];\n     }\n \n     function isParenthesisedTwice(node) {\n-        var tokens = context.getTokens(node, 2, 2),\n-            firstToken = tokens[0],\n-            lastToken = tokens[tokens.length - 1];\n+        var previousToken = context.getTokenBefore(node, 1),\n+            nextToken = context.getTokenAfter(node, 1);\n \n         return isParenthesised(node) &&\n-            firstToken.value === \"(\" && firstToken.range[1] <= node.range[0] &&\n-            lastToken.value === \")\" && lastToken.range[0] >= node.range[1];\n+            previousToken.value === \"(\" && previousToken.range[1] <= node.range[0] &&\n+            nextToken.value === \")\" && nextToken.range[0] >= node.range[1];\n     }\n \n     function testForAssign(node) {"},{"sha":"2bb6c8f8e2e89086e3a6eda5bfdf16e454dfbdeb","filename":"lib/rules/no-div-regex.js","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-div-regex.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-div-regex.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-div-regex.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -14,12 +14,12 @@ module.exports = function(context) {\n     return {\n \n         \"Literal\": function(node) {\n-            var token = context.getTokens(node)[0],\n+            var token = context.getFirstTokens(node, 1)[0],\n                 nodeType = token.type,\n                 source;\n \n             if (nodeType === \"RegularExpression\") {\n-                source = context.getTokens(node)[0].value;\n+                source = context.getFirstTokens(node, 1)[0].value;\n \n                 if (source[1] === \"=\") {\n                     context.report(node, \"A regular expression literal can be confused with '/='.\");"},{"sha":"d2a9bf88150d0148c683db7e90342ef93d089c5b","filename":"lib/rules/no-extra-parens.js","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-extra-parens.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-extra-parens.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-extra-parens.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -11,20 +11,21 @@\n module.exports = function(context) {\n \n     function isParenthesised(node) {\n-        var tokens = context.getTokens(node, 1, 1),\n-            firstToken = tokens[0],\n-            lastToken = tokens[tokens.length - 1];\n-        return firstToken.value === \"(\" && firstToken.range[1] <= node.range[0] &&\n-            lastToken.value === \")\" && lastToken.range[0] >= node.range[1];\n+        var previousToken = context.getTokenBefore(node),\n+            nextToken = context.getTokenAfter(node);\n+\n+        return previousToken && nextToken &&\n+            previousToken.value === \"(\" && previousToken.range[1] <= node.range[0] &&\n+            nextToken.value === \")\" && nextToken.range[0] >= node.range[1];\n     }\n \n     function isParenthesisedTwice(node) {\n-        var tokens = context.getTokens(node, 2, 2),\n-            firstToken = tokens[0],\n-            lastToken = tokens[tokens.length - 1];\n-        return isParenthesised(node) &&\n-            firstToken.value === \"(\" && firstToken.range[1] <= node.range[0] &&\n-            lastToken.value === \")\" && lastToken.range[0] >= node.range[1];\n+        var previousToken = context.getTokenBefore(node, 1),\n+            nextToken = context.getTokenAfter(node, 1);\n+\n+        return isParenthesised(node) && previousToken && nextToken &&\n+            previousToken.value === \"(\" && previousToken.range[1] <= node.range[0] &&\n+            nextToken.value === \")\" && nextToken.range[0] >= node.range[1];\n     }\n \n     function precedence(node) {\n@@ -160,10 +161,10 @@ module.exports = function(context) {\n             if(isParenthesisedTwice(node.test)) { report(node.test); }\n         },\n         \"ExpressionStatement\": function(node) {\n-            var tokens;\n+            var firstToken;\n             if(isParenthesised(node.expression)) {\n-                tokens = context.getTokens(node.expression);\n-                if(tokens[0].value !== \"function\" && tokens[0].value !== \"{\") {\n+                firstToken = context.getFirstToken(node.expression);\n+                if(firstToken.value !== \"function\" && firstToken.value !== \"{\") {\n                     report(node.expression);\n                 }\n             }\n@@ -189,7 +190,7 @@ module.exports = function(context) {\n                     !(\n                         node.object.type === \"Literal\" &&\n                         typeof node.object.value === \"number\" &&\n-                        /^[0-9]+$/.test(context.getTokens(node.object)[0].value)\n+                        /^[0-9]+$/.test(context.getFirstToken(node.object).value)\n                     )\n                 )\n             ) {"},{"sha":"b0277281d2d3c2d6a602c1398badad51bdf11d6b","filename":"lib/rules/no-regex-spaces.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-regex-spaces.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-regex-spaces.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-regex-spaces.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -14,7 +14,7 @@ module.exports = function(context) {\n     return {\n \n         \"Literal\": function(node) {\n-            var token = context.getTokens(node)[0],\n+            var token = context.getFirstTokens(node, 1)[0],\n                 nodeType = token.type,\n                 nodeValue = token.value,\n                 multipleSpacesRegex = /( {2,})+?/,"},{"sha":"231afde9304fcc7c677d0392e027a0bfb3cb7465","filename":"lib/rules/no-wrap-func.js","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-wrap-func.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fno-wrap-func.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fno-wrap-func.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -14,12 +14,13 @@ module.exports = function(context) {\n     return {\n \n         \"FunctionExpression\": function(node) {\n-\n-            var ancestors = context.getAncestors();\n+            var ancestors = context.getAncestors(),\n+                previousToken, nextToken;\n \n             if (!/CallExpression|NewExpression/.test(ancestors.pop().type)) {\n-                var tokens = context.getTokens(node, 1, 1);\n-                if (tokens[0].value === \"(\" && tokens[tokens.length - 1].value === \")\") {\n+                previousToken = context.getTokenBefore(node);\n+                nextToken = context.getTokenAfter(node);\n+                if (previousToken.value === \"(\" && nextToken.value === \")\") {\n                     context.report(node, \"Wrapping non-IIFE function literals in parens is unnecessary.\");\n                 }\n             }"},{"sha":"0b2da27651a3d5b20900f7c8f966426c0edec687","filename":"lib/rules/semi.js","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fsemi.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fsemi.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fsemi.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -21,16 +21,14 @@ module.exports = function(context) {\n      * @returns {void}\n      */\n     function checkForSemicolon(node) {\n-\n-        var tokens = context.getTokens(node),\n-            token = tokens.pop();\n+        var lastToken = context.getLastToken(node);\n \n         if (always) {\n-            if (token.type !== \"Punctuator\" || token.value !== \";\") {\n-                context.report(node, token.loc.end, \"Missing semicolon.\");\n+            if (lastToken.type !== \"Punctuator\" || lastToken.value !== \";\") {\n+                context.report(node, lastToken.loc.end, \"Missing semicolon.\");\n             }\n         } else {\n-            if (token.type === \"Punctuator\" && token.value === \";\") {\n+            if (lastToken.type === \"Punctuator\" && lastToken.value === \";\") {\n                 context.report(node, node.loc.end, \"Extra semicolon.\");\n             }\n         }\n@@ -67,14 +65,11 @@ module.exports = function(context) {\n         \"BreakStatement\": checkForSemicolon,\n         \"ContinueStatement\": checkForSemicolon,\n         \"EmptyStatement\": function (node) {\n-            var tokens,\n-                token;\n+            var nextToken;\n \n             if (!always) {\n-                tokens = context.getTokens(node, 0, 1);\n-                token = tokens.pop();\n-\n-                if (!(/[\\[\\(\\/\\+\\-]/.test(token.value))) {\n+                nextToken = context.getTokenAfter(node) || context.getLastToken(node);\n+                if (!(/[\\[\\(\\/\\+\\-]/.test(nextToken.value))) {\n                     context.report(node, \"Extra semicolon.\");\n                 }\n             }"},{"sha":"bb60897c297160bbbb5c7b022a2a285e55c31a78","filename":"lib/rules/space-in-brackets.js","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fspace-in-brackets.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fspace-in-brackets.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fspace-in-brackets.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -46,38 +46,38 @@ module.exports = function(context) {\n     function verifySpacing(node, tokens) {\n         if (shouldSpace === \"always\") {\n             if (!isSpaced(tokens[0], tokens[1])) {\n-                context.report(node, tokens[0].loc.end, \n+                context.report(node, tokens[0].loc.end,\n                         \"A space is required after '\" + tokens[0].value + \"'\");\n             }\n \n             if (!isSpaced(tokens[tokens.length - 2], tokens[tokens.length - 1])) {\n-                context.report(node, tokens[tokens.length - 1].loc.start, \n+                context.report(node, tokens[tokens.length - 1].loc.start,\n                         \"A space is required before '\" + tokens[tokens.length - 1].value + \"'\");\n             }\n         } else if (shouldSpace === \"never\") {\n \n-            // This is an exception for Array and Object literals that do not \n+            // This is an exception for Array and Object literals that do not\n             // have any values on the same lines as brackets.\n             if ((node.type === \"ArrayExpression\" || node.type === \"ObjectExpression\") &&\n                     !isSameLine(tokens[0], tokens[1]) &&\n                     !isSameLine(tokens[tokens.length - 2], tokens[tokens.length - 1])) {\n-                return; \n+                return;\n             }\n \n             if (isSpaced(tokens[0], tokens[1])) {\n-                context.report(node, tokens[0].loc.end, \n+                context.report(node, tokens[0].loc.end,\n                         \"There should be no space after '\" + tokens[0].value + \"'\");\n             }\n-            \n+\n             if (isSpaced(tokens[tokens.length - 2], tokens[tokens.length - 1])) {\n-                context.report(node, tokens[tokens.length - 1].loc.start, \n+                context.report(node, tokens[tokens.length - 1].loc.start,\n                         \"There should be no space before '\" + tokens[tokens.length - 1].value + \"'\");\n             }\n         }\n     }\n \n     /**\n-     * Checks whether the brackets of an Object or Array literal are spaced  \n+     * Checks whether the brackets of an Object or Array literal are spaced\n      * according to the given preferences.\n      * @param {ASTNode} node The ArrayExpression or ObjectExpression node.\n      * @returns {void}\n@@ -88,7 +88,7 @@ module.exports = function(context) {\n     }\n \n     /**\n-     * Checks whether the brackets of an Object's member are spaced according to \n+     * Checks whether the brackets of an Object's member are spaced according to\n      * the given preferences, if the member is being accessed with bracket\n      * notation\n      * @param {ASTNode} node The MemberExpression node.\n@@ -100,7 +100,7 @@ module.exports = function(context) {\n         if (node.computed) {\n             var tokens = context.getTokens(node.property, 1, 1);\n             verifySpacing(node, tokens);\n-        }        \n+        }\n     }\n \n "},{"sha":"d2a1574c6c84b6028707e5a5aed9adf85aa60194","filename":"lib/rules/space-return-throw-case.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fspace-return-throw-case.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fspace-return-throw-case.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fspace-return-throw-case.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -11,7 +11,7 @@\n module.exports = function(context) {\n \n     function check(node) {\n-        var tokens = context.getTokens(node),\n+        var tokens = context.getFirstTokens(node, 2),\n             value = tokens[0].value;\n \n         if(tokens[0].range[1] >= tokens[1].range[0]) {"},{"sha":"f2c82d598088d875816bd2bda5e968278b379bb9","filename":"lib/rules/space-unary-word-ops.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fspace-unary-word-ops.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fspace-unary-word-ops.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fspace-unary-word-ops.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -12,7 +12,7 @@ module.exports = function(context) {\n \n     function check(node) {\n         var tokens;\n-        tokens = context.getTokens(node);\n+        tokens = context.getFirstTokens(node, 2);\n         if(tokens[0].range[1] >= tokens[1].range[0]) {\n             switch(tokens[0].value) {\n                 case \"delete\":"},{"sha":"8fb5a84fef49e95e1b3fe4286c5785130b84da9f","filename":"lib/rules/wrap-iife.js","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fwrap-iife.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fwrap-iife.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fwrap-iife.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -13,8 +13,10 @@ module.exports = function(context) {\n     var style = context.options[0] || \"outside\";\n \n     function wrapped(node) {\n-        var tokens = context.getTokens(node, 1, 1);\n-        return tokens[0].value === \"(\" && tokens[tokens.length - 1].value === \")\";\n+        var previousToken = context.getTokenBefore(node),\n+            nextToken = context.getTokenAfter(node);\n+        return previousToken && previousToken.value === \"(\" &&\n+            nextToken && nextToken.value === \")\";\n     }\n \n     return {"},{"sha":"f44655c0a7cef0906997b96a7b7c89fc926f42ef","filename":"lib/rules/wrap-regex.js","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fwrap-regex.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/lib%2Frules%2Fwrap-regex.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/lib%2Frules%2Fwrap-regex.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -14,19 +14,19 @@ module.exports = function(context) {\n     return {\n \n         \"Literal\": function(node) {\n-            var token = context.getTokens(node)[0],\n+            var token = context.getFirstToken(node),\n                 nodeType = token.type,\n                 source,\n                 grandparent,\n                 ancestors;\n \n             if (nodeType === \"RegularExpression\") {\n-                source = context.getTokens(node, 1, 1)[0].value;\n+                source = context.getTokenBefore(node);\n                 ancestors = context.getAncestors();\n                 grandparent = ancestors[ancestors.length - 1];\n \n                 if (grandparent.type === \"MemberExpression\" && grandparent.object === node &&\n-                        source[0] !== \"(\" && source[source.len - 1] !== \")\") {\n+                    (!source || source.value !== \"(\")) {\n                     context.report(node, \"Wrap the regexp literal in parens to disambiguate the slash.\");\n                 }\n             }"},{"sha":"ba195eb348eaa37331374643a402627a6dcbc568","filename":"tests/lib/eslint.js","status":"modified","additions":363,"deletions":1,"changes":364,"blob_url":"https://github.com/eslint/eslint/blob/40ed62673d4ce832ce668bed46af79a88e9336ad/tests%2Flib%2Feslint.js","raw_url":"https://github.com/eslint/eslint/raw/40ed62673d4ce832ce668bed46af79a88e9336ad/tests%2Flib%2Feslint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Flib%2Feslint.js?ref=40ed62673d4ce832ce668bed46af79a88e9336ad","patch":"@@ -193,7 +193,7 @@ describe(\"eslint\", function() {\n             eslint.verify(code, config, filename, true);\n         });\n \n-        it(\"should retrieve all tokens plus equals sign for binary expression\", function() {\n+        it(\"should retrieve all tokens plus one before for binary expression\", function() {\n             var config = { rules: {} };\n \n             eslint.reset();\n@@ -230,6 +230,368 @@ describe(\"eslint\", function() {\n         });\n     });\n \n+    describe(\"when calling getTokensBefore\", function() {\n+        var code = TEST_CODE;\n+\n+        it(\"should retrieve zero tokens before a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getTokensBefore(node, 0);\n+                assert.equal(tokens.length, 0);\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve one token before a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getTokensBefore(node, 1);\n+                assert.equal(tokens.length, 1);\n+\t\t\t\tassert.equal(tokens[0].value, \"=\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve more than one token before a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getTokensBefore(node, 2);\n+                assert.equal(tokens.length, 2);\n+\t\t\t\tassert.equal(tokens[0].value, \"answer\");\n+\t\t\t\tassert.equal(tokens[1].value, \"=\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve all tokens before a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getTokensBefore(node, 9e9);\n+                assert.equal(tokens.length, 3);\n+\t\t\t\tassert.equal(tokens[0].value, \"var\");\n+\t\t\t\tassert.equal(tokens[1].value, \"answer\");\n+\t\t\t\tassert.equal(tokens[2].value, \"=\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+    });\n+\n+    describe(\"when calling getTokenBefore\", function() {\n+        var code = TEST_CODE;\n+\n+        it(\"should retrieve one token before a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var token = eslint.getTokenBefore(node);\n+\t\t\t\tassert.equal(token.value, \"=\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should skip a given number of tokens\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var token = eslint.getTokenBefore(node, 1);\n+\t\t\t\tassert.equal(token.value, \"answer\");\n+            });\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var token = eslint.getTokenBefore(node, 2);\n+\t\t\t\tassert.equal(token.value, \"var\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+    });\n+\n+    describe(\"when calling getTokensAfter\", function() {\n+        var code = TEST_CODE;\n+\n+        it(\"should retrieve zero tokens after a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"Identifier\", function(node) {\n+                var tokens = eslint.getTokensAfter(node, 0);\n+                assert.equal(tokens.length, 0);\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve one token after a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"Identifier\", function(node) {\n+                var tokens = eslint.getTokensAfter(node, 1);\n+                assert.equal(tokens.length, 1);\n+\t\t\t\tassert.equal(tokens[0].value, \"=\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve more than one token after a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"Identifier\", function(node) {\n+                var tokens = eslint.getTokensAfter(node, 2);\n+                assert.equal(tokens.length, 2);\n+\t\t\t\tassert.equal(tokens[0].value, \"=\");\n+\t\t\t\tassert.equal(tokens[1].value, \"6\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve all tokens after a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"Identifier\", function(node) {\n+                var tokens = eslint.getTokensAfter(node, 9e9);\n+                assert.equal(tokens.length, 5);\n+\t\t\t\tassert.equal(tokens[0].value, \"=\");\n+\t\t\t\tassert.equal(tokens[1].value, \"6\");\n+\t\t\t\tassert.equal(tokens[2].value, \"*\");\n+\t\t\t\tassert.equal(tokens[3].value, \"7\");\n+\t\t\t\tassert.equal(tokens[4].value, \";\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+    });\n+\n+    describe(\"when calling getTokenAfter\", function() {\n+        var code = TEST_CODE;\n+\n+        it(\"should retrieve one token after a node\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"Identifier\", function(node) {\n+                var token = eslint.getTokenAfter(node);\n+\t\t\t\tassert.equal(token.value, \"=\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should skip a given number of tokens\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"Identifier\", function(node) {\n+                var token = eslint.getTokenAfter(node, 1);\n+\t\t\t\tassert.equal(token.value, \"6\");\n+            });\n+            eslint.on(\"Identifier\", function(node) {\n+                var token = eslint.getTokenAfter(node, 2);\n+\t\t\t\tassert.equal(token.value, \"*\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+    });\n+\n+    describe(\"when calling getFirstTokens\", function() {\n+        var code = TEST_CODE;\n+\n+        it(\"should retrieve zero tokens from a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getFirstTokens(node, 0);\n+                assert.equal(tokens.length, 0);\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve one token from a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getFirstTokens(node, 1);\n+                assert.equal(tokens.length, 1);\n+\t\t\t\tassert.equal(tokens[0].value, \"6\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve more than one token from a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getFirstTokens(node, 2);\n+                assert.equal(tokens.length, 2);\n+\t\t\t\tassert.equal(tokens[0].value, \"6\");\n+\t\t\t\tassert.equal(tokens[1].value, \"*\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve all tokens from a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getFirstTokens(node, 9e9);\n+                assert.equal(tokens.length, 3);\n+\t\t\t\tassert.equal(tokens[0].value, \"6\");\n+\t\t\t\tassert.equal(tokens[1].value, \"*\");\n+\t\t\t\tassert.equal(tokens[2].value, \"7\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+    });\n+\n+    describe(\"when calling getFirstToken\", function() {\n+        var code = TEST_CODE;\n+\n+        it(\"should retrieve the first token of a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var token = eslint.getFirstToken(node);\n+\t\t\t\tassert.equal(token.value, \"6\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should skip a given number of tokens\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var token = eslint.getFirstToken(node, 1);\n+\t\t\t\tassert.equal(token.value, \"*\");\n+            });\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var token = eslint.getFirstToken(node, 2);\n+\t\t\t\tassert.equal(token.value, \"7\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+    });\n+\n+    describe(\"when calling getLastTokens\", function() {\n+        var code = TEST_CODE;\n+\n+        it(\"should retrieve zero tokens from the end of a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getLastTokens(node, 0);\n+                assert.equal(tokens.length, 0);\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve one token from the end of a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getLastTokens(node, 1);\n+                assert.equal(tokens.length, 1);\n+\t\t\t\tassert.equal(tokens[0].value, \"7\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve more than one token from the end of a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getLastTokens(node, 2);\n+                assert.equal(tokens.length, 2);\n+\t\t\t\tassert.equal(tokens[0].value, \"*\");\n+\t\t\t\tassert.equal(tokens[1].value, \"7\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should retrieve all tokens from the end of a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var tokens = eslint.getLastTokens(node, 9e9);\n+                assert.equal(tokens.length, 3);\n+\t\t\t\tassert.equal(tokens[0].value, \"6\");\n+\t\t\t\tassert.equal(tokens[1].value, \"*\");\n+\t\t\t\tassert.equal(tokens[2].value, \"7\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+    });\n+\n+    describe(\"when calling getLastToken\", function() {\n+        var code = TEST_CODE;\n+\n+        it(\"should retrieve the last token of a node's token stream\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var token = eslint.getLastToken(node);\n+\t\t\t\tassert.equal(token.value, \"7\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+\n+        it(\"should skip a given number of tokens\", function() {\n+            var config = { rules: {} };\n+\n+            eslint.reset();\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var token = eslint.getLastToken(node, 1);\n+\t\t\t\tassert.equal(token.value, \"*\");\n+            });\n+            eslint.on(\"BinaryExpression\", function(node) {\n+                var token = eslint.getLastToken(node, 2);\n+\t\t\t\tassert.equal(token.value, \"6\");\n+            });\n+\n+            eslint.verify(code, config, filename, true);\n+        });\n+    });\n+\n     describe(\"getJSDocComment()\", function() {\n \n         beforeEach(function() {"}]},{"url":"https://api.github.com/repos/eslint/eslint/issues/193","repository_url":"https://api.github.com/repos/eslint/eslint","labels_url":"https://api.github.com/repos/eslint/eslint/issues/193/labels{/name}","comments_url":"https://api.github.com/repos/eslint/eslint/issues/193/comments","events_url":"https://api.github.com/repos/eslint/eslint/issues/193/events","html_url":"https://github.com/eslint/eslint/pull/193","id":17590356,"node_id":"MDExOlB1bGxSZXF1ZXN0NzM2Nzk4NA==","number":193,"title":"Performance jake task (Closes #192)","user":{"login":"ilyavolodin","id":1380062,"node_id":"MDQ6VXNlcjEzODAwNjI=","avatar_url":"https://avatars.githubusercontent.com/u/1380062?v=4","gravatar_id":"","url":"https://api.github.com/users/ilyavolodin","html_url":"https://github.com/ilyavolodin","followers_url":"https://api.github.com/users/ilyavolodin/followers","following_url":"https://api.github.com/users/ilyavolodin/following{/other_user}","gists_url":"https://api.github.com/users/ilyavolodin/gists{/gist_id}","starred_url":"https://api.github.com/users/ilyavolodin/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilyavolodin/subscriptions","organizations_url":"https://api.github.com/users/ilyavolodin/orgs","repos_url":"https://api.github.com/users/ilyavolodin/repos","events_url":"https://api.github.com/users/ilyavolodin/events{/privacy}","received_events_url":"https://api.github.com/users/ilyavolodin/received_events","type":"User","site_admin":false},"labels":[{"id":829215248,"node_id":"MDU6TGFiZWw4MjkyMTUyNDg=","url":"https://api.github.com/repos/eslint/eslint/labels/archived%20due%20to%20age","name":"archived due to age","color":"eeeeee","default":false,"description":"This issue has been archived; please open a new issue for any further discussion"}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2013-08-03T03:20:37Z","updated_at":"2018-02-07T02:38:58Z","closed_at":"2013-08-04T01:24:50Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/eslint/eslint/pulls/193","html_url":"https://github.com/eslint/eslint/pull/193","diff_url":"https://github.com/eslint/eslint/pull/193.diff","patch_url":"https://github.com/eslint/eslint/pull/193.patch","merged_at":"2013-08-04T01:24:50Z"},"body":"I added a jake task to check how long it would take to lint jshint file. Probably not a greatest idea to upload the whole jshint file into our repository, but none of the files in eslint are big enough to show slowness of some of the advanced rules. I also snacked in another task to be able to test a single unit-test file at a time. Hope you don't mind.\n","reactions":{"url":"https://api.github.com/repos/eslint/eslint/issues/193/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/eslint/eslint/issues/193/timeline","performed_via_github_app":null,"state_reason":null,"score":1,"files":[{"sha":"26faab97720a405713506d13a4fa298c0bfc61e3","filename":"Jakefile.js","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/eslint/eslint/blob/629c55ccec3f066bab80a2dacd2ffb924e3245d7/Jakefile.js","raw_url":"https://github.com/eslint/eslint/raw/629c55ccec3f066bab80a2dacd2ffb924e3245d7/Jakefile.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/Jakefile.js?ref=629c55ccec3f066bab80a2dacd2ffb924e3245d7","patch":"@@ -19,7 +19,7 @@ var ISTANBUL_CLI    = \"./node_modules/istanbul/lib/cli.js\",\n     JSHINT_CLI      = \"node_modules/jshint/bin/jshint\",\n     COVERAGE_THRESHOLDS = \"--statement 90 --branch 90 --function 90\",\n     LINTABLE_FILES  = (new jake.FileList().include(\"package.json\").include(\"./conf/*.json\").include(\"lib\")).toArray().join(\" \").replace(/\\\\/g, \"/\"),\n-    TEST_FILES      = (new jake.FileList().include(\"tests/*.js\").exclude(\"tests/fixtures/*.js\").include(\"tests/*/*.js\").include(\"tests/*/*/*.js\")).toArray().join(\" \").replace(/\\\\/g, \"/\");\n+    TEST_FILES      = (new jake.FileList().include(\"tests/*.js\").exclude(\"tests/fixtures/*.js\").exclude(\"tests/performance/*.js\").include(\"tests/*/*.js\").include(\"tests/*/*/*.js\")).toArray().join(\" \").replace(/\\\\/g, \"/\");\n \n //npm run-script lint && node $istanbul cover --print both $vows -- --spec $testfiles && node $istanbul check-coverage $thresholds\n \n@@ -92,3 +92,24 @@ task(\"check-coverage\", [ ], function() {\n     });\n \n });\n+\n+desc(\"Check performance of eslint.\");\n+task(\"check-performance\", [ ], function() {\n+    var startTime = new Date().getTime();\n+    var command = \"node bin/eslint.js tests/performance/jshint.js\";\n+    jake.exec(command, { printStdout: false, printStderr: true}, function() {\n+        complete();\n+        var endTime = new Date().getTime();\n+        var runTime = endTime - startTime;\n+        console.log(\"Linting jshint took \" + runTime + \"ms\");\n+    });\n+});\n+\n+desc(\"Run single test.\");\n+task(\"test-one\", function(file) {\n+    if (file) {\n+        var command = \"node tests/lib/rules/\" + file\n+\n+        jake.exec(command, { printStdout: true, printStderr: true}, complete);\n+    }\n+});\n\\ No newline at end of file"},{"sha":"33b21ed19cc31b86afdacfcb44b26144d1ad6897","filename":"scripts/test.sh","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/eslint/eslint/blob/629c55ccec3f066bab80a2dacd2ffb924e3245d7/scripts%2Ftest.sh","raw_url":"https://github.com/eslint/eslint/raw/629c55ccec3f066bab80a2dacd2ffb924e3245d7/scripts%2Ftest.sh","contents_url":"https://api.github.com/repos/eslint/eslint/contents/scripts%2Ftest.sh?ref=629c55ccec3f066bab80a2dacd2ffb924e3245d7","patch":"@@ -10,7 +10,7 @@\n \n istanbul=./node_modules/istanbul/lib/cli.js\n vows=./node_modules/vows/bin/vows\n-testfiles=`find tests/ -name '*.js'`\n+testfiles=`find tests/lib/ -name '*.js'`\n thresholds='--statement 92 --branch 90 --function 92 --lines 92'\n \n npm run-script lint && node $istanbul cover $vows -- --dot $testfiles && node $istanbul check-coverage $thresholds"},{"sha":"6ebb5fb4980b246894f5738cb98e0b957c111fa6","filename":"tests/performance/jshint.js","status":"added","additions":11293,"deletions":0,"changes":11293,"blob_url":"https://github.com/eslint/eslint/blob/629c55ccec3f066bab80a2dacd2ffb924e3245d7/tests%2Fperformance%2Fjshint.js","raw_url":"https://github.com/eslint/eslint/raw/629c55ccec3f066bab80a2dacd2ffb924e3245d7/tests%2Fperformance%2Fjshint.js","contents_url":"https://api.github.com/repos/eslint/eslint/contents/tests%2Fperformance%2Fjshint.js?ref=629c55ccec3f066bab80a2dacd2ffb924e3245d7"}]}]