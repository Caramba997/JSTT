[
  {
    "url": "https://api.github.com/repos/mochajs/mocha/issues/4839",
    "repository_url": "https://api.github.com/repos/mochajs/mocha",
    "labels_url": "https://api.github.com/repos/mochajs/mocha/issues/4839/labels{/name}",
    "comments_url": "https://api.github.com/repos/mochajs/mocha/issues/4839/comments",
    "events_url": "https://api.github.com/repos/mochajs/mocha/issues/4839/events",
    "html_url": "https://github.com/mochajs/mocha/pull/4839",
    "id": 1155516002,
    "node_id": "PR_kwDOABYlWM4zvOpk",
    "number": 4839,
    "title": "Fix: potential call-stack crash when using 'dry-run' option",
    "user": {
      "login": "juergba",
      "id": 44573692,
      "node_id": "MDQ6VXNlcjQ0NTczNjky",
      "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juergba",
      "html_url": "https://github.com/juergba",
      "followers_url": "https://api.github.com/users/juergba/followers",
      "following_url": "https://api.github.com/users/juergba/following{/other_user}",
      "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
      "organizations_url": "https://api.github.com/users/juergba/orgs",
      "repos_url": "https://api.github.com/users/juergba/repos",
      "events_url": "https://api.github.com/users/juergba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juergba/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 533082117,
        "node_id": "MDU6TGFiZWw1MzMwODIxMTc=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/semver-patch",
        "name": "semver-patch",
        "color": "0e8a16",
        "default": false,
        "description": "implementation requires increase of \"patch\" version number; \"bug fixes\""
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "juergba",
      "id": 44573692,
      "node_id": "MDQ6VXNlcjQ0NTczNjky",
      "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juergba",
      "html_url": "https://github.com/juergba",
      "followers_url": "https://api.github.com/users/juergba/followers",
      "following_url": "https://api.github.com/users/juergba/following{/other_user}",
      "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
      "organizations_url": "https://api.github.com/users/juergba/orgs",
      "repos_url": "https://api.github.com/users/juergba/repos",
      "events_url": "https://api.github.com/users/juergba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juergba/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "juergba",
        "id": 44573692,
        "node_id": "MDQ6VXNlcjQ0NTczNjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/juergba",
        "html_url": "https://github.com/juergba",
        "followers_url": "https://api.github.com/users/juergba/followers",
        "following_url": "https://api.github.com/users/juergba/following{/other_user}",
        "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
        "organizations_url": "https://api.github.com/users/juergba/orgs",
        "repos_url": "https://api.github.com/users/juergba/repos",
        "events_url": "https://api.github.com/users/juergba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/juergba/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/mochajs/mocha/milestones/60",
      "html_url": "https://github.com/mochajs/mocha/milestone/60",
      "labels_url": "https://api.github.com/repos/mochajs/mocha/milestones/60/labels",
      "id": 7694431,
      "node_id": "MI_kwDOABYlWM4AdWhf",
      "number": 60,
      "title": "v9.2.2",
      "description": "",
      "creator": {
        "login": "juergba",
        "id": 44573692,
        "node_id": "MDQ6VXNlcjQ0NTczNjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/juergba",
        "html_url": "https://github.com/juergba",
        "followers_url": "https://api.github.com/users/juergba/followers",
        "following_url": "https://api.github.com/users/juergba/following{/other_user}",
        "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
        "organizations_url": "https://api.github.com/users/juergba/orgs",
        "repos_url": "https://api.github.com/users/juergba/repos",
        "events_url": "https://api.github.com/users/juergba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/juergba/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 3,
      "state": "closed",
      "created_at": "2022-02-19T10:16:28Z",
      "updated_at": "2022-03-11T17:10:31Z",
      "due_on": null,
      "closed_at": "2022-03-11T17:10:12Z"
    },
    "comments": 0,
    "created_at": "2022-03-01T16:01:26Z",
    "updated_at": "2022-03-04T08:55:42Z",
    "closed_at": "2022-03-04T08:26:24Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/mochajs/mocha/pulls/4839",
      "html_url": "https://github.com/mochajs/mocha/pull/4839",
      "diff_url": "https://github.com/mochajs/mocha/pull/4839.diff",
      "patch_url": "https://github.com/mochajs/mocha/pull/4839.patch",
      "merged_at": "2022-03-04T08:26:24Z"
    },
    "body": "### Description\r\n\r\n`dry-run` mode: since the tests are not executed, but triggered only into an empty synchronous run, there is a potential risk of `RangeError: Maximum call stack size exceeded`.\r\n\r\n### Description of the Change\r\n\r\nFor each test we add an asynchronous function call with `Runner.immediately()`. We pay a slight performance costs for this which is insignificant in `dry-run` mode. \r\n\r\n### Applicable issues\r\n\r\ncloses #4838",
    "reactions": {
      "url": "https://api.github.com/repos/mochajs/mocha/issues/4839/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/mochajs/mocha/issues/4839/timeline",
    "performed_via_github_app": null,
    "state_reason": null,
    "score": 1,
    "files": [
      {
        "sha": "23a43c6fc92495e9b75159626f7e6e3ec9dfe48c",
        "filename": "lib/runner.js",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/mochajs/mocha/blob/5869cb9223937a78468d2923cb0b40100b98e52c/lib%2Frunner.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/5869cb9223937a78468d2923cb0b40100b98e52c/lib%2Frunner.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Frunner.js?ref=5869cb9223937a78468d2923cb0b40100b98e52c",
        "patch": "@@ -655,7 +655,7 @@ Runner.prototype.parents = function () {\n  * @private\n  */\n Runner.prototype.runTest = function (fn) {\n-  if (this._opts.dryRun) return fn();\n+  if (this._opts.dryRun) return Runner.immediately(fn);\n \n   var self = this;\n   var test = this.test;"
      },
      {
        "sha": "8b5960e64154bad6b3681d685ca3b9eb762060fa",
        "filename": "test/integration/fixtures/options/dry-run/stack-size.fixture.js",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/mochajs/mocha/blob/5869cb9223937a78468d2923cb0b40100b98e52c/test%2Fintegration%2Ffixtures%2Foptions%2Fdry-run%2Fstack-size.fixture.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/5869cb9223937a78468d2923cb0b40100b98e52c/test%2Fintegration%2Ffixtures%2Foptions%2Fdry-run%2Fstack-size.fixture.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Foptions%2Fdry-run%2Fstack-size.fixture.js?ref=5869cb9223937a78468d2923cb0b40100b98e52c",
        "patch": "@@ -0,0 +1,11 @@\n+var assert = require('assert');\n+\n+describe('Wrapper suite', function () {\n+  for(let i=0; i < 400; i++) {\n+    describe(`suite ${i}`, function () {\n+      it(`test ${i}`, function () {\n+        assert.equal(1, 1);\n+      });\n+    });\n+  }\n+});"
      },
      {
        "sha": "45eeabee8f43b7e6aa55260bed02fbaf2cc6282b",
        "filename": "test/integration/options/dryRun.spec.js",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/mochajs/mocha/blob/5869cb9223937a78468d2923cb0b40100b98e52c/test%2Fintegration%2Foptions%2FdryRun.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/5869cb9223937a78468d2923cb0b40100b98e52c/test%2Fintegration%2Foptions%2FdryRun.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Foptions%2FdryRun.spec.js?ref=5869cb9223937a78468d2923cb0b40100b98e52c",
        "patch": "@@ -27,4 +27,16 @@ describe('--dry-run', function () {\n       done();\n     });\n   });\n+\n+  it('should pass without \"RangeError: maximum call stack size exceeded\"', function (done) {\n+    var fixture = path.join('options/dry-run', 'stack-size');\n+    runMochaJSON(fixture, args, function (err, res) {\n+      if (err) {\n+        return done(err);\n+      }\n+\n+      expect(res, 'to have passed test count', 400);\n+      done();\n+    });\n+  });\n });"
      }
    ]
  },
  {
    "url": "https://api.github.com/repos/mochajs/mocha/issues/4638",
    "repository_url": "https://api.github.com/repos/mochajs/mocha",
    "labels_url": "https://api.github.com/repos/mochajs/mocha/issues/4638/labels{/name}",
    "comments_url": "https://api.github.com/repos/mochajs/mocha/issues/4638/comments",
    "events_url": "https://api.github.com/repos/mochajs/mocha/issues/4638/events",
    "html_url": "https://github.com/mochajs/mocha/pull/4638",
    "id": 899704591,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NjUxMzY5MTE4",
    "number": 4638,
    "title": "Limit the size of 'actual'/'expected' strings before generating a diff",
    "user": {
      "login": "juergba",
      "id": 44573692,
      "node_id": "MDQ6VXNlcjQ0NTczNjky",
      "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juergba",
      "html_url": "https://github.com/juergba",
      "followers_url": "https://api.github.com/users/juergba/followers",
      "following_url": "https://api.github.com/users/juergba/following{/other_user}",
      "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
      "organizations_url": "https://api.github.com/users/juergba/orgs",
      "repos_url": "https://api.github.com/users/juergba/repos",
      "events_url": "https://api.github.com/users/juergba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juergba/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 184344,
        "node_id": "MDU6TGFiZWwxODQzNDQ=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/confirmed-bug",
        "name": "confirmed-bug",
        "color": "A6340C",
        "default": false,
        "description": "a defect, confirmed by a maintainer"
      },
      {
        "id": 533081749,
        "node_id": "MDU6TGFiZWw1MzMwODE3NDk=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/semver-major",
        "name": "semver-major",
        "color": "b60205",
        "default": false,
        "description": "implementation requires increase of \"major\" version number; \"breaking changes\""
      },
      {
        "id": 1268443804,
        "node_id": "MDU6TGFiZWwxMjY4NDQzODA0",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/performance",
        "name": "performance",
        "color": "ce9bef",
        "default": false,
        "description": "Performance improvements"
      },
      {
        "id": 2240305431,
        "node_id": "MDU6TGFiZWwyMjQwMzA1NDMx",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/dependencies",
        "name": "dependencies",
        "color": "0366d6",
        "default": false,
        "description": "Pull requests that update a dependency file"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "juergba",
      "id": 44573692,
      "node_id": "MDQ6VXNlcjQ0NTczNjky",
      "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juergba",
      "html_url": "https://github.com/juergba",
      "followers_url": "https://api.github.com/users/juergba/followers",
      "following_url": "https://api.github.com/users/juergba/following{/other_user}",
      "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
      "organizations_url": "https://api.github.com/users/juergba/orgs",
      "repos_url": "https://api.github.com/users/juergba/repos",
      "events_url": "https://api.github.com/users/juergba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juergba/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "juergba",
        "id": 44573692,
        "node_id": "MDQ6VXNlcjQ0NTczNjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/juergba",
        "html_url": "https://github.com/juergba",
        "followers_url": "https://api.github.com/users/juergba/followers",
        "following_url": "https://api.github.com/users/juergba/following{/other_user}",
        "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
        "organizations_url": "https://api.github.com/users/juergba/orgs",
        "repos_url": "https://api.github.com/users/juergba/repos",
        "events_url": "https://api.github.com/users/juergba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/juergba/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/mochajs/mocha/milestones/50",
      "html_url": "https://github.com/mochajs/mocha/milestone/50",
      "labels_url": "https://api.github.com/repos/mochajs/mocha/milestones/50/labels",
      "id": 6738358,
      "node_id": "MDk6TWlsZXN0b25lNjczODM1OA==",
      "number": 50,
      "title": "v9.0.0",
      "description": "",
      "creator": {
        "login": "juergba",
        "id": 44573692,
        "node_id": "MDQ6VXNlcjQ0NTczNjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/juergba",
        "html_url": "https://github.com/juergba",
        "followers_url": "https://api.github.com/users/juergba/followers",
        "following_url": "https://api.github.com/users/juergba/following{/other_user}",
        "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
        "organizations_url": "https://api.github.com/users/juergba/orgs",
        "repos_url": "https://api.github.com/users/juergba/repos",
        "events_url": "https://api.github.com/users/juergba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/juergba/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 10,
      "state": "closed",
      "created_at": "2021-05-07T18:56:14Z",
      "updated_at": "2021-06-07T16:05:12Z",
      "due_on": null,
      "closed_at": "2021-06-07T16:05:12Z"
    },
    "comments": 1,
    "created_at": "2021-05-24T14:15:43Z",
    "updated_at": "2021-10-07T15:19:49Z",
    "closed_at": "2021-05-30T16:09:46Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/mochajs/mocha/pulls/4638",
      "html_url": "https://github.com/mochajs/mocha/pull/4638",
      "diff_url": "https://github.com/mochajs/mocha/pull/4638.diff",
      "patch_url": "https://github.com/mochajs/mocha/pull/4638.patch",
      "merged_at": "2021-05-30T16:09:46Z"
    },
    "body": "### Description\r\n\r\nMocha prints its own diff on assertion errors by stringifying `err.actual` and `err.expected`, then passing both strings to [jsdiff](https://github.com/kpdecker/jsdiff) for generating a diff-patch. For big strings this synchronous process can take several minutes.\r\n\r\n_jsdiff_ has some known performance issues, so in mid-term we evtl. should evaluate a _jsdiff_ alternative.\r\nOn the other hand it's not a good idea to calculate a diff for two huge strings, even with a faster algorithm. We should limit the size of the input strings, as eg. done by Node's `assert` as well.\r\n\r\n### Description of the Change\r\n\r\n- no change: stringify `err.actual` and `err.expected`\r\n- new: when too big, truncate the resulting strings and add a message `... Lines skipped`\r\n\r\n\r\n### Applicable issues\r\n\r\ncloses #3675",
    "reactions": {
      "url": "https://api.github.com/repos/mochajs/mocha/issues/4638/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 2,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/mochajs/mocha/issues/4638/timeline",
    "performed_via_github_app": null,
    "state_reason": null,
    "score": 1,
    "files": [
      {
        "sha": "ffdd1699afc4f3e46000f45461ab2a6806bc333a",
        "filename": "lib/reporters/base.js",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/mochajs/mocha/blob/af3b2a8e7e158c6ef9f8978784948d968c7f9220/lib%2Freporters%2Fbase.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/af3b2a8e7e158c6ef9f8978784948d968c7f9220/lib%2Freporters%2Fbase.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Freporters%2Fbase.js?ref=af3b2a8e7e158c6ef9f8978784948d968c7f9220",
        "patch": "@@ -190,6 +190,13 @@ function stringifyDiffObjs(err) {\n  */\n var generateDiff = (exports.generateDiff = function(actual, expected) {\n   try {\n+    const diffSize = 2048;\n+    if (actual.length > diffSize) {\n+      actual = actual.substring(0, diffSize) + ' ... Lines skipped';\n+    }\n+    if (expected.length > diffSize) {\n+      expected = expected.substring(0, diffSize) + ' ... Lines skipped';\n+    }\n     return exports.inlineDiffs\n       ? inlineDiff(actual, expected)\n       : unifiedDiff(actual, expected);"
      },
      {
        "sha": "b61dfb1ecf3d0ce3e00a60cdfbb59cbaf0b5aec9",
        "filename": "test/reporters/base.spec.js",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/mochajs/mocha/blob/af3b2a8e7e158c6ef9f8978784948d968c7f9220/test%2Freporters%2Fbase.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/af3b2a8e7e158c6ef9f8978784948d968c7f9220/test%2Freporters%2Fbase.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Freporters%2Fbase.spec.js?ref=af3b2a8e7e158c6ef9f8978784948d968c7f9220",
        "patch": "@@ -164,6 +164,34 @@ describe('Base reporter', function() {\n         '      \\n      actual expected\\n      \\n      a foobar inline diff\\n      '\n       );\n     });\n+\n+    it(\"should truncate overly long 'actual' \", function() {\n+      var actual = '';\n+      var i = 0;\n+      while (i++ < 120) {\n+        actual += 'a foo unified diff ';\n+      }\n+      var expected = 'a bar unified diff';\n+\n+      inlineDiffsStub.value(false);\n+      var output = generateDiff(actual, expected);\n+\n+      expect(output, 'to match', / \\.\\.\\. Lines skipped/);\n+    });\n+\n+    it(\"should truncate overly long 'expected' \", function() {\n+      var actual = 'a foo unified diff';\n+      var expected = '';\n+      var i = 0;\n+      while (i++ < 120) {\n+        expected += 'a bar unified diff ';\n+      }\n+\n+      inlineDiffsStub.value(false);\n+      var output = generateDiff(actual, expected);\n+\n+      expect(output, 'to match', / \\.\\.\\. Lines skipped/);\n+    });\n   });\n \n   describe('inline strings diff', function() {"
      }
    ]
  },
  {
    "url": "https://api.github.com/repos/mochajs/mocha/issues/4234",
    "repository_url": "https://api.github.com/repos/mochajs/mocha",
    "labels_url": "https://api.github.com/repos/mochajs/mocha/issues/4234/labels{/name}",
    "comments_url": "https://api.github.com/repos/mochajs/mocha/issues/4234/comments",
    "events_url": "https://api.github.com/repos/mochajs/mocha/issues/4234/events",
    "html_url": "https://github.com/mochajs/mocha/pull/4234",
    "id": 604266287,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA2ODkyNzUz",
    "number": 4234,
    "title": "Add ability to run tests in a mocha instance multiple times",
    "user": {
      "login": "nicojs",
      "id": 1828233,
      "node_id": "MDQ6VXNlcjE4MjgyMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1828233?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nicojs",
      "html_url": "https://github.com/nicojs",
      "followers_url": "https://api.github.com/users/nicojs/followers",
      "following_url": "https://api.github.com/users/nicojs/following{/other_user}",
      "gists_url": "https://api.github.com/users/nicojs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nicojs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nicojs/subscriptions",
      "organizations_url": "https://api.github.com/users/nicojs/orgs",
      "repos_url": "https://api.github.com/users/nicojs/repos",
      "events_url": "https://api.github.com/users/nicojs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nicojs/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 185748,
        "node_id": "MDU6TGFiZWwxODU3NDg=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/feature",
        "name": "feature",
        "color": "CC9264",
        "default": false,
        "description": "enhancement proposal"
      },
      {
        "id": 533082025,
        "node_id": "MDU6TGFiZWw1MzMwODIwMjU=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/semver-minor",
        "name": "semver-minor",
        "color": "fbca04",
        "default": false,
        "description": "implementation requires increase of \"minor\" version number; \"features\""
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/mochajs/mocha/milestones/39",
      "html_url": "https://github.com/mochajs/mocha/milestone/39",
      "labels_url": "https://api.github.com/repos/mochajs/mocha/milestones/39/labels",
      "id": 5349448,
      "node_id": "MDk6TWlsZXN0b25lNTM0OTQ0OA==",
      "number": 39,
      "title": "v7.2.0",
      "description": "",
      "creator": {
        "login": "juergba",
        "id": 44573692,
        "node_id": "MDQ6VXNlcjQ0NTczNjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/juergba",
        "html_url": "https://github.com/juergba",
        "followers_url": "https://api.github.com/users/juergba/followers",
        "following_url": "https://api.github.com/users/juergba/following{/other_user}",
        "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
        "organizations_url": "https://api.github.com/users/juergba/orgs",
        "repos_url": "https://api.github.com/users/juergba/repos",
        "events_url": "https://api.github.com/users/juergba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/juergba/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 27,
      "state": "closed",
      "created_at": "2020-04-26T06:39:15Z",
      "updated_at": "2020-05-22T16:42:05Z",
      "due_on": null,
      "closed_at": "2020-05-22T16:42:05Z"
    },
    "comments": 39,
    "created_at": "2020-04-21T20:31:18Z",
    "updated_at": "2020-10-26T22:54:24Z",
    "closed_at": "2020-05-11T19:55:25Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/mochajs/mocha/pulls/4234",
      "html_url": "https://github.com/mochajs/mocha/pull/4234",
      "diff_url": "https://github.com/mochajs/mocha/pull/4234.diff",
      "patch_url": "https://github.com/mochajs/mocha/pull/4234.patch",
      "merged_at": "2020-05-11T19:55:24Z"
    },
    "body": "### Description of the Change\r\n\r\nThese changes allow mocha to run multiple times with the same test suite programmatically (without reload). It does this with minimal code changes. \r\n\r\nIt also adds to validations, for when people call `mocha.run` at the wrong time.\r\n\r\nFor more details and reasoning, please see https://github.com/mochajs/mocha/issues/2783#issuecomment-616446938\r\n\r\nFixes #2783\r\n\r\n<!--\r\n\r\nWe must be able to understand the design of your change from this description. Keep in mind that the maintainers and/or community members reviewing this PR may not be familiar with the subsystem. Please be verbose.\r\n\r\n-->\r\n\r\n### Alternate Designs\r\n\r\nAlternatively, we could have totally removed all state from tests, suites and runnable, but we don't want to change the entire way of keeping state. Please see #2783 for the entire history. \r\n\r\n<!-- Explain what other alternates were considered and why the proposed version was selected -->\r\n\r\n### Why should this be in core?\r\n\r\nA lot of people seem interested in running a test suite multiple times without reloading files from disk. See #2783. I personally will use it to [implement mutation switching in Stryker](https://github.com/stryker-mutator/stryker/issues/1514)\r\n\r\n### Benefits\r\n\r\nHuge performance gain for my mutation testing use case. Other people have valid use cases as well.\r\n\r\n### Possible Drawbacks\r\n\r\nIt should be backward compatible, but since I had to rewrite parts in the core, I might have introduced undesired side effects 🤷‍♂️. Although the integration test suite is awesome!\r\n<!-- What are the possible side-effects or negative impacts of the code change? -->\r\n\r\n### Applicable issues\r\n\r\n#2783 \r\n\r\n### Todo:\r\n\r\n- [x] Test: implement `reset`\r\n- [x] Suite: implement `reset`\r\n- [x] Runnable: implement `reset`\r\n- [x] Mocha: implement `dispose` and `cleanReferencesAfterRun`\r\n- [x] Mocha: throw errors when `run` call is invalid.\r\n- [x] Runner: make sure to not leak event listeners.\r\n- [x] Runner: implement `dispose` and `cleanReferencesAfterRun`\r\n- [x] Unit tests\r\n- [x] Integration tests\r\n- [x] Docs",
    "reactions": {
      "url": "https://api.github.com/repos/mochajs/mocha/issues/4234/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/mochajs/mocha/issues/4234/timeline",
    "performed_via_github_app": null,
    "state_reason": null,
    "score": 1,
    "files": [
      {
        "sha": "114d2f72134ec51aae7b58487bd21188425ed14c",
        "filename": "browser-entry.js",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/browser-entry.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/browser-entry.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/browser-entry.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -52,6 +52,17 @@ process.removeListener = function(e, fn) {\n   }\n };\n \n+/**\n+ * Implements listenerCount for 'uncaughtException'.\n+ */\n+\n+process.listenerCount = function(name) {\n+  if (name === 'uncaughtException') {\n+    return uncaughtExceptionHandlers.length;\n+  }\n+  return 0;\n+};\n+\n /**\n  * Implements uncaughtException listener.\n  */"
      },
      {
        "sha": "a85c8c24b9bcfa24490027b05220c6bfca100855",
        "filename": "lib/errors.js",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Ferrors.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Ferrors.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Ferrors.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -149,6 +149,35 @@ function createInvalidPluginError(message, pluginType, pluginId) {\n   }\n }\n \n+/**\n+ * Creates an error object to be thrown when a mocha object's `run` method is executed while it is already disposed.\n+ * @param {string} message The error message to be displayed.\n+ * @param {boolean} cleanReferencesAfterRun the value of `cleanReferencesAfterRun`\n+ * @param {Mocha} instance the mocha instance that throw this error\n+ */\n+function createMochaInstanceAlreadyDisposedError(\n+  message,\n+  cleanReferencesAfterRun,\n+  instance\n+) {\n+  var err = new Error(message);\n+  err.code = 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED';\n+  err.cleanReferencesAfterRun = cleanReferencesAfterRun;\n+  err.instance = instance;\n+  return err;\n+}\n+\n+/**\n+ * Creates an error object to be thrown when a mocha object's `run` method is called while a test run is in progress.\n+ * @param {string} message The error message to be displayed.\n+ */\n+function createMochaInstanceAlreadyRunningError(message, instance) {\n+  var err = new Error(message);\n+  err.code = 'ERR_MOCHA_INSTANCE_ALREADY_RUNNING';\n+  err.instance = instance;\n+  return err;\n+}\n+\n module.exports = {\n   createInvalidArgumentTypeError: createInvalidArgumentTypeError,\n   createInvalidArgumentValueError: createInvalidArgumentValueError,\n@@ -158,5 +187,7 @@ module.exports = {\n   createMissingArgumentError: createMissingArgumentError,\n   createNoFilesMatchPatternError: createNoFilesMatchPatternError,\n   createUnsupportedError: createUnsupportedError,\n-  createInvalidPluginError: createInvalidPluginError\n+  createInvalidPluginError: createInvalidPluginError,\n+  createMochaInstanceAlreadyDisposedError: createMochaInstanceAlreadyDisposedError,\n+  createMochaInstanceAlreadyRunningError: createMochaInstanceAlreadyRunningError\n };"
      },
      {
        "sha": "6560715fc50220eed97cf72badfd6bf30f333259",
        "filename": "lib/hook.js",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Fhook.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Fhook.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fhook.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -27,6 +27,14 @@ function Hook(title, fn) {\n  */\n inherits(Hook, Runnable);\n \n+/**\n+ * Resets the state for a next run.\n+ */\n+Hook.prototype.reset = function() {\n+  Runnable.prototype.reset.call(this);\n+  delete this._error;\n+};\n+\n /**\n  * Get or set the test `err`.\n  *"
      },
      {
        "sha": "5a8fb32202b9162ddf6fe641faed221542e826a5",
        "filename": "lib/mocha.js",
        "status": "modified",
        "additions": 109,
        "deletions": 1,
        "changes": 110,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Fmocha.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Fmocha.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fmocha.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -18,13 +18,41 @@ var esmUtils = utils.supportsEsModules() ? require('./esm-utils') : undefined;\n var createStatsCollector = require('./stats-collector');\n var createInvalidReporterError = errors.createInvalidReporterError;\n var createInvalidInterfaceError = errors.createInvalidInterfaceError;\n+var createMochaInstanceAlreadyDisposedError =\n+  errors.createMochaInstanceAlreadyDisposedError;\n+var createMochaInstanceAlreadyRunningError =\n+  errors.createMochaInstanceAlreadyRunningError;\n var EVENT_FILE_PRE_REQUIRE = Suite.constants.EVENT_FILE_PRE_REQUIRE;\n var EVENT_FILE_POST_REQUIRE = Suite.constants.EVENT_FILE_POST_REQUIRE;\n var EVENT_FILE_REQUIRE = Suite.constants.EVENT_FILE_REQUIRE;\n var sQuote = utils.sQuote;\n \n exports = module.exports = Mocha;\n \n+/**\n+ * A Mocha instance is a finite state machine.\n+ * These are the states it can be in.\n+ */\n+var mochaStates = utils.defineConstants({\n+  /**\n+   * Initial state of the mocha instance\n+   */\n+  INIT: 'init',\n+  /**\n+   * Mocha instance is running tests\n+   */\n+  RUNNING: 'running',\n+  /**\n+   * Mocha instance is done running tests and references to test functions and hooks are cleaned.\n+   * You can reset this state by unloading the test files.\n+   */\n+  REFERENCES_CLEANED: 'referencesCleaned',\n+  /**\n+   * Mocha instance is disposed and can no longer be used.\n+   */\n+  DISPOSED: 'disposed'\n+});\n+\n /**\n  * To require local UIs and reporters when running in node.\n  */\n@@ -97,6 +125,7 @@ function Mocha(options) {\n   this.options = options;\n   // root suite\n   this.suite = new exports.Suite('', new exports.Context(), true);\n+  this._cleanReferencesAfterRun = true;\n \n   this.grep(options.grep)\n     .fgrep(options.fgrep)\n@@ -388,9 +417,18 @@ Mocha.unloadFile = function(file) {\n  * @chainable\n  */\n Mocha.prototype.unloadFiles = function() {\n+  if (this._state === mochaStates.DISPOSED) {\n+    throw createMochaInstanceAlreadyDisposedError(\n+      'Mocha instance is already disposed, it cannot be used again.',\n+      this._cleanReferencesAfterRun,\n+      this\n+    );\n+  }\n+\n   this.files.forEach(function(file) {\n     Mocha.unloadFile(file);\n   });\n+  this._state = mochaStates.INIT;\n   return this;\n };\n \n@@ -490,6 +528,38 @@ Mocha.prototype.checkLeaks = function(checkLeaks) {\n   return this;\n };\n \n+/**\n+ * Enables or disables whether or not to dispose after each test run.\n+ * Disable this to ensure you can run the test suite multiple times.\n+ * If disabled, be sure to dispose mocha when you're done to prevent memory leaks.\n+ * @public\n+ * @see {@link Mocha#dispose}\n+ * @param {boolean} cleanReferencesAfterRun\n+ * @return {Mocha} this\n+ * @chainable\n+ */\n+Mocha.prototype.cleanReferencesAfterRun = function(cleanReferencesAfterRun) {\n+  this._cleanReferencesAfterRun = cleanReferencesAfterRun !== false;\n+  return this;\n+};\n+\n+/**\n+ * Manually dispose this mocha instance. Mark this instance as `disposed` and unable to run more tests.\n+ * It also removes function references to tests functions and hooks, so variables trapped in closures can be cleaned by the garbage collector.\n+ * @public\n+ */\n+Mocha.prototype.dispose = function() {\n+  if (this._state === mochaStates.RUNNING) {\n+    throw createMochaInstanceAlreadyRunningError(\n+      'Cannot dispose while the mocha instance is still running tests.'\n+    );\n+  }\n+  this.unloadFiles();\n+  this._previousRunner && this._previousRunner.dispose();\n+  this.suite.dispose();\n+  this._state = mochaStates.DISPOSED;\n+};\n+\n /**\n  * Displays full stack trace upon test failure.\n  *\n@@ -770,6 +840,28 @@ Mocha.prototype.forbidPending = function(forbidPending) {\n   return this;\n };\n \n+/**\n+ * Throws an error if mocha is in the wrong state to be able to transition to a \"running\" state.\n+ */\n+Mocha.prototype._guardRunningStateTransition = function() {\n+  if (this._state === mochaStates.RUNNING) {\n+    throw createMochaInstanceAlreadyRunningError(\n+      'Mocha instance is currently running tests, cannot start a next test run until this one is done',\n+      this\n+    );\n+  }\n+  if (\n+    this._state === mochaStates.DISPOSED ||\n+    this._state === mochaStates.REFERENCES_CLEANED\n+  ) {\n+    throw createMochaInstanceAlreadyDisposedError(\n+      'Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.',\n+      this._cleanReferencesAfterRun,\n+      this\n+    );\n+  }\n+};\n+\n /**\n  * Mocha version as specified by \"package.json\".\n  *\n@@ -810,13 +902,23 @@ Object.defineProperty(Mocha.prototype, 'version', {\n  * mocha.run(failures => process.exitCode = failures ? 1 : 0);\n  */\n Mocha.prototype.run = function(fn) {\n+  this._guardRunningStateTransition();\n+  this._state = mochaStates.RUNNING;\n+  if (this._previousRunner) {\n+    this._previousRunner.dispose();\n+    this.suite.reset();\n+  }\n   if (this.files.length && !this.loadAsync) {\n     this.loadFiles();\n   }\n+  var self = this;\n   var suite = this.suite;\n   var options = this.options;\n   options.files = this.files;\n-  var runner = new exports.Runner(suite, options.delay);\n+  var runner = new exports.Runner(suite, {\n+    delay: options.delay,\n+    cleanReferencesAfterRun: this._cleanReferencesAfterRun\n+  });\n   createStatsCollector(runner);\n   var reporter = new this._reporter(runner, options);\n   runner.checkLeaks = options.checkLeaks === true;\n@@ -841,6 +943,12 @@ Mocha.prototype.run = function(fn) {\n   exports.reporters.Base.hideDiff = !options.diff;\n \n   function done(failures) {\n+    self._previousRunner = runner;\n+    if (self._cleanReferencesAfterRun) {\n+      self._state = mochaStates.REFERENCES_CLEANED;\n+    } else {\n+      self._state = mochaStates.INIT;\n+    }\n     fn = fn || utils.noop;\n     if (reporter.done) {\n       reporter.done(failures, fn);"
      },
      {
        "sha": "4d58070f5de67c71e3daa062224f55922e10c5e7",
        "filename": "lib/runnable.js",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Frunnable.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Frunnable.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Frunnable.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -35,17 +35,26 @@ function Runnable(title, fn) {\n   this.sync = !this.async;\n   this._timeout = 2000;\n   this._slow = 75;\n-  this.timedOut = false;\n   this._retries = -1;\n-  this._currentRetry = 0;\n-  this.pending = false;\n+  this.reset();\n }\n \n /**\n  * Inherit from `EventEmitter.prototype`.\n  */\n utils.inherits(Runnable, EventEmitter);\n \n+/**\n+ * Resets the state initially or for a next run.\n+ */\n+Runnable.prototype.reset = function() {\n+  this.timedOut = false;\n+  this._currentRetry = 0;\n+  this.pending = false;\n+  delete this.state;\n+  delete this.err;\n+};\n+\n /**\n  * Get current timeout value in msecs.\n  *"
      },
      {
        "sha": "d87c41820d8e9e591a05f81359e491187c2c402e",
        "filename": "lib/runner.js",
        "status": "modified",
        "additions": 75,
        "deletions": 13,
        "changes": 88,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Frunner.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Frunner.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Frunner.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -121,18 +121,30 @@ module.exports = Runner;\n  * @extends external:EventEmitter\n  * @public\n  * @class\n- * @param {Suite} suite Root suite\n- * @param {boolean} [delay] Whether to delay execution of root suite until ready.\n+ * @param {Suite} suite - Root suite\n+ * @param {Object|boolean} [opts] - Options. If `boolean`, whether or not to delay execution of root suite until ready (for backwards compatibility).\n+ * @param {boolean} [opts.delay] - Whether to delay execution of root suite until ready.\n+ * @param {boolean} [opts.cleanReferencesAfterRun] - Whether to clean references to test fns and hooks when a suite is done.\n  */\n-function Runner(suite, delay) {\n+function Runner(suite, opts) {\n+  if (opts === undefined) {\n+    opts = {};\n+  }\n+  if (typeof opts === 'boolean') {\n+    this._delay = opts;\n+    opts = {};\n+  } else {\n+    this._delay = opts.delay;\n+  }\n   var self = this;\n   this._globals = [];\n   this._abort = false;\n-  this._delay = delay;\n   this.suite = suite;\n   this.started = false;\n+  this._opts = opts;\n   this.total = suite.total();\n   this.failures = 0;\n+  this._eventListeners = [];\n   this.on(constants.EVENT_TEST_END, function(test) {\n     if (test.type === 'test' && test.retriedTest() && test.parent) {\n       var idx =\n@@ -162,6 +174,53 @@ Runner.immediately = global.setImmediate || process.nextTick;\n  */\n inherits(Runner, EventEmitter);\n \n+/**\n+ * Replacement for `target.on(eventName, listener)` that does bookkeeping to remove them when this runner instance is disposed.\n+ * @param target {EventEmitter}\n+ * @param eventName {string}\n+ * @param fn {function}\n+ */\n+Runner.prototype._addEventListener = function(target, eventName, listener) {\n+  target.on(eventName, listener);\n+  this._eventListeners.push([target, eventName, listener]);\n+};\n+\n+/**\n+ * Replacement for `target.removeListener(eventName, listener)` that also updates the bookkeeping.\n+ * @param target {EventEmitter}\n+ * @param eventName {string}\n+ * @param fn {function}\n+ */\n+Runner.prototype._removeEventListener = function(target, eventName, listener) {\n+  var eventListenerIndex = this._eventListeners.findIndex(function(\n+    eventListenerDescriptor\n+  ) {\n+    return (\n+      eventListenerDescriptor[0] === target &&\n+      eventListenerDescriptor[1] === eventName &&\n+      eventListenerDescriptor[2] === listener\n+    );\n+  });\n+  if (eventListenerIndex !== -1) {\n+    var removedListener = this._eventListeners.splice(eventListenerIndex, 1)[0];\n+    removedListener[0].removeListener(removedListener[1], removedListener[2]);\n+  }\n+};\n+\n+/**\n+ * Removes all event handlers set during a run on this instance.\n+ * Remark: this does _not_ clean/dispose the tests or suites themselves.\n+ */\n+Runner.prototype.dispose = function() {\n+  this.removeAllListeners();\n+  this._eventListeners.forEach(function(eventListenerDescriptor) {\n+    eventListenerDescriptor[0].removeListener(\n+      eventListenerDescriptor[1],\n+      eventListenerDescriptor[2]\n+    );\n+  });\n+};\n+\n /**\n  * Run tests with full titles matching `re`. Updates runner.total\n  * with number of tests matched.\n@@ -378,7 +437,7 @@ Runner.prototype.hook = function(name, fn) {\n     self.emit(constants.EVENT_HOOK_BEGIN, hook);\n \n     if (!hook.listeners('error').length) {\n-      hook.on('error', function(err) {\n+      self._addEventListener(hook, 'error', function(err) {\n         self.failHook(hook, err);\n       });\n     }\n@@ -530,7 +589,7 @@ Runner.prototype.runTest = function(fn) {\n   if (this.asyncOnly) {\n     test.asyncOnly = true;\n   }\n-  test.on('error', function(err) {\n+  this._addEventListener(test, 'error', function(err) {\n     self.fail(test, err);\n   });\n   if (this.allowUncaught) {\n@@ -920,21 +979,24 @@ Runner.prototype.run = function(fn) {\n   }\n \n   // references cleanup to avoid memory leaks\n-  this.on(constants.EVENT_SUITE_END, function(suite) {\n-    suite.cleanReferences();\n-  });\n+  if (this._opts.cleanReferencesAfterRun) {\n+    this.on(constants.EVENT_SUITE_END, function(suite) {\n+      suite.cleanReferences();\n+    });\n+  }\n \n   // callback\n   this.on(constants.EVENT_RUN_END, function() {\n-    process.removeListener('uncaughtException', uncaught);\n-    process.on('uncaughtException', self.uncaughtEnd);\n+    debug(constants.EVENT_RUN_END);\n+    self._removeEventListener(process, 'uncaughtException', uncaught);\n+    self._addEventListener(process, 'uncaughtException', self.uncaughtEnd);\n     debug('run(): emitted %s', constants.EVENT_RUN_END);\n     fn(self.failures);\n   });\n \n   // uncaught exception\n-  process.removeListener('uncaughtException', self.uncaughtEnd);\n-  process.on('uncaughtException', uncaught);\n+  self._removeEventListener(process, 'uncaughtException', self.uncaughtEnd);\n+  self._addEventListener(process, 'uncaughtException', uncaught);\n \n   if (this._delay) {\n     // for reporters, I guess."
      },
      {
        "sha": "dc42fd74fd8546fdd6c8670916340e48e47de5b2",
        "filename": "lib/suite.js",
        "status": "modified",
        "additions": 29,
        "deletions": 3,
        "changes": 32,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Fsuite.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Fsuite.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fsuite.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -61,19 +61,19 @@ function Suite(title, parentContext, isRoot) {\n   this.ctx = new Context();\n   this.suites = [];\n   this.tests = [];\n+  this.root = isRoot === true;\n   this.pending = false;\n+  this._retries = -1;\n   this._beforeEach = [];\n   this._beforeAll = [];\n   this._afterEach = [];\n   this._afterAll = [];\n-  this.root = isRoot === true;\n   this._timeout = 2000;\n   this._slow = 75;\n   this._bail = false;\n-  this._retries = -1;\n   this._onlyTests = [];\n   this._onlySuites = [];\n-  this.delayed = false;\n+  this.reset();\n \n   this.on('newListener', function(event) {\n     if (deprecatedEvents[event]) {\n@@ -91,6 +91,22 @@ function Suite(title, parentContext, isRoot) {\n  */\n inherits(Suite, EventEmitter);\n \n+/**\n+ * Resets the state initially or for a next run.\n+ */\n+Suite.prototype.reset = function() {\n+  this.delayed = false;\n+  function doReset(thingToReset) {\n+    thingToReset.reset();\n+  }\n+  this.suites.forEach(doReset);\n+  this.tests.forEach(doReset);\n+  this._beforeEach.forEach(doReset);\n+  this._afterEach.forEach(doReset);\n+  this._beforeAll.forEach(doReset);\n+  this._afterAll.forEach(doReset);\n+};\n+\n /**\n  * Return a clone of this `Suite`.\n  *\n@@ -493,6 +509,16 @@ Suite.prototype.getHooks = function getHooks(name) {\n   return this['_' + name];\n };\n \n+/**\n+ * cleans all references from this suite and all child suites.\n+ */\n+Suite.prototype.dispose = function() {\n+  this.suites.forEach(function(suite) {\n+    suite.dispose();\n+  });\n+  this.cleanReferences();\n+};\n+\n /**\n  * Cleans up the references to all the deferred functions\n  * (before/after/beforeEach/afterEach) and tests of a Suite."
      },
      {
        "sha": "187fe49767e068172d39a11463b900e540d6d568",
        "filename": "lib/test.js",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Ftest.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/lib%2Ftest.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Ftest.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -26,16 +26,25 @@ function Test(title, fn) {\n       'string'\n     );\n   }\n-  Runnable.call(this, title, fn);\n-  this.pending = !fn;\n   this.type = 'test';\n+  Runnable.call(this, title, fn);\n+  this.reset();\n }\n \n /**\n  * Inherit from `Runnable.prototype`.\n  */\n utils.inherits(Test, Runnable);\n \n+/**\n+ * Resets the state initially or for a next run.\n+ */\n+Test.prototype.reset = function() {\n+  Runnable.prototype.reset.call(this);\n+  this.pending = !this.fn;\n+  delete this.state;\n+};\n+\n /**\n  * Set or get retried test\n  *"
      },
      {
        "sha": "2f204a0b74364dcfc79f7c075b9e640a1434014a",
        "filename": "test/integration/fixtures/multiple-runs/clean-references.fixture.js",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fclean-references.fixture.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fclean-references.fixture.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fclean-references.fixture.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,6 @@\n+'use strict';\n+const Mocha = require('../../../../lib/mocha');\n+\n+const mocha = new Mocha({ reporter: 'json' });\n+mocha.cleanReferencesAfterRun(true);\n+require('./run-thrice-helper')(mocha);"
      },
      {
        "sha": "c0d3c4d7baceaaf0e9793cc1f8e6f24b11ee1829",
        "filename": "test/integration/fixtures/multiple-runs/dispose.fixture.js",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fdispose.fixture.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fdispose.fixture.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fdispose.fixture.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,6 @@\n+'use strict';\n+const Mocha = require('../../../../lib/mocha');\n+\n+const mocha = new Mocha({ reporter: 'json' });\n+mocha.dispose();\n+require('./run-thrice-helper')(mocha);"
      },
      {
        "sha": "903f661bf926a9885bcb258690470ff5c013e334",
        "filename": "test/integration/fixtures/multiple-runs/multiple-runs-with-different-output-suite.fixture.js",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fmultiple-runs-with-different-output-suite.fixture.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fmultiple-runs-with-different-output-suite.fixture.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fmultiple-runs-with-different-output-suite.fixture.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,19 @@\n+describe('Multiple runs', () => {\n+\n+  /**\n+   * Shared state! Bad practice, but nice for this test\n+   */\n+  let i = 0;\n+\n+  it('should skip, fail and pass respectively', function () {\n+    switch (i++) {\n+      case 0:\n+        this.skip();\n+      case 1:\n+        throw new Error('Expected error');\n+      default:\n+        // this is fine ☕\n+        break;\n+    }\n+  });\n+});"
      },
      {
        "sha": "7863fb223eb3da332f5246aca2815e345035ca7e",
        "filename": "test/integration/fixtures/multiple-runs/multiple-runs-with-flaky-before-each-suite.fixture.js",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fmultiple-runs-with-flaky-before-each-suite.fixture.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fmultiple-runs-with-flaky-before-each-suite.fixture.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fmultiple-runs-with-flaky-before-each-suite.fixture.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,18 @@\n+describe('Multiple runs', () => {\n+\n+  /**\n+   * Shared state! Bad practice, but nice for this test\n+   */\n+  let i = 0;\n+\n+  beforeEach(function () {\n+    if (i++ === 0) {\n+      throw new Error('Expected error for this test');\n+    }\n+  });\n+\n+\n+  it('should be a dummy test', function () {\n+    // this is fine ☕\n+  });\n+});"
      },
      {
        "sha": "1a4707705f1b892f9dad2a669fc9887efaaa73a2",
        "filename": "test/integration/fixtures/multiple-runs/multiple-runs-with-flaky-before-each.fixture.js",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fmultiple-runs-with-flaky-before-each.fixture.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fmultiple-runs-with-flaky-before-each.fixture.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fmultiple-runs-with-flaky-before-each.fixture.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,13 @@\n+'use strict';\n+const Mocha = require('../../../../lib/mocha');\n+\n+const mocha = new Mocha({ reporter: 'json' });\n+mocha.cleanReferencesAfterRun(false);\n+mocha.addFile(require.resolve('./multiple-runs-with-flaky-before-each-suite.fixture.js'));\n+console.log('[');\n+mocha.run(() => {\n+  console.log(',');\n+  mocha.run(() => {\n+    console.log(']');\n+  });\n+});"
      },
      {
        "sha": "58f2c9de5e0c05400c0a227a113193629971ecf5",
        "filename": "test/integration/fixtures/multiple-runs/run-thrice-helper.js",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Frun-thrice-helper.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Frun-thrice-helper.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Frun-thrice-helper.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,24 @@\n+module.exports = function (mocha) {\n+  mocha.addFile(require.resolve('./multiple-runs-with-different-output-suite.fixture.js'));\n+  console.log('[');\n+  try {\n+    mocha.run(() => {\n+      console.log(',');\n+      try {\n+        mocha.run(() => {\n+          console.log(',');\n+          mocha.run(() => {\n+            console.log(']');\n+          });\n+        });\n+      } catch (err) {\n+        console.error(err.code);\n+        throw err;\n+      }\n+    });\n+  } catch (err) {\n+    console.error(err.code);\n+    throw err;\n+  }\n+\n+}"
      },
      {
        "sha": "3c63ec372590d1c1fbfa4c1403062c0b893e5bdb",
        "filename": "test/integration/fixtures/multiple-runs/run-thrice.fixture.js",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Frun-thrice.fixture.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Frun-thrice.fixture.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Frun-thrice.fixture.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,6 @@\n+'use strict';\n+const Mocha = require('../../../../lib/mocha');\n+\n+const mocha = new Mocha({ reporter: 'json' });\n+mocha.cleanReferencesAfterRun(false);\n+require('./run-thrice-helper')(mocha);"
      },
      {
        "sha": "a8ecaf76e57a9c7921abd1ad7645db8acc175a3a",
        "filename": "test/integration/fixtures/multiple-runs/start-second-run-if-previous-is-still-running-suite.fixture.js",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fstart-second-run-if-previous-is-still-running-suite.fixture.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fstart-second-run-if-previous-is-still-running-suite.fixture.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fstart-second-run-if-previous-is-still-running-suite.fixture.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,5 @@\n+describe('slow suite', () => {\n+  it('should be slow', (done) => {\n+    setTimeout(200, done);\n+  });\n+});"
      },
      {
        "sha": "1b031334b1f853a70a9e0e4eeac56bf3389dda35",
        "filename": "test/integration/fixtures/multiple-runs/start-second-run-if-previous-is-still-running.fixture.js",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fstart-second-run-if-previous-is-still-running.fixture.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fstart-second-run-if-previous-is-still-running.fixture.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Ffixtures%2Fmultiple-runs%2Fstart-second-run-if-previous-is-still-running.fixture.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,12 @@\n+'use strict';\n+const Mocha = require('../../../../lib/mocha');\n+\n+const mocha = new Mocha({ reporter: 'json' });\n+mocha.addFile(require.resolve('./start-second-run-if-previous-is-still-running-suite.fixture.js'));\n+mocha.run();\n+try {\n+  mocha.run();\n+} catch (err) {\n+  console.error(err.code);\n+}\n+"
      },
      {
        "sha": "61d672d4b277fb94c31922c0a4cea4ccbe6bb78e",
        "filename": "test/integration/multiple-runs.spec.js",
        "status": "added",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Fmultiple-runs.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Fintegration%2Fmultiple-runs.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Fintegration%2Fmultiple-runs.spec.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,89 @@\n+'use strict';\n+\n+var invokeNode = require('./helpers').invokeNode;\n+\n+describe('multiple runs', function(done) {\n+  it('should be allowed to run multiple times if cleanReferences is turned off', function(done) {\n+    var path = require.resolve(\n+      './fixtures/multiple-runs/run-thrice.fixture.js'\n+    );\n+    invokeNode([path], function(err, res) {\n+      expect(err, 'to be null');\n+      expect(res.code, 'to be', 0);\n+      var results = JSON.parse(res.output);\n+      expect(results, 'to have length', 3);\n+      expect(results[0].pending, 'to have length', 1);\n+      expect(results[0].failures, 'to have length', 0);\n+      expect(results[0].passes, 'to have length', 0);\n+      expect(results[1].pending, 'to have length', 0);\n+      expect(results[1].failures, 'to have length', 1);\n+      expect(results[1].passes, 'to have length', 0);\n+      expect(results[2].pending, 'to have length', 0);\n+      expect(results[2].failures, 'to have length', 0);\n+      expect(results[2].passes, 'to have length', 1);\n+      done();\n+    });\n+  });\n+\n+  it('should not be allowed if cleanReferences is true', function(done) {\n+    var path = require.resolve(\n+      './fixtures/multiple-runs/clean-references.fixture.js'\n+    );\n+    invokeNode(\n+      [path],\n+      function(err, res) {\n+        expect(err, 'to be null');\n+        expect(res.code, 'not to be', 0);\n+        expect(res.output, 'to contain', 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED');\n+        done();\n+      },\n+      {stdio: ['ignore', 'pipe', 'pipe']}\n+    );\n+  });\n+\n+  it('should not be allowed if the instance is disposed', function(done) {\n+    var path = require.resolve('./fixtures/multiple-runs/dispose.fixture.js');\n+    invokeNode(\n+      [path, '--directly-dispose'],\n+      function(err, res) {\n+        expect(err, 'to be null');\n+        expect(res.code, 'not to be', 0);\n+        expect(res.output, 'to contain', 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED');\n+        done();\n+      },\n+      {stdio: ['ignore', 'pipe', 'pipe']}\n+    );\n+  });\n+\n+  it('should not be allowed to run while a previous run is in progress', function(done) {\n+    var path = require.resolve(\n+      './fixtures/multiple-runs/start-second-run-if-previous-is-still-running.fixture'\n+    );\n+    invokeNode(\n+      [path],\n+      function(err, res) {\n+        expect(err, 'to be null');\n+        expect(res.output, 'to contain', 'ERR_MOCHA_INSTANCE_ALREADY_RUNNING');\n+        done();\n+      },\n+      {stdio: ['ignore', 'pipe', 'pipe']}\n+    );\n+  });\n+\n+  it('should reset the hooks between runs', function(done) {\n+    var path = require.resolve(\n+      './fixtures/multiple-runs/multiple-runs-with-flaky-before-each.fixture'\n+    );\n+    invokeNode([path], function(err, res) {\n+      expect(err, 'to be null');\n+      expect(res.code, 'to be', 0);\n+      var results = JSON.parse(res.output);\n+      expect(results, 'to have length', 2);\n+      expect(results[0].failures, 'to have length', 1);\n+      expect(results[0].passes, 'to have length', 0);\n+      expect(results[1].passes, 'to have length', 1);\n+      expect(results[1].failures, 'to have length', 0);\n+      done();\n+    });\n+  });\n+});"
      },
      {
        "sha": "b02a6c5120530a5927887a17033b8e51e8c27c2c",
        "filename": "test/unit/hook.spec.js",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Fhook.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Fhook.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Funit%2Fhook.spec.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -0,0 +1,44 @@\n+'use strict';\n+var sinon = require('sinon');\n+var Mocha = require('../../lib/mocha');\n+var Hook = Mocha.Hook;\n+var Runnable = Mocha.Runnable;\n+\n+describe(Hook.name, function() {\n+  var hook;\n+\n+  beforeEach(function() {\n+    hook = new Hook('Some hook', function() {});\n+  });\n+\n+  afterEach(function() {\n+    sinon.restore();\n+  });\n+\n+  describe('error', function() {\n+    it('should set the hook._error', function() {\n+      var expectedError = new Error('Expected error');\n+      hook.error(expectedError);\n+      expect(hook._error, 'to be', expectedError);\n+    });\n+    it('should get the hook._error when called without arguments', function() {\n+      var expectedError = new Error('Expected error');\n+      hook._error = expectedError;\n+      expect(hook.error(), 'to be', expectedError);\n+    });\n+  });\n+\n+  describe('reset', function() {\n+    it('should call Runnable.reset', function() {\n+      var runnableResetStub = sinon.stub(Runnable.prototype, 'reset');\n+      hook.reset();\n+      expect(runnableResetStub, 'was called once');\n+    });\n+\n+    it('should reset the error state', function() {\n+      hook.error(new Error('Expected error for test'));\n+      hook.reset();\n+      expect(hook.error(), 'to be undefined');\n+    });\n+  });\n+});"
      },
      {
        "sha": "c676d5f96bffda08ea47fbb2cdcfe2f1887c2625",
        "filename": "test/unit/mocha.spec.js",
        "status": "modified",
        "additions": 167,
        "deletions": 0,
        "changes": 167,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Fmocha.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Fmocha.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Funit%2Fmocha.spec.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -22,6 +22,10 @@ describe('Mocha', function() {\n       sandbox.stub(Mocha.prototype, 'global').returnsThis();\n     });\n \n+    it('should set _cleanReferencesAfterRun to true', function() {\n+      expect(new Mocha()._cleanReferencesAfterRun, 'to be', true);\n+    });\n+\n     describe('when \"options.timeout\" is `undefined`', function() {\n       it('should not attempt to set timeout', function() {\n         // eslint-disable-next-line no-new\n@@ -127,6 +131,25 @@ describe('Mocha', function() {\n     });\n   });\n \n+  describe('#cleanReferencesAfterRun()', function() {\n+    it('should set the _cleanReferencesAfterRun attribute', function() {\n+      var mocha = new Mocha(opts);\n+      mocha.cleanReferencesAfterRun();\n+      expect(mocha._cleanReferencesAfterRun, 'to be', true);\n+    });\n+\n+    it('should set the _cleanReferencesAfterRun attribute to false', function() {\n+      var mocha = new Mocha(opts);\n+      mocha.cleanReferencesAfterRun(false);\n+      expect(mocha._cleanReferencesAfterRun, 'to be', false);\n+    });\n+\n+    it('should be chainable', function() {\n+      var mocha = new Mocha(opts);\n+      expect(mocha.cleanReferencesAfterRun(), 'to be', mocha);\n+    });\n+  });\n+\n   describe('#color()', function() {\n     it('should set the color option to true', function() {\n       var mocha = new Mocha(opts);\n@@ -178,6 +201,32 @@ describe('Mocha', function() {\n     });\n   });\n \n+  describe('#dispose()', function() {\n+    it('should dispose the root suite', function() {\n+      var mocha = new Mocha(opts);\n+      var disposeStub = sandbox.stub(mocha.suite, 'dispose');\n+      mocha.dispose();\n+      expect(disposeStub, 'was called once');\n+    });\n+\n+    it('should dispose previous test runner', function() {\n+      var mocha = new Mocha(opts);\n+      var runStub = sandbox.stub(Mocha.Runner.prototype, 'run');\n+      var disposeStub = sandbox.stub(Mocha.Runner.prototype, 'dispose');\n+      mocha.run();\n+      runStub.callArg(0);\n+      mocha.dispose();\n+      expect(disposeStub, 'was called once');\n+    });\n+\n+    it('should unload the files', function() {\n+      var mocha = new Mocha(opts);\n+      var unloadFilesStub = sandbox.stub(mocha, 'unloadFiles');\n+      mocha.dispose();\n+      expect(unloadFilesStub, 'was called once');\n+    });\n+  });\n+\n   describe('#forbidOnly()', function() {\n     it('should set the forbidOnly option to true', function() {\n       var mocha = new Mocha(opts);\n@@ -434,6 +483,99 @@ describe('Mocha', function() {\n       mocha.run().on('end', done);\n     });\n \n+    it('should throw if a run is in progress', function() {\n+      var mocha = new Mocha(opts);\n+      var runStub = sandbox.stub(Mocha.Runner.prototype, 'run');\n+      mocha.run();\n+      expect(\n+        function() {\n+          mocha.run();\n+        },\n+        'to throw',\n+        {\n+          message:\n+            'Mocha instance is currently running tests, cannot start a next test run until this one is done',\n+          code: 'ERR_MOCHA_INSTANCE_ALREADY_RUNNING',\n+          instance: mocha\n+        }\n+      );\n+      expect(runStub, 'was called once');\n+    });\n+\n+    it('should throw the instance is already disposed', function() {\n+      var mocha = new Mocha(opts);\n+      var runStub = sandbox.stub(Mocha.Runner.prototype, 'run');\n+      mocha.dispose();\n+      expect(\n+        function() {\n+          mocha.run();\n+        },\n+        'to throw',\n+        {\n+          message:\n+            'Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.',\n+          code: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED',\n+          cleanReferencesAfterRun: true,\n+          instance: mocha\n+        }\n+      );\n+      expect(runStub, 'was called times', 0);\n+    });\n+\n+    it('should throw if a run for a second time', function() {\n+      var mocha = new Mocha(opts);\n+      var runStub = sandbox.stub(Mocha.Runner.prototype, 'run');\n+      mocha.run();\n+      runStub.callArg(0);\n+      expect(\n+        function() {\n+          mocha.run();\n+        },\n+        'to throw',\n+        {\n+          message:\n+            'Mocha instance is already disposed, cannot start a new test run. Please create a new mocha instance. Be sure to set disable `cleanReferencesAfterRun` when you want to reuse the same mocha instance for multiple test runs.',\n+          code: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED',\n+          instance: mocha\n+        }\n+      );\n+      expect(runStub, 'was called once');\n+    });\n+\n+    it('should allow multiple runs if `cleanReferencesAfterRun` is disabled', function() {\n+      var mocha = new Mocha(opts);\n+      var runStub = sandbox.stub(Mocha.Runner.prototype, 'run');\n+      mocha.cleanReferencesAfterRun(false);\n+      mocha.run();\n+      runStub.callArg(0);\n+      mocha.run();\n+      runStub.callArg(0);\n+      expect(runStub, 'called times', 2);\n+    });\n+\n+    it('should reset between runs', function() {\n+      var mocha = new Mocha(opts);\n+      var runStub = sandbox.stub(Mocha.Runner.prototype, 'run');\n+      var resetStub = sandbox.stub(Mocha.Suite.prototype, 'reset');\n+      mocha.cleanReferencesAfterRun(false);\n+      mocha.run();\n+      runStub.callArg(0);\n+      mocha.run();\n+      expect(resetStub, 'was called once');\n+    });\n+\n+    it('should dispose the previous runner when the next run starts', function() {\n+      var mocha = new Mocha(opts);\n+      var runStub = sandbox.stub(Mocha.Runner.prototype, 'run');\n+      var disposeStub = sandbox.stub(Mocha.Runner.prototype, 'dispose');\n+      mocha.cleanReferencesAfterRun(false);\n+      mocha.run();\n+      runStub.callArg(0);\n+      expect(disposeStub, 'was not called');\n+      mocha.run();\n+      expect(disposeStub, 'was called once');\n+    });\n+\n     describe('#reporter(\"xunit\")#run(fn)', function() {\n       // :TBD: Why does specifying reporter differentiate this test from preceding one\n       it('should not raise errors if callback was not provided', function() {\n@@ -449,4 +591,29 @@ describe('Mocha', function() {\n       });\n     });\n   });\n+\n+  describe('#unloadFiles()', function() {\n+    it('should reset referencesCleaned and allow for next run', function() {\n+      var mocha = new Mocha(opts);\n+      var runStub = sandbox.stub(Mocha.Runner.prototype, 'run');\n+      mocha.run();\n+      runStub.callArg(0);\n+      mocha.unloadFiles();\n+      expect(function() {\n+        mocha.run();\n+      }, 'not to throw');\n+    });\n+\n+    it('should not be allowed when the current instance is already disposed', function() {\n+      var mocha = new Mocha(opts);\n+      mocha.dispose();\n+      expect(\n+        function() {\n+          mocha.unloadFiles();\n+        },\n+        'to throw',\n+        'Mocha instance is already disposed, it cannot be used again.'\n+      );\n+    });\n+  });\n });"
      },
      {
        "sha": "bdd2dc145efe3a4dc69385b389803ba823452864",
        "filename": "test/unit/runnable.spec.js",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Frunnable.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Frunnable.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Funit%2Frunnable.spec.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -127,6 +127,29 @@ describe('Runnable(title, fn)', function() {\n     });\n   });\n \n+  describe('#reset', function() {\n+    var run;\n+\n+    beforeEach(function() {\n+      run = new Runnable();\n+    });\n+\n+    it('should reset current run state', function() {\n+      run.timedOut = true;\n+      run._currentRetry = 5;\n+      run.pending = true;\n+      run.err = new Error();\n+      run.state = 'error';\n+\n+      run.reset();\n+      expect(run.timedOut, 'to be false');\n+      expect(run._currentRetry, 'to be', 0);\n+      expect(run.pending, 'to be false');\n+      expect(run.err, 'to be undefined');\n+      expect(run.state, 'to be undefined');\n+    });\n+  });\n+\n   describe('.title', function() {\n     it('should be present', function() {\n       expect(new Runnable('foo').title, 'to be', 'foo');"
      },
      {
        "sha": "d36d0f2f1f107d99074fbc710cff252bae3fe4d6",
        "filename": "test/unit/runner.spec.js",
        "status": "modified",
        "additions": 59,
        "deletions": 2,
        "changes": 61,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Frunner.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Frunner.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Funit%2Frunner.spec.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -15,6 +15,7 @@ var EVENT_TEST_FAIL = Runner.constants.EVENT_TEST_FAIL;\n var EVENT_TEST_RETRY = Runner.constants.EVENT_TEST_RETRY;\n var EVENT_TEST_END = Runner.constants.EVENT_TEST_END;\n var EVENT_RUN_END = Runner.constants.EVENT_RUN_END;\n+var EVENT_SUITE_END = Runner.constants.EVENT_SUITE_END;\n var STATE_FAILED = Runnable.constants.STATE_FAILED;\n \n describe('Runner', function() {\n@@ -24,7 +25,7 @@ describe('Runner', function() {\n \n   beforeEach(function() {\n     suite = new Suite('Suite', 'root');\n-    runner = new Runner(suite);\n+    runner = new Runner(suite, {cleanReferencesAfterRun: true});\n     runner.checkLeaks = true;\n     sandbox = sinon.createSandbox();\n   });\n@@ -456,13 +457,69 @@ describe('Runner', function() {\n         done();\n       });\n     });\n-\n     // karma-mocha is inexplicably doing this with a Hook\n     it('should not throw an exception if something emits EVENT_TEST_END with a non-Test object', function() {\n       expect(function() {\n         runner.emit(EVENT_TEST_END, {});\n       }, 'not to throw');\n     });\n+\n+    it('should clean references after a run', function() {\n+      runner = new Runner(suite, {delay: false, cleanReferencesAfterRun: true});\n+      var cleanReferencesStub = sandbox.stub(suite, 'cleanReferences');\n+      runner.run();\n+      runner.emit(EVENT_SUITE_END, suite);\n+      expect(cleanReferencesStub, 'was called once');\n+    });\n+\n+    it('should not clean references after a run when `cleanReferencesAfterRun` is `false`', function() {\n+      runner = new Runner(suite, {\n+        delay: false,\n+        cleanReferencesAfterRun: false\n+      });\n+      var cleanReferencesStub = sandbox.stub(suite, 'cleanReferences');\n+      runner.run();\n+      runner.emit(EVENT_SUITE_END, suite);\n+      expect(cleanReferencesStub, 'was not called');\n+    });\n+  });\n+\n+  describe('.dispose', function() {\n+    it('should remove all listeners from itself', function() {\n+      runner.on('disposeShouldRemoveThis', noop);\n+      runner.dispose();\n+      expect(runner.listenerCount('disposeShouldRemoveThis'), 'to be', 0);\n+    });\n+\n+    it('should remove \"error\" listeners from a test', function() {\n+      var fn = sandbox.stub();\n+      runner.test = new Test('test for dispose', fn);\n+      runner.runTest(noop);\n+      // sanity check\n+      expect(runner.test.listenerCount('error'), 'to be', 1);\n+      runner.dispose();\n+      expect(runner.test.listenerCount('error'), 'to be', 0);\n+    });\n+\n+    it('should remove \"uncaughtException\" listeners from the process', function() {\n+      var normalUncaughtExceptionListenerCount = process.listenerCount(\n+        'uncaughtException'\n+      );\n+      sandbox.stub();\n+      runner.run(noop);\n+      // sanity check\n+      expect(\n+        process.listenerCount('uncaughtException'),\n+        'to be',\n+        normalUncaughtExceptionListenerCount + 1\n+      );\n+      runner.dispose();\n+      expect(\n+        process.listenerCount('uncaughtException'),\n+        'to be',\n+        normalUncaughtExceptionListenerCount\n+      );\n+    });\n   });\n \n   describe('.runTest(fn)', function() {"
      },
      {
        "sha": "a5063b7f91998e02fb0d7e997b29795c235a79b7",
        "filename": "test/unit/suite.spec.js",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Fsuite.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Fsuite.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Funit%2Fsuite.spec.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -80,6 +80,48 @@ describe('Suite', function() {\n     });\n   });\n \n+  describe('.reset()', function() {\n+    beforeEach(function() {\n+      this.suite = new Suite('Suite to be reset', function() {});\n+    });\n+\n+    it('should reset the `delayed` state', function() {\n+      this.suite.delayed = true;\n+      this.suite.reset();\n+      expect(this.suite.delayed, 'to be', false);\n+    });\n+\n+    it('should forward reset to suites and tests', function() {\n+      var childSuite = new Suite('child suite', this.suite.context);\n+      var test = new Test('test', function() {});\n+      this.suite.addSuite(childSuite);\n+      this.suite.addTest(test);\n+      var testResetStub = sandbox.stub(test, 'reset');\n+      var suiteResetStub = sandbox.stub(childSuite, 'reset');\n+      this.suite.reset();\n+      expect(testResetStub, 'was called once');\n+      expect(suiteResetStub, 'was called once');\n+    });\n+\n+    it('should forward reset to all hooks', function() {\n+      this.suite.beforeEach(function() {});\n+      this.suite.afterEach(function() {});\n+      this.suite.beforeAll(function() {});\n+      this.suite.afterAll(function() {});\n+      sinon.stub(this.suite.getHooks('beforeEach')[0], 'reset');\n+      sinon.stub(this.suite.getHooks('afterEach')[0], 'reset');\n+      sinon.stub(this.suite.getHooks('beforeAll')[0], 'reset');\n+      sinon.stub(this.suite.getHooks('afterAll')[0], 'reset');\n+\n+      this.suite.reset();\n+\n+      expect(this.suite.getHooks('beforeEach')[0].reset, 'was called once');\n+      expect(this.suite.getHooks('afterEach')[0].reset, 'was called once');\n+      expect(this.suite.getHooks('beforeAll')[0].reset, 'was called once');\n+      expect(this.suite.getHooks('afterAll')[0].reset, 'was called once');\n+    });\n+  });\n+\n   describe('.timeout()', function() {\n     beforeEach(function() {\n       this.suite = new Suite('A Suite');"
      },
      {
        "sha": "62a6d0667c4d8b0b3693e505c294a6604f83a28b",
        "filename": "test/unit/test.spec.js",
        "status": "modified",
        "additions": 33,
        "deletions": 1,
        "changes": 34,
        "blob_url": "https://github.com/mochajs/mocha/blob/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Ftest.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/3eb8ac1a615452f889ba03c54a41e96532f786d2/test%2Funit%2Ftest.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Funit%2Ftest.spec.js?ref=3eb8ac1a615452f889ba03c54a41e96532f786d2",
        "patch": "@@ -1,10 +1,24 @@\n 'use strict';\n \n+var sinon = require('sinon');\n var mocha = require('../../lib/mocha');\n var Test = mocha.Test;\n-var sinon = require('sinon');\n+var Runnable = mocha.Runnable;\n \n describe('Test', function() {\n+  /**\n+   * @type {sinon.SinonSandbox}\n+   */\n+  var sandbox;\n+\n+  beforeEach(function() {\n+    sandbox = sinon.createSandbox();\n+  });\n+\n+  afterEach(function() {\n+    sandbox.restore();\n+  });\n+\n   describe('.clone()', function() {\n     beforeEach(function() {\n       this._test = new Test('To be cloned', function() {});\n@@ -56,6 +70,24 @@ describe('Test', function() {\n     });\n   });\n \n+  describe('.reset()', function() {\n+    beforeEach(function() {\n+      this._test = new Test('Test to be reset', function() {});\n+    });\n+\n+    it('should reset the run state', function() {\n+      this._test.pending = true;\n+      this._test.reset();\n+      expect(this._test.pending, 'to be', false);\n+    });\n+\n+    it('should call Runnable.reset', function() {\n+      var runnableResetStub = sandbox.stub(Runnable.prototype, 'reset');\n+      this._test.reset();\n+      expect(runnableResetStub, 'was called once');\n+    });\n+  });\n+\n   describe('.isPending()', function() {\n     beforeEach(function() {\n       this._test = new Test('Is it skipped', function() {});"
      }
    ]
  },
  {
    "url": "https://api.github.com/repos/mochajs/mocha/issues/4245",
    "repository_url": "https://api.github.com/repos/mochajs/mocha",
    "labels_url": "https://api.github.com/repos/mochajs/mocha/issues/4245/labels{/name}",
    "comments_url": "https://api.github.com/repos/mochajs/mocha/issues/4245/comments",
    "events_url": "https://api.github.com/repos/mochajs/mocha/issues/4245/events",
    "html_url": "https://github.com/mochajs/mocha/pull/4245",
    "id": 604292174,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDA2OTE0MDkw",
    "number": 4245,
    "title": "add support for running tests in parallel",
    "user": {
      "login": "boneskull",
      "id": 924465,
      "node_id": "MDQ6VXNlcjkyNDQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boneskull",
      "html_url": "https://github.com/boneskull",
      "followers_url": "https://api.github.com/users/boneskull/followers",
      "following_url": "https://api.github.com/users/boneskull/following{/other_user}",
      "gists_url": "https://api.github.com/users/boneskull/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boneskull/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boneskull/subscriptions",
      "organizations_url": "https://api.github.com/users/boneskull/orgs",
      "repos_url": "https://api.github.com/users/boneskull/repos",
      "events_url": "https://api.github.com/users/boneskull/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boneskull/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 185748,
        "node_id": "MDU6TGFiZWwxODU3NDg=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/feature",
        "name": "feature",
        "color": "CC9264",
        "default": false,
        "description": "enhancement proposal"
      },
      {
        "id": 533082025,
        "node_id": "MDU6TGFiZWw1MzMwODIwMjU=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/semver-minor",
        "name": "semver-minor",
        "color": "fbca04",
        "default": false,
        "description": "implementation requires increase of \"minor\" version number; \"features\""
      },
      {
        "id": 810207725,
        "node_id": "MDU6TGFiZWw4MTAyMDc3MjU=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/node.js",
        "name": "node.js",
        "color": "75b406",
        "default": false,
        "description": "command-line-or-Node.js-specific"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "boneskull",
      "id": 924465,
      "node_id": "MDQ6VXNlcjkyNDQ2NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/924465?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/boneskull",
      "html_url": "https://github.com/boneskull",
      "followers_url": "https://api.github.com/users/boneskull/followers",
      "following_url": "https://api.github.com/users/boneskull/following{/other_user}",
      "gists_url": "https://api.github.com/users/boneskull/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/boneskull/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/boneskull/subscriptions",
      "organizations_url": "https://api.github.com/users/boneskull/orgs",
      "repos_url": "https://api.github.com/users/boneskull/repos",
      "events_url": "https://api.github.com/users/boneskull/events{/privacy}",
      "received_events_url": "https://api.github.com/users/boneskull/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "boneskull",
        "id": 924465,
        "node_id": "MDQ6VXNlcjkyNDQ2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/924465?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/boneskull",
        "html_url": "https://github.com/boneskull",
        "followers_url": "https://api.github.com/users/boneskull/followers",
        "following_url": "https://api.github.com/users/boneskull/following{/other_user}",
        "gists_url": "https://api.github.com/users/boneskull/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/boneskull/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/boneskull/subscriptions",
        "organizations_url": "https://api.github.com/users/boneskull/orgs",
        "repos_url": "https://api.github.com/users/boneskull/repos",
        "events_url": "https://api.github.com/users/boneskull/events{/privacy}",
        "received_events_url": "https://api.github.com/users/boneskull/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/mochajs/mocha/milestones/35",
      "html_url": "https://github.com/mochajs/mocha/milestone/35",
      "labels_url": "https://api.github.com/repos/mochajs/mocha/milestones/35/labels",
      "id": 4981046,
      "node_id": "MDk6TWlsZXN0b25lNDk4MTA0Ng==",
      "number": 35,
      "title": "v8.0.0",
      "description": "",
      "creator": {
        "login": "juergba",
        "id": 44573692,
        "node_id": "MDQ6VXNlcjQ0NTczNjky",
        "avatar_url": "https://avatars.githubusercontent.com/u/44573692?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/juergba",
        "html_url": "https://github.com/juergba",
        "followers_url": "https://api.github.com/users/juergba/followers",
        "following_url": "https://api.github.com/users/juergba/following{/other_user}",
        "gists_url": "https://api.github.com/users/juergba/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/juergba/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/juergba/subscriptions",
        "organizations_url": "https://api.github.com/users/juergba/orgs",
        "repos_url": "https://api.github.com/users/juergba/repos",
        "events_url": "https://api.github.com/users/juergba/events{/privacy}",
        "received_events_url": "https://api.github.com/users/juergba/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 23,
      "state": "closed",
      "created_at": "2020-01-07T08:28:16Z",
      "updated_at": "2020-06-12T19:58:41Z",
      "due_on": null,
      "closed_at": "2020-06-12T19:58:41Z"
    },
    "comments": 17,
    "created_at": "2020-04-21T21:17:53Z",
    "updated_at": "2020-06-10T21:45:01Z",
    "closed_at": "2020-06-01T21:19:39Z",
    "author_association": "MEMBER",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/mochajs/mocha/pulls/4245",
      "html_url": "https://github.com/mochajs/mocha/pull/4245",
      "diff_url": "https://github.com/mochajs/mocha/pull/4245.diff",
      "patch_url": "https://github.com/mochajs/mocha/pull/4245.patch",
      "merged_at": "2020-06-01T21:19:38Z"
    },
    "body": "> (this PR depends on most other PRs linked to #4198, so they should be merged first; documentation will be in another PR)\r\n\r\n## Summary\r\n\r\nThis PR adds support for running test files in parallel via `--parallel`.  For many cases, this should \"just work.\"\r\n\r\n## How It Works\r\n\r\nWhen the `--parallel` flag is supplied, Mocha will swap out the default `Runner` (`lib/runner.js`) for `BufferedRunner` (`lib/buffered-runner.js`).\r\n\r\n`BufferedRunner` _extends_ `Runner`.  `BufferedRunner#run()` is the main point of extension.  Instead of executing the tests in serial, it will create a pool of worker processes (not worker _threads_) based on the maximum job count (`--jobs`; defaults to `<number of CPU cores> - 1`).  Both `BufferedRunner` and the `worker` module consume the abstraction layer, [workerpool](https://npm.im/workerpool).\r\n\r\n`BufferedRunner#run()` does _not_ load the test files, unlike `Runner#run()`.  Instead, it has a list of test files, and puts these into an async queue.  The `EVENT_RUN_BEGIN` event is then emitted.  As files enter the queue, `BufferedRunner#run()` tells `workerpool` to execute the `run()` function of the pool.  `workerpool` then launches as many worker processes are needed--up to the maximum--and executes the `run()` function with a single filepath and any options for a `Mocha` instance.\r\n\r\nThe first time `lib/worker.js` is invoked, it will \"bootstrap\" itself, by handling `--require`'d modules and validating the UI.  Note that _reporter validation_ does not occur.  Once bootstrapped, it instantiate `Mocha`, add the single file, swap any reporter out for the `Buffered` reporter (`lib/reporters/buffered.js`) then execute `Mocha#run()`, which invokes `Runner#run()`.\r\n\r\nThe `Buffered` reporter listens for events emitting from the `Runner` instance, like a reporter usually does.  But instead of outputting to the console, it buffers the events in a queue.  Once the file has completed running, the queue is drained: the events collected are (trivially) serialized for transmission back to the main process.  `BufferedRunner#run()` receives the list of events, trivially _deserializes_ them, and re-emits the events to whatever the chosen reporter is (e.g., the `spec` reporter).  In this way, the reporters don't know that the tests were run in parallel.  Practically, the user will see reporter output in \"chunks\" instead of the \"stream\" of results they usually expect.  This method ensures that while the test files run in a nondeterministic order, the reporter output will be deterministic for any given test file.\r\n\r\nOnce the result (the queue of events) has been returned to the main process, the worker process stays open, but waits for further instruction.  If there are more files in `BufferedRunner#run()`'s queue, `workerpool` will instruct the worker to take the next file from the list, and so on, and so forth.  When all files have executed, the pool terminates, the `EVENT_RUN_END` event is emitted, and the reporter handles it.\r\n\r\n## Limitations & Caveats\r\n\r\n> (this section is pasted from the documentation with minimal edits)\r\n\r\n### Reporter Limitations\r\n\r\nDue to the nature of the following reporters, they cannot work when running tests in parallel:\r\n\r\n- `markdown`\r\n- `progress`\r\n- `json-stream`\r\n\r\nThese reporters expect Mocha to know _how many tests it plans to run_ before execution. This information is unavailable in parallel mode, as test files are loaded only when they are about to be run.\r\n\r\nIn serial mode, tests results will \"stream\" as they occur. In parallel mode, reporter output is _buffered_; reporting will occur after each file is completed. In practice, the reporter output will appear in \"chunks\" (but will otherwise be identical).\r\n\r\n### Order is Non-Deterministic\r\n\r\nIn parallel mode, we have no guarantees about the order in which test files will be run--or what process runs them--as it depends on the execution times of the test files.\r\n\r\nBecause of this, the following options _cannot be used_ in parallel mode:\r\n\r\n- `--file`\r\n- `--sort`\r\n- `--delay`\r\n\r\n### Test Duration Variability\r\n\r\nBecause running tests in parallel mode uses more system resources at once, the OS may take extra time to schedule and complete some operations. For this reason, test timeouts may need to be increased either globally or otherwise.\r\n\r\n### \"Bail\" is \"Best Effort\"\r\n\r\nWhen used with `--bail` (or `this.bail()`) to exit after the first failure, it's likely other tests will be running at the same time. Mocha must shut down its worker processes before exiting.\r\n\r\nLikewise, subprocesses may throw uncaught exceptions. When used with `--allow-uncaught`, Mocha will \"bubble\" this exception to the main process, but still must shut down its processes.\r\n\r\n### Root Hooks Are Not Global\r\n\r\n> _NOTE: This only applies to test files run parallel mode_.\r\n\r\nA root-level hook is a hook in a test file which is _not defined_ within a suite. An example using the `bdd` interface:\r\n\r\n```js\r\n// test/setup.js\r\nbeforeEach(function() {\r\n  doMySetup();\r\n});\r\n\r\nafterEach(function() {\r\n  doMyTeardown();\r\n});\r\n```\r\n\r\nWhen run (in the default \"serial\" mode) via `mocha --file \"./test/setup.js\" \"./test/**/*.spec.js\"`, `setup.js` will be executed _first_, and install the two hooks shown above for every test found in `./test/**/*.spec.js`.\r\n\r\n**When Mocha runs in parallel mode, test files do not share the same process.** Consequently, a root-level hook defined in test file _A_ won't be present in test file _B_.\r\n\r\nThere are a (minimum of) two workarounds for this:\r\n\r\n1. `require('./setup.js')` or `import './setup.js'` at the top of every test file. Best avoided for those averse to boilerplate.\r\n1. _Recommended_: Define root-level hooks in a required file, using the new (also as of VERSION) Root Hook Plugin system.\r\n\r\n### No Browser Support\r\n\r\nParallel mode is only available in Node.js.\r\n\r\n### Migration Checklist\r\n\r\nIf you find your tests don't work properly when run with `--parallel`, either shrug and move on, or use this handy-dandy checklist to get things working:\r\n\r\n- :white_check_mark: Ensure you are using a supported reporter.\r\n- :white_check_mark: Ensure you are not using other unsupported flags.\r\n- :white_check_mark: Double-check your config file; options set in config files will be merged with any command-line option.\r\n- :white_check_mark: Look for root-level hooks in your tests. Move them into a root hook plugin.\r\n- :white_check_mark: Do any assertion, mock, or other test libraries you're consuming use root hooks? They may need to be migrated for compatibility with parallel mode.\r\n- :white_check_mark: If tests are unexpectedly timing out, you may need to increase the default test timeout (via `--timeout`)\r\n- :white_check_mark: Ensure your tests do not depend on being run in a specific order.\r\n- :white_check_mark: Ensure your tests clean up after themselves; remove temp files, handles, sockets, etc. Don't try to share state or resources between test files.\r\n\r\n### Caveats About Testing in Parallel\r\n\r\nSome types of tests are _not_ so well-suited to run in parallel. For example, extremely timing-sensitive tests, or tests which make I/O requests to a limited pool of resources (such as opening ports, or automating browser windows, hitting a test DB, or remote server, etc.).\r\n\r\nFree-tier butt CI services may not provide a suitable multi-core container or VM for their build agents. Regarding expected performance gains in CI: your mileage may vary. It may help to use a conditional in a `.mocharc.js` to check for `process.env.CI`, and adjust the job count as appropriate.\r\n\r\nIt's unlikely (but not impossible) to see a performance gain from a job count _greater than_ the number of available CPU cores. That said, _play around with the job count_--there's no one-size-fits all, and the unique characteristics of your tests will determine the optimal number of jobs; it may even be that fewer is faster!\r\n\r\n## Changeset Notes\r\n\r\n- updated signal handling in `bin/mocha` to a) better work with Windows, and b) work properly with `--parallel` to avoid leaving zombie workers\r\n- docstrings in `lib/cli/collect-files.js`\r\n- refactors in `lib/cli/run-helpers.js` and `lib/cli/watch-run.js`.  We now have four methods:\r\n    - `watchRun()` - serial + watch\r\n    - `singleRun()` - serial\r\n    - `parallelWatchRun()` - parallel + watch\r\n    - `parallelRun()` - parallel\r\n- `lib/cli/run.js` and `lib/cli/run-option-metadata.js`: additions for new options and checks for incompatibility\r\n- add `lib/reporters/buffered.js` (`Buffered`); this reporter is _not_ re-exported in `Mocha.reporters`, since it should only be invoked internally.\r\n- tweak `landing` reporter to avoid referencing `Runner#total`, which is incompatible with parallel mode.  It didn't need to do so in the first place!\r\n- the `tap` reporter now outputs the plan at the _end_ instead of at the beginning (avoiding a call to `Runner#grepTotal()`, which is incompatible with parallel mode).  This is within spec, so should not be a breaking change.\r\n- add `lib/buffered-runner.js` (`BufferedRunner`); subclass of `Runner` which overrides the `run()` method.\r\n    - There's a little custom finite state machine in here.  didn't want to pull in a third-party module, but we should consider doing so if we use FSM's elsewhere.\r\n    - when `DEBUG=mocha:parallel*` is in the env, this module will output statistics about the worker pool every 5s\r\n    - the `run()` method looks a little weird because I wanted to use `async/await`, but the method it is overriding (`Runner#run`) is _not_ `async`\r\n    - traps `SIGINT` to gracefully terminate the pool\r\n    - pulls in [promise.allsettled](https://npm.im/promise.allsettled) polyfill to handle workers that may have rejected with uncaught exceptions\r\n    - \"bail\" support is best-effort.\r\n    - the `ABORTING` state is only for interruption via `SIGINT` or if `allowUncaught` is true and we get an uncaught exception\r\n- `Hook`, `Suite`, `Test`: add a `serialize()` method.  This pulls out the most relevant information about the object for transmission over IPC.  It's called by worker processes for each event received by its `Runner`; event arguments (e.g., `test` or `suite`) are serialized in this manner.  Note that this _limits what reporters have access to_, which may break compatibility with third-party reporters that may use information that is missing from the serialized object.  As those cases arise, we can add more information to the serialized objects (in some cases).  The `$$` convention tells the _deserializer_ to turn the property into a function which returns the passed value, e.g., `test.fullTitle()`.\r\n- `lib/mocha.js`:\r\n    - refactor `Mocha#reporter` for nicer parameter & variable names\r\n    - rename `loadAsync` to `lazyLoadFiles`, which is more descriptive, IMO.  It's a private property, so should not be a breaking change.\r\n    - Constructor will dynamically choose the appropriate `Runner`\r\n- `lib/runner.js`: `BufferedRunner` needs the options from `Mocha#options`, so I updated the parent method to define the parameter.  It is unused here.\r\n- add `lib/serializer.js`: on the worker process side, manages event queue serialization; manages deserialization of the event queue in the main process.\r\n    - I spent a long time trying to get this working.  We need to account for things like `Error` instances, with their stack traces, since those can be event arguments (e.g., `EVENT_TEST_FAIL` sends both a `Test` and the `Error`).  It's impossible to serialize circular (self-referential) objects, so we need to account for those as well.\r\n    - Not super happy with the deserialization algorithm, since it's recursive, but it shouldn't be too much of an issue because the serializer won't output circular structures.\r\n    - Attempted to avoid prototype pollution issues\r\n    - Much of this works by mutating objects, mostly because it can be more performant.  The code can be changed to be \"more immutable\", as that's likely to be easier to understand, if it doesn't impact performance too much.  We're serializing potentially very large arrays of stuff.\r\n    - The `__type` prop is a hint for the deserializer.  This convention allows us to re-expand plain objects back into `Error` instances, for example.  You can't send an `Error` instance over IPC!\r\n- add `lib/worker.js`:\r\n    - registers its `run()` function with `workerpool` to be called by main process\r\n    - if `DEBUG=mocha:parallel*` is set, will output information (on an interval) about long-running test files\r\n    - afaik the only way `run()` can reject is if `allowUncaught` is true or serialization fails\r\n    - any user-supplied `reporter` value is replaced with the `Buffered` reporter.  thus, reporters are not validated.\r\n    - the worker uses `Runner`, like usual.\r\n- tests:\r\n    - see `test/integration/options/parallel.spec.js` for the interesting stuff\r\n    - upgrade `unexpected` for \"to have readonly property\" assertion\r\n    - upgrade `unexpected-eventemitter` for support async function support\r\n    - integration test helpers allow Mocha's developers to use `--bail` and `--parallel`, but will default to `--no-bail` and `--no-parallel`.\r\n- etc:\r\n    - update `.eslintrc.yml` for new Node-only files\r\n    - increase default timeout to `1000` (also seen in another PR) and use `parallel` mode by default in `.mocharc.yml`\r\n    - run node unit tests _in serial_ as sort of a smoke test, as otherwise all our tests would be run in parallel\r\n    - karma, browserify: ignore files for parallel support\r\n    - force color output in CI. this is nice on travis, but ugly on appveyor.  either way, it's easier to read than having no color\r\n\r\nRef: #4198\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/mochajs/mocha/issues/4245/reactions",
      "total_count": 8,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 1,
      "eyes": 1
    },
    "timeline_url": "https://api.github.com/repos/mochajs/mocha/issues/4245/timeline",
    "performed_via_github_app": null,
    "state_reason": null,
    "score": 1,
    "files": [
      {
        "sha": "e185b9771183e174eea87e152b60346fbe85fa8e",
        "filename": ".eslintrc.yml",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/.eslintrc.yml",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/.eslintrc.yml",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/.eslintrc.yml?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -21,22 +21,22 @@ rules:\n       property: 'assign'\n overrides:\n   - files:\n-      - docs/js/**/*.js\n+      - 'docs/js/**/*.js'\n     env:\n       node: false\n   - files:\n-      - scripts/**/*.js\n-      - package-scripts.js\n-      - karma.conf.js\n-      - .wallaby.js\n-      - .eleventy.js\n-      - bin/*\n-      - lib/cli/**/*.js\n-      - test/node-unit/**/*.js\n-      - test/integration/options/watch.spec.js\n-      - test/integration/helpers.js\n-      - lib/growl.js\n-      - docs/_data/**/*.js\n+      - '.eleventy.js'\n+      - '.wallaby.js'\n+      - 'package-scripts.js'\n+      - 'karma.conf.js'\n+      - 'bin/*'\n+      - 'docs/_data/**/*.js'\n+      - 'lib/cli/**/*.js'\n+      - 'lib/nodejs/**/*.js'\n+      - 'scripts/**/*.js'\n+      - 'test/integration/helpers.js'\n+      - 'test/integration/options/watch.spec.js'\n+      - 'test/node-unit/**/*.js'\n     parserOptions:\n       ecmaVersion: 2018\n     env:"
      },
      {
        "sha": "b458eb5423a0c3787df756289dcffc0662c451e1",
        "filename": ".mocharc.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/.mocharc.yml",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/.mocharc.yml",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/.mocharc.yml?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -5,6 +5,7 @@ global:\n   - 'okGlobalC'\n   - 'callback*'\n timeout: 1000\n+parallel: true\n watch-ignore:\n   - '.*'\n   - 'docs/_dist/**'"
      },
      {
        "sha": "cbc2ce6722565d1971ff9183e1f593c4584f05ca",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/.travis.yml",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/.travis.yml",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/.travis.yml?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -39,7 +39,8 @@ jobs:\n     - script: COVERAGE=1 npm start test.node\n       after_success: npm start coveralls\n       name: 'Latest Node.js (with coverage)'\n-\n+    - script: MOCHA_PARALLEL=0 npm start test.node.unit\n+      name: 'Latest Node.js (unit tests in serial mode)'\n     - &node\n       script: npm start test.node\n       node_js: '13'\n@@ -95,6 +96,9 @@ jobs:\n       script: true\n       name: 'Prime cache'\n \n+env:\n+  - 'NODE_OPTIONS=\"--trace-warnings\"'\n+\n notifications:\n   email: false\n   webhooks:"
      },
      {
        "sha": "d19d71ffccc14203019974778850ca54739c48e0",
        "filename": "bin/mocha",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/bin%2Fmocha",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/bin%2Fmocha",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/bin%2Fmocha?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -130,8 +130,23 @@ if (Object.keys(nodeArgs).length) {\n \n   // terminate children.\n   process.on('SIGINT', () => {\n-    proc.kill('SIGINT'); // calls runner.abort()\n-    proc.kill('SIGTERM'); // if that didn't work, we're probably in an infinite loop, so make it die.\n+    // XXX: a previous comment said this would abort the runner, but I can't see that it does\n+    // anything with the default runner.\n+    debug('main process caught SIGINT');\n+    proc.kill('SIGINT');\n+    // if running in parallel mode, we will have a proper SIGINT handler, so the below won't\n+    // be needed.\n+    if (!args.parallel || args.jobs < 2) {\n+      // win32 does not support SIGTERM, so use next best thing.\n+      if (require('os').platform() === 'win32') {\n+        proc.kill('SIGKILL');\n+      } else {\n+        // using SIGKILL won't cleanly close the output streams, which can result\n+        // in cut-off text or a befouled terminal.\n+        debug('sending SIGTERM to child process');\n+        proc.kill('SIGTERM');\n+      }\n+    }\n   });\n } else {\n   debug('running Mocha in-process');"
      },
      {
        "sha": "a414236e3ddb850471bf8aa77cebff6903896300",
        "filename": "karma.conf.js",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/karma.conf.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/karma.conf.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/karma.conf.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -30,13 +30,18 @@ module.exports = config => {\n     browserify: {\n       debug: true,\n       configure: function configure(b) {\n-        b.ignore('./lib/cli/*.js')\n-          .ignore('chokidar')\n+        b.ignore('chokidar')\n           .ignore('fs')\n           .ignore('glob')\n-          .ignore('./lib/esm-utils.js')\n           .ignore('path')\n           .ignore('supports-color')\n+          .ignore('./lib/esm-utils.js')\n+          .ignore('./lib/cli/*.js')\n+          .ignore('./lib/nodejs/serializer.js')\n+          .ignore('./lib/nodejs/worker.js')\n+          .ignore('./lib/nodejs/buffered-worker-pool.js')\n+          .ignore('./lib/nodejs/parallel-buffered-runner.js')\n+          .ignore('./lib/nodejs/reporters/parallel-buffered.js')\n           .on('bundled', (err, content) => {\n             if (err) {\n               throw err;"
      },
      {
        "sha": "20e32c6f33bdc7b81493852a0957f86d99a28597",
        "filename": "lib/browser/growl.js",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fbrowser%2Fgrowl.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fbrowser%2Fgrowl.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fbrowser%2Fgrowl.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -11,6 +11,7 @@\n var Date = global.Date;\n var setTimeout = global.setTimeout;\n var EVENT_RUN_END = require('../runner').constants.EVENT_RUN_END;\n+var isBrowser = require('../utils').isBrowser;\n \n /**\n  * Checks if browser notification support exists.\n@@ -25,7 +26,7 @@ var EVENT_RUN_END = require('../runner').constants.EVENT_RUN_END;\n exports.isCapable = function() {\n   var hasNotificationSupport = 'Notification' in window;\n   var hasPromiseSupport = typeof Promise === 'function';\n-  return process.browser && hasNotificationSupport && hasPromiseSupport;\n+  return isBrowser() && hasNotificationSupport && hasPromiseSupport;\n };\n \n /**"
      },
      {
        "sha": "5dc5e1fc99ecd75a8d09505160350f839128f24f",
        "filename": "lib/cli/collect-files.js",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Fcollect-files.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Fcollect-files.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fcli%2Fcollect-files.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -17,13 +17,7 @@ const {NO_FILES_MATCH_PATTERN} = require('../errors').constants;\n \n /**\n  * Smash together an array of test files in the correct order\n- * @param {Object} opts - Options\n- * @param {string[]} opts.extension - File extensions to use\n- * @param {string[]} opts.spec - Files, dirs, globs to run\n- * @param {string[]} opts.ignore - Files, dirs, globs to ignore\n- * @param {string[]} opts.file - List of additional files to include\n- * @param {boolean} opts.recursive - Find files recursively\n- * @param {boolean} opts.sort - Sort test files\n+ * @param {FileCollectionOptions} [opts] - Options\n  * @returns {string[]} List of files to test\n  * @private\n  */\n@@ -84,3 +78,14 @@ module.exports = ({ignore, extension, file, recursive, sort, spec} = {}) => {\n \n   return files;\n };\n+\n+/**\n+ * An object to configure how Mocha gathers test files\n+ * @typedef {Object} FileCollectionOptions\n+ * @property {string[]} extension - File extensions to use\n+ * @property {string[]} spec - Files, dirs, globs to run\n+ * @property {string[]} ignore - Files, dirs, globs to ignore\n+ * @property {string[]} file - List of additional files to include\n+ * @property {boolean} recursive - Find files recursively\n+ * @property {boolean} sort - Sort test files\n+ */"
      },
      {
        "sha": "e09338f2c625eb0bdbefa62074320828ae0a63f7",
        "filename": "lib/cli/run-helpers.js",
        "status": "modified",
        "additions": 41,
        "deletions": 10,
        "changes": 51,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Frun-helpers.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Frun-helpers.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fcli%2Frun-helpers.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -10,7 +10,7 @@\n const fs = require('fs');\n const path = require('path');\n const debug = require('debug')('mocha:cli:run:helpers');\n-const watchRun = require('./watch-run');\n+const {watchRun, watchParallelRun} = require('./watch-run');\n const collectFiles = require('./collect-files');\n const {type} = require('../utils');\n const {format} = require('util');\n@@ -151,24 +151,52 @@ const singleRun = async (mocha, {exit}, fileCollectParams) => {\n };\n \n /**\n- * Actually run tests\n+ * Collect files and run tests (using `BufferedRunner`).\n+ *\n+ * This is `async` for consistency.\n+ *\n  * @param {Mocha} mocha - Mocha instance\n- * @param {Object} opts - Command line options\n+ * @param {Options} options - Command line options\n+ * @param {Object} fileCollectParams - Parameters that control test\n+ *   file collection. See `lib/cli/collect-files.js`.\n+ * @returns {Promise<BufferedRunner>}\n+ * @ignore\n  * @private\n- * @returns {Promise}\n+ */\n+const parallelRun = async (mocha, options, fileCollectParams) => {\n+  const files = collectFiles(fileCollectParams);\n+  debug(\n+    'executing %d test file(s) across %d concurrent jobs',\n+    files.length,\n+    options.jobs\n+  );\n+  mocha.files = files;\n+\n+  // note that we DO NOT load any files here; this is handled by the worker\n+  return mocha.run(options.exit ? exitMocha : exitMochaLater);\n+};\n+\n+/**\n+ * Actually run tests.  Delegates to one of four different functions:\n+ * - `singleRun`: run tests in serial & exit\n+ * - `watchRun`: run tests in serial, rerunning as files change\n+ * - `parallelRun`: run tests in parallel & exit\n+ * - `watchParallelRun`: run tests in parallel, rerunning as files change\n+ * @param {Mocha} mocha - Mocha instance\n+ * @param {Options} opts - Command line options\n+ * @private\n+ * @returns {Promise<Runner>}\n  */\n exports.runMocha = async (mocha, options) => {\n   const {\n     watch = false,\n     extension = [],\n-    exit = false,\n     ignore = [],\n     file = [],\n+    parallel = false,\n     recursive = false,\n     sort = false,\n-    spec = [],\n-    watchFiles,\n-    watchIgnore\n+    spec = []\n   } = options;\n \n   const fileCollectParams = {\n@@ -180,11 +208,14 @@ exports.runMocha = async (mocha, options) => {\n     spec\n   };\n \n+  let run;\n   if (watch) {\n-    watchRun(mocha, {watchFiles, watchIgnore}, fileCollectParams);\n+    run = parallel ? watchParallelRun : watchRun;\n   } else {\n-    await singleRun(mocha, {exit}, fileCollectParams);\n+    run = parallel ? parallelRun : singleRun;\n   }\n+\n+  return run(mocha, options, fileCollectParams);\n };\n \n /**"
      },
      {
        "sha": "da3b7d995dd93222c3afc8a54cb518c113f0b931",
        "filename": "lib/cli/run-option-metadata.js",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Frun-option-metadata.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Frun-option-metadata.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fcli%2Frun-option-metadata.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -42,11 +42,12 @@ exports.types = {\n     'list-interfaces',\n     'list-reporters',\n     'no-colors',\n+    'parallel',\n     'recursive',\n     'sort',\n     'watch'\n   ],\n-  number: ['retries'],\n+  number: ['retries', 'jobs'],\n   string: [\n     'config',\n     'fgrep',\n@@ -75,7 +76,9 @@ exports.aliases = {\n   growl: ['G'],\n   ignore: ['exclude'],\n   invert: ['i'],\n+  jobs: ['j'],\n   'no-colors': ['C'],\n+  parallel: ['p'],\n   reporter: ['R'],\n   'reporter-option': ['reporter-options', 'O'],\n   require: ['r'],"
      },
      {
        "sha": "f2c970fb2677e49c247729b22fab0fb2f32e419f",
        "filename": "lib/cli/run.js",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Frun.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Frun.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fcli%2Frun.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -151,6 +151,13 @@ exports.builder = yargs =>\n         description: 'Inverts --grep and --fgrep matches',\n         group: GROUPS.FILTERS\n       },\n+      jobs: {\n+        description:\n+          'Number of concurrent jobs for --parallel; use 1 to run in serial',\n+        defaultDescription: '(number of CPU cores - 1)',\n+        requiresArg: true,\n+        group: GROUPS.RULES\n+      },\n       'list-interfaces': {\n         conflicts: Array.from(ONE_AND_DONE_ARGS),\n         description: 'List built-in user interfaces & exit'\n@@ -170,6 +177,10 @@ exports.builder = yargs =>\n         normalize: true,\n         requiresArg: true\n       },\n+      parallel: {\n+        description: 'Run tests in parallel',\n+        group: GROUPS.RULES\n+      },\n       recursive: {\n         description: 'Look for tests in subdirectories',\n         group: GROUPS.FILES\n@@ -272,6 +283,40 @@ exports.builder = yargs =>\n         );\n       }\n \n+      if (argv.parallel) {\n+        // yargs.conflicts() can't deal with `--file foo.js --no-parallel`, either\n+        if (argv.file) {\n+          throw createUnsupportedError(\n+            '--parallel runs test files in a non-deterministic order, and is mutually exclusive with --file'\n+          );\n+        }\n+\n+        // or this\n+        if (argv.sort) {\n+          throw createUnsupportedError(\n+            '--parallel runs test files in a non-deterministic order, and is mutually exclusive with --sort'\n+          );\n+        }\n+\n+        if (argv.reporter === 'progress') {\n+          throw createUnsupportedError(\n+            '--reporter=progress is mutually exclusive with --parallel'\n+          );\n+        }\n+\n+        if (argv.reporter === 'markdown') {\n+          throw createUnsupportedError(\n+            '--reporter=markdown is mutually exclusive with --parallel'\n+          );\n+        }\n+\n+        if (argv.reporter === 'json-stream') {\n+          throw createUnsupportedError(\n+            '--reporter=json-stream is mutually exclusive with --parallel'\n+          );\n+        }\n+      }\n+\n       if (argv.compilers) {\n         throw createUnsupportedError(\n           `--compilers is DEPRECATED and no longer supported."
      },
      {
        "sha": "2c59490a81e8a3e66ba13cf01fc0d188b135187e",
        "filename": "lib/cli/watch-run.js",
        "status": "modified",
        "additions": 180,
        "deletions": 50,
        "changes": 230,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Fwatch-run.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fcli%2Fwatch-run.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fcli%2Fwatch-run.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -1,5 +1,6 @@\n 'use strict';\n \n+const debug = require('debug')('mocha:cli:watch');\n const path = require('path');\n const chokidar = require('chokidar');\n const Context = require('../context');\n@@ -12,6 +13,42 @@ const collectFiles = require('./collect-files');\n  * @private\n  */\n \n+/**\n+ * Run Mocha in parallel \"watch\" mode\n+ * @param {Mocha} mocha - Mocha instance\n+ * @param {Object} opts - Options\n+ * @param {string[]} [opts.watchFiles] - List of paths and patterns to\n+ *   watch. If not provided all files with an extension included in\n+ *   `fileColletionParams.extension` are watched. See first argument of\n+ *   `chokidar.watch`.\n+ * @param {string[]} opts.watchIgnore - List of paths and patterns to\n+ *   exclude from watching. See `ignored` option of `chokidar`.\n+ * @param {FileCollectionOptions} fileCollectParams - Parameters that control test\n+ * @private\n+ */\n+exports.watchParallelRun = (\n+  mocha,\n+  {watchFiles, watchIgnore},\n+  fileCollectParams\n+) => {\n+  debug('creating parallel watcher');\n+  return createWatcher(mocha, {\n+    watchFiles,\n+    watchIgnore,\n+    beforeRun({mocha}) {\n+      mocha.files = collectFiles(fileCollectParams);\n+      // in parallel mode, the main Mocha process doesn't actually load the\n+      // files. this flag prevents `mocha.run()` from autoloading.\n+      mocha.lazyLoadFiles(true);\n+      return mocha;\n+    },\n+    afterRun({watcher}) {\n+      blastCache(watcher);\n+    },\n+    fileCollectParams\n+  });\n+};\n+\n /**\n  * Run Mocha in \"watch\" mode\n  * @param {Mocha} mocha - Mocha instance\n@@ -22,27 +59,88 @@ const collectFiles = require('./collect-files');\n  *   `chokidar.watch`.\n  * @param {string[]} opts.watchIgnore - List of paths and patterns to\n  *   exclude from watching. See `ignored` option of `chokidar`.\n- * @param {Object} fileCollectParams - Parameters that control test\n+ * @param {FileCollectionOptions} fileCollectParams - Parameters that control test\n  *   file collection. See `lib/cli/collect-files.js`.\n- * @param {string[]} fileCollectParams.extension - List of extensions\n- *   to watch if `opts.watchFiles` is not given.\n  * @private\n  */\n-module.exports = (mocha, {watchFiles, watchIgnore}, fileCollectParams) => {\n+exports.watchRun = (mocha, {watchFiles, watchIgnore}, fileCollectParams) => {\n+  debug('creating serial watcher');\n+  // list of all test files\n+\n+  return createWatcher(mocha, {\n+    watchFiles,\n+    watchIgnore,\n+    beforeRun({mocha}) {\n+      mocha.unloadFiles();\n+\n+      // I don't know why we're cloning the root suite.\n+      const rootSuite = mocha.suite.clone();\n+\n+      // this `require` is needed because the require cache has been cleared.  the dynamic\n+      // exports set via the below call to `mocha.ui()` won't work properly if a\n+      // test depends on this module (see `required-tokens.spec.js`).\n+      const Mocha = require('../mocha');\n+\n+      // ... and now that we've gotten a new module, we need to use it again due\n+      // to `mocha.ui()` call\n+      const newMocha = new Mocha(mocha.options);\n+      // don't know why this is needed\n+      newMocha.suite = rootSuite;\n+      // nor this\n+      newMocha.suite.ctx = new Context();\n+\n+      // reset the list of files\n+      newMocha.files = collectFiles(fileCollectParams);\n+\n+      // because we've swapped out the root suite (see the `run` inner function\n+      // in `createRerunner`), we need to call `mocha.ui()` again to set up the context/globals.\n+      newMocha.ui(newMocha.options.ui);\n+\n+      return newMocha;\n+    },\n+    afterRun({watcher}) {\n+      blastCache(watcher);\n+    },\n+    fileCollectParams\n+  });\n+};\n+\n+/**\n+ * Bootstraps a chokidar watcher. Handles keyboard input & signals\n+ * @param {Mocha} mocha - Mocha instance\n+ * @param {Object} opts\n+ * @param {BeforeWatchRun} [opts.beforeRun] - Function to call before\n+ * `mocha.run()`\n+ * @param {AfterWatchRun} [opts.afterRun] - Function to call after `mocha.run()`\n+ * @param {string[]} [opts.watchFiles] - List of paths and patterns to watch. If\n+ *   not provided all files with an extension included in\n+ *   `fileColletionParams.extension` are watched. See first argument of\n+ *   `chokidar.watch`.\n+ * @param {string[]} [opts.watchIgnore] - List of paths and patterns to exclude\n+ *   from watching. See `ignored` option of `chokidar`.\n+ * @param {FileCollectionOptions} opts.fileCollectParams - List of extensions to watch if `opts.watchFiles` is not given.\n+ * @returns {FSWatcher}\n+ * @ignore\n+ * @private\n+ */\n+const createWatcher = (\n+  mocha,\n+  {watchFiles, watchIgnore, beforeRun, afterRun, fileCollectParams}\n+) => {\n   if (!watchFiles) {\n     watchFiles = fileCollectParams.extension.map(ext => `**/*.${ext}`);\n   }\n \n+  debug('ignoring files matching: %s', watchIgnore);\n+\n   const watcher = chokidar.watch(watchFiles, {\n     ignored: watchIgnore,\n     ignoreInitial: true\n   });\n \n-  const rerunner = createRerunner(mocha, () => {\n-    getWatchedFiles(watcher).forEach(file => {\n-      delete require.cache[file];\n-    });\n-    mocha.files = collectFiles(fileCollectParams);\n+  const rerunner = createRerunner(mocha, watcher, {\n+    beforeRun,\n+    afterRun\n   });\n \n   watcher.on('ready', () => {\n@@ -53,7 +151,6 @@ module.exports = (mocha, {watchFiles, watchIgnore}, fileCollectParams) => {\n     rerunner.scheduleRun();\n   });\n \n-  console.log();\n   hideCursor();\n   process.on('exit', () => {\n     showCursor();\n@@ -74,36 +171,43 @@ module.exports = (mocha, {watchFiles, watchIgnore}, fileCollectParams) => {\n       .toLowerCase();\n     if (str === 'rs') rerunner.scheduleRun();\n   });\n+\n+  return watcher;\n };\n \n /**\n- * Create an object that allows you to rerun tests on the mocha\n- * instance. `beforeRun` is called everytime before `mocha.run()` is\n- * called.\n+ * Create an object that allows you to rerun tests on the mocha instance.\n  *\n  * @param {Mocha} mocha - Mocha instance\n- * @param {function} beforeRun - Called just before `mocha.run()`\n+ * @param {FSWatcher} watcher - chokidar `FSWatcher` instance\n+ * @param {Object} [opts] - Options!\n+ * @param {BeforeWatchRun} [opts.beforeRun] - Function to call before `mocha.run()`\n+ * @param {AfterWatchRun} [opts.afterRun] - Function to call after `mocha.run()`\n+ * @returns {Rerunner}\n+ * @ignore\n+ * @private\n  */\n-const createRerunner = (mocha, beforeRun) => {\n+const createRerunner = (mocha, watcher, {beforeRun, afterRun} = {}) => {\n   // Set to a `Runner` when mocha is running. Set to `null` when mocha is not\n   // running.\n   let runner = null;\n \n+  // true if a file has changed during a test run\n   let rerunScheduled = false;\n \n   const run = () => {\n-    try {\n-      beforeRun();\n-      resetMocha(mocha);\n-      runner = mocha.run(() => {\n-        runner = null;\n-        if (rerunScheduled) {\n-          rerun();\n-        }\n-      });\n-    } catch (e) {\n-      console.log(e.stack);\n-    }\n+    mocha = beforeRun ? beforeRun({mocha, watcher}) : mocha;\n+\n+    runner = mocha.run(() => {\n+      debug('finished watch run');\n+      runner = null;\n+      afterRun && afterRun({mocha, watcher});\n+      if (rerunScheduled) {\n+        rerun();\n+      } else {\n+        debug('waiting for changes...');\n+      }\n+    });\n   };\n \n   const scheduleRun = () => {\n@@ -136,32 +240,18 @@ const createRerunner = (mocha, beforeRun) => {\n  *\n  * @param watcher - Instance of a chokidar watcher\n  * @return {string[]} - List of absolute paths\n+ * @ignore\n+ * @private\n  */\n const getWatchedFiles = watcher => {\n   const watchedDirs = watcher.getWatched();\n-  let watchedFiles = [];\n-  Object.keys(watchedDirs).forEach(dir => {\n-    watchedFiles = watchedFiles.concat(\n-      watchedDirs[dir].map(file => path.join(dir, file))\n-    );\n-  });\n-  return watchedFiles;\n-};\n-\n-/**\n- * Reset the internal state of the mocha instance so that tests can be rerun.\n- *\n- * @param {Mocha} mocha - Mocha instance\n- * @private\n- */\n-const resetMocha = mocha => {\n-  mocha.unloadFiles();\n-  mocha.suite = mocha.suite.clone();\n-  mocha.suite.ctx = new Context();\n-  // Registers a callback on `mocha.suite` that wires new context to the DSL\n-  // (e.g. `describe`) that is exposed as globals when the test files are\n-  // reloaded.\n-  mocha.ui(mocha.options.ui);\n+  return Object.keys(watchedDirs).reduce(\n+    (acc, dir) => [\n+      ...acc,\n+      ...watchedDirs[dir].map(file => path.join(dir, file))\n+    ],\n+    []\n+  );\n };\n \n /**\n@@ -189,3 +279,43 @@ const showCursor = () => {\n const eraseLine = () => {\n   process.stdout.write('\\u001b[2K');\n };\n+\n+/**\n+ * Blast all of the watched files out of `require.cache`\n+ * @param {FSWatcher} watcher - chokidar FSWatcher\n+ * @ignore\n+ * @private\n+ */\n+const blastCache = watcher => {\n+  const files = getWatchedFiles(watcher);\n+  files.forEach(file => {\n+    delete require.cache[file];\n+  });\n+  debug('deleted %d file(s) from the require cache', files.length);\n+};\n+\n+/**\n+ * Callback to be run before `mocha.run()` is called.\n+ * Optionally, it can return a new `Mocha` instance.\n+ * @callback BeforeWatchRun\n+ * @private\n+ * @param {{mocha: Mocha, watcher: FSWatcher}} options\n+ * @returns {Mocha}\n+ */\n+\n+/**\n+ * Callback to be run after `mocha.run()` completes.  Typically used to clear\n+ * require cache.\n+ * @callback AfterWatchRun\n+ * @private\n+ * @param {{mocha: Mocha, watcher: FSWatcher}} options\n+ * @returns {void}\n+ */\n+\n+/**\n+ * Object containing run control methods\n+ * @typedef {Object} Rerunner\n+ * @private\n+ * @property {Function} run - Calls `mocha.run()`\n+ * @property {Function} scheduleRun - Schedules another call to `run`\n+ */"
      },
      {
        "sha": "929f56399c5a5e144a17d0473675578d3ddd6370",
        "filename": "lib/errors.js",
        "status": "modified",
        "additions": 24,
        "deletions": 1,
        "changes": 25,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Ferrors.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Ferrors.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Ferrors.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -66,7 +66,12 @@ var constants = {\n   /**\n    * Invalid state transition occuring in `Mocha` instance\n    */\n-  INSTANCE_ALREADY_DISPOSED: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED'\n+  INSTANCE_ALREADY_DISPOSED: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED',\n+\n+  /**\n+   * Use of `only()` w/ `--forbid-only` results in this error.\n+   */\n+  FORBIDDEN_EXCLUSIVITY: 'ERR_MOCHA_FORBIDDEN_EXCLUSIVITY'\n };\n \n /**\n@@ -293,6 +298,23 @@ function createMultipleDoneError(runnable, originalErr) {\n   return err;\n }\n \n+/**\n+ * Creates an error object to be thrown when `.only()` is used with\n+ * `--forbid-only`.\n+ * @public\n+ * @param {Mocha} mocha - Mocha instance\n+ * @returns {Error} Error with code {@link constants.FORBIDDEN_EXCLUSIVITY}\n+ */\n+function createForbiddenExclusivityError(mocha) {\n+  var err = new Error(\n+    mocha.isWorker\n+      ? '`.only` is not supported in parallel mode'\n+      : '`.only` forbidden by --forbid-only'\n+  );\n+  err.code = constants.FORBIDDEN_EXCLUSIVITY;\n+  return err;\n+}\n+\n module.exports = {\n   createInvalidArgumentTypeError: createInvalidArgumentTypeError,\n   createInvalidArgumentValueError: createInvalidArgumentValueError,\n@@ -307,5 +329,6 @@ module.exports = {\n   createMochaInstanceAlreadyRunningError: createMochaInstanceAlreadyRunningError,\n   createFatalError: createFatalError,\n   createMultipleDoneError: createMultipleDoneError,\n+  createForbiddenExclusivityError: createForbiddenExclusivityError,\n   constants: constants\n };"
      },
      {
        "sha": "6c12c02bb89b6e1ac440859c3135081418dc3b72",
        "filename": "lib/hook.js",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fhook.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fhook.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fhook.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -52,3 +52,27 @@ Hook.prototype.error = function(err) {\n \n   this._error = err;\n };\n+\n+/**\n+ * Returns an object suitable for IPC.\n+ * Functions are represented by keys beginning with `$$`.\n+ * @private\n+ * @returns {Object}\n+ */\n+Hook.prototype.serialize = function serialize() {\n+  return {\n+    $$isPending: this.isPending(),\n+    $$titlePath: this.titlePath(),\n+    ctx: {\n+      currentTest: {\n+        title: this.ctx && this.ctx.currentTest && this.ctx.currentTest.title\n+      }\n+    },\n+    parent: {\n+      root: this.parent.root,\n+      title: this.parent.title\n+    },\n+    title: this.title,\n+    type: this.type\n+  };\n+};"
      },
      {
        "sha": "5fa87e4537c6162244e3f104adbc8ab4be208b1c",
        "filename": "lib/interfaces/common.js",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Finterfaces%2Fcommon.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Finterfaces%2Fcommon.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Finterfaces%2Fcommon.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -4,6 +4,7 @@ var Suite = require('../suite');\n var errors = require('../errors');\n var createMissingArgumentError = errors.createMissingArgumentError;\n var createUnsupportedError = errors.createUnsupportedError;\n+var createForbiddenExclusivityError = errors.createForbiddenExclusivityError;\n \n /**\n  * Functions common to more than one interface.\n@@ -127,9 +128,8 @@ module.exports = function(suites, context, mocha) {\n         suites.unshift(suite);\n         if (opts.isOnly) {\n           if (mocha.options.forbidOnly && shouldBeTested(suite)) {\n-            throw createUnsupportedError('`.only` forbidden');\n+            throw createForbiddenExclusivityError(mocha);\n           }\n-\n           suite.parent.appendOnlySuite(suite);\n         }\n         if (suite.pending) {\n@@ -166,8 +166,9 @@ module.exports = function(suites, context, mocha) {\n        * @returns {*}\n        */\n       only: function(mocha, test) {\n-        if (mocha.options.forbidOnly)\n-          throw createUnsupportedError('`.only` forbidden');\n+        if (mocha.options.forbidOnly) {\n+          throw createForbiddenExclusivityError(mocha);\n+        }\n         test.markOnly();\n         return test;\n       },"
      },
      {
        "sha": "5c39d62cacb155393110574346c16c0000384284",
        "filename": "lib/mocha.js",
        "status": "modified",
        "additions": 122,
        "deletions": 29,
        "changes": 151,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fmocha.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fmocha.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fmocha.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -9,7 +9,7 @@\n var escapeRe = require('escape-string-regexp');\n var path = require('path');\n var builtinReporters = require('./reporters');\n-var growl = require('./growl');\n+var growl = require('./nodejs/growl');\n var utils = require('./utils');\n var mocharc = require('./mocharc.json');\n var errors = require('./errors');\n@@ -26,6 +26,7 @@ var EVENT_FILE_PRE_REQUIRE = Suite.constants.EVENT_FILE_PRE_REQUIRE;\n var EVENT_FILE_POST_REQUIRE = Suite.constants.EVENT_FILE_POST_REQUIRE;\n var EVENT_FILE_REQUIRE = Suite.constants.EVENT_FILE_REQUIRE;\n var sQuote = utils.sQuote;\n+var debug = require('debug')('mocha:mocha');\n \n exports = module.exports = Mocha;\n \n@@ -57,7 +58,7 @@ var mochaStates = utils.defineConstants({\n  * To require local UIs and reporters when running in node.\n  */\n \n-if (!process.browser && typeof module.paths !== 'undefined') {\n+if (!utils.isBrowser() && typeof module.paths !== 'undefined') {\n   var cwd = utils.cwd();\n   module.paths.push(cwd, path.join(cwd, 'node_modules'));\n }\n@@ -66,11 +67,6 @@ if (!process.browser && typeof module.paths !== 'undefined') {\n  * Expose internals.\n  */\n \n-/**\n- * @public\n- * @class utils\n- * @memberof Mocha\n- */\n exports.utils = utils;\n exports.interfaces = require('./interfaces');\n /**\n@@ -118,8 +114,11 @@ exports.Test = require('./test');\n  * @param {number} [options.slow] - Slow threshold value.\n  * @param {number|string} [options.timeout] - Timeout threshold value.\n  * @param {string} [options.ui] - Interface name.\n+ * @param {boolean} [options.parallel] - Run jobs in parallel\n+ * @param {number} [options.jobs] - Max number of worker processes for parallel runs\n  * @param {MochaRootHookObject} [options.rootHooks] - Hooks to bootstrap the root\n  * suite with\n+ * @param {boolean} [options.isWorker] - Should be `true` if `Mocha` process is running in a worker process.\n  */\n function Mocha(options) {\n   options = utils.assign({}, mocharc, options || {});\n@@ -128,6 +127,7 @@ function Mocha(options) {\n   // root suite\n   this.suite = new exports.Suite('', new exports.Context(), true);\n   this._cleanReferencesAfterRun = true;\n+  this._state = mochaStates.INIT;\n \n   this.grep(options.grep)\n     .fgrep(options.fgrep)\n@@ -171,6 +171,39 @@ function Mocha(options) {\n   if (options.rootHooks) {\n     this.rootHooks(options.rootHooks);\n   }\n+\n+  /**\n+   * The class which we'll instantiate in {@link Mocha#run}.  Defaults to\n+   * {@link Runner} in serial mode; changes in parallel mode.\n+   * @memberof Mocha\n+   * @private\n+   */\n+  this._runnerClass = exports.Runner;\n+\n+  /**\n+   * Whether or not to call {@link Mocha#loadFiles} implicitly when calling\n+   * {@link Mocha#run}.  If this is `true`, then it's up to the consumer to call\n+   * {@link Mocha#loadFiles} _or_ {@link Mocha#loadFilesAsync}.\n+   * @private\n+   * @memberof Mocha\n+   */\n+  this._lazyLoadFiles = false;\n+\n+  /**\n+   * It's useful for a Mocha instance to know if it's running in a worker process.\n+   * We could derive this via other means, but it's helpful to have a flag to refer to.\n+   * @memberof Mocha\n+   * @private\n+   */\n+  this.isWorker = Boolean(options.isWorker);\n+\n+  if (\n+    options.parallel &&\n+    (typeof options.jobs === 'undefined' || options.jobs > 1)\n+  ) {\n+    debug('attempting to enable parallel mode');\n+    this.parallelMode(true);\n+  }\n }\n \n /**\n@@ -221,52 +254,52 @@ Mocha.prototype.addFile = function(file) {\n  * // Use XUnit reporter and direct its output to file\n  * mocha.reporter('xunit', { output: '/path/to/testspec.xunit.xml' });\n  */\n-Mocha.prototype.reporter = function(reporter, reporterOptions) {\n-  if (typeof reporter === 'function') {\n-    this._reporter = reporter;\n+Mocha.prototype.reporter = function(reporterName, reporterOptions) {\n+  if (typeof reporterName === 'function') {\n+    this._reporter = reporterName;\n   } else {\n-    reporter = reporter || 'spec';\n-    var _reporter;\n+    reporterName = reporterName || 'spec';\n+    var reporter;\n     // Try to load a built-in reporter.\n-    if (builtinReporters[reporter]) {\n-      _reporter = builtinReporters[reporter];\n+    if (builtinReporters[reporterName]) {\n+      reporter = builtinReporters[reporterName];\n     }\n     // Try to load reporters from process.cwd() and node_modules\n-    if (!_reporter) {\n+    if (!reporter) {\n       try {\n-        _reporter = require(reporter);\n+        reporter = require(reporterName);\n       } catch (err) {\n         if (\n           err.code === 'MODULE_NOT_FOUND' ||\n           err.message.indexOf('Cannot find module') >= 0\n         ) {\n           // Try to load reporters from a path (absolute or relative)\n           try {\n-            _reporter = require(path.resolve(utils.cwd(), reporter));\n+            reporter = require(path.resolve(utils.cwd(), reporterName));\n           } catch (_err) {\n             _err.code === 'MODULE_NOT_FOUND' ||\n             _err.message.indexOf('Cannot find module') >= 0\n-              ? utils.warn(sQuote(reporter) + ' reporter not found')\n+              ? utils.warn(sQuote(reporterName) + ' reporter not found')\n               : utils.warn(\n-                  sQuote(reporter) +\n+                  sQuote(reporterName) +\n                     ' reporter blew up with error:\\n' +\n                     err.stack\n                 );\n           }\n         } else {\n           utils.warn(\n-            sQuote(reporter) + ' reporter blew up with error:\\n' + err.stack\n+            sQuote(reporterName) + ' reporter blew up with error:\\n' + err.stack\n           );\n         }\n       }\n     }\n-    if (!_reporter) {\n+    if (!reporter) {\n       throw createInvalidReporterError(\n-        'invalid reporter ' + sQuote(reporter),\n-        reporter\n+        'invalid reporter ' + sQuote(reporterName),\n+        reporterName\n       );\n     }\n-    this._reporter = _reporter;\n+    this._reporter = reporter;\n   }\n   this.options.reporterOption = reporterOptions;\n   // alias option name is used in public reporters xunit/tap/progress\n@@ -375,7 +408,7 @@ Mocha.prototype.loadFiles = function(fn) {\n Mocha.prototype.loadFilesAsync = function() {\n   var self = this;\n   var suite = this.suite;\n-  this.loadAsync = true;\n+  this.lazyLoadFiles(true);\n \n   if (!esmUtils) {\n     return new Promise(function(resolve) {\n@@ -591,7 +624,7 @@ Mocha.prototype.fullTrace = function(fullTrace) {\n Mocha.prototype.growl = function() {\n   this.options.growl = this.isGrowlCapable();\n   if (!this.options.growl) {\n-    var detail = process.browser\n+    var detail = utils.isBrowser()\n       ? 'notification support not available in this browser...'\n       : 'notification support prerequisites not installed...';\n     console.error(detail + ' cannot enable!');\n@@ -848,6 +881,7 @@ Mocha.prototype.forbidPending = function(forbidPending) {\n \n /**\n  * Throws an error if mocha is in the wrong state to be able to transition to a \"running\" state.\n+ * @private\n  */\n Mocha.prototype._guardRunningStateTransition = function() {\n   if (this._state === mochaStates.RUNNING) {\n@@ -914,14 +948,14 @@ Mocha.prototype.run = function(fn) {\n     this._previousRunner.dispose();\n     this.suite.reset();\n   }\n-  if (this.files.length && !this.loadAsync) {\n+  if (this.files.length && !this._lazyLoadFiles) {\n     this.loadFiles();\n   }\n   var self = this;\n   var suite = this.suite;\n   var options = this.options;\n   options.files = this.files;\n-  var runner = new exports.Runner(suite, {\n+  var runner = new this._runnerClass(suite, {\n     delay: options.delay,\n     cleanReferencesAfterRun: this._cleanReferencesAfterRun\n   });\n@@ -963,7 +997,7 @@ Mocha.prototype.run = function(fn) {\n     }\n   }\n \n-  return runner.run(done);\n+  return runner.run(done, {files: this.files, options: options});\n };\n \n /**\n@@ -994,6 +1028,65 @@ Mocha.prototype.rootHooks = function rootHooks(hooks) {\n   return this;\n };\n \n+/**\n+ * Toggles parallel mode.\n+ *\n+ * Must be run before calling {@link Mocha#run}. Changes the `Runner` class to\n+ * use; also enables lazy file loading if not already done so.\n+ * @param {boolean} [enable] - If `true`, enable; otherwise disable.\n+ * @throws If run in browser\n+ * @throws If Mocha not in \"INIT\" state\n+ * @returns {Mocha}\n+ * @chainable\n+ * @public\n+ */\n+Mocha.prototype.parallelMode = function parallelMode(enable) {\n+  if (utils.isBrowser()) {\n+    throw errors.createUnsupportedError(\n+      'parallel mode is only supported in Node.js'\n+    );\n+  }\n+  var parallel = enable === true;\n+  if (\n+    parallel === this.options.parallel &&\n+    this._lazyLoadFiles &&\n+    this._runnerClass !== exports.Runner\n+  ) {\n+    return this;\n+  }\n+  if (this._state !== mochaStates.INIT) {\n+    throw errors.createUnsupportedError(\n+      'cannot change parallel mode after having called run()'\n+    );\n+  }\n+  this.options.parallel = parallel;\n+\n+  // swap Runner class\n+  this._runnerClass = parallel\n+    ? require('./nodejs/parallel-buffered-runner')\n+    : exports.Runner;\n+\n+  // lazyLoadFiles may have been set `true` otherwise (for ESM loading),\n+  // so keep `true` if so.\n+  return this.lazyLoadFiles(this._lazyLoadFiles || parallel);\n+};\n+\n+/**\n+ * Disables implicit call to {@link Mocha#loadFiles} in {@link Mocha#run}. This\n+ * setting is used by watch mode, parallel mode, and for loading ESM files.\n+ * @todo This should throw if we've already loaded files; such behavior\n+ * necessitates adding a new state.\n+ * @param {boolean} [enable] - If `true`, disable eager loading of files in\n+ * {@link Mocha#run}\n+ * @chainable\n+ * @public\n+ */\n+Mocha.prototype.lazyLoadFiles = function lazyLoadFiles(enable) {\n+  this._lazyLoadFiles = enable === true;\n+  debug('set lazy load to %s', enable);\n+  return this;\n+};\n+\n /**\n  * An alternative way to define root hooks that works with parallel runs.\n  * @typedef {Object} MochaRootHookObject"
      },
      {
        "sha": "144333ef1aed97a6640c6f0baa830fb96ff27a1b",
        "filename": "lib/nodejs/buffered-worker-pool.js",
        "status": "added",
        "additions": 174,
        "deletions": 0,
        "changes": 174,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fbuffered-worker-pool.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fbuffered-worker-pool.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fnodejs%2Fbuffered-worker-pool.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -0,0 +1,174 @@\n+/**\n+ * A wrapper around a third-party child process worker pool implementation.\n+ * Used by {@link module:buffered-runner}.\n+ * @private\n+ * @module buffered-worker-pool\n+ */\n+\n+'use strict';\n+\n+const serializeJavascript = require('serialize-javascript');\n+const workerpool = require('workerpool');\n+const {deserialize} = require('./serializer');\n+const debug = require('debug')('mocha:parallel:buffered-worker-pool');\n+const {createInvalidArgumentTypeError} = require('../errors');\n+\n+const WORKER_PATH = require.resolve('./worker.js');\n+\n+/**\n+ * A mapping of Mocha `Options` objects to serialized values.\n+ *\n+ * This is helpful because we tend to same the same options over and over\n+ * over IPC.\n+ * @type {WeakMap<Options,string>}\n+ */\n+let optionsCache = new WeakMap();\n+\n+/**\n+ * These options are passed into the [workerpool](https://npm.im/workerpool) module.\n+ * @type {Partial<WorkerPoolOptions>}\n+ */\n+const WORKER_POOL_DEFAULT_OPTS = {\n+  // use child processes, not worker threads!\n+  workerType: 'process',\n+  // ensure the same flags sent to `node` for this `mocha` invocation are passed\n+  // along to children\n+  forkOpts: {execArgv: process.execArgv},\n+  maxWorkers: workerpool.cpus - 1\n+};\n+\n+/**\n+ * A wrapper around a third-party worker pool implementation.\n+ * @private\n+ */\n+class BufferedWorkerPool {\n+  /**\n+   * Creates an underlying worker pool instance; determines max worker count\n+   * @param {Partial<WorkerPoolOptions>} [opts] - Options\n+   */\n+  constructor(opts = {}) {\n+    const maxWorkers = Math.max(\n+      1,\n+      typeof opts.maxWorkers === 'undefined'\n+        ? WORKER_POOL_DEFAULT_OPTS.maxWorkers\n+        : opts.maxWorkers\n+    );\n+\n+    /* istanbul ignore next */\n+    if (workerpool.cpus < 2) {\n+      // TODO: decide whether we should warn\n+      debug(\n+        'not enough CPU cores available to run multiple jobs; avoid --parallel on this machine'\n+      );\n+    } else if (maxWorkers >= workerpool.cpus) {\n+      // TODO: decide whether we should warn\n+      debug(\n+        '%d concurrent job(s) requested, but only %d core(s) available',\n+        maxWorkers,\n+        workerpool.cpus\n+      );\n+    }\n+    /* istanbul ignore next */\n+    debug(\n+      'run(): starting worker pool of max size %d, using node args: %s',\n+      maxWorkers,\n+      process.execArgv.join(' ')\n+    );\n+\n+    this.options = Object.assign({}, WORKER_POOL_DEFAULT_OPTS, opts, {\n+      maxWorkers\n+    });\n+    this._pool = workerpool.pool(WORKER_PATH, this.options);\n+  }\n+\n+  /**\n+   * Terminates all workers in the pool.\n+   * @param {boolean} [force] - Whether to force-kill workers. By default, lets workers finish their current task before termination.\n+   * @private\n+   * @returns {Promise<void>}\n+   */\n+  async terminate(force = false) {\n+    /* istanbul ignore next */\n+    debug('terminate(): terminating with force = %s', force);\n+    return this._pool.terminate(force);\n+  }\n+\n+  /**\n+   * Adds a test file run to the worker pool queue for execution by a worker process.\n+   *\n+   * Handles serialization/deserialization.\n+   *\n+   * @param {string} filepath - Filepath of test\n+   * @param {Options} [options] - Options for Mocha instance\n+   * @private\n+   * @returns {Promise<SerializedWorkerResult>}\n+   */\n+  async run(filepath, options = {}) {\n+    if (!filepath || typeof filepath !== 'string') {\n+      throw createInvalidArgumentTypeError(\n+        'Expected a non-empty filepath',\n+        'filepath',\n+        'string'\n+      );\n+    }\n+    const serializedOptions = BufferedWorkerPool.serializeOptions(options);\n+    const result = await this._pool.exec('run', [filepath, serializedOptions]);\n+    return deserialize(result);\n+  }\n+\n+  /**\n+   * Returns stats about the state of the worker processes in the pool.\n+   *\n+   * Used for debugging.\n+   *\n+   * @private\n+   */\n+  stats() {\n+    return this._pool.stats();\n+  }\n+\n+  /**\n+   * Instantiates a {@link WorkerPool}.\n+   * @private\n+   */\n+  static create(...args) {\n+    return new BufferedWorkerPool(...args);\n+  }\n+\n+  /**\n+   * Given Mocha options object `opts`, serialize into a format suitable for\n+   * transmission over IPC.\n+   *\n+   * @param {Options} [opts] - Mocha options\n+   * @private\n+   * @returns {string} Serialized options\n+   */\n+  static serializeOptions(opts = {}) {\n+    if (!optionsCache.has(opts)) {\n+      const serialized = serializeJavascript(opts, {\n+        unsafe: true, // this means we don't care about XSS\n+        ignoreFunction: true // do not serialize functions\n+      });\n+      optionsCache.set(opts, serialized);\n+      /* istanbul ignore next */\n+      debug(\n+        'serializeOptions(): serialized options %O to: %s',\n+        opts,\n+        serialized\n+      );\n+    }\n+    return optionsCache.get(opts);\n+  }\n+\n+  /**\n+   * Resets internal cache of serialized options objects.\n+   *\n+   * For testing/debugging\n+   * @private\n+   */\n+  static resetOptionsCache() {\n+    optionsCache = new WeakMap();\n+  }\n+}\n+\n+exports.BufferedWorkerPool = BufferedWorkerPool;"
      },
      {
        "sha": "6664d67c6713c07f4fbe21fcc2e3f80e5a9b00c8",
        "filename": "lib/nodejs/growl.js",
        "status": "renamed",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fgrowl.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fgrowl.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fnodejs%2Fgrowl.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -8,7 +8,8 @@\n const os = require('os');\n const path = require('path');\n const {sync: which} = require('which');\n-const {EVENT_RUN_END} = require('./runner').constants;\n+const {EVENT_RUN_END} = require('../runner').constants;\n+const {isBrowser} = require('../utils');\n \n /**\n  * @summary\n@@ -25,7 +26,7 @@ const {EVENT_RUN_END} = require('./runner').constants;\n  * @return {boolean} whether Growl notification support can be expected\n  */\n exports.isCapable = () => {\n-  if (!process.browser) {\n+  if (!isBrowser()) {\n     return getSupportBinaries().reduce(\n       (acc, binary) => acc || Boolean(which(binary, {nothrow: true})),\n       false",
        "previous_filename": "lib/growl.js"
      },
      {
        "sha": "d31929804adbfe9160c6b3087325206c2b22193d",
        "filename": "lib/nodejs/parallel-buffered-runner.js",
        "status": "added",
        "additions": 293,
        "deletions": 0,
        "changes": 293,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fparallel-buffered-runner.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fparallel-buffered-runner.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fnodejs%2Fparallel-buffered-runner.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -0,0 +1,293 @@\n+/**\n+ * A test Runner that uses a {@link module:buffered-worker-pool}.\n+ * @module parallel-buffered-runner\n+ * @private\n+ */\n+\n+'use strict';\n+\n+const allSettled = require('promise.allsettled');\n+const Runner = require('../runner');\n+const {EVENT_RUN_BEGIN, EVENT_RUN_END} = Runner.constants;\n+const debug = require('debug')('mocha:parallel:parallel-buffered-runner');\n+const {BufferedWorkerPool} = require('./buffered-worker-pool');\n+const {setInterval, clearInterval} = global;\n+const {createMap} = require('../utils');\n+\n+/**\n+ * Outputs a debug statement with worker stats\n+ * @param {BufferedWorkerPool} pool - Worker pool\n+ */\n+/* istanbul ignore next */\n+const debugStats = pool => {\n+  const {totalWorkers, busyWorkers, idleWorkers, pendingTasks} = pool.stats();\n+  debug(\n+    '%d/%d busy workers; %d idle; %d tasks queued',\n+    busyWorkers,\n+    totalWorkers,\n+    idleWorkers,\n+    pendingTasks\n+  );\n+};\n+\n+/**\n+ * The interval at which we will display stats for worker processes in debug mode\n+ */\n+const DEBUG_STATS_INTERVAL = 5000;\n+\n+const ABORTED = 'ABORTED';\n+const IDLE = 'IDLE';\n+const ABORTING = 'ABORTING';\n+const RUNNING = 'RUNNING';\n+const BAILING = 'BAILING';\n+const BAILED = 'BAILED';\n+const COMPLETE = 'COMPLETE';\n+\n+const states = createMap({\n+  [IDLE]: new Set([RUNNING, ABORTING]),\n+  [RUNNING]: new Set([COMPLETE, BAILING, ABORTING]),\n+  [COMPLETE]: new Set(),\n+  [ABORTED]: new Set(),\n+  [ABORTING]: new Set([ABORTED]),\n+  [BAILING]: new Set([BAILED, ABORTING]),\n+  [BAILED]: new Set([COMPLETE, ABORTING])\n+});\n+\n+/**\n+ * This `Runner` delegates tests runs to worker threads.  Does not execute any\n+ * {@link Runnable}s by itself!\n+ * @private\n+ */\n+class ParallelBufferedRunner extends Runner {\n+  constructor(...args) {\n+    super(...args);\n+\n+    let state = IDLE;\n+    Object.defineProperty(this, '_state', {\n+      get() {\n+        return state;\n+      },\n+      set(newState) {\n+        if (states[state].has(newState)) {\n+          state = newState;\n+        } else {\n+          throw new Error(`invalid state transition: ${state} => ${newState}`);\n+        }\n+      }\n+    });\n+\n+    this.once(Runner.constants.EVENT_RUN_END, () => {\n+      this._state = COMPLETE;\n+    });\n+  }\n+\n+  /**\n+   * Returns a mapping function to enqueue a file in the worker pool and return results of its execution.\n+   * @param {BufferedWorkerPool} pool - Worker pool\n+   * @param {Options} options - Mocha options\n+   * @returns {FileRunner} Mapping function\n+   */\n+  _createFileRunner(pool, options) {\n+    return async file => {\n+      debug('run(): enqueueing test file %s', file);\n+      try {\n+        const {failureCount, events} = await pool.run(file, options);\n+        if (this._state === BAILED) {\n+          // short-circuit after a graceful bail. if this happens,\n+          // some other worker has bailed.\n+          // TODO: determine if this is the desired behavior, or if we\n+          // should report the events of this run anyway.\n+          return;\n+        }\n+        debug(\n+          'run(): completed run of file %s; %d failures / %d events',\n+          file,\n+          failureCount,\n+          events.length\n+        );\n+        this.failures += failureCount; // can this ever be non-numeric?\n+        let event = events.shift();\n+        while (event) {\n+          this.emit(event.eventName, event.data, event.error);\n+          if (\n+            this._state !== BAILING &&\n+            event.data &&\n+            event.data._bail &&\n+            (failureCount || event.error)\n+          ) {\n+            debug('run(): nonzero failure count & found bail flag');\n+            // we need to let the events complete for this file, as the worker\n+            // should run any cleanup hooks\n+            this._state = BAILING;\n+          }\n+          event = events.shift();\n+        }\n+        if (this._state === BAILING) {\n+          debug('run(): terminating pool due to \"bail\" flag');\n+          this._state = BAILED;\n+          await pool.terminate();\n+        }\n+      } catch (err) {\n+        if (this._state === BAILED || this._state === ABORTING) {\n+          debug(\n+            'run(): worker pool terminated with intent; skipping file %s',\n+            file\n+          );\n+        } else {\n+          // this is an uncaught exception\n+          debug('run(): encountered uncaught exception: %O', err);\n+          if (this.allowUncaught) {\n+            // still have to clean up\n+            this._state = ABORTING;\n+            await pool.terminate(true);\n+          }\n+          throw err;\n+        }\n+      } finally {\n+        debug('run(): done running file %s', file);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Listen on `Process.SIGINT`; terminate pool if caught.\n+   * Returns the listener for later call to `process.removeListener()`.\n+   * @param {BufferedWorkerPool} pool - Worker pool\n+   * @returns {SigIntListener} Listener\n+   */\n+  _bindSigIntListener(pool) {\n+    const sigIntListener = async () => {\n+      debug('run(): caught a SIGINT');\n+      this._state = ABORTING;\n+\n+      try {\n+        debug('run(): force-terminating worker pool');\n+        await pool.terminate(true);\n+      } catch (err) {\n+        console.error(\n+          `Error while attempting to force-terminate worker pool: ${err}`\n+        );\n+        process.exitCode = 1;\n+      } finally {\n+        process.nextTick(() => {\n+          debug('run(): imminent death');\n+          this._state = ABORTED;\n+          process.kill(process.pid, 'SIGINT');\n+        });\n+      }\n+    };\n+\n+    process.once('SIGINT', sigIntListener);\n+\n+    return sigIntListener;\n+  }\n+\n+  /**\n+   * Runs Mocha tests by creating a thread pool, then delegating work to the\n+   * worker threads.\n+   *\n+   * Each worker receives one file, and as workers become available, they take a\n+   * file from the queue and run it. The worker thread execution is treated like\n+   * an RPC--it returns a `Promise` containing serialized information about the\n+   * run.  The information is processed as it's received, and emitted to a\n+   * {@link Reporter}, which is likely listening for these events.\n+   *\n+   * @param {Function} callback - Called with an exit code corresponding to\n+   * number of test failures.\n+   * @param {{files: string[], options: Options}} opts - Files to run and\n+   * command-line options, respectively.\n+   */\n+  run(callback, {files, options} = {}) {\n+    /**\n+     * Listener on `Process.SIGINT` which tries to cleanly terminate the worker pool.\n+     */\n+    let sigIntListener;\n+    // This function should _not_ return a `Promise`; its parent (`Runner#run`)\n+    // returns this instance, so this should do the same. However, we want to make\n+    // use of `async`/`await`, so we use this IIFE.\n+\n+    (async () => {\n+      /**\n+       * This is an interval that outputs stats about the worker pool every so often\n+       */\n+      let debugInterval;\n+\n+      /**\n+       * @type {BufferedWorkerPool}\n+       */\n+      let pool;\n+\n+      try {\n+        pool = BufferedWorkerPool.create({maxWorkers: options.jobs});\n+\n+        sigIntListener = this._bindSigIntListener(pool);\n+\n+        /* istanbul ignore next */\n+        debugInterval = setInterval(\n+          () => debugStats(pool),\n+          DEBUG_STATS_INTERVAL\n+        ).unref();\n+\n+        // this is set for uncaught exception handling in `Runner#uncaught`\n+        // TODO: `Runner` should be using a state machine instead.\n+        this.started = true;\n+        this._state = RUNNING;\n+\n+        this.emit(EVENT_RUN_BEGIN);\n+\n+        const results = await allSettled(\n+          files.map(this._createFileRunner(pool, options))\n+        );\n+\n+        // note that pool may already be terminated due to --bail\n+        await pool.terminate();\n+\n+        results\n+          .filter(({status}) => status === 'rejected')\n+          .forEach(({reason}) => {\n+            if (this.allowUncaught) {\n+              // yep, just the first one.\n+              throw reason;\n+            }\n+            // \"rejected\" will correspond to uncaught exceptions.\n+            // unlike the serial runner, the parallel runner can always recover.\n+            this.uncaught(reason);\n+          });\n+\n+        if (this._state === ABORTING) {\n+          return;\n+        }\n+        this.emit(EVENT_RUN_END);\n+        debug('run(): completing with failure count %d', this.failures);\n+        callback(this.failures);\n+      } catch (err) {\n+        // this `nextTick` takes us out of the `Promise` scope, so the\n+        // exception will not be caught and returned as a rejected `Promise`,\n+        // which would lead to an `unhandledRejection` event.\n+        process.nextTick(() => {\n+          debug('run(): re-throwing uncaught exception');\n+          throw err;\n+        });\n+      } finally {\n+        clearInterval(debugInterval);\n+        process.removeListener('SIGINT', sigIntListener);\n+      }\n+    })();\n+    return this;\n+  }\n+}\n+\n+module.exports = ParallelBufferedRunner;\n+\n+/**\n+ * Listener function intended to be bound to `Process.SIGINT` event\n+ * @callback SigIntListener\n+ * @returns {Promise<void>}\n+ */\n+\n+/**\n+ * A function accepting a test file path and returning the results of a test run\n+ * @callback FileRunner\n+ * @param {string} filename - File to run\n+ * @returns {Promise<SerializedWorkerResult>}\n+ */"
      },
      {
        "sha": "3fc8b1549167b142016d4e69f4958c3d5e385627",
        "filename": "lib/nodejs/reporters/parallel-buffered.js",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Freporters%2Fparallel-buffered.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Freporters%2Fparallel-buffered.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fnodejs%2Freporters%2Fparallel-buffered.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -0,0 +1,133 @@\n+/**\n+ * \"Buffered\" reporter used internally by a worker process when running in parallel mode.\n+ * @module reporters/parallel-buffered\n+ * @private\n+ */\n+\n+'use strict';\n+\n+/**\n+ * Module dependencies.\n+ */\n+\n+const {\n+  EVENT_SUITE_BEGIN,\n+  EVENT_SUITE_END,\n+  EVENT_TEST_FAIL,\n+  EVENT_TEST_PASS,\n+  EVENT_TEST_PENDING,\n+  EVENT_TEST_BEGIN,\n+  EVENT_TEST_END,\n+  EVENT_TEST_RETRY,\n+  EVENT_DELAY_BEGIN,\n+  EVENT_DELAY_END,\n+  EVENT_HOOK_BEGIN,\n+  EVENT_HOOK_END,\n+  EVENT_RUN_END\n+} = require('../../runner').constants;\n+const {SerializableEvent, SerializableWorkerResult} = require('../serializer');\n+const debug = require('debug')('mocha:reporters:buffered');\n+const Base = require('../../reporters/base');\n+\n+/**\n+ * List of events to listen to; these will be buffered and sent\n+ * when `Mocha#run` is complete (via {@link ParallelBuffered#done}).\n+ */\n+const EVENT_NAMES = [\n+  EVENT_SUITE_BEGIN,\n+  EVENT_SUITE_END,\n+  EVENT_TEST_BEGIN,\n+  EVENT_TEST_PENDING,\n+  EVENT_TEST_FAIL,\n+  EVENT_TEST_PASS,\n+  EVENT_TEST_RETRY,\n+  EVENT_TEST_END,\n+  EVENT_HOOK_BEGIN,\n+  EVENT_HOOK_END\n+];\n+\n+/**\n+ * Like {@link EVENT_NAMES}, except we expect these events to only be emitted\n+ * by the `Runner` once.\n+ */\n+const ONCE_EVENT_NAMES = [EVENT_DELAY_BEGIN, EVENT_DELAY_END];\n+\n+/**\n+ * The `ParallelBuffered` reporter is for use by concurrent runs. Instead of outputting\n+ * to `STDOUT`, etc., it retains a list of events it receives and hands these\n+ * off to the callback passed into {@link Mocha#run}. That callback will then\n+ * return the data to the main process.\n+ * @private\n+ */\n+class ParallelBuffered extends Base {\n+  /**\n+   * Listens for {@link Runner} events and retains them in an `events` instance prop.\n+   * @param {Runner} runner\n+   */\n+  constructor(runner, opts) {\n+    super(runner, opts);\n+\n+    /**\n+     * Retained list of events emitted from the {@link Runner} instance.\n+     * @type {BufferedEvent[]}\n+     * @memberOf Buffered\n+     */\n+    const events = (this.events = []);\n+\n+    /**\n+     * mapping of event names to listener functions we've created,\n+     * so we can cleanly _remove_ them from the runner once it's completed.\n+     */\n+    const listeners = new Map();\n+\n+    /**\n+     * Creates a listener for event `eventName` and adds it to the `listeners`\n+     * map. This is a defensive measure, so that we don't a) leak memory or b)\n+     * remove _other_ listeners that may not be associated with this reporter.\n+     * @param {string} eventName - Event name\n+     */\n+    const createListener = eventName =>\n+      listeners\n+        .set(eventName, (runnable, err) => {\n+          events.push(SerializableEvent.create(eventName, runnable, err));\n+        })\n+        .get(eventName);\n+\n+    EVENT_NAMES.forEach(evt => {\n+      runner.on(evt, createListener(evt));\n+    });\n+    ONCE_EVENT_NAMES.forEach(evt => {\n+      runner.once(evt, createListener(evt));\n+    });\n+\n+    runner.once(EVENT_RUN_END, () => {\n+      debug('received EVENT_RUN_END');\n+      listeners.forEach((listener, evt) => {\n+        runner.removeListener(evt, listener);\n+        listeners.delete(evt);\n+      });\n+    });\n+  }\n+\n+  /**\n+   * Calls the {@link Mocha#run} callback (`callback`) with the test failure\n+   * count and the array of {@link BufferedEvent} objects. Resets the array.\n+   * @param {number} failures - Number of failed tests\n+   * @param {Function} callback - The callback passed to {@link Mocha#run}.\n+   */\n+  done(failures, callback) {\n+    callback(SerializableWorkerResult.create(this.events, failures));\n+    this.events = []; // defensive\n+  }\n+}\n+\n+/**\n+ * Serializable event data from a `Runner`.  Keys of the `data` property\n+ * beginning with `__` will be converted into a function which returns the value\n+ * upon deserialization.\n+ * @typedef {Object} BufferedEvent\n+ * @property {string} name - Event name\n+ * @property {object} data - Event parameters\n+ */\n+\n+module.exports = ParallelBuffered;"
      },
      {
        "sha": "dae366ce79b9a6768f76cceb2bc2407d070cb784",
        "filename": "lib/nodejs/serializer.js",
        "status": "added",
        "additions": 402,
        "deletions": 0,
        "changes": 402,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fserializer.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fserializer.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fnodejs%2Fserializer.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -0,0 +1,402 @@\n+/**\n+ * Serialization/deserialization classes and functions for communication between a main Mocha process and worker processes.\n+ * @module serializer\n+ * @private\n+ */\n+\n+'use strict';\n+\n+const {type} = require('../utils');\n+const {createInvalidArgumentTypeError} = require('../errors');\n+// this is not named `mocha:parallel:serializer` because it's noisy and it's\n+// helpful to be able to write `DEBUG=mocha:parallel*` and get everything else.\n+const debug = require('debug')('mocha:serializer');\n+\n+const SERIALIZABLE_RESULT_NAME = 'SerializableWorkerResult';\n+const SERIALIZABLE_TYPES = new Set(['object', 'array', 'function', 'error']);\n+\n+/**\n+ * The serializable result of a test file run from a worker.\n+ * @private\n+ */\n+class SerializableWorkerResult {\n+  /**\n+   * Creates instance props; of note, the `__type` prop.\n+   *\n+   * Note that the failure count is _redundant_ and could be derived from the\n+   * list of events; but since we're already doing the work, might as well use\n+   * it.\n+   * @param {SerializableEvent[]} [events=[]] - Events to eventually serialize\n+   * @param {number} [failureCount=0] - Failure count\n+   */\n+  constructor(events = [], failureCount = 0) {\n+    /**\n+     * The number of failures in this run\n+     * @type {number}\n+     */\n+    this.failureCount = failureCount;\n+    /**\n+     * All relevant events emitted from the {@link Runner}.\n+     * @type {SerializableEvent[]}\n+     */\n+    this.events = events;\n+\n+    /**\n+     * Symbol-like value needed to distinguish when attempting to deserialize\n+     * this object (once it's been received over IPC).\n+     * @type {Readonly<\"SerializableWorkerResult\">}\n+     */\n+    Object.defineProperty(this, '__type', {\n+      value: SERIALIZABLE_RESULT_NAME,\n+      enumerable: true,\n+      writable: false\n+    });\n+  }\n+\n+  /**\n+   * Instantiates a new {@link SerializableWorkerResult}.\n+   * @param {...any} args - Args to constructor\n+   * @returns {SerilizableWorkerResult}\n+   */\n+  static create(...args) {\n+    return new SerializableWorkerResult(...args);\n+  }\n+\n+  /**\n+   * Serializes each {@link SerializableEvent} in our `events` prop;\n+   * makes this object read-only.\n+   * @returns {Readonly<SerializableWorkerResult>}\n+   */\n+  serialize() {\n+    this.events.forEach(event => {\n+      event.serialize();\n+    });\n+    return Object.freeze(this);\n+  }\n+\n+  /**\n+   * Deserializes a {@link SerializedWorkerResult} into something reporters can\n+   * use; calls {@link SerializableEvent.deserialize} on each item in its\n+   * `events` prop.\n+   * @param {SerializedWorkerResult} obj\n+   * @returns {SerializedWorkerResult}\n+   */\n+  static deserialize(obj) {\n+    obj.events.forEach(event => {\n+      SerializableEvent.deserialize(event);\n+    });\n+    return obj;\n+  }\n+\n+  /**\n+   * Returns `true` if this is a {@link SerializedWorkerResult} or a\n+   * {@link SerializableWorkerResult}.\n+   * @param {*} value - A value to check\n+   * @returns {boolean} If true, it's deserializable\n+   */\n+  static isSerializedWorkerResult(value) {\n+    return (\n+      value instanceof SerializableWorkerResult ||\n+      (type(value) === 'object' && value.__type === SERIALIZABLE_RESULT_NAME)\n+    );\n+  }\n+}\n+\n+/**\n+ * Represents an event, emitted by a {@link Runner}, which is to be transmitted\n+ * over IPC.\n+ *\n+ * Due to the contents of the event data, it's not possible to send them\n+ * verbatim. When received by the main process--and handled by reporters--these\n+ * objects are expected to contain {@link Runnable} instances.  This class\n+ * provides facilities to perform the translation via serialization and\n+ * deserialization.\n+ * @private\n+ */\n+class SerializableEvent {\n+  /**\n+   * Constructs a `SerializableEvent`, throwing if we receive unexpected data.\n+   *\n+   * Practically, events emitted from `Runner` have a minumum of zero (0)\n+   * arguments-- (for example, {@link Runnable.constants.EVENT_RUN_BEGIN}) and a\n+   * maximum of two (2) (for example,\n+   * {@link Runnable.constants.EVENT_TEST_FAIL}, where the second argument is an\n+   * `Error`).  The first argument, if present, is a {@link Runnable}. This\n+   * constructor's arguments adhere to this convention.\n+   * @param {string} eventName - A non-empty event name.\n+   * @param {any} [originalValue] - Some data. Corresponds to extra arguments\n+   * passed to `EventEmitter#emit`.\n+   * @param {Error} [originalError] - An error, if there's an error.\n+   * @throws If `eventName` is empty, or `originalValue` is a non-object.\n+   */\n+  constructor(eventName, originalValue, originalError) {\n+    if (!eventName) {\n+      throw new Error('expected a non-empty `eventName` string argument');\n+    }\n+    /**\n+     * The event name.\n+     * @memberof SerializableEvent\n+     */\n+    this.eventName = eventName;\n+    const originalValueType = type(originalValue);\n+    if (originalValueType !== 'object' && originalValueType !== 'undefined') {\n+      throw new Error(\n+        `expected object, received [${originalValueType}]: ${originalValue}`\n+      );\n+    }\n+    /**\n+     * An error, if present.\n+     * @memberof SerializableEvent\n+     */\n+    Object.defineProperty(this, 'originalError', {\n+      value: originalError,\n+      enumerable: false\n+    });\n+\n+    /**\n+     * The raw value.\n+     *\n+     * We don't want this value sent via IPC; making it non-enumerable will do that.\n+     *\n+     * @memberof SerializableEvent\n+     */\n+    Object.defineProperty(this, 'originalValue', {\n+      value: originalValue,\n+      enumerable: false\n+    });\n+  }\n+\n+  /**\n+   * In case you hated using `new` (I do).\n+   *\n+   * @param  {...any} args - Args for {@link SerializableEvent#constructor}.\n+   * @returns {SerializableEvent} A new `SerializableEvent`\n+   */\n+  static create(...args) {\n+    return new SerializableEvent(...args);\n+  }\n+\n+  /**\n+   * Used internally by {@link SerializableEvent#serialize}.\n+   * @ignore\n+   * @param {Array<object|string>} pairs - List of parent/key tuples to process; modified in-place. This JSDoc type is an approximation\n+   * @param {object} parent - Some parent object\n+   * @param {string} key - Key to inspect\n+   * @param {WeakSet<Object>} seenObjects - For avoiding circular references\n+   */\n+  static _serialize(pairs, parent, key, seenObjects) {\n+    let value = parent[key];\n+    if (seenObjects.has(value)) {\n+      parent[key] = Object.create(null);\n+      return;\n+    }\n+    if (type(value) === 'error' || value instanceof Error) {\n+      // we need to reference the stack prop b/c it's lazily-loaded.\n+      // `__type` is necessary for deserialization to create an `Error` later.\n+      // `message` is apparently not enumerable, so we must handle it specifically.\n+      value = Object.assign(Object.create(null), value, {\n+        stack: value.stack,\n+        message: value.message,\n+        __type: 'Error'\n+      });\n+      parent[key] = value;\n+      // after this, the result of type(value) will be `object`, and we'll throw\n+      // whatever other junk is in the original error into the new `value`.\n+    }\n+    switch (type(value)) {\n+      case 'object':\n+        if (type(value.serialize) === 'function') {\n+          parent[key] = value.serialize();\n+        } else {\n+          // by adding props to the `pairs` array, we will process it further\n+          pairs.push(\n+            ...Object.keys(value)\n+              .filter(key => SERIALIZABLE_TYPES.has(type(value[key])))\n+              .map(key => [value, key])\n+          );\n+        }\n+        break;\n+      case 'function':\n+        // we _may_ want to dig in to functions for some assertion libraries\n+        // that might put a usable property on a function.\n+        // for now, just zap it.\n+        delete parent[key];\n+        break;\n+      case 'array':\n+        pairs.push(\n+          ...value\n+            .filter(value => SERIALIZABLE_TYPES.has(type(value)))\n+            .map((value, index) => [value, index])\n+        );\n+        break;\n+    }\n+  }\n+\n+  /**\n+   * Modifies this object *in place* (for theoretical memory consumption &\n+   * performance reasons); serializes `SerializableEvent#originalValue` (placing\n+   * the result in `SerializableEvent#data`) and `SerializableEvent#error`.\n+   * Freezes this object. The result is an object that can be transmitted over\n+   * IPC.\n+   * If this quickly becomes unmaintainable, we will want to move towards immutable\n+   * objects post-haste.\n+   */\n+  serialize() {\n+    // given a parent object and a key, inspect the value and decide whether\n+    // to replace it, remove it, or add it to our `pairs` array to further process.\n+    // this is recursion in loop form.\n+    const originalValue = this.originalValue;\n+    const result = Object.assign(Object.create(null), {\n+      data:\n+        type(originalValue) === 'object' &&\n+        type(originalValue.serialize) === 'function'\n+          ? originalValue.serialize()\n+          : originalValue,\n+      error: this.originalError\n+    });\n+\n+    const pairs = Object.keys(result).map(key => [result, key]);\n+    const seenObjects = new WeakSet();\n+\n+    let pair;\n+    while ((pair = pairs.shift())) {\n+      SerializableEvent._serialize(pairs, ...pair, seenObjects);\n+      seenObjects.add(pair[0]);\n+    }\n+\n+    this.data = result.data;\n+    this.error = result.error;\n+\n+    return Object.freeze(this);\n+  }\n+\n+  /**\n+   * Used internally by {@link SerializableEvent.deserialize}; creates an `Error`\n+   * from an `Error`-like (serialized) object\n+   * @ignore\n+   * @param {Object} value - An Error-like value\n+   * @returns {Error} Real error\n+   */\n+  static _deserializeError(value) {\n+    const error = new Error(value.message);\n+    error.stack = value.stack;\n+    Object.assign(error, value);\n+    delete error.__type;\n+    return error;\n+  }\n+\n+  /**\n+   * Used internally by {@link SerializableEvent.deserialize}; recursively\n+   * deserializes an object in-place.\n+   * @param {object|Array} parent - Some object or array\n+   * @param {string|number} key - Some prop name or array index within `parent`\n+   */\n+  static _deserializeObject(parent, key) {\n+    if (key === '__proto__') {\n+      delete parent[key];\n+      return;\n+    }\n+    const value = parent[key];\n+    // keys beginning with `$$` are converted into functions returning the value\n+    // and renamed, stripping the `$$` prefix.\n+    // functions defined this way cannot be array members!\n+    if (type(key) === 'string' && key.startsWith('$$')) {\n+      const newKey = key.slice(2);\n+      parent[newKey] = () => value;\n+      delete parent[key];\n+      key = newKey;\n+    }\n+    if (type(value) === 'array') {\n+      value.forEach((_, idx) => {\n+        SerializableEvent._deserializeObject(value, idx);\n+      });\n+    } else if (type(value) === 'object') {\n+      if (value.__type === 'Error') {\n+        parent[key] = SerializableEvent._deserializeError(value);\n+      } else {\n+        Object.keys(value).forEach(key => {\n+          SerializableEvent._deserializeObject(value, key);\n+        });\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Deserialize value returned from a worker into something more useful.\n+   * Does not return the same object.\n+   * @todo do this in a loop instead of with recursion (if necessary)\n+   * @param {SerializedEvent} obj - Object returned from worker\n+   * @returns {SerializedEvent} Deserialized result\n+   */\n+  static deserialize(obj) {\n+    if (!obj) {\n+      throw createInvalidArgumentTypeError('Expected value', obj);\n+    }\n+\n+    obj = Object.assign(Object.create(null), obj);\n+\n+    if (obj.data) {\n+      Object.keys(obj.data).forEach(key => {\n+        SerializableEvent._deserializeObject(obj.data, key);\n+      });\n+    }\n+\n+    if (obj.error) {\n+      obj.error = SerializableEvent._deserializeError(obj.error);\n+    }\n+\n+    return obj;\n+  }\n+}\n+\n+/**\n+ * \"Serializes\" a value for transmission over IPC as a message.\n+ *\n+ * If value is an object and has a `serialize()` method, call that method; otherwise return the object and hope for the best.\n+ *\n+ * @param {*} [value] - A value to serialize\n+ */\n+exports.serialize = function serialize(value) {\n+  const result =\n+    type(value) === 'object' && type(value.serialize) === 'function'\n+      ? value.serialize()\n+      : value;\n+  debug('serialized: %O', result);\n+  return result;\n+};\n+\n+/**\n+ * \"Deserializes\" a \"message\" received over IPC.\n+ *\n+ * This could be expanded with other objects that need deserialization,\n+ * but at present time we only care about {@link SerializableWorkerResult} objects.\n+ *\n+ * @param {*} [value] - A \"message\" to deserialize\n+ */\n+exports.deserialize = function deserialize(value) {\n+  const result = SerializableWorkerResult.isSerializedWorkerResult(value)\n+    ? SerializableWorkerResult.deserialize(value)\n+    : value;\n+  debug('deserialized: %O', result);\n+  return result;\n+};\n+\n+exports.SerializableEvent = SerializableEvent;\n+exports.SerializableWorkerResult = SerializableWorkerResult;\n+\n+/**\n+ * The result of calling `SerializableEvent.serialize`, as received\n+ * by the deserializer.\n+ * @typedef {Object} SerializedEvent\n+ * @property {object?} data - Optional serialized data\n+ * @property {object?} error - Optional serialized `Error`\n+ */\n+\n+/**\n+ * The result of calling `SerializableWorkerResult.serialize` as received\n+ * by the deserializer.\n+ * @typedef {Object} SerializedWorkerResult\n+ * @property {number} failureCount - Number of failures\n+ * @property {SerializedEvent[]} events - Serialized events\n+ * @property {\"SerializedWorkerResult\"} __type - Symbol-like to denote the type of object this is\n+ */"
      },
      {
        "sha": "81abb6bb1573fa62d1a8bdce770f3bd59655688a",
        "filename": "lib/nodejs/worker.js",
        "status": "added",
        "additions": 154,
        "deletions": 0,
        "changes": 154,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fworker.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fnodejs%2Fworker.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fnodejs%2Fworker.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -0,0 +1,154 @@\n+/**\n+ * A worker process.  Consumes {@link module:reporters/parallel-buffered} reporter.\n+ * @module worker\n+ * @private\n+ */\n+\n+'use strict';\n+\n+const {\n+  createInvalidArgumentTypeError,\n+  createInvalidArgumentValueError\n+} = require('../errors');\n+const workerpool = require('workerpool');\n+const Mocha = require('../mocha');\n+const {\n+  handleRequires,\n+  validatePlugin,\n+  loadRootHooks\n+} = require('../cli/run-helpers');\n+const d = require('debug');\n+const debug = d.debug(`mocha:parallel:worker:${process.pid}`);\n+const isDebugEnabled = d.enabled(`mocha:parallel:worker:${process.pid}`);\n+const {serialize} = require('./serializer');\n+const {setInterval, clearInterval} = global;\n+\n+const BUFFERED_REPORTER_PATH = require.resolve('./reporters/parallel-buffered');\n+\n+let rootHooks;\n+\n+if (workerpool.isMainThread) {\n+  throw new Error(\n+    'This script is intended to be run as a worker (by the `workerpool` package).'\n+  );\n+}\n+\n+/**\n+ * Initializes some stuff on the first call to {@link run}.\n+ *\n+ * Handles `--require` and `--ui`.  Does _not_ handle `--reporter`,\n+ * as only the `Buffered` reporter is used.\n+ *\n+ * **This function only runs once per worker**; it overwrites itself with a no-op\n+ * before returning.\n+ *\n+ * @param {Options} argv - Command-line options\n+ */\n+let bootstrap = async argv => {\n+  const rawRootHooks = await handleRequires(argv.require);\n+  rootHooks = await loadRootHooks(rawRootHooks);\n+  validatePlugin(argv, 'ui', Mocha.interfaces);\n+  bootstrap = () => {};\n+  debug('bootstrap(): finished with args: %O', argv);\n+};\n+\n+/**\n+ * Runs a single test file in a worker thread.\n+ * @param {string} filepath - Filepath of test file\n+ * @param {string} [serializedOptions] - **Serialized** options. This string will be eval'd!\n+ * @see https://npm.im/serialize-javascript\n+ * @returns {Promise<{failures: number, events: BufferedEvent[]}>} - Test\n+ * failure count and list of events.\n+ */\n+async function run(filepath, serializedOptions = '{}') {\n+  if (!filepath) {\n+    throw createInvalidArgumentTypeError(\n+      'Expected a non-empty \"filepath\" argument',\n+      'file',\n+      'string'\n+    );\n+  }\n+\n+  debug('run(): running test file %s', filepath);\n+\n+  if (typeof serializedOptions !== 'string') {\n+    throw createInvalidArgumentTypeError(\n+      'run() expects second parameter to be a string which was serialized by the `serialize-javascript` module',\n+      'serializedOptions',\n+      'string'\n+    );\n+  }\n+  let argv;\n+  try {\n+    // eslint-disable-next-line no-eval\n+    argv = eval('(' + serializedOptions + ')');\n+  } catch (err) {\n+    throw createInvalidArgumentValueError(\n+      'run() was unable to deserialize the options',\n+      'serializedOptions',\n+      serializedOptions\n+    );\n+  }\n+\n+  const opts = Object.assign({ui: 'bdd'}, argv, {\n+    // workers only use the `Buffered` reporter.\n+    reporter: BUFFERED_REPORTER_PATH,\n+    // if this was true, it would cause infinite recursion.\n+    parallel: false,\n+    // this doesn't work in parallel mode\n+    forbidOnly: true,\n+    // it's useful for a Mocha instance to know if it's running in a worker process.\n+    isWorker: true\n+  });\n+\n+  await bootstrap(opts);\n+\n+  opts.rootHooks = rootHooks;\n+\n+  const mocha = new Mocha(opts).addFile(filepath);\n+\n+  try {\n+    await mocha.loadFilesAsync();\n+  } catch (err) {\n+    debug('run(): could not load file %s: %s', filepath, err);\n+    throw err;\n+  }\n+\n+  return new Promise((resolve, reject) => {\n+    let debugInterval;\n+    /* istanbul ignore next */\n+    if (isDebugEnabled) {\n+      debugInterval = setInterval(() => {\n+        debug('run(): still running %s...', filepath);\n+      }, 5000).unref();\n+    }\n+    mocha.run(result => {\n+      // Runner adds these; if we don't remove them, we'll get a leak.\n+      process.removeAllListeners('uncaughtException');\n+\n+      try {\n+        const serialized = serialize(result);\n+        debug(\n+          'run(): completed run with %d test failures; returning to main process',\n+          typeof result.failures === 'number' ? result.failures : 0\n+        );\n+        resolve(serialized);\n+      } catch (err) {\n+        // TODO: figure out exactly what the sad path looks like here.\n+        // rejection should only happen if an error is \"unrecoverable\"\n+        debug('run(): serialization failed; rejecting: %O', err);\n+        reject(err);\n+      } finally {\n+        clearInterval(debugInterval);\n+      }\n+    });\n+  });\n+}\n+\n+// this registers the `run` function.\n+workerpool.worker({run});\n+\n+debug('started worker process');\n+\n+// for testing\n+exports.run = run;"
      },
      {
        "sha": "cdf77a28471f46a7c827c298595bc4039b3ad603",
        "filename": "lib/reporters/base.js",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Freporters%2Fbase.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Freporters%2Fbase.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Freporters%2Fbase.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -10,7 +10,7 @@ var tty = require('tty');\n var diff = require('diff');\n var milliseconds = require('ms');\n var utils = require('../utils');\n-var supportsColor = process.browser ? null : require('supports-color');\n+var supportsColor = utils.isBrowser() ? null : require('supports-color');\n var constants = require('../runner').constants;\n var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;\n var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;\n@@ -37,7 +37,7 @@ var consoleLog = console.log;\n  */\n \n exports.useColors =\n-  !process.browser &&\n+  !utils.isBrowser() &&\n   (supportsColor.stdout || process.env.MOCHA_COLORS !== undefined);\n \n /**"
      },
      {
        "sha": "03c9acb1af459f588a2832c1078397c06279ece1",
        "filename": "lib/reporters/landing.js",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Freporters%2Flanding.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Freporters%2Flanding.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Freporters%2Flanding.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -56,11 +56,12 @@ function Landing(runner, options) {\n \n   var self = this;\n   var width = (Base.window.width * 0.75) | 0;\n-  var total = runner.total;\n   var stream = process.stdout;\n+\n   var plane = color('plane', '✈');\n   var crashed = -1;\n   var n = 0;\n+  var total = 0;\n \n   function runway() {\n     var buf = Array(width).join('-');\n@@ -74,8 +75,7 @@ function Landing(runner, options) {\n \n   runner.on(EVENT_TEST_END, function(test) {\n     // check if the plane crashed\n-    var col = crashed === -1 ? ((width * ++n) / total) | 0 : crashed;\n-\n+    var col = crashed === -1 ? ((width * ++n) / ++total) | 0 : crashed;\n     // show the crash\n     if (test.state === STATE_FAILED) {\n       plane = color('plane crash', '✈');"
      },
      {
        "sha": "aa79fb19f1a3e254b0bc95b1dc4799bd55d7ebdb",
        "filename": "lib/reporters/tap.js",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Freporters%2Ftap.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Freporters%2Ftap.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Freporters%2Ftap.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -50,9 +50,7 @@ function TAP(runner, options) {\n   this._producer = createProducer(tapVersion);\n \n   runner.once(EVENT_RUN_BEGIN, function() {\n-    var ntests = runner.grepTotal(runner.suite);\n     self._producer.writeVersion();\n-    self._producer.writePlan(ntests);\n   });\n \n   runner.on(EVENT_TEST_END, function() {\n@@ -204,6 +202,7 @@ TAPProducer.prototype.writeEpilogue = function(stats) {\n   println('# pass ' + stats.passes);\n   // :TBD: Why are we not showing pending results?\n   println('# fail ' + stats.failures);\n+  this.writePlan(stats.passes + stats.failures + stats.pending);\n };\n \n /**"
      },
      {
        "sha": "22e7bb91d63ea1d190452507c4766031ee27af28",
        "filename": "lib/runner.js",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Frunner.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Frunner.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Frunner.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -194,6 +194,7 @@ inherits(Runner, EventEmitter);\n  * @param {EventEmitter} target - The `EventEmitter`\n  * @param {string} eventName - The event name\n  * @param {string} fn - Listener function\n+ * @private\n  */\n Runner.prototype._addEventListener = function(target, eventName, listener) {\n   target.on(eventName, listener);\n@@ -205,6 +206,7 @@ Runner.prototype._addEventListener = function(target, eventName, listener) {\n  * @param {EventEmitter} target - The `EventEmitter`\n  * @param {string} eventName - The event anme\n  * @param {function} listener - Listener function\n+ * @private\n  */\n Runner.prototype._removeEventListener = function(target, eventName, listener) {\n   var eventListenerIndex = -1;\n@@ -898,7 +900,7 @@ Runner.prototype._uncaught = function(err) {\n     return;\n   }\n   // browser does not exit script when throwing in global.onerror()\n-  if (this.allowUncaught && !process.browser) {\n+  if (this.allowUncaught && !utils.isBrowser()) {\n     debug('uncaught(): bubbling exception due to --allow-uncaught');\n     throw err;\n   }\n@@ -976,10 +978,11 @@ Runner.prototype._uncaught = function(err) {\n  *\n  * @public\n  * @memberof Runner\n- * @param {Function} fn\n+ * @param {Function} fn - Callback when finished\n+ * @param {{files: string[], options: Options}} [opts] - For subclasses\n  * @return {Runner} Runner instance.\n  */\n-Runner.prototype.run = function(fn) {\n+Runner.prototype.run = function(fn, opts) {\n   var self = this;\n   var rootSuite = this.suite;\n "
      },
      {
        "sha": "f3c8b104af3964bf09bfa70b20e365b562ac627b",
        "filename": "lib/suite.js",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fsuite.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Fsuite.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Fsuite.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -557,6 +557,22 @@ Suite.prototype.cleanReferences = function cleanReferences() {\n   }\n };\n \n+/**\n+ * Returns an object suitable for IPC.\n+ * Functions are represented by keys beginning with `$$`.\n+ * @private\n+ * @returns {Object}\n+ */\n+Suite.prototype.serialize = function serialize() {\n+  return {\n+    _bail: this._bail,\n+    $$fullTitle: this.fullTitle(),\n+    $$isPending: this.isPending(),\n+    root: this.root,\n+    title: this.title\n+  };\n+};\n+\n var constants = utils.defineConstants(\n   /**\n    * {@link Suite}-related constants."
      },
      {
        "sha": "3fb3e57a4e5a064bf616bf1c94081681c46385f6",
        "filename": "lib/test.js",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Ftest.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Ftest.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Ftest.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -79,3 +79,31 @@ Test.prototype.clone = function() {\n   test.ctx = this.ctx;\n   return test;\n };\n+\n+/**\n+ * Returns an minimal object suitable for transmission over IPC.\n+ * Functions are represented by keys beginning with `$$`.\n+ * @private\n+ * @returns {Object}\n+ */\n+Test.prototype.serialize = function serialize() {\n+  return {\n+    $$currentRetry: this._currentRetry,\n+    $$fullTitle: this.fullTitle(),\n+    $$isPending: this.pending,\n+    $$retriedTest: this._retriedTest || null,\n+    $$slow: this._slow,\n+    $$titlePath: this.titlePath(),\n+    body: this.body,\n+    duration: this.duration,\n+    err: this.err,\n+    parent: {\n+      $$fullTitle: this.parent.fullTitle()\n+    },\n+    speed: this.speed,\n+    state: this.state,\n+    title: this.title,\n+    type: this.type,\n+    file: this.file\n+  };\n+};"
      },
      {
        "sha": "b338bc094cc8a77b06fc015132f7e00666199819",
        "filename": "lib/utils.js",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Futils.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/lib%2Futils.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Futils.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -488,7 +488,6 @@ function isHiddenOnUnix(pathname) {\n  * **Make no assumption that the names will be sorted in any fashion.**\n  *\n  * @public\n- * @memberof Mocha.utils\n  * @param {string} filepath - Base path to start searching from.\n  * @param {string[]} [extensions=[]] - File extensions to look for.\n  * @param {boolean} [recursive=false] - Whether to recurse into subdirectories.\n@@ -812,7 +811,7 @@ exports.defineConstants = function(obj) {\n  * @returns {Boolean} whether the current version of Node.JS supports ES Modules in a way that is compatible with Mocha\n  */\n exports.supportsEsModules = function() {\n-  if (!process.browser && process.versions && process.versions.node) {\n+  if (!exports.isBrowser() && process.versions && process.versions.node) {\n     var versionFields = process.versions.node.split('.');\n     var major = +versionFields[0];\n     var minor = +versionFields[1];\n@@ -832,3 +831,13 @@ exports.supportsEsModules = function() {\n exports.cwd = function cwd() {\n   return process.cwd();\n };\n+\n+/**\n+ * Returns `true` if Mocha is running in a browser.\n+ * Checks for `process.browser`.\n+ * @returns {boolean}\n+ * @private\n+ */\n+exports.isBrowser = function isBrowser() {\n+  return Boolean(process.browser);\n+};"
      },
      {
        "sha": "6902e1240a6ed14f489e7901e6d44f704df7980f",
        "filename": "package-lock.json",
        "status": "modified",
        "additions": 117,
        "deletions": 25,
        "changes": 142,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/package-lock.json",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/package-lock.json",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/package-lock.json?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -1237,6 +1237,17 @@\n         \"es-abstract\": \"^1.17.0-next.1\"\n       }\n     },\n+    \"array.prototype.map\": {\n+      \"version\": \"1.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/array.prototype.map/-/array.prototype.map-1.0.2.tgz\",\n+      \"integrity\": \"sha512-Az3OYxgsa1g7xDYp86l0nnN4bcmuEITGe1rbdEBVkrqkzMgDcbdQ2R7r41pNzti+4NMces3H8gMmuioZUilLgw==\",\n+      \"requires\": {\n+        \"define-properties\": \"^1.1.3\",\n+        \"es-abstract\": \"^1.17.0-next.1\",\n+        \"es-array-method-boxes-properly\": \"^1.0.0\",\n+        \"is-string\": \"^1.0.4\"\n+      }\n+    },\n     \"arraybuffer.slice\": {\n       \"version\": \"0.0.7\",\n       \"resolved\": \"https://registry.npmjs.org/arraybuffer.slice/-/arraybuffer.slice-0.0.7.tgz\",\n@@ -2384,6 +2395,12 @@\n             \"wrap-ansi\": \"^2.0.0\"\n           }\n         },\n+        \"eventemitter3\": {\n+          \"version\": \"1.2.0\",\n+          \"resolved\": \"https://registry.npmjs.org/eventemitter3/-/eventemitter3-1.2.0.tgz\",\n+          \"integrity\": \"sha1-HIaZHYFq0eUEdQ5zh0Ik7PO+xQg=\",\n+          \"dev\": true\n+        },\n         \"extend-shallow\": {\n           \"version\": \"2.0.1\",\n           \"resolved\": \"https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz\",\n@@ -3060,6 +3077,16 @@\n             }\n           }\n         },\n+        \"http-proxy\": {\n+          \"version\": \"1.15.2\",\n+          \"resolved\": \"https://registry.npmjs.org/http-proxy/-/http-proxy-1.15.2.tgz\",\n+          \"integrity\": \"sha1-ZC/cr/5S00SNK9o7AHnpQJBk2jE=\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"eventemitter3\": \"1.x.x\",\n+            \"requires-port\": \"1.x.x\"\n+          }\n+        },\n         \"is-binary-path\": {\n           \"version\": \"1.0.1\",\n           \"resolved\": \"https://registry.npmjs.org/is-binary-path/-/is-binary-path-1.0.1.tgz\",\n@@ -5743,7 +5770,6 @@\n       \"version\": \"1.17.5\",\n       \"resolved\": \"https://registry.npmjs.org/es-abstract/-/es-abstract-1.17.5.tgz\",\n       \"integrity\": \"sha512-BR9auzDbySxOcfog0tLECW8l28eRGpDpU3Dm3Hp4q/N+VtLTmyj4EUN088XZWQDW/hzj6sYRDXeOFsaAODKvpg==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"es-to-primitive\": \"^1.2.1\",\n         \"function-bind\": \"^1.1.1\",\n@@ -5758,11 +5784,36 @@\n         \"string.prototype.trimright\": \"^2.1.1\"\n       }\n     },\n+    \"es-array-method-boxes-properly\": {\n+      \"version\": \"1.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/es-array-method-boxes-properly/-/es-array-method-boxes-properly-1.0.0.tgz\",\n+      \"integrity\": \"sha512-wd6JXUmyHmt8T5a2xreUwKcGPq6f1f+WwIJkijUqiGcJz1qqnZgP6XIK+QyIWU5lT7imeNxUll48bziG+TSYcA==\"\n+    },\n+    \"es-get-iterator\": {\n+      \"version\": \"1.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/es-get-iterator/-/es-get-iterator-1.1.0.tgz\",\n+      \"integrity\": \"sha512-UfrmHuWQlNMTs35e1ypnvikg6jCz3SK8v8ImvmDsh36fCVUR1MqoFDiyn0/k52C8NqO3YsO8Oe0azeesNuqSsQ==\",\n+      \"requires\": {\n+        \"es-abstract\": \"^1.17.4\",\n+        \"has-symbols\": \"^1.0.1\",\n+        \"is-arguments\": \"^1.0.4\",\n+        \"is-map\": \"^2.0.1\",\n+        \"is-set\": \"^2.0.1\",\n+        \"is-string\": \"^1.0.5\",\n+        \"isarray\": \"^2.0.5\"\n+      },\n+      \"dependencies\": {\n+        \"isarray\": {\n+          \"version\": \"2.0.5\",\n+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz\",\n+          \"integrity\": \"sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==\"\n+        }\n+      }\n+    },\n     \"es-to-primitive\": {\n       \"version\": \"1.2.1\",\n       \"resolved\": \"https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.1.tgz\",\n       \"integrity\": \"sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"is-callable\": \"^1.1.4\",\n         \"is-date-object\": \"^1.0.1\",\n@@ -6410,9 +6461,9 @@\n       }\n     },\n     \"eventemitter3\": {\n-      \"version\": \"1.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eventemitter3/-/eventemitter3-1.2.0.tgz\",\n-      \"integrity\": \"sha1-HIaZHYFq0eUEdQ5zh0Ik7PO+xQg=\",\n+      \"version\": \"4.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.4.tgz\",\n+      \"integrity\": \"sha512-rlaVLnVxtxvoyLsQQFBx53YmXHDxRIzzTLbdfxqi4yocpSjAxXwkU0cScM5JgSKMqEhrZpnvQ2D9gjylR0AimQ==\",\n       \"dev\": true\n     },\n     \"events\": {\n@@ -7776,7 +7827,6 @@\n       \"version\": \"1.0.3\",\n       \"resolved\": \"https://registry.npmjs.org/has/-/has-1.0.3.tgz\",\n       \"integrity\": \"sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"function-bind\": \"^1.1.1\"\n       }\n@@ -8089,13 +8139,14 @@\n       }\n     },\n     \"http-proxy\": {\n-      \"version\": \"1.15.2\",\n-      \"resolved\": \"https://registry.npmjs.org/http-proxy/-/http-proxy-1.15.2.tgz\",\n-      \"integrity\": \"sha1-ZC/cr/5S00SNK9o7AHnpQJBk2jE=\",\n+      \"version\": \"1.18.1\",\n+      \"resolved\": \"https://registry.npmjs.org/http-proxy/-/http-proxy-1.18.1.tgz\",\n+      \"integrity\": \"sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"eventemitter3\": \"1.x.x\",\n-        \"requires-port\": \"1.x.x\"\n+        \"eventemitter3\": \"^4.0.0\",\n+        \"follow-redirects\": \"^1.0.0\",\n+        \"requires-port\": \"^1.0.0\"\n       }\n     },\n     \"http-signature\": {\n@@ -8701,6 +8752,11 @@\n         \"is-decimal\": \"^1.0.0\"\n       }\n     },\n+    \"is-arguments\": {\n+      \"version\": \"1.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/is-arguments/-/is-arguments-1.0.4.tgz\",\n+      \"integrity\": \"sha512-xPh0Rmt8NE65sNzvyUmWgI1tz3mKq74lGA0mL8LYZcoIzKOzDh6HmrYm3d18k60nHerC8A9Km8kYu87zfSFnLA==\"\n+    },\n     \"is-arrayish\": {\n       \"version\": \"0.2.1\",\n       \"resolved\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz\",\n@@ -8723,8 +8779,7 @@\n     \"is-callable\": {\n       \"version\": \"1.1.5\",\n       \"resolved\": \"https://registry.npmjs.org/is-callable/-/is-callable-1.1.5.tgz\",\n-      \"integrity\": \"sha512-ESKv5sMCJB2jnHTWZ3O5itG+O128Hsus4K4Qh1h2/cgn2vbgnLSVqfV46AeJA9D5EeeLa9w81KUXMtn34zhX+Q==\",\n-      \"dev\": true\n+      \"integrity\": \"sha512-ESKv5sMCJB2jnHTWZ3O5itG+O128Hsus4K4Qh1h2/cgn2vbgnLSVqfV46AeJA9D5EeeLa9w81KUXMtn34zhX+Q==\"\n     },\n     \"is-ci\": {\n       \"version\": \"1.2.1\",\n@@ -8778,8 +8833,7 @@\n     \"is-date-object\": {\n       \"version\": \"1.0.2\",\n       \"resolved\": \"https://registry.npmjs.org/is-date-object/-/is-date-object-1.0.2.tgz\",\n-      \"integrity\": \"sha512-USlDT524woQ08aoZFzh3/Z6ch9Y/EWXEHQ/AaRN0SkKq4t2Jw2R2339tSXmwuVoY7LLlBCbOIlx2myP/L5zk0g==\",\n-      \"dev\": true\n+      \"integrity\": \"sha512-USlDT524woQ08aoZFzh3/Z6ch9Y/EWXEHQ/AaRN0SkKq4t2Jw2R2339tSXmwuVoY7LLlBCbOIlx2myP/L5zk0g==\"\n     },\n     \"is-decimal\": {\n       \"version\": \"1.0.4\",\n@@ -8876,6 +8930,11 @@\n         \"is-path-inside\": \"^1.0.0\"\n       }\n     },\n+    \"is-map\": {\n+      \"version\": \"2.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/is-map/-/is-map-2.0.1.tgz\",\n+      \"integrity\": \"sha512-T/S49scO8plUiAOA2DBTBG3JHpn1yiw0kRp6dgiZ0v2/6twi5eiB0rHtHFH9ZIrvlWc6+4O+m4zg5+Z833aXgw==\"\n+    },\n     \"is-natural-number\": {\n       \"version\": \"4.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/is-natural-number/-/is-natural-number-4.0.1.tgz\",\n@@ -8992,7 +9051,6 @@\n       \"version\": \"1.0.5\",\n       \"resolved\": \"https://registry.npmjs.org/is-regex/-/is-regex-1.0.5.tgz\",\n       \"integrity\": \"sha512-vlKW17SNq44owv5AQR3Cq0bQPEb8+kF3UKZ2fiZNOWtztYE5i0CzCZxFDwO58qAOWtxdBRVO/V5Qin1wjCqFYQ==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"has\": \"^1.0.3\"\n       }\n@@ -9024,6 +9082,11 @@\n       \"integrity\": \"sha512-RUbUeKwvm3XG2VYamhJL1xFktgjvPzL0Hq8C+6yrWIswDy3BIXGqCxhxkc30N9jqK311gVU137K8Ei55/zVJRg==\",\n       \"dev\": true\n     },\n+    \"is-set\": {\n+      \"version\": \"2.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/is-set/-/is-set-2.0.1.tgz\",\n+      \"integrity\": \"sha512-eJEzOtVyenDs1TMzSQ3kU3K+E0GUS9sno+F0OBT97xsgcJsF9nXMBtkT9/kut5JEpM7oL7X/0qxR17K3mcwIAA==\"\n+    },\n     \"is-stream\": {\n       \"version\": \"1.1.0\",\n       \"resolved\": \"https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz\",\n@@ -9033,8 +9096,7 @@\n     \"is-string\": {\n       \"version\": \"1.0.5\",\n       \"resolved\": \"https://registry.npmjs.org/is-string/-/is-string-1.0.5.tgz\",\n-      \"integrity\": \"sha512-buY6VNRjhQMiF1qWDouloZlQbRhDPCebwxSjxMjxgemYT46YMd2NR0/H+fBhEfWX4A/w9TBJ+ol+okqJKFE6vQ==\",\n-      \"dev\": true\n+      \"integrity\": \"sha512-buY6VNRjhQMiF1qWDouloZlQbRhDPCebwxSjxMjxgemYT46YMd2NR0/H+fBhEfWX4A/w9TBJ+ol+okqJKFE6vQ==\"\n     },\n     \"is-svg\": {\n       \"version\": \"3.0.0\",\n@@ -9049,7 +9111,6 @@\n       \"version\": \"1.0.3\",\n       \"resolved\": \"https://registry.npmjs.org/is-symbol/-/is-symbol-1.0.3.tgz\",\n       \"integrity\": \"sha512-OwijhaRSgqvhm/0ZdAcXNZt9lYdKFpcRDT5ULUuYXPoT794UNOdU+gpT6Rzo7b4V2HUl/op6GqY894AZwv9faQ==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"has-symbols\": \"^1.0.1\"\n       }\n@@ -9283,6 +9344,20 @@\n         \"is-object\": \"^1.0.1\"\n       }\n     },\n+    \"iterate-iterator\": {\n+      \"version\": \"1.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/iterate-iterator/-/iterate-iterator-1.0.1.tgz\",\n+      \"integrity\": \"sha512-3Q6tudGN05kbkDQDI4CqjaBf4qf85w6W6GnuZDtUVYwKgtC1q8yxYX7CZed7N+tLzQqS6roujWvszf13T+n9aw==\"\n+    },\n+    \"iterate-value\": {\n+      \"version\": \"1.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/iterate-value/-/iterate-value-1.0.2.tgz\",\n+      \"integrity\": \"sha512-A6fMAio4D2ot2r/TYzr4yUWrmwNdsN5xL7+HUiyACE4DXm+q8HtPcnFTp+NnW3k4N05tZ7FVYFFb2CR13NxyHQ==\",\n+      \"requires\": {\n+        \"es-get-iterator\": \"^1.0.2\",\n+        \"iterate-iterator\": \"^1.0.1\"\n+      }\n+    },\n     \"javascript-stringify\": {\n       \"version\": \"2.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/javascript-stringify/-/javascript-stringify-2.0.1.tgz\",\n@@ -12316,8 +12391,7 @@\n     \"object-inspect\": {\n       \"version\": \"1.7.0\",\n       \"resolved\": \"https://registry.npmjs.org/object-inspect/-/object-inspect-1.7.0.tgz\",\n-      \"integrity\": \"sha512-a7pEHdh1xKIAgTySUGgLMx/xwDZskN1Ud6egYYN3EdRW4ZMPNEDUTF+hwy2LUC+Bl+SyLXANnwz/jyh/qutKUw==\",\n-      \"dev\": true\n+      \"integrity\": \"sha512-a7pEHdh1xKIAgTySUGgLMx/xwDZskN1Ud6egYYN3EdRW4ZMPNEDUTF+hwy2LUC+Bl+SyLXANnwz/jyh/qutKUw==\"\n     },\n     \"object-keys\": {\n       \"version\": \"1.1.1\",\n@@ -14072,6 +14146,18 @@\n         \"asap\": \"~2.0.3\"\n       }\n     },\n+    \"promise.allsettled\": {\n+      \"version\": \"1.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/promise.allsettled/-/promise.allsettled-1.0.2.tgz\",\n+      \"integrity\": \"sha512-UpcYW5S1RaNKT6pd+s9jp9K9rlQge1UXKskec0j6Mmuq7UJCvlS2J2/s/yuPN8ehftf9HXMxWlKiPbGGUzpoRg==\",\n+      \"requires\": {\n+        \"array.prototype.map\": \"^1.0.1\",\n+        \"define-properties\": \"^1.1.3\",\n+        \"es-abstract\": \"^1.17.0-next.1\",\n+        \"function-bind\": \"^1.1.1\",\n+        \"iterate-value\": \"^1.0.0\"\n+      }\n+    },\n     \"proto-list\": {\n       \"version\": \"1.2.4\",\n       \"resolved\": \"https://registry.npmjs.org/proto-list/-/proto-list-1.2.4.tgz\",\n@@ -15323,6 +15409,11 @@\n         }\n       }\n     },\n+    \"serialize-javascript\": {\n+      \"version\": \"3.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-3.0.0.tgz\",\n+      \"integrity\": \"sha512-skZcHYw2vEX4bw90nAr2iTTsz6x2SrHEnfxgKYmZlvJYBEZrvbKtobJWlQ20zczKb3bsHHXXTYt48zBA7ni9cw==\"\n+    },\n     \"serve-index\": {\n       \"version\": \"1.9.1\",\n       \"resolved\": \"https://registry.npmjs.org/serve-index/-/serve-index-1.9.1.tgz\",\n@@ -16461,7 +16552,6 @@\n       \"version\": \"1.0.0\",\n       \"resolved\": \"https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.0.tgz\",\n       \"integrity\": \"sha512-EEJnGqa/xNfIg05SxiPSqRS7S9qwDhYts1TSLR1BQfYUfPe1stofgGKvwERK9+9yf+PpfBMlpBaCHucXGPQfUA==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"define-properties\": \"^1.1.3\",\n         \"es-abstract\": \"^1.17.5\"\n@@ -16471,7 +16561,6 @@\n       \"version\": \"2.1.2\",\n       \"resolved\": \"https://registry.npmjs.org/string.prototype.trimleft/-/string.prototype.trimleft-2.1.2.tgz\",\n       \"integrity\": \"sha512-gCA0tza1JBvqr3bfAIFJGqfdRTyPae82+KTnm3coDXkZN9wnuW3HjGgN386D7hfv5CHQYCI022/rJPVlqXyHSw==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"define-properties\": \"^1.1.3\",\n         \"es-abstract\": \"^1.17.5\",\n@@ -16482,7 +16571,6 @@\n       \"version\": \"2.1.2\",\n       \"resolved\": \"https://registry.npmjs.org/string.prototype.trimright/-/string.prototype.trimright-2.1.2.tgz\",\n       \"integrity\": \"sha512-ZNRQ7sY3KroTaYjRS6EbNiiHrOkjihL9aQE/8gfQ4DtAC/aEBRHFJa44OmoWxGGqXuJlfKkZW4WcXErGr+9ZFg==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"define-properties\": \"^1.1.3\",\n         \"es-abstract\": \"^1.17.5\",\n@@ -16493,7 +16581,6 @@\n       \"version\": \"1.0.0\",\n       \"resolved\": \"https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.0.tgz\",\n       \"integrity\": \"sha512-iCP8g01NFYiiBOnwG1Xc3WZLyoo+RuBymwIlWncShXDDJYWN6DbnM3odslBJdgCdRlq94B5s63NWAZlcn2CS4w==\",\n-      \"dev\": true,\n       \"requires\": {\n         \"define-properties\": \"^1.1.3\",\n         \"es-abstract\": \"^1.17.5\"\n@@ -18849,6 +18936,11 @@\n       \"integrity\": \"sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=\",\n       \"dev\": true\n     },\n+    \"workerpool\": {\n+      \"version\": \"6.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/workerpool/-/workerpool-6.0.0.tgz\",\n+      \"integrity\": \"sha512-fU2OcNA/GVAJLLyKUoHkAgIhKb0JoCpSjLC/G2vYKxUjVmQwGbRVeoPJ1a8U4pnVofz4AQV5Y/NEw8oKqxEBtA==\"\n+    },\n     \"wrap-ansi\": {\n       \"version\": \"5.1.0\",\n       \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-5.1.0.tgz\","
      },
      {
        "sha": "94b0469994ae6ac1f8c96f366af5db87f5858bee",
        "filename": "package-scripts.js",
        "status": "modified",
        "additions": 38,
        "deletions": 10,
        "changes": 48,
        "blob_url": "https://github.com/mochajs/mocha/blob/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/package-scripts.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c/package-scripts.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/package-scripts.js?ref=2ed47ef1eddca545a4c38fa5d87b32a0a61fb54c",
        "patch": "@@ -10,10 +10,18 @@ const path = require('path');\n  * @returns {string} Command string to be executed by nps.\n  */\n function test(testName, mochaParams) {\n-  const coverageCommand = `nyc --no-clean --report-dir coverage/reports/${testName}`;\n+  let coverageCommand = `nyc --no-clean --report-dir=\"coverage/reports/${testName}\"`;\n   const mochaCommand = `node ${path.join('bin', 'mocha')}`; // Include 'node' and path.join for Windows compatibility\n-  if (process.env.CI && !/^only-/.test(testName)) {\n-    mochaParams += ' --forbid-only';\n+  if (process.env.CI) {\n+    // suppress coverage summaries in CI to reduce noise\n+    coverageCommand += ' --reporter=json';\n+    if (!/^only-/.test(testName)) {\n+      mochaParams += ' --forbid-only';\n+    }\n+  }\n+  // this may _actually_ be supported in the future\n+  if (process.env.MOCHA_PARALLEL === '0') {\n+    mochaParams += ' --no-parallel';\n   }\n   if (process.env.TRAVIS) {\n     mochaParams += ' --color'; // force color in travis-ci\n@@ -26,7 +34,21 @@ function test(testName, mochaParams) {\n module.exports = {\n   scripts: {\n     build: {\n-      script: `browserify -e browser-entry.js --plugin ./scripts/dedefine --ignore './lib/cli/*.js' --ignore \"./lib/esm-utils.js\" --ignore 'chokidar' --ignore 'fs' --ignore 'glob' --ignore 'path' --ignore 'supports-color' -o mocha.js`,\n+      script: `browserify -e browser-entry.js \\\n+      --plugin ./scripts/dedefine \\\n+      --ignore 'chokidar' \\\n+      --ignore 'fs' \\\n+      --ignore 'glob' \\\n+      --ignore 'path' \\\n+      --ignore 'supports-color' \\\n+      --ignore './lib/cli/*.js' \\\n+      --ignore './lib/esm-utils.js' \\\n+      --ignore './lib/nodejs/serializer.js' \\\n+      --ignore './lib/nodejs/parallel-buffered-runner.js' \\\n+      --ignore './lib/nodejs/reporters/parallel-buffered.js' \\\n+      --ignore './lib/nodejs/worker.js' \\\n+      --ignore './lib/nodejs/buffered-worker-pool.js' \\\n+      -o mocha.js`,\n       description: 'Build browser bundle'\n     },\n     lint: {\n@@ -161,43 +183,49 @@ module.exports = {\n             hiddenFromHelp: true\n           },\n           bdd: {\n-            script: test('only-bdd', '--ui bdd test/only/bdd.spec'),\n+            script: test(\n+              'only-bdd',\n+              '--ui bdd test/only/bdd.spec --no-parallel'\n+            ),\n             description: 'Run Node.js \"only\" w/ BDD interface tests',\n             hiddenFromHelp: true\n           },\n           tdd: {\n-            script: test('only-tdd', '--ui tdd test/only/tdd.spec'),\n+            script: test(\n+              'only-tdd',\n+              '--ui tdd test/only/tdd.spec --no-parallel'\n+            ),\n             description: 'Run Node.js \"only\" w/ TDD interface tests',\n             hiddenFromHelp: true\n           },\n           bddRequire: {\n             script: test(\n               'only-bdd-require',\n-              '--ui qunit test/only/bdd-require.spec'\n+              '--ui qunit test/only/bdd-require.spec --no-parallel'\n             ),\n             description: 'Run Node.js \"only\" w/ QUnit interface tests',\n             hiddenFromHelp: true\n           },\n           globalBdd: {\n             script: test(\n               'only-global-bdd',\n-              '--ui bdd test/only/global/bdd.spec'\n+              '--ui bdd test/only/global/bdd.spec --no-parallel'\n             ),\n             description: 'Run Node.js \"global only\" w/ BDD interface tests',\n             hiddenFromHelp: true\n           },\n           globalTdd: {\n             script: test(\n               'only-global-tdd',\n-              '--ui tdd test/only/global/tdd.spec'\n+              '--ui tdd test/only/global/tdd.spec --no-parallel'\n             ),\n             description: 'Run Node.js \"global only\" w/ TDD interface tests',\n             hiddenFromHelp: true\n           },\n           globalQunit: {\n             script: test(\n               'only-global-qunit',\n-              '--ui qunit test/only/global/qunit.spec'\n+              '--ui qunit test/only/global/qunit.spec --no-parallel'\n             ),\n             description: 'Run Node.js \"global only\" w/ QUnit interface tests',\n             hiddenFromHelp: true"
      }
    ]
  },
  {
    "url": "https://api.github.com/repos/mochajs/mocha/issues/3686",
    "repository_url": "https://api.github.com/repos/mochajs/mocha",
    "labels_url": "https://api.github.com/repos/mochajs/mocha/issues/3686/labels{/name}",
    "comments_url": "https://api.github.com/repos/mochajs/mocha/issues/3686/comments",
    "events_url": "https://api.github.com/repos/mochajs/mocha/issues/3686/events",
    "html_url": "https://github.com/mochajs/mocha/pull/3686",
    "id": 402525367,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ3MTg5MzI0",
    "number": 3686,
    "title": "fix regex in utils.stackTraceFilter to prevent ReDoS #3416",
    "user": {
      "login": "cyjake",
      "id": 252317,
      "node_id": "MDQ6VXNlcjI1MjMxNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/252317?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cyjake",
      "html_url": "https://github.com/cyjake",
      "followers_url": "https://api.github.com/users/cyjake/followers",
      "following_url": "https://api.github.com/users/cyjake/following{/other_user}",
      "gists_url": "https://api.github.com/users/cyjake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cyjake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cyjake/subscriptions",
      "organizations_url": "https://api.github.com/users/cyjake/orgs",
      "repos_url": "https://api.github.com/users/cyjake/repos",
      "events_url": "https://api.github.com/users/cyjake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cyjake/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 533082117,
        "node_id": "MDU6TGFiZWw1MzMwODIxMTc=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/semver-patch",
        "name": "semver-patch",
        "color": "0e8a16",
        "default": false,
        "description": "implementation requires increase of \"patch\" version number; \"bug fixes\""
      },
      {
        "id": 618785682,
        "node_id": "MDU6TGFiZWw2MTg3ODU2ODI=",
        "url": "https://api.github.com/repos/mochajs/mocha/labels/security",
        "name": "security",
        "color": "8F3127",
        "default": false,
        "description": "involving vulnerabilities"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/mochajs/mocha/milestones/19",
      "html_url": "https://github.com/mochajs/mocha/milestone/19",
      "labels_url": "https://api.github.com/repos/mochajs/mocha/milestones/19/labels",
      "id": 3210785,
      "node_id": "MDk6TWlsZXN0b25lMzIxMDc4NQ==",
      "number": 19,
      "title": "v6.0.0",
      "description": "",
      "creator": {
        "login": "boneskull",
        "id": 924465,
        "node_id": "MDQ6VXNlcjkyNDQ2NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/924465?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/boneskull",
        "html_url": "https://github.com/boneskull",
        "followers_url": "https://api.github.com/users/boneskull/followers",
        "following_url": "https://api.github.com/users/boneskull/following{/other_user}",
        "gists_url": "https://api.github.com/users/boneskull/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/boneskull/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/boneskull/subscriptions",
        "organizations_url": "https://api.github.com/users/boneskull/orgs",
        "repos_url": "https://api.github.com/users/boneskull/repos",
        "events_url": "https://api.github.com/users/boneskull/events{/privacy}",
        "received_events_url": "https://api.github.com/users/boneskull/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 123,
      "state": "closed",
      "created_at": "2018-03-22T22:51:15Z",
      "updated_at": "2019-02-18T21:14:19Z",
      "due_on": null,
      "closed_at": "2019-02-18T21:14:19Z"
    },
    "comments": 7,
    "created_at": "2019-01-24T03:22:25Z",
    "updated_at": "2019-01-30T17:56:31Z",
    "closed_at": "2019-01-30T17:56:31Z",
    "author_association": "CONTRIBUTOR",
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/mochajs/mocha/pulls/3686",
      "html_url": "https://github.com/mochajs/mocha/pull/3686",
      "diff_url": "https://github.com/mochajs/mocha/pull/3686.diff",
      "patch_url": "https://github.com/mochajs/mocha/pull/3686.patch",
      "merged_at": "2019-01-30T17:56:31Z"
    },
    "body": "if the stack trace begins with a large error message (>= 20k charactors), and user leaves `--full-trace` disabled, `utils.stackTraceFilter()` takes ages to finish. Large error messages is quite possible when user makes containment assertions such as `expect(content).to.contain(word)`.\r\n\r\n### Description of the Change\r\n\r\nsimplified the regex used in `utils.stackTraceFilter()` to boost performance therefore prevent ReDoS if the stack contains large error message.\r\n\r\n### Alternate Designs\r\n\r\nIt's possible to skip check error message in stack by skipping the first line but the regex fix won't change any behavior hence it is chosen.\r\n\r\n### Why should this be in core?\r\n\r\nwell, it's a bug introduced by the stack filtering feature.\r\n\r\n### Benefits\r\n\r\nmocha won't hang even if users make assertions with large error messages, which is quite possible because containment check is used a lot.\r\n\r\n### Possible Drawbacks\r\n\r\nNone\r\n\r\n### Applicable issues\r\n\r\n#3416 looks like one but it was because of an external library (still quite possible if chai makes large error message and `assert.deepEqual` don't, didn't check).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/mochajs/mocha/issues/3686/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/mochajs/mocha/issues/3686/timeline",
    "performed_via_github_app": null,
    "state_reason": null,
    "score": 1,
    "files": [
      {
        "sha": "bf50ee8ee94cc89da47cba622886e83a1159c22c",
        "filename": "lib/utils.js",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/mochajs/mocha/blob/ec7699b63ef61226c89814aba91d2984a3cf655e/lib%2Futils.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/ec7699b63ef61226c89814aba91d2984a3cf655e/lib%2Futils.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/lib%2Futils.js?ref=ec7699b63ef61226c89814aba91d2984a3cf655e",
        "patch": "@@ -671,8 +671,6 @@ exports.stackTraceFilter = function() {\n   function isMochaInternal(line) {\n     return (\n       ~line.indexOf('node_modules' + slash + 'mocha' + slash) ||\n-      ~line.indexOf('node_modules' + slash + 'mocha.js') ||\n-      ~line.indexOf('bower_components' + slash + 'mocha.js') ||\n       ~line.indexOf(slash + 'mocha.js')\n     );\n   }\n@@ -701,7 +699,7 @@ exports.stackTraceFilter = function() {\n       }\n \n       // Clean up cwd(absolute)\n-      if (/\\(?.+:\\d+:\\d+\\)?$/.test(line)) {\n+      if (/:\\d+:\\d+\\)?$/.test(line)) {\n         line = line.replace('(' + cwd, '(');\n       }\n "
      },
      {
        "sha": "df5bd210c11eb840321dc38ce66832092e36c550",
        "filename": "test/unit/runner.spec.js",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/mochajs/mocha/blob/ec7699b63ef61226c89814aba91d2984a3cf655e/test%2Funit%2Frunner.spec.js",
        "raw_url": "https://github.com/mochajs/mocha/raw/ec7699b63ef61226c89814aba91d2984a3cf655e/test%2Funit%2Frunner.spec.js",
        "contents_url": "https://api.github.com/repos/mochajs/mocha/contents/test%2Funit%2Frunner.spec.js?ref=ec7699b63ef61226c89814aba91d2984a3cf655e",
        "patch": "@@ -6,6 +6,7 @@ var Runner = mocha.Runner;\n var Test = mocha.Test;\n var Hook = mocha.Hook;\n var path = require('path');\n+var fs = require('fs');\n var noop = mocha.utils.noop;\n \n describe('Runner', function() {\n@@ -496,6 +497,62 @@ describe('Runner', function() {\n         runner.failHook(hook, err);\n       });\n     });\n+\n+    describe('hugeStackTrace', function() {\n+      beforeEach(function() {\n+        if (path.sep !== '/') {\n+          this.skip();\n+        }\n+      });\n+\n+      it('should not hang if the error message is ridiculously long single line', function(done) {\n+        var hook = new Hook();\n+        hook.parent = suite;\n+        var data = [];\n+        // mock a long message\n+        for (var i = 0; i < 10000; i++) data[i] = {a: 1};\n+        var message = JSON.stringify(data);\n+        var err = new Error();\n+        // Fake stack-trace\n+        err.stack = [message].concat(stack).join('\\n');\n+\n+        runner.on('fail', function(hook, err) {\n+          expect(\n+            err.stack\n+              .split('\\n')\n+              .slice(1)\n+              .join('\\n'),\n+            'to be',\n+            stack.slice(0, 3).join('\\n')\n+          );\n+          done();\n+        });\n+        runner.failHook(hook, err);\n+      });\n+\n+      it('should not hang if error message is ridiculously long multiple lines either', function(done) {\n+        var hook = new Hook();\n+        hook.parent = suite;\n+        var fpath = path.join(__dirname, '../../mocha.js');\n+        var message = fs.readFileSync(fpath, 'utf8');\n+        var err = new Error();\n+        // Fake stack-trace\n+        err.stack = [message].concat(stack).join('\\n');\n+\n+        runner.on('fail', function(hook, err) {\n+          expect(\n+            err.stack\n+              .split('\\n')\n+              .slice(-3)\n+              .join('\\n'),\n+            'to be',\n+            stack.slice(0, 3).join('\\n')\n+          );\n+          done();\n+        });\n+        runner.failHook(hook, err);\n+      });\n+    });\n   });\n \n   describe('abort', function() {"
      }
    ]
  }
]
