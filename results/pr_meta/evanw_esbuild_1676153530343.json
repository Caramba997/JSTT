[{"url":"https://api.github.com/repos/evanw/esbuild/issues/2451","repository_url":"https://api.github.com/repos/evanw/esbuild","labels_url":"https://api.github.com/repos/evanw/esbuild/issues/2451/labels{/name}","comments_url":"https://api.github.com/repos/evanw/esbuild/issues/2451/comments","events_url":"https://api.github.com/repos/evanw/esbuild/issues/2451/events","html_url":"https://github.com/evanw/esbuild/pull/2451","id":1333976080,"node_id":"PR_kwDOA6ThAc487K9q","number":2451,"title":"Implement the Yarn Plug'n'Play module resolution algorithm","user":{"login":"evanw","id":406394,"node_id":"MDQ6VXNlcjQwNjM5NA==","avatar_url":"https://avatars.githubusercontent.com/u/406394?v=4","gravatar_id":"","url":"https://api.github.com/users/evanw","html_url":"https://github.com/evanw","followers_url":"https://api.github.com/users/evanw/followers","following_url":"https://api.github.com/users/evanw/following{/other_user}","gists_url":"https://api.github.com/users/evanw/gists{/gist_id}","starred_url":"https://api.github.com/users/evanw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanw/subscriptions","organizations_url":"https://api.github.com/users/evanw/orgs","repos_url":"https://api.github.com/users/evanw/repos","events_url":"https://api.github.com/users/evanw/events{/privacy}","received_events_url":"https://api.github.com/users/evanw/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-08-10T02:25:01Z","updated_at":"2022-08-10T11:15:50Z","closed_at":"2022-08-10T02:59:21Z","author_association":"OWNER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/evanw/esbuild/pulls/2451","html_url":"https://github.com/evanw/esbuild/pull/2451","diff_url":"https://github.com/evanw/esbuild/pull/2451.diff","patch_url":"https://github.com/evanw/esbuild/pull/2451.patch","merged_at":"2022-08-10T02:59:21Z"},"body":"[Node](https://nodejs.org/) comes with a package manager called [npm](https://www.npmjs.com/), which installs packages into a `node_modules` folder. Node and esbuild both come with built-in rules for resolving import paths to packages within `node_modules`, so packages installed via npm work automatically without any configuration. However, many people use an alternative package manager called [Yarn](https://yarnpkg.com/). While Yarn can install packages using `node_modules`, it also offers a different package installation strategy called [Plug'n'Play](https://yarnpkg.com/features/pnp/), which is often shortened to \"PnP\" (not to be confused with [pnpm](https://pnpm.io/), which is an entirely different unrelated package manager).\r\n\r\nPlug'n'Play installs packages as `.zip` files on your file system. The packages are never actually unzipped. Since Node doesn't know anything about Yarn's package installation strategy, this means you can no longer run your code with Node as it won't be able to find your packages. Instead, you need to run your code with Yarn, which applies patches to Node's file system APIs before running your code. These patches attempt to make zip files seem like normal directories. When running under Yarn, using Node's file system API to read `./some.zip/lib/file.js` actually automatically extracts `lib/file.js` from `./some.zip` at run-time as if it was a normal file. Other file system APIs behave similarly. However, these patches don't work with esbuild because esbuild is not written in JavaScript; it's a native binary executable that interacts with the file system directly through the operating system.\r\n\r\nPreviously the workaround for using esbuild with Plug'n'Play was to use the [`@yarnpkg/esbuild-plugin-pnp`](https://www.npmjs.com/package/@yarnpkg/esbuild-plugin-pnp) plugin with esbuild's JavaScript API. However, this wasn't great because the plugin needed to potentially intercept every single import path and file load to check whether it was a Plug'n'Play package, which has an unusually high performance cost. It also meant that certain subtleties of path resolution rules within a `.zip` file could differ slightly from the way esbuild normally works since path resolution inside `.zip` files was implemented by Yarn, not by esbuild (which is due to a limitation of esbuild's plugin API).\r\n\r\nWith this PR, esbuild now contains an independent implementation of Yarn's Plug'n'Play algorithm (which is used when esbuild finds a `.pnp.js`, `.pnp.cjs`, or `.pnp.data.json` file in the directory tree). Creating additional implementations of this algorithm recently became possible because Yarn's package manifest format was recently documented: https://yarnpkg.com/advanced/pnp-spec/. This should mean that you can now use esbuild to bundle Plug'n'Play projects without any additional configuration (so you shouldn't need `@yarnpkg/esbuild-plugin-pnp` anymore). Bundling these projects should now happen much faster as Yarn no longer even needs to be run at all. And path resolution rules within Yarn packages should now be consistent with how esbuild handles regular Node packages. For example, fields such as `module` and `browser` in `package.json` files within `.zip` files should now be respected.\r\n\r\nKeep in mind that this is brand new code and there may be some initial issues to work through before esbuild's implementation is solid. Yarn's Plug'n'Play specification is also brand new and may need some follow-up edits to guide new implementations to match Yarn's exact behavior. If you try this out, make sure to test it before committing to using it, and let me know if anything isn't working as expected. Should you need to debug esbuild's path resolution, you may find `--log-level=verbose` helpful.\r\n","reactions":{"url":"https://api.github.com/repos/evanw/esbuild/issues/2451/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/evanw/esbuild/issues/2451/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/evanw/esbuild/issues/2349","repository_url":"https://api.github.com/repos/evanw/esbuild","labels_url":"https://api.github.com/repos/evanw/esbuild/issues/2349/labels{/name}","comments_url":"https://api.github.com/repos/evanw/esbuild/issues/2349/comments","events_url":"https://api.github.com/repos/evanw/esbuild/issues/2349/events","html_url":"https://github.com/evanw/esbuild/pull/2349","id":1284709441,"node_id":"PR_kwDOA6ThAc46XGvn","number":2349,"title":"fix #334: support automatic JSX runtime","user":{"login":"jgoz","id":132233,"node_id":"MDQ6VXNlcjEzMjIzMw==","avatar_url":"https://avatars.githubusercontent.com/u/132233?v=4","gravatar_id":"","url":"https://api.github.com/users/jgoz","html_url":"https://github.com/jgoz","followers_url":"https://api.github.com/users/jgoz/followers","following_url":"https://api.github.com/users/jgoz/following{/other_user}","gists_url":"https://api.github.com/users/jgoz/gists{/gist_id}","starred_url":"https://api.github.com/users/jgoz/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jgoz/subscriptions","organizations_url":"https://api.github.com/users/jgoz/orgs","repos_url":"https://api.github.com/users/jgoz/repos","events_url":"https://api.github.com/users/jgoz/events{/privacy}","received_events_url":"https://api.github.com/users/jgoz/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2022-06-25T20:41:38Z","updated_at":"2022-07-28T18:19:52Z","closed_at":"2022-07-28T15:20:18Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/evanw/esbuild/pulls/2349","html_url":"https://github.com/evanw/esbuild/pull/2349","diff_url":"https://github.com/evanw/esbuild/pull/2349.diff","patch_url":"https://github.com/evanw/esbuild/pull/2349.patch","merged_at":"2022-07-28T15:20:17Z"},"body":"fixes #334\r\nfixes #718 \r\nfixes #1172\r\nfixes #2318\r\n\r\nThis adds support for the [new (automatic) JSX runtime](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) to esbuild for both the build and transform APIs.\r\n\r\n**New CLI flags and API options**:\r\n- `--jsx-runtime`, `jsxRuntime` &mdash; `\"automatic\"` or `\"classic\"` (default)\r\n- `--jsx-development`, `jsxDevelopment` &mdash; toggles development mode for the automatic runtime\r\n- `--jsx-import-source`, `jsxImportSource` &mdash; Overrides the root import for runtime functions (default `\"react\"`)\r\n\r\n**New JSX pragmas**:\r\n- `@jsx` &mdash; sets the runtime (`\"automatic\"` or `\"classic\"`)\r\n- `@jsxImportSource` &mdash; sets the import source (only valid with automatic runtime)\r\n\r\n`@jsxFragment` and `@jsxFactory` are only valid with classic runtime.\r\n\r\n**Implementation details**:\r\nMost of the work to support the automatic runtime happens in the second parsing pass. Here is a high level overview of the logic when `automatic` runtime is enabled:\r\n\r\n- Determine whether `Fragment` needs to be imported (from the appropriate runtime import)\r\n- Look for `key` prop and extract it from the props argument, since it's now passed directly to a jsx function\r\n- Inspect children and determine whether they are considered static (generally, more than 1 child) or not\r\n- Build up arguments list to pass to the appropriate jsx function\r\n  - In development mode, this includes \"source\" and \"self\" args and \"isStaticChildren\" is an argument\r\n- Determine which jsx function to use:\r\n  - `jsxDEV` &mdash; development mode (from `{importSource}/jsx-dev-runtime`)\r\n  - `jsxs` &mdash; production mode, static children (from `{importSource}/jsx-runtime`)\r\n  - `jsx` &mdash; production mode, non-static children (from `{importSource}/jsx-runtime`)\r\n  - `createElement` &mdash; fallback mode* (from `{importSource}`)\r\n- Record an import of the appropriate function from the appropriate source\r\n- Insert a function call with the assembled arguments\r\n\r\nAt the end of parsing, if any JSX symbols had recorded usage, the appropriate import statement is generated for only those symbols that were actually used within the file. These are generated as external imports, unlike esbuild's runtime.\r\n\r\n\\* Fallback mode &mdash; If a component includes spread props followed by a `key` prop, `{...props} key={1}`, [Babel triggers a fallback mode](https://github.com/babel/babel/blob/4c3365f6bd67385ddbaf44c86e975025e2f8ff2a/packages/babel-plugin-transform-react-jsx/src/create-plugin.ts#L347-L351) to `createElement`. Apparently this is a temporary special case that will be removed once spreading \"key\" from props is no longer supported. It looks like the TypeScript compiler also implements this special case, so it seemed prudent to be compatible here.\r\n\r\n**Development mode**:\r\nAside from importing a different function from a different source (`{ jsxDEV } from 'react/jsx-dev-runtime'`), development mode also passes more arguments, one of which is the \"source\" argument. This contains the current filename, line number, and column number mapping to the original source location of the element.\r\n\r\nI used the LineColumnTracker to extract those details from the element's location, which will probably incur a minor performance cost that should be documented for the `jsxDevelopment` option. The alternative was to simply omit those details, but that would defeat the purpose of supporting development mode.\r\n\r\n**TSConfig resolving**:\r\nAlong with accepting the new options directly via CLI or API, I implemented option inference from tsconfig compiler options.\r\n\r\n- `\"jsx\": \"preserve\"` or `\"jsx\": \"react-native\"` &rarr; preserve\r\n- `\"jsx\": \"react\"` &rarr; classic runtime\r\n- `\"jsx\": \"react-jsx\"` &rarr; automatic runtime\r\n- `\"jsx\": \"react-jsxdev\"` &rarr; automatic runtime and development mode enabled\r\n\r\nIt also reads the value of `\"jsxImportSource\"` from tsconfig if specified.\r\n\r\nFor `react-jsx` it's important to note that it doesn't implicitly set `jsxDevelopment` to false. This is to support the case where a user sets `react-jsx` in their tsconfig but then toggles development mode directly in esbuild, e.g., by environment variable or some other means.\r\n\r\n**esbuild vs Babel vs TS vs...**\r\n\r\nThere are a few differences between the various technologies that implement automatic JSX runtimes. Though esbuild generally follows TypeScript's behavior when there is a disagreement, I chose to follow Babel in cases where it might help the user catch invalid or undesirable behavior.\r\n\r\nHere are the notable differences:\r\n- Element has `__source` or `__self` props:\r\n  - Babel: print an error about a deprecated transform plugin\r\n  - TypeScript: allow the props\r\n  - swc: Hard crash\r\n  - **esbuild**: print an error &mdash; I chose to follow Babel for this one because this might help people catch configuration issues where JSX files are being parsed by multiple tools\r\n\r\n- Element has an \"implicit true\" key prop, e.g. `<a key />`:\r\n  - Babel: print an error indicating that \"key\" props require an explicit value\r\n  - TypeScript: silently omit the \"key\" prop\r\n  - swc: Hard crash\r\n  - **esbuild**: print an error like Babel &mdash; this might help catch legitimate programming mistakes\r\n\r\n- Element has spread children, e.g. `<a>{...children}</a>`\r\n  - Babel: print an error stating that React doesn't support spread children\r\n  - TypeScript: use static jsx function and pass children as-is, including spread operator\r\n  - swc: same as Babel\r\n  - **esbuild**: same as TypeScript\r\n","reactions":{"url":"https://api.github.com/repos/evanw/esbuild/issues/2349/reactions","total_count":100,"+1":44,"-1":0,"laugh":0,"hooray":13,"confused":0,"heart":33,"rocket":10,"eyes":0},"timeline_url":"https://api.github.com/repos/evanw/esbuild/issues/2349/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/evanw/esbuild/issues/1898","repository_url":"https://api.github.com/repos/evanw/esbuild","labels_url":"https://api.github.com/repos/evanw/esbuild/issues/1898/labels{/name}","comments_url":"https://api.github.com/repos/evanw/esbuild/issues/1898/comments","events_url":"https://api.github.com/repos/evanw/esbuild/issues/1898/events","html_url":"https://github.com/evanw/esbuild/pull/1898","id":1091598797,"node_id":"PR_kwDOA6ThAc4wbCXe","number":1898,"title":"inline certain no-op function calls","user":{"login":"evanw","id":406394,"node_id":"MDQ6VXNlcjQwNjM5NA==","avatar_url":"https://avatars.githubusercontent.com/u/406394?v=4","gravatar_id":"","url":"https://api.github.com/users/evanw","html_url":"https://github.com/evanw","followers_url":"https://api.github.com/users/evanw/followers","following_url":"https://api.github.com/users/evanw/following{/other_user}","gists_url":"https://api.github.com/users/evanw/gists{/gist_id}","starred_url":"https://api.github.com/users/evanw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanw/subscriptions","organizations_url":"https://api.github.com/users/evanw/orgs","repos_url":"https://api.github.com/users/evanw/repos","events_url":"https://api.github.com/users/evanw/events{/privacy}","received_events_url":"https://api.github.com/users/evanw/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-12-31T15:05:36Z","updated_at":"2021-12-31T16:57:31Z","closed_at":"2021-12-31T15:48:45Z","author_association":"OWNER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/evanw/esbuild/pulls/1898","html_url":"https://github.com/evanw/esbuild/pull/1898","diff_url":"https://github.com/evanw/esbuild/pull/1898.diff","patch_url":"https://github.com/evanw/esbuild/pull/1898.patch","merged_at":"2021-12-31T15:48:45Z"},"body":"This release makes esbuild inline two types of no-op functions: empty functions and identity functions. These most commonly arise when most of the function body is eliminated as dead code. In the examples below, this happens because we use `--define:window.DEBUG=false` to cause dead code elimination inside the function body of the resulting `if (false)` statement. This inlining is a small code size and performance win but, more importantly, it allows for people to use these features to add useful abstractions that improve the development experience without needing to worry about the run-time performance impact.\r\n\r\nAn identity function is a function that just returns its argument. Here's an example of inlining an identity function:\r\n\r\n```js\r\n// Original code\r\nfunction logCalls(fn) {\r\n  if (window.DEBUG) return function(...args) {\r\n    console.log('calling', fn.name, 'with', args)\r\n    return fn.apply(this, args)\r\n  }\r\n  return fn\r\n}\r\nexport const foo = logCalls(function foo() {})\r\n\r\n// Old output (with --minify --define:window.DEBUG=false --tree-shaking=true)\r\nfunction o(n){return n}export const foo=o(function(){});\r\n\r\n// New output (with --minify --define:window.DEBUG=false --tree-shaking=true)\r\nexport const foo=function(){};\r\n```\r\n\r\nAn empty function is a function with an empty body. Here's an example of inlining an empty function:\r\n\r\n```ts\r\n// Original code\r\nfunction assertNotNull(val: Object | null): asserts val is Object {\r\n  if (window.DEBUG && val === null) throw new Error('null assertion failed');\r\n}\r\nexport const val = getFoo();\r\nassertNotNull(val);\r\nconsole.log(val.bar);\r\n\r\n// Old output (with --minify --define:window.DEBUG=false --tree-shaking=true)\r\nfunction l(o){}export const val=getFoo();l(val);console.log(val.bar);\r\n\r\n// New output (with --minify --define:window.DEBUG=false --tree-shaking=true)\r\nexport const val=getFoo();console.log(val.bar);\r\n```\r\n\r\nTo get this behavior you'll need to use the `function` keyword to define your function since that causes the definition to be hoisted, which eliminates concerns around initialization order. These features also work across modules, so functions are still inlined even if the definition of the function is in a separate module from the call to the function. To get cross-module function inlining to work, you'll need to have bundling enabled and use the `import` and `export` keywords to access the function so that esbuild can see which functions are called. And all of this has been added without an observable impact to compile times.\r\n\r\nI previously wasn't able to add this to esbuild easily because of esbuild's low-pass compilation approach. The compiler only does three full passes over the data for speed. The passes are roughly for parsing, binding, and printing. It's only possible to inline something after binding but it needs to be inlined before printing. Also the way module linking was done made it difficult to roll back uses of symbols that were inlined, so the symbol definitions were not tree shaken even when they became unused due to inlining.\r\n\r\nThe linking issue was somewhat resolved when I fixed #128 in the previous release. To implement cross-module inlining of TypeScript enums, I came up with a hack to defer certain symbol uses until the linking phase, which happens after binding but before printing. Another hack is that inlining of TypeScript enums is done directly in the printer to avoid needing another pass.\r\n\r\nThe possibility of these two hacks has unblocked these simple function inlining use cases that are now handled. This isn't a fully general approach because optimal inlining is recursive. Inlining something may open up further inlining opportunities, which either requires multiple iterations or a worklist algorithm, both of which don't work when doing late-stage inlining in the printer. But the function inlining that esbuild now implements is still useful even though it's one level deep, and so I believe it's still worth adding.\r\n\r\nFixes #290\r\nFixes #907\r\n","reactions":{"url":"https://api.github.com/repos/evanw/esbuild/issues/1898/reactions","total_count":3,"+1":0,"-1":0,"laugh":0,"hooray":3,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/evanw/esbuild/issues/1898/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/evanw/esbuild/issues/1729","repository_url":"https://api.github.com/repos/evanw/esbuild","labels_url":"https://api.github.com/repos/evanw/esbuild/issues/1729/labels{/name}","comments_url":"https://api.github.com/repos/evanw/esbuild/issues/1729/comments","events_url":"https://api.github.com/repos/evanw/esbuild/issues/1729/events","html_url":"https://github.com/evanw/esbuild/pull/1729","id":1040074008,"node_id":"PR_kwDOA6ThAc4t4CyQ","number":1729,"title":"implement class static blocks","user":{"login":"evanw","id":406394,"node_id":"MDQ6VXNlcjQwNjM5NA==","avatar_url":"https://avatars.githubusercontent.com/u/406394?v=4","gravatar_id":"","url":"https://api.github.com/users/evanw","html_url":"https://github.com/evanw","followers_url":"https://api.github.com/users/evanw/followers","following_url":"https://api.github.com/users/evanw/following{/other_user}","gists_url":"https://api.github.com/users/evanw/gists{/gist_id}","starred_url":"https://api.github.com/users/evanw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanw/subscriptions","organizations_url":"https://api.github.com/users/evanw/orgs","repos_url":"https://api.github.com/users/evanw/repos","events_url":"https://api.github.com/users/evanw/events{/privacy}","received_events_url":"https://api.github.com/users/evanw/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-10-30T07:11:06Z","updated_at":"2021-10-30T07:18:06Z","closed_at":"2021-10-30T07:18:02Z","author_association":"OWNER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/evanw/esbuild/pulls/1729","html_url":"https://github.com/evanw/esbuild/pull/1729","diff_url":"https://github.com/evanw/esbuild/pull/1729.diff","patch_url":"https://github.com/evanw/esbuild/pull/1729.patch","merged_at":"2021-10-30T07:18:02Z"},"body":"This PR adds support for a new upcoming JavaScript feature called [class static blocks](https://github.com/tc39/proposal-class-static-block) that lets you evaluate code inside of a class body. It looks like this:\r\n\r\n```js\r\nclass Foo {\r\n  static {\r\n    this.foo = 123\r\n  }\r\n}\r\n```\r\n\r\nThis can be useful when you want to use `try`/`catch` or access private `#name` fields during class initialization. Doing that without this feature is quite hacky and basically involves creating temporary static fields containing immediately-invoked functions and then deleting the fields after class initialization. Static blocks are much more ergonomic and avoid performance loss due to `delete` changing the object shape.\r\n\r\nStatic blocks are transformed for older browsers by moving the static block outside of the class body and into an immediately invoked arrow function after the class definition:\r\n\r\n```js\r\n// The transformed version of the example code above\r\nconst _Foo = class {\r\n};\r\nlet Foo = _Foo;\r\n(() => {\r\n  _Foo.foo = 123;\r\n})();\r\n```\r\n\r\nIn case you're wondering, the additional `let` variable is to guard against the potential reassignment of `Foo` during evaluation such as what happens below. The value of `this` must be bound to the original class, not to the current value of `Foo`:\r\n\r\n```js\r\nlet bar\r\nclass Foo {\r\n  static {\r\n    bar = () => this\r\n  }\r\n}\r\nFoo = null\r\nconsole.log(bar()) // This should not be \"null\"\r\n```\r\n\r\nFixes #1558\r\n","reactions":{"url":"https://api.github.com/repos/evanw/esbuild/issues/1729/reactions","total_count":2,"+1":0,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/evanw/esbuild/issues/1729/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/evanw/esbuild/issues/1180","repository_url":"https://api.github.com/repos/evanw/esbuild","labels_url":"https://api.github.com/repos/evanw/esbuild/issues/1180/labels{/name}","comments_url":"https://api.github.com/repos/evanw/esbuild/issues/1180/comments","events_url":"https://api.github.com/repos/evanw/esbuild/issues/1180/events","html_url":"https://github.com/evanw/esbuild/pull/1180","id":865624421,"node_id":"MDExOlB1bGxSZXF1ZXN0NjIxNjc3NTY4","number":1180,"title":"Improve StringToUTF16 performance by ~2-3x","user":{"login":"Jarred-Sumner","id":709451,"node_id":"MDQ6VXNlcjcwOTQ1MQ==","avatar_url":"https://avatars.githubusercontent.com/u/709451?v=4","gravatar_id":"","url":"https://api.github.com/users/Jarred-Sumner","html_url":"https://github.com/Jarred-Sumner","followers_url":"https://api.github.com/users/Jarred-Sumner/followers","following_url":"https://api.github.com/users/Jarred-Sumner/following{/other_user}","gists_url":"https://api.github.com/users/Jarred-Sumner/gists{/gist_id}","starred_url":"https://api.github.com/users/Jarred-Sumner/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Jarred-Sumner/subscriptions","organizations_url":"https://api.github.com/users/Jarred-Sumner/orgs","repos_url":"https://api.github.com/users/Jarred-Sumner/repos","events_url":"https://api.github.com/users/Jarred-Sumner/events{/privacy}","received_events_url":"https://api.github.com/users/Jarred-Sumner/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-04-23T00:28:05Z","updated_at":"2021-04-23T07:52:33Z","closed_at":"2021-04-23T07:52:32Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/evanw/esbuild/pulls/1180","html_url":"https://github.com/evanw/esbuild/pull/1180","diff_url":"https://github.com/evanw/esbuild/pull/1180.diff","patch_url":"https://github.com/evanw/esbuild/pull/1180.patch","merged_at":"2021-04-23T07:52:32Z"},"body":"Benchmark code:\r\n```go\r\nfunc BenchmarkStringToUTF16(b *testing.B) {\r\n\ttext := \"Hello This is A String\"\r\n\r\n\tfor n := 0; n < b.N; n++ {\r\n\t\tjs_lexer.StringToUTF16(text)\r\n\t}\r\n\t\r\n}\r\n\r\nfunc BenchmarkEmojiStringToUTF16(b *testing.B) {\r\n\ttext := \"Hello This is A UTF16 🍿🙀 🙋🇨🇦 and 👍🏿 and 👨‍👨‍👧‍👧 are also “astral” plane emojis, only they’re made out of 2+ surrogate pairs:\"\r\n\r\n\tfor n := 0; n < b.N; n++ {\r\n\t\tjs_lexer.StringToUTF16(text)\r\n\t}\r\n}\r\n```\r\n\r\nBefore (ASCII):\r\n```\r\nRunning tool: /Users/jarredsumner/.asdf/shims/go test -benchmem -run=^$ -bench ^(BenchmarkStringToUTF16)$ github.com/evanw/esbuild/internal/js_lexer\r\n\r\ngoos: darwin\r\ngoarch: amd64\r\npkg: github.com/evanw/esbuild/internal/js_lexer\r\ncpu: Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\nBenchmarkStringToUTF16-16    \t 8602806\t       142.8 ns/op\t     120 B/op\t       4 allocs/op\r\nPASS\r\nok  \tgithub.com/evanw/esbuild/internal/js_lexer\t1.457s\r\n```\r\n\r\nAfter: (ASCII):\r\n```\r\nRunning tool: /Users/jarredsumner/.asdf/shims/go test -benchmem -run=^$ -bench ^(BenchmarkStringToUTF16)$ github.com/evanw/esbuild/internal/js_lexer\r\n\r\ngoos: darwin\r\ngoarch: amd64\r\npkg: github.com/evanw/esbuild/internal/js_lexer\r\ncpu: Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\nBenchmarkStringToUTF16-16    \t24977662\t        42.68 ns/op\t      48 B/op\t       1 allocs/op\r\nPASS\r\nok  \tgithub.com/evanw/esbuild/internal/js_lexer\t1.295s\r\n```\r\n\r\nBefore (UTF16):\r\n```\r\nRunning tool: /Users/jarredsumner/.asdf/shims/go test -benchmem -run=^$ -bench ^(BenchmarkEmojiStringToUTF16)$ github.com/evanw/esbuild/internal/js_lexer\r\n\r\ngoos: darwin\r\ngoarch: amd64\r\npkg: github.com/evanw/esbuild/internal/js_lexer\r\ncpu: Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\nBenchmarkEmojiStringToUTF16-16    \t 2286937\t       530.4 ns/op\t    1016 B/op\t       7 allocs/op\r\nPASS\r\nok  \tgithub.com/evanw/esbuild/internal/js_lexer\t1.963s\r\n```\r\n\r\nAfter (UTF16):\r\n```\r\nRunning tool: /Users/jarredsumner/.asdf/shims/go test -benchmem -run=^$ -bench ^(BenchmarkEmojiStringToUTF16)$ github.com/evanw/esbuild/internal/js_lexer\r\n\r\ngoos: darwin\r\ngoarch: amd64\r\npkg: github.com/evanw/esbuild/internal/js_lexer\r\ncpu: Intel(R) Core(TM) i9-9980HK CPU @ 2.40GHz\r\nBenchmarkEmojiStringToUTF16-16    \t 3843602\t       289.4 ns/op\t     352 B/op\t       1 allocs/op\r\nPASS\r\nok  \tgithub.com/evanw/esbuild/internal/js_lexer\t1.639s\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/evanw/esbuild/issues/1180/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/evanw/esbuild/issues/1180/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/evanw/esbuild/issues/1244","repository_url":"https://api.github.com/repos/evanw/esbuild","labels_url":"https://api.github.com/repos/evanw/esbuild/issues/1244/labels{/name}","comments_url":"https://api.github.com/repos/evanw/esbuild/issues/1244/comments","events_url":"https://api.github.com/repos/evanw/esbuild/issues/1244/events","html_url":"https://github.com/evanw/esbuild/pull/1244","id":874964196,"node_id":"MDExOlB1bGxSZXF1ZXN0NjI5NDA5OTU0","number":1244,"title":"Annotate module wrapper functions in debug builds","user":{"login":"evanw","id":406394,"node_id":"MDQ6VXNlcjQwNjM5NA==","avatar_url":"https://avatars.githubusercontent.com/u/406394?v=4","gravatar_id":"","url":"https://api.github.com/users/evanw","html_url":"https://github.com/evanw","followers_url":"https://api.github.com/users/evanw/followers","following_url":"https://api.github.com/users/evanw/following{/other_user}","gists_url":"https://api.github.com/users/evanw/gists{/gist_id}","starred_url":"https://api.github.com/users/evanw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanw/subscriptions","organizations_url":"https://api.github.com/users/evanw/orgs","repos_url":"https://api.github.com/users/evanw/repos","events_url":"https://api.github.com/users/evanw/events{/privacy}","received_events_url":"https://api.github.com/users/evanw/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-05-03T22:44:04Z","updated_at":"2021-05-03T23:20:32Z","closed_at":"2021-05-03T22:59:08Z","author_association":"OWNER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/evanw/esbuild/pulls/1244","html_url":"https://github.com/evanw/esbuild/pull/1244","diff_url":"https://github.com/evanw/esbuild/pull/1244.diff","patch_url":"https://github.com/evanw/esbuild/pull/1244.patch","merged_at":"2021-05-03T22:59:07Z"},"body":"Sometimes esbuild needs to wrap certain modules in a function when bundling. This is done both for lazy evaluation and for CommonJS modules that use a top-level `return` statement. Previously these functions were all anonymous, so stack traces for errors thrown during initialization looked like this:\r\n\r\n```\r\nError: Electron failed to install correctly, please delete node_modules/electron and try installing again\r\n    at getElectronPath (out.js:16:13)\r\n    at out.js:19:21\r\n    at out.js:1:45\r\n    at out.js:24:3\r\n    at out.js:1:45\r\n    at out.js:29:3\r\n    at out.js:1:45\r\n    at Object.<anonymous> (out.js:33:1)\r\n```\r\n\r\nThis release adds names to these anonymous functions when minification is disabled. The above stack trace now looks like this:\r\n\r\n```\r\nError: Electron failed to install correctly, please delete node_modules/electron and try installing again\r\n    at getElectronPath (out.js:19:15)\r\n    at node_modules/electron/index.js (out.js:22:23)\r\n    at __require (out.js:2:44)\r\n    at src/base/window.js (out.js:29:5)\r\n    at __require (out.js:2:44)\r\n    at src/base/kiosk.js (out.js:36:5)\r\n    at __require (out.js:2:44)\r\n    at Object.<anonymous> (out.js:41:1)\r\n```\r\n\r\nThis is similar to Webpack's development-mode behavior:\r\n\r\n```\r\nError: Electron failed to install correctly, please delete node_modules/electron and try installing again\r\n    at getElectronPath (out.js:23:11)\r\n    at Object../node_modules/electron/index.js (out.js:27:18)\r\n    at __webpack_require__ (out.js:96:41)\r\n    at Object../src/base/window.js (out.js:49:1)\r\n    at __webpack_require__ (out.js:96:41)\r\n    at Object../src/base/kiosk.js (out.js:38:1)\r\n    at __webpack_require__ (out.js:96:41)\r\n    at out.js:109:1\r\n    at out.js:111:3\r\n    at Object.<anonymous> (out.js:113:12)\r\n```\r\n\r\nThese descriptive function names will additionally be available when using a profiler such as the one included in the \"Performance\" tab in Chrome Developer Tools. Previously all functions were named `(anonymous)` which made it difficult to investigate performance issues during bundle initialization.\r\n\r\nCloses #1236\r\n","reactions":{"url":"https://api.github.com/repos/evanw/esbuild/issues/1244/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/evanw/esbuild/issues/1244/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/evanw/esbuild/issues/681","repository_url":"https://api.github.com/repos/evanw/esbuild","labels_url":"https://api.github.com/repos/evanw/esbuild/issues/681/labels{/name}","comments_url":"https://api.github.com/repos/evanw/esbuild/issues/681/comments","events_url":"https://api.github.com/repos/evanw/esbuild/issues/681/events","html_url":"https://github.com/evanw/esbuild/pull/681","id":786881842,"node_id":"MDExOlB1bGxSZXF1ZXN0NTU1Njg3Njg2","number":681,"title":"update webpack 5 benchmark","user":{"login":"chenxsan","id":1091472,"node_id":"MDQ6VXNlcjEwOTE0NzI=","avatar_url":"https://avatars.githubusercontent.com/u/1091472?v=4","gravatar_id":"","url":"https://api.github.com/users/chenxsan","html_url":"https://github.com/chenxsan","followers_url":"https://api.github.com/users/chenxsan/followers","following_url":"https://api.github.com/users/chenxsan/following{/other_user}","gists_url":"https://api.github.com/users/chenxsan/gists{/gist_id}","starred_url":"https://api.github.com/users/chenxsan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/chenxsan/subscriptions","organizations_url":"https://api.github.com/users/chenxsan/orgs","repos_url":"https://api.github.com/users/chenxsan/repos","events_url":"https://api.github.com/users/chenxsan/events{/privacy}","received_events_url":"https://api.github.com/users/chenxsan/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2021-01-15T13:05:48Z","updated_at":"2021-01-22T05:30:30Z","closed_at":"2021-01-17T22:52:30Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/evanw/esbuild/pulls/681","html_url":"https://github.com/evanw/esbuild/pull/681","diff_url":"https://github.com/evanw/esbuild/pull/681.diff","patch_url":"https://github.com/evanw/esbuild/pull/681.patch","merged_at":"2021-01-17T22:52:30Z"},"body":"Hi there, would be great if you can upgrade the benchmark for webpack 5 as it has been released for a while https://webpack.js.org/blog/2020-10-10-webpack-5-release/, and the performance had been improved compared to the current one in my test:\r\n\r\n![image](https://user-images.githubusercontent.com/1091472/104729097-e2545d00-5772-11eb-82c2-d71090ea844f.png)\r\n\r\nAnd here's the data for esbuild and rollup:\r\n\r\n![image](https://user-images.githubusercontent.com/1091472/104729160-fdbf6800-5772-11eb-885f-2800b35b3c0c.png)\r\n","reactions":{"url":"https://api.github.com/repos/evanw/esbuild/issues/681/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/evanw/esbuild/issues/681/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/evanw/esbuild/issues/1078","repository_url":"https://api.github.com/repos/evanw/esbuild","labels_url":"https://api.github.com/repos/evanw/esbuild/issues/1078/labels{/name}","comments_url":"https://api.github.com/repos/evanw/esbuild/issues/1078/comments","events_url":"https://api.github.com/repos/evanw/esbuild/issues/1078/events","html_url":"https://github.com/evanw/esbuild/pull/1078","id":842854575,"node_id":"MDExOlB1bGxSZXF1ZXN0NjAyMzI3Mzc0","number":1078,"title":"PR for version 0.11.0","user":{"login":"evanw","id":406394,"node_id":"MDQ6VXNlcjQwNjM5NA==","avatar_url":"https://avatars.githubusercontent.com/u/406394?v=4","gravatar_id":"","url":"https://api.github.com/users/evanw","html_url":"https://github.com/evanw","followers_url":"https://api.github.com/users/evanw/followers","following_url":"https://api.github.com/users/evanw/following{/other_user}","gists_url":"https://api.github.com/users/evanw/gists{/gist_id}","starred_url":"https://api.github.com/users/evanw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanw/subscriptions","organizations_url":"https://api.github.com/users/evanw/orgs","repos_url":"https://api.github.com/users/evanw/repos","events_url":"https://api.github.com/users/evanw/events{/privacy}","received_events_url":"https://api.github.com/users/evanw/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2021-03-28T23:12:40Z","updated_at":"2021-03-29T04:25:29Z","closed_at":"2021-03-29T02:34:50Z","author_association":"OWNER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/evanw/esbuild/pulls/1078","html_url":"https://github.com/evanw/esbuild/pull/1078","diff_url":"https://github.com/evanw/esbuild/pull/1078.diff","patch_url":"https://github.com/evanw/esbuild/pull/1078.patch","merged_at":"2021-03-29T02:34:49Z"},"body":"This is a PR for version 0.11.0, which is a release that contains the following breaking changes:\r\n\r\n* Change how `require()` and `import()` of ESM works (fixes #667, fixes #706)\r\n\r\n    Previously if you call `require()` on an ESM file, or call `import()` on an ESM file with code splitting disabled, esbuild would convert the ESM file to CommonJS. For example, if you had the following input files:\r\n\r\n    ```js\r\n    // cjs-file.js\r\n    console.log(require('./esm-file.js').foo)\r\n    // esm-file.js\r\n    export let foo = bar()\r\n    ```\r\n\r\n    The previous bundling behavior would generate something like this:\r\n\r\n    ```js\r\n    var require_esm_file = __commonJS((exports) => {\r\n      __markAsModule(exports);\r\n      __export(exports, {\r\n        foo: () => foo\r\n      });\r\n      var foo = bar();\r\n    });\r\n    console.log(require_esm_file().foo);\r\n    ```\r\n\r\n    This behavior has been changed and esbuild now generates something like this instead:\r\n\r\n    ```js\r\n    var esm_file_exports = {};\r\n    __export(esm_file_exports, {\r\n      foo: () => foo\r\n    });\r\n    var foo;\r\n    var init_esm_file = __esm(() => {\r\n      foo = bar();\r\n    });\r\n    console.log((init_esm_file(), esm_file_exports).foo);\r\n    ```\r\n\r\n    The variables have been pulled out of the lazily-initialized closure and are accessible to the rest of the module's scope. Some benefits of this approach:\r\n\r\n    * If another file does `import {foo} from \"./esm-file.js\"`, it will just reference `foo` directly and will not pay the performance penalty or code size overhead of the dynamic property accesses that come with CommonJS-style exports. So this improves performance and reduces code size in some cases.\r\n\r\n    * This fixes a long-standing bug (#706) where entry point exports could be broken if the entry point is a target of a `require()` call and the output format was ESM. This happened because previously calling `require()` on an entry point converted it to CommonJS, which then meant it only had a single `default` export, and the exported variables were inside the CommonJS closure and inaccessible to an ESM-style `export {}` clause. Now calling `require()` on an entry point only causes it to be lazily-initialized but all exports are still in the module scope and can still be exported using a normal `export {}` clause.\r\n\r\n    * Now that this has been changed, `import()` of a module with top-level await (#253) is now allowed when code splitting is disabled. Previously this didn't work because `import()` with code splitting disabled was implemented by converting the module to CommonJS and using `Promise.resolve().then(() => require())`, but converting a module with top-level await to CommonJS is impossible because the CommonJS call signature must be synchronous. Now that this implemented using lazy initialization instead of CommonJS conversion, the closure wrapping the ESM file can now be `async` and the `import()` expression can be replaced by a call to the lazy initializer.\r\n\r\n    * Adding the ability for ESM files to be lazily-initialized is an important step toward additional future code splitting improvements including: manual chunk names (#207), correct import evaluation order (#399), and correct top-level await evaluation order (#253). These features all need to make use of deferred evaluation of ESM code.\r\n\r\n    In addition, calling `require()` on an ESM file now recursively wraps all transitive dependencies of that file instead of just wrapping that ESM file itself. This is an increase in the size of the generated code, but it is important for correctness (#667). Calling `require()` on a module means its evaluation order is determined at run-time, which means the evaluation order of all dependencies must also be determined at run-time. If you don't want the increase in code size, you should use an `import` statement instead of a `require()` call.\r\n\r\n* Dynamic imports now use chunk names instead of entry names (fixes #1056)\r\n\r\n    Previously the output paths of dynamic imports (files imported using the `import()` syntax) were determined by the `--entry-names=` setting. However, this can cause problems if you configure the `--entry-names=` setting to omit both `[dir]` and `[hash]` because then two dynamic imports with the same name will cause an output file name collision.\r\n\r\n    Now dynamic imports use the `--chunk-names=` setting instead, which is used for automatically-generated chunks. This setting is effectively required to include `[hash]` so dynamic import name collisions should now be avoided.\r\n\r\n    In addition, dynamic imports no longer affect the automatically-computed default value of `outbase`. By default `outbase` is computed to be the [lowest common ancestor](https://en.wikipedia.org/wiki/Lowest_common_ancestor) directory of all entry points. Previously dynamic imports were considered entry points in this calculation so adding a dynamic entry point could unexpectedly affect entry point output file paths. This issue has now been fixed.\r\n\r\n* Allow custom output paths for individual entry points\r\n\r\n    By default, esbuild will automatically generate an output path for each entry point by computing the relative path from the `outbase` directory to the entry point path, and then joining that relative path to the `outdir` directory. The output path can be customized using `outpath`, but that only works for a single file. Sometimes you may need custom output paths while using multiple entry points. You can now do this by passing the entry points as a map instead of an array:\r\n\r\n    * CLI\r\n        ```\r\n        esbuild out1=in1.js out2=in2.js --outdir=out\r\n        ```\r\n\r\n    * JS\r\n        ```js\r\n        esbuild.build({\r\n          entryPoints: {\r\n            out1: 'in1.js',\r\n            out2: 'in2.js',\r\n          },\r\n          outdir: 'out',\r\n        })\r\n        ```\r\n\r\n    * Go\r\n\r\n        ```go\r\n        api.Build(api.BuildOptions{\r\n          EntryPointsAdvanced: []api.EntryPoint{{\r\n            OutputPath: \"out1\",\r\n            InputPath: \"in1.js\",\r\n          }, {\r\n            OutputPath: \"out2\",\r\n            InputPath: \"in2.js\",\r\n          }},\r\n          Outdir: \"out\",\r\n        })\r\n        ```\r\n\r\n    This will cause esbuild to generate the files `out/out1.js` and `out/out2.js` inside the output directory. These custom output paths are used as input for the `--entry-names=` path template setting, so you can use something like `--entry-names=[dir]/[name]-[hash]` to add an automatically-computed hash to each entry point while still using the custom output path.\r\n\r\n* Derive entry point output paths from the original input (fixes #945)\r\n\r\n    Previously esbuild would determine the output path for an entry point by looking at the post-resolved path. For example, running `esbuild --bundle react --outdir=out` would generate the output path `out/index.js` because the input path `react` was resolved to `node_modules/react/index.js`. With this release, the output path is now determined by looking at the pre-resolved path. For example, running `esbuild --bundle react --outdir=out` now generates the output path `out/react.js`. If you need to keep using the output path that esbuild previously generated with the old behavior, you can use the custom output path feature (described above).\r\n\r\n* Use the `file` namespace for file entry points (fixes #791)\r\n\r\n    Plugins that contain an `onResolve` callback with the `file` filter don't apply to entry point paths because it's not clear that entry point paths are files. For example, you could potentially bundle an entry point of `https://www.example.com/file.js` with a HTTP plugin that automatically downloads data from the server at that URL. But this behavior can be unexpected for people writing plugins.\r\n\r\n    With this release, esbuild will do a quick check first to see if the entry point path exists on the file system before running plugins. If it exists as a file, the namespace will now be `file` for that entry point path. This only checks the exact entry point name and doesn't attempt to search for the file, so for example it won't handle cases where you pass a package path as an entry point or where you pass an entry point without an extension. Hopefully this should help improve this situation in the common case where the entry point is an exact path.\r\n","reactions":{"url":"https://api.github.com/repos/evanw/esbuild/issues/1078/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":1,"eyes":0},"timeline_url":"https://api.github.com/repos/evanw/esbuild/issues/1078/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/evanw/esbuild/issues/924","repository_url":"https://api.github.com/repos/evanw/esbuild","labels_url":"https://api.github.com/repos/evanw/esbuild/issues/924/labels{/name}","comments_url":"https://api.github.com/repos/evanw/esbuild/issues/924/comments","events_url":"https://api.github.com/repos/evanw/esbuild/issues/924/events","html_url":"https://github.com/evanw/esbuild/pull/924","id":823599088,"node_id":"MDExOlB1bGxSZXF1ZXN0NTg2MDI2ODQ4","number":924,"title":"WIP for version 0.9.0","user":{"login":"evanw","id":406394,"node_id":"MDQ6VXNlcjQwNjM5NA==","avatar_url":"https://avatars.githubusercontent.com/u/406394?v=4","gravatar_id":"","url":"https://api.github.com/users/evanw","html_url":"https://github.com/evanw","followers_url":"https://api.github.com/users/evanw/followers","following_url":"https://api.github.com/users/evanw/following{/other_user}","gists_url":"https://api.github.com/users/evanw/gists{/gist_id}","starred_url":"https://api.github.com/users/evanw/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/evanw/subscriptions","organizations_url":"https://api.github.com/users/evanw/orgs","repos_url":"https://api.github.com/users/evanw/repos","events_url":"https://api.github.com/users/evanw/events{/privacy}","received_events_url":"https://api.github.com/users/evanw/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2021-03-06T08:48:43Z","updated_at":"2021-03-09T04:51:37Z","closed_at":"2021-03-09T04:51:30Z","author_association":"OWNER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/evanw/esbuild/pulls/924","html_url":"https://github.com/evanw/esbuild/pull/924","diff_url":"https://github.com/evanw/esbuild/pull/924.diff","patch_url":"https://github.com/evanw/esbuild/pull/924.patch","merged_at":"2021-03-09T04:51:30Z"},"body":"I'm using this PR to put together the next breaking change release as I build it. Not sure if a PR is the best format for this but I'm giving it a shot. So this PR exists to publicly document what's going into the upcoming version 0.9.0 release. I will be updating it as I go.\r\n\r\nFor context: I have been trying to batch breaking changes together so that they are less disruptive. But they have been piling up because one of the big changes (the linker rewrite) is unfortunately taking longer than I had hoped. I'd like to do a breaking change release now to get some of these breaking changes out even though it won't contain the linker rewrite just to keep other things moving along. This might mean there are at least two breaking change releases coming up: this one and another one with the linker rewrite. Note that the next version after version 0.9.0 will be version 0.10.0, not version 1.0.0. It's definitely getting close to 1.0.0 but it's not quite that close.\r\n\r\nThe rewrite of the linker is being done to address many shortcomings of the current linker all at once. However, that has involved some significant R&D effort (e.g. [1](https://github.com/evanw/esbuild/issues/253#issuecomment-768842454), [2](https://github.com/evanw/esbuild/issues/399#issuecomment-782587966), [3](https://github.com/evanw/esbuild/issues/465#issuecomment-778761208), [4](https://github.com/evanw/esbuild/issues/518#issuecomment-781818245)) and it is unfortunately still a work in progress. I did a brain dump of some information about the linker rewrite at the end of this post.\r\n\r\n## Definitely in version 0.9.0\r\n\r\n- [x] Remove the now-unused `--avoid-tdz` flag\r\n\r\n    This flag no longer does anything because this transformation is now always applied during bundling. It hasn't been removed yet to avoid a breaking change.\r\n\r\n- [x] Remove `SpinnerBusy` and `SpinnerIdle` from the Go API\r\n\r\n    These options were part of an experiment with the CLI that didn't work out. Watch mode no longer uses a spinner because it turns out people want to be able to interleave esbuild's stderr pipe with other tools and were getting tripped up by the spinner animation. These options are currently ignored but haven't been removed yet to avoid a breaking change.\r\n\r\n- [x] Remove the `--summary` flag and instead just always print a summary (#704)\r\n\r\n    The summary can be disabled if you don't want it by passing `--log-level=warning` instead. And it can be enabled in the API by setting `logLevel: 'info'`. I'm going to try this because I believe it will improve the UX. People have this problem with esbuild when they first try it where it runs so quickly that they think it must be broken, only to later discover that it actually worked fine. While this is funny, it seems like a good indication that the UX could be improved. So I'm going to try automatically printing a summary to see how that goes.\r\n\r\n- [x] Remove the `startService()` API, leaving only `build()` and `transform()`\r\n\r\n    The context is that the `startService()` API [was added quickly in response to a user request](https://github.com/evanw/esbuild/issues/75#issuecomment-624300019) and at the time I was unaware of [`unref()`](https://nodejs.org/api/child_process.html#child_process_subprocess_unref) which makes it possible to use a child process without requiring people to call `service.stop()`. Many thanks to @SalvatorePreviti who contributed this change in #656. Calling `service.stop()` no longer does anything, so there is no longer a strong reason for keeping the `startService()` API around. The primary thing it currently does is just make the API more complicated and harder to use. I plan to add an `initialize({ wasmURL })` API to replace the configuration of `wasmURL` in the browser that used to be done by `startService()`. And the `buildSync()` and `transformSync()` APIs will still exist on node.\r\n\r\n- [x] Split the banner and footer features into separate values for JS and CSS (#712)\r\n\r\n    I have been trying to make sure all of the features added are language-agnostic where it makes sense. However, the banner and footer features were an oversight and were added as a JavaScript-specific feature. They don't currently work with CSS. I plan to change the API to make it a mapping of language to value to make it more language-agnostic, which is a breaking change.\r\n\r\n## Probably in version 0.9.0\r\n\r\n- [x] Remove the implicit `.mjs` and `.cjs` extensions\r\n\r\n    I added these because Webpack has implicit `.mjs` extensions and it seemed like a reasonable idea to support these at the time. However, doing this can actually break packages that have `some-file.mjs` and `some-file.js` sitting side-by-side. This also isn't how node works so doing this breaks compatibility with node. So it feels like this should be an opt-in change instead of an opt-out change. I'm going to try removing them from the default configuration. You can still configure them yourself with the \"resolve extensions\" setting if you'd like, although it might break stuff. Otherwise you should use the `.mjs` and `.cjs` extensions explicitly instead of omitting them.\r\n\r\n- [ ] Remove the ability to use `require(...)` on a file in ESM (ECMAScript module) format\r\n\r\n    I had originally enabled this because it seemed reasonable to support. You can just convert the ESM file to a CommonJS file when you hit this case and then load it as CommonJS instead. However, this has a few problems:\r\n\r\n    * This isn't how node works. Doing this in node is impossible and will cause a syntax error. So it's kind of a weird thing to support and there isn't really a precedent that says how it should behave. I want esbuild to follow existing conventions instead of inventing new ones, and it turns out this was kind of inventing a new convention. It feels best for esbuild and for the ecosystem if people don't come to rely on this weird thing actually working, so I'm going to try disabling this.\r\n\r\n    * Doing this makes import order really confusing to reason about. Part of what I am doing with the linker rewrite is to be much more strict about having esbuild follow the correct import order, but this edge case doesn't have a well-defined import ordering. The problem is that ESM import order is determined by a depth-first traversal of the import graph and is entirely statically determined at link time, but `require(...)` is dynamically-determined at run time. Where do ESM imports in the required file end up in the static module initialization order? Do they even end up in the static module initialization order at all? Should they also be converted from ESM to CommonJS recursively, potentially contaminating a large part of the bundle? There isn't really any existing ESM-native platform that behaves this way.\r\n\r\n    * It also causes extra issues now that TLA (top-level await) is a part of JavaScript. TLA is only available in ESM files and means that loading them can now be asynchronous. But `require(...)` is synchronous so loading an ESM file with a TLA file anywhere in its dependency chain must be forbidden. If using `require(...)` with ESM were to be supported then you may be seemingly arbitrarily prevented from adding an `await` to a file because some other file in a seemingly unrelated place happened to use a `require(...)` call. It seems better for code health to just avoid this possibility in the first place. This constraint also makes the bundler simpler to implement.\r\n\r\n    Getting this change out should hopefully make the linker rewrite go more smoothly.\r\n\r\n## Maybe in version 0.9.0\r\n\r\n- [x] Add support for node's `exports` field in `package.json` (#187)\r\n\r\n    This feature was recently added to node. It allows you to rewrite what import paths inside your package map to as well as to prevent people from importing certain files in your package. Adding support for this to esbuild is a breaking change (i.e. code that was working fine before can easily stop working) so it must be done in a breaking change release.\r\n- [x] Remove the `metafile` from `outputFiles` (#633)\r\n\r\n    Right now using `metafile` with the API is unnecessarily cumbersome because you have to extract the JSON metadata from the output file yourself instead of it just being provided to you as a return value. This is especially a bummer if you are using `write: false` because then you need to use a for loop over the output files and do string comparisons with the file paths to try to find the one corresponding to the `metafile`. Returning the metadata directly is an important UX improvement for the API. This hasn't been done yet because doing this is a breaking change.\r\n\r\n\r\n- [ ] Support content hashes in entry point names (#518)\r\n\r\n    Support for this is already planned. The plan is to add the `--entry-names=` flag and let you put the `[hash]` placeholder somewhere inside it to cause esbuild to include the content hash in entry point names. You can then use the `metafile` to figure out what the output path was for each entry point. However, this would introduce cycles into the content hash calculation as the content hash includes not just the current file but also all of the content hashes of all transitive dependencies and entry points can reference each other using dynamic `import(...)` expressions.\r\n\r\n    Addressing this requires a different approach to chunk generation that is part of the linker rewrite. This technically isn't a breaking change but it has a strong possibility of accidentally introducing bugs (especially with source maps) since it's a lot of new code, so it may also be appropriate for a breaking change release. Although it could potentially make sense to hold this back for the next breaking change release to avoid delays.\r\n\r\n## Hopefully in version 0.10.0\r\n\r\n- Code splitting for all output formats (#16)\r\n\r\n    Right now code splitting only works for the `esm` output format, and only works for JavaScript. It should also work for the `iife` and `cjs` output formats, and also for CSS. I have a plan to address this and it is a part of the linker redesign.\r\n\r\n- Manual chunk labels (#207)\r\n\r\n    This feature isn't implemented yet because it creates import cycles and the content hashing algorithm can't deal with cycles yet. But this is being kept in mind during the linker rewrite so this should be relatively easy to add when the new linker is ready.\r\n\r\n- Collapse duplicate external imports (#475)\r\n\r\n    Right now each individual `import` statement for an external module ends up in the bundle even though they all reference the same external path and the external file is only ever imported once. I plan to collapse this into as few import statements as possible (usually one but may be up to three) as part of the rewrite of the linker.\r\n\r\n- Bundling with top-level await (#253)\r\n\r\n    It's important to have esbuild support top-level await now that it's officially a part of JavaScript and usable in both node and in the browser. Unfortunately the semantics are extremely complicated (and not even implemented correctly in V8 yet!) so esbuild's initial implementation may not be totally accurate. It will at least contain the important parts (`await` works and sibling modules go in parallel). Currently all implementations behave slightly differently so there isn't yet common consensus about exact behavior among implementations. My current plan is to bundle files into groups by what asynchronous files they transitively depend on to reduce the overall number of files, then evaluate files within those groups in the order they would have been evalauted in if there was no top-level await. Cross-group ordering will depend on the order of promise resolutions.\r\n\r\n- Fix import ordering issues with internal code (#399, #465)\r\n\r\n    Right now import order is not accurate when code splitting is active. The fundamental issue is that code in chunks is eagerly evaluated when that chunk is imported but different parts of the chunk need to be evaluated at different times for correctness. Either the chunk needs to be split into smaller chunks or code in chunks must be lazily evaluated to fix import order. I'm currently planning to lazily evaluate code to avoid additional chunk splits.\r\n\r\n- Potentially break the ordering of external imports\r\n\r\n    External imports cannot be lazily evaluated in `esm` and respecting the correct import order would hurt bundle optimization and make the bundler more complicated. Either chunks would have to be split into further chunks or code would potentially need to be awkwardly stuffed into `import` statements containing data URLs, both of which would bloat code and hurt bundle download performance. I'm currently considering having external import order still be incorrect (i.e. hoisted to the top) since that's much simpler and seems to be what some other bundlers do anyway.\r\n\r\n- Potentially roll back the file splitting optimization\r\n\r\n    Currently esbuild contains an optimization that no other bundler supports: individual unrelated statements within a file can end up in separate chunks when code splitting is active if they are used by a disjoint set of entry points. This means you can have a big library file of functions and potentially not have any shared chunks if no two entry points use any of the same functions. However, the blocking for top-level await works at the file boundary and this optimization made thinking through top-level await evaluation order too complicated. I'm seriously considering removing this optimization to restore my sanity and get top-level await out the door. I don't feel too bad about this because no other bundler does this yet anyway.\r\n","reactions":{"url":"https://api.github.com/repos/evanw/esbuild/issues/924/reactions","total_count":30,"+1":3,"-1":0,"laugh":0,"hooray":2,"confused":0,"heart":20,"rocket":3,"eyes":2},"timeline_url":"https://api.github.com/repos/evanw/esbuild/issues/924/timeline","performed_via_github_app":null,"state_reason":null,"score":1}]