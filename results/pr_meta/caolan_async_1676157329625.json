[{"url":"https://api.github.com/repos/caolan/async/issues/1727","repository_url":"https://api.github.com/repos/caolan/async","labels_url":"https://api.github.com/repos/caolan/async/issues/1727/labels{/name}","comments_url":"https://api.github.com/repos/caolan/async/issues/1727/comments","events_url":"https://api.github.com/repos/caolan/async/issues/1727/events","html_url":"https://github.com/caolan/async/pull/1727","id":719852665,"node_id":"MDExOlB1bGxSZXF1ZXN0NTAxOTczMDQz","number":1727,"title":"priorityQueue: Prevent same tick setImmediate","user":{"login":"pkarimov","id":72779542,"node_id":"MDQ6VXNlcjcyNzc5NTQy","avatar_url":"https://avatars.githubusercontent.com/u/72779542?v=4","gravatar_id":"","url":"https://api.github.com/users/pkarimov","html_url":"https://github.com/pkarimov","followers_url":"https://api.github.com/users/pkarimov/followers","following_url":"https://api.github.com/users/pkarimov/following{/other_user}","gists_url":"https://api.github.com/users/pkarimov/gists{/gist_id}","starred_url":"https://api.github.com/users/pkarimov/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pkarimov/subscriptions","organizations_url":"https://api.github.com/users/pkarimov/orgs","repos_url":"https://api.github.com/users/pkarimov/repos","events_url":"https://api.github.com/users/pkarimov/events{/privacy}","received_events_url":"https://api.github.com/users/pkarimov/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2020-10-13T04:34:54Z","updated_at":"2020-10-17T18:58:32Z","closed_at":"2020-10-17T18:58:21Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/caolan/async/pulls/1727","html_url":"https://github.com/caolan/async/pull/1727","diff_url":"https://github.com/caolan/async/pull/1727.diff","patch_url":"https://github.com/caolan/async/pull/1727.patch","merged_at":"2020-10-17T18:58:21Z"},"body":"This applies the same technique that was done for queue in PR #1448 to priorityQueue. The change prevents multiple calls to setImmediate for queue processing that originate from calls to push on the same tick. The added overhead of the change is fairly negligible -- one variable assignment and two conditions. \r\n\r\n```\r\n$ perf/benchmark.js --grep priorityQueue\r\nLatest tag is  v3.2.0\r\nComparing v3.2.0 with current on Node v12.13.1\r\n--------------------------------------\r\npriorityQueue(10) v3.2.0 x 16,503 ops/sec ±2.79% (27 runs sampled), 0.0606ms per run\r\npriorityQueue(10) current x 17,979 ops/sec ±4.99% (28 runs sampled), 0.0556ms per run\r\ncurrent is faster\r\n--------------------------------------\r\npriorityQueue(100) v3.2.0 x 4,261 ops/sec ±1.90% (28 runs sampled), 0.235ms per run\r\npriorityQueue(100) current x 4,749 ops/sec ±0.90% (28 runs sampled), 0.211ms per run\r\ncurrent is faster\r\n--------------------------------------\r\npriorityQueue(1000) v3.2.0 x 509 ops/sec ±1.06% (32 runs sampled), 1.96ms per run\r\npriorityQueue(1000) current x 556 ops/sec ±1.17% (32 runs sampled), 1.80ms per run\r\ncurrent is faster\r\n--------------------------------------\r\npriorityQueue(30000) v3.2.0 x 13.02 ops/sec ±3.95% (24 runs sampled), 76.8ms per run\r\npriorityQueue(30000) current x 14.79 ops/sec ±2.11% (27 runs sampled), 67.6ms per run\r\ncurrent is faster\r\n--------------------------------------\r\npriorityQueue(50000) v3.2.0 x 7.21 ops/sec ±2.82% (14 runs sampled), 139ms per run\r\npriorityQueue(50000) current x 8.93 ops/sec ±3.04% (17 runs sampled), 112ms per run\r\ncurrent is faster\r\n--------------------------------------\r\ncurrent faster overall (182ms total vs. 218ms total)\r\ncurrent won more benchmarks (5 vs. 0)\r\n```","reactions":{"url":"https://api.github.com/repos/caolan/async/issues/1727/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/caolan/async/issues/1727/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/caolan/async/issues/1454","repository_url":"https://api.github.com/repos/caolan/async","labels_url":"https://api.github.com/repos/caolan/async/issues/1454/labels{/name}","comments_url":"https://api.github.com/repos/caolan/async/issues/1454/comments","events_url":"https://api.github.com/repos/caolan/async/issues/1454/events","html_url":"https://github.com/caolan/async/pull/1454","id":244675408,"node_id":"MDExOlB1bGxSZXF1ZXN0MTMxNzc5MDAz","number":1454,"title":"Use shift instead of splice (when possible) in queue","user":{"login":"iamdoron","id":3956042,"node_id":"MDQ6VXNlcjM5NTYwNDI=","avatar_url":"https://avatars.githubusercontent.com/u/3956042?v=4","gravatar_id":"","url":"https://api.github.com/users/iamdoron","html_url":"https://github.com/iamdoron","followers_url":"https://api.github.com/users/iamdoron/followers","following_url":"https://api.github.com/users/iamdoron/following{/other_user}","gists_url":"https://api.github.com/users/iamdoron/gists{/gist_id}","starred_url":"https://api.github.com/users/iamdoron/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/iamdoron/subscriptions","organizations_url":"https://api.github.com/users/iamdoron/orgs","repos_url":"https://api.github.com/users/iamdoron/repos","events_url":"https://api.github.com/users/iamdoron/events{/privacy}","received_events_url":"https://api.github.com/users/iamdoron/received_events","type":"User","site_admin":false},"labels":[{"id":213523438,"node_id":"MDU6TGFiZWwyMTM1MjM0Mzg=","url":"https://api.github.com/repos/caolan/async/labels/performance","name":"performance","color":"009800","default":false,"description":null},{"id":214186485,"node_id":"MDU6TGFiZWwyMTQxODY0ODU=","url":"https://api.github.com/repos/caolan/async/labels/queue","name":"queue","color":"bfe5bf","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2017-07-21T13:52:20Z","updated_at":"2017-07-24T15:04:13Z","closed_at":"2017-07-24T15:04:13Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/caolan/async/pulls/1454","html_url":"https://github.com/caolan/async/pull/1454","diff_url":"https://github.com/caolan/async/pull/1454.diff","patch_url":"https://github.com/caolan/async/pull/1454.patch","merged_at":"2017-07-24T15:04:13Z"},"body":"Hi,\r\n\r\nI had some performance issues when using `async.cargo` with large number of tasks (batches of 10k). Changing `splice(0, 1)` to `shift()` improved it dramatically (for a batch of 10k it removed ~3 seconds from each batch). \r\nFor some reason I wasn't able to reproduce it using an example. Maybe it depends on the memory state of the process. From a simple [benchmark](https://jsperf.com/remove-first-element-from-array/4) here you can see shift is much faster than splice (I checked on Safari, Chrome & Firefox on MacOS)","reactions":{"url":"https://api.github.com/repos/caolan/async/issues/1454/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/caolan/async/issues/1454/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/caolan/async/issues/1448","repository_url":"https://api.github.com/repos/caolan/async","labels_url":"https://api.github.com/repos/caolan/async/issues/1448/labels{/name}","comments_url":"https://api.github.com/repos/caolan/async/issues/1448/comments","events_url":"https://api.github.com/repos/caolan/async/issues/1448/events","html_url":"https://github.com/caolan/async/pull/1448","id":241490109,"node_id":"MDExOlB1bGxSZXF1ZXN0MTI5NTQ2OTE4","number":1448,"title":"Improve `async.queue` start up performance","user":{"login":"hargasinski","id":7647696,"node_id":"MDQ6VXNlcjc2NDc2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/7647696?v=4","gravatar_id":"","url":"https://api.github.com/users/hargasinski","html_url":"https://github.com/hargasinski","followers_url":"https://api.github.com/users/hargasinski/followers","following_url":"https://api.github.com/users/hargasinski/following{/other_user}","gists_url":"https://api.github.com/users/hargasinski/gists{/gist_id}","starred_url":"https://api.github.com/users/hargasinski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hargasinski/subscriptions","organizations_url":"https://api.github.com/users/hargasinski/orgs","repos_url":"https://api.github.com/users/hargasinski/repos","events_url":"https://api.github.com/users/hargasinski/events{/privacy}","received_events_url":"https://api.github.com/users/hargasinski/received_events","type":"User","site_admin":false},"labels":[{"id":213523438,"node_id":"MDU6TGFiZWwyMTM1MjM0Mzg=","url":"https://api.github.com/repos/caolan/async/labels/performance","name":"performance","color":"009800","default":false,"description":null},{"id":214186485,"node_id":"MDU6TGFiZWwyMTQxODY0ODU=","url":"https://api.github.com/repos/caolan/async/labels/queue","name":"queue","color":"bfe5bf","default":false,"description":null},{"id":308372809,"node_id":"MDU6TGFiZWwzMDgzNzI4MDk=","url":"https://api.github.com/repos/caolan/async/labels/feedback-wanted","name":"feedback-wanted","color":"fbca04","default":false,"description":null}],"state":"closed","locked":false,"assignee":{"login":"hargasinski","id":7647696,"node_id":"MDQ6VXNlcjc2NDc2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/7647696?v=4","gravatar_id":"","url":"https://api.github.com/users/hargasinski","html_url":"https://github.com/hargasinski","followers_url":"https://api.github.com/users/hargasinski/followers","following_url":"https://api.github.com/users/hargasinski/following{/other_user}","gists_url":"https://api.github.com/users/hargasinski/gists{/gist_id}","starred_url":"https://api.github.com/users/hargasinski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hargasinski/subscriptions","organizations_url":"https://api.github.com/users/hargasinski/orgs","repos_url":"https://api.github.com/users/hargasinski/repos","events_url":"https://api.github.com/users/hargasinski/events{/privacy}","received_events_url":"https://api.github.com/users/hargasinski/received_events","type":"User","site_admin":false},"assignees":[{"login":"hargasinski","id":7647696,"node_id":"MDQ6VXNlcjc2NDc2OTY=","avatar_url":"https://avatars.githubusercontent.com/u/7647696?v=4","gravatar_id":"","url":"https://api.github.com/users/hargasinski","html_url":"https://github.com/hargasinski","followers_url":"https://api.github.com/users/hargasinski/followers","following_url":"https://api.github.com/users/hargasinski/following{/other_user}","gists_url":"https://api.github.com/users/hargasinski/gists{/gist_id}","starred_url":"https://api.github.com/users/hargasinski/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/hargasinski/subscriptions","organizations_url":"https://api.github.com/users/hargasinski/orgs","repos_url":"https://api.github.com/users/hargasinski/repos","events_url":"https://api.github.com/users/hargasinski/events{/privacy}","received_events_url":"https://api.github.com/users/hargasinski/received_events","type":"User","site_admin":false}],"milestone":null,"comments":0,"created_at":"2017-07-09T00:31:44Z","updated_at":"2017-07-10T05:06:47Z","closed_at":"2017-07-10T04:17:56Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/caolan/async/pulls/1448","html_url":"https://github.com/caolan/async/pull/1448","diff_url":"https://github.com/caolan/async/pull/1448.diff","patch_url":"https://github.com/caolan/async/pull/1448.patch","merged_at":"2017-07-10T04:17:56Z"},"body":"Essentially, this PR prevents multiple same-tick `q.push` calls from calling `q.process` multiple times.\r\n\r\nAdmittedly, this is slightly biased towards our benchmarks, as most `async` users probably aren't calling `q.push` 1000+ times on start-up. However, in the worst-case, if they call it once, or use an array to push multiple tasks at once, it only adds one additional check, and two assignments to the `queue.push` cost.\r\n\r\nThe main drawback of this change is that if  `q.process` is reassigned, the `queue` will be permanently paused. I don't think that's a supported use case right now though.\r\n\r\n```\r\n$ ./perf/benchmark.js --grep queue\r\nLatest tag is  v2.5.0\r\nComparing v2.5.0 with current on Node v7.10.0\r\n--------------------------------------\r\nqueue(10) v2.5.0 x 39,905 ops/sec ±0.56% (31 runs sampled), 0.0251ms per run\r\nqueue(10) current x 41,461 ops/sec ±0.53% (28 runs sampled), 0.0241ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nqueue(100) v2.5.0 x 5,616 ops/sec ±1.27% (29 runs sampled), 0.178ms per run\r\nqueue(100) current x 6,510 ops/sec ±0.25% (31 runs sampled), 0.154ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nqueue(1000) v2.5.0 x 621 ops/sec ±1.66% (32 runs sampled), 1.61ms per run\r\nqueue(1000) current x 686 ops/sec ±0.40% (33 runs sampled), 1.46ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nqueue(30000) v2.5.0 x 17.32 ops/sec ±3.12% (31 runs sampled), 57.7ms per run\r\nqueue(30000) current x 20.36 ops/sec ±2.63% (19 runs sampled), 49.1ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nqueue(100000) v2.5.0 x 4.09 ops/sec ±2.79% (8 runs sampled), 245ms per run\r\nqueue(100000) current x 6.09 ops/sec ±3.30% (12 runs sampled), 164ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nqueue(200000) v2.5.0 x 2.07 ops/sec ±10.66% (5 runs sampled), 483ms per run\r\nqueue(200000) current x 3.16 ops/sec ±2.46% (7 runs sampled), 316ms per run\r\ncurrent is faster\r\n--------------------------------------\r\ncurrent faster overall (531ms total vs. 787ms total)\r\ncurrent won more benchmarks (6 vs. 0)\r\n```","reactions":{"url":"https://api.github.com/repos/caolan/async/issues/1448/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/caolan/async/issues/1448/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/caolan/async/issues/1395","repository_url":"https://api.github.com/repos/caolan/async","labels_url":"https://api.github.com/repos/caolan/async/issues/1395/labels{/name}","comments_url":"https://api.github.com/repos/caolan/async/issues/1395/comments","events_url":"https://api.github.com/repos/caolan/async/issues/1395/events","html_url":"https://github.com/caolan/async/pull/1395","id":218851405,"node_id":"MDExOlB1bGxSZXF1ZXN0MTEzODcyMzQy","number":1395,"title":"Optimized waterfall, parallel, et al.","user":{"login":"aearly","id":558190,"node_id":"MDQ6VXNlcjU1ODE5MA==","avatar_url":"https://avatars.githubusercontent.com/u/558190?v=4","gravatar_id":"","url":"https://api.github.com/users/aearly","html_url":"https://github.com/aearly","followers_url":"https://api.github.com/users/aearly/followers","following_url":"https://api.github.com/users/aearly/following{/other_user}","gists_url":"https://api.github.com/users/aearly/gists{/gist_id}","starred_url":"https://api.github.com/users/aearly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/aearly/subscriptions","organizations_url":"https://api.github.com/users/aearly/orgs","repos_url":"https://api.github.com/users/aearly/repos","events_url":"https://api.github.com/users/aearly/events{/privacy}","received_events_url":"https://api.github.com/users/aearly/received_events","type":"User","site_admin":false},"labels":[{"id":213523438,"node_id":"MDU6TGFiZWwyMTM1MjM0Mzg=","url":"https://api.github.com/repos/caolan/async/labels/performance","name":"performance","color":"009800","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2017-04-03T07:36:15Z","updated_at":"2017-04-07T05:41:47Z","closed_at":"2017-04-07T05:41:42Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/caolan/async/pulls/1395","html_url":"https://github.com/caolan/async/pull/1395","diff_url":"https://github.com/caolan/async/pull/1395.diff","patch_url":"https://github.com/caolan/async/pull/1395.patch","merged_at":"2017-04-07T05:41:42Z"},"body":"I ran some profiling, and notices that a lot of time is being spent in `internal/rest`.  It turns out `rest()` is much slower than a straightforward arguments `slice()`.  (I also tried the \"inline slice\" strategy with a loop that is sometimes recommended, it made absolutely no difference).  The differences are significant, especially for `parallel`:\r\n\r\n<details>\r\n   <summary>Benchmark Results (click to expand)</summary>\r\n<pre>\r\n$ node perf/benchmark.js -g 'series|waterfall|auto|parallel'\r\nLatest tag is  v2.3.0\r\nComparing v2.3.0 with current on Node v7.7.4\r\n--------------------------------------\r\n(node:29289) DeprecationWarning: Calling an asynchronous function without callback is deprecated.\r\neachSeries(10) v2.3.0 x 51,744 ops/sec ±1.47% (27 runs sampled), 0.0193ms per run\r\neachSeries(10) current x 54,845 ops/sec ±1.50% (29 runs sampled), 0.0182ms per run\r\ncurrent is faster\r\n--------------------------------------\r\neachSeries(300) v2.3.0 x 2,718 ops/sec ±2.76% (29 runs sampled), 0.368ms per run\r\neachSeries(300) current x 3,108 ops/sec ±1.69% (25 runs sampled), 0.322ms per run\r\ncurrent is faster\r\n--------------------------------------\r\neachSeries(10000) v2.3.0 x 87.15 ops/sec ±2.30% (29 runs sampled), 11.5ms per run\r\neachSeries(10000) current x 106 ops/sec ±0.96% (30 runs sampled), 9.42ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nmapSeries(10) v2.3.0 x 51,520 ops/sec ±1.06% (31 runs sampled), 0.0194ms per run\r\nmapSeries(10) current x 55,203 ops/sec ±1.58% (30 runs sampled), 0.0181ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nmapSeries(300) v2.3.0 x 2,832 ops/sec ±0.96% (30 runs sampled), 0.353ms per run\r\nmapSeries(300) current x 3,108 ops/sec ±1.62% (32 runs sampled), 0.322ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nmapSeries(10000) v2.3.0 x 85.19 ops/sec ±2.45% (29 runs sampled), 11.7ms per run\r\nmapSeries(10000) current x 95.28 ops/sec ±2.42% (27 runs sampled), 10.5ms per run\r\ncurrent is faster\r\n--------------------------------------\r\neachOfSeries(10) v2.3.0 x 55,509 ops/sec ±1.51% (30 runs sampled), 0.0180ms per run\r\neachOfSeries(10) current x 58,832 ops/sec ±2.64% (29 runs sampled), 0.0170ms per run\r\ncurrent is faster\r\n--------------------------------------\r\neachOfSeries(300) v2.3.0 x 3,000 ops/sec ±1.96% (28 runs sampled), 0.333ms per run\r\neachOfSeries(300) current x 3,369 ops/sec ±1.01% (31 runs sampled), 0.297ms per run\r\ncurrent is faster\r\n--------------------------------------\r\neachOfSeries(10000) v2.3.0 x 93.05 ops/sec ±1.88% (32 runs sampled), 10.7ms per run\r\neachOfSeries(10000) current x 103 ops/sec ±2.38% (30 runs sampled), 9.67ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nparallel(10) v2.3.0 x 79,183 ops/sec ±1.84% (29 runs sampled), 0.0126ms per run\r\nparallel(10) current x 93,866 ops/sec ±2.27% (30 runs sampled), 0.0107ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nparallel(100) v2.3.0 x 17,376 ops/sec ±1.95% (30 runs sampled), 0.0576ms per run\r\nparallel(100) current x 25,385 ops/sec ±2.02% (29 runs sampled), 0.0394ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nparallel(1000) v2.3.0 x 1,952 ops/sec ±1.56% (29 runs sampled), 0.512ms per run\r\nparallel(1000) current x 3,011 ops/sec ±2.09% (29 runs sampled), 0.332ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nseries(10) v2.3.0 x 48,445 ops/sec ±2.92% (24 runs sampled), 0.0206ms per run\r\nseries(10) current x 57,840 ops/sec ±1.63% (30 runs sampled), 0.0173ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nseries(100) v2.3.0 x 7,491 ops/sec ±1.65% (30 runs sampled), 0.133ms per run\r\nseries(100) current x 8,525 ops/sec ±2.66% (28 runs sampled), 0.117ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nseries(1000) v2.3.0 x 814 ops/sec ±2.15% (31 runs sampled), 1.23ms per run\r\nseries(1000) current x 957 ops/sec ±2.25% (30 runs sampled), 1.05ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nwaterfall(10) v2.3.0 x 42,529 ops/sec ±1.92% (30 runs sampled), 0.0235ms per run\r\nwaterfall(10) current x 47,484 ops/sec ±2.51% (30 runs sampled), 0.0211ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nwaterfall(100) v2.3.0 x 6,180 ops/sec ±2.59% (31 runs sampled), 0.162ms per run\r\nwaterfall(100) current x 7,322 ops/sec ±1.33% (27 runs sampled), 0.137ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nwaterfall(1000) v2.3.0 x 656 ops/sec ±1.26% (31 runs sampled), 1.52ms per run\r\nwaterfall(1000) current x 771 ops/sec ±1.50% (30 runs sampled), 1.30ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nauto(5) v2.3.0 x 36,391 ops/sec ±2.34% (30 runs sampled), 0.0275ms per run\r\nauto(5) current x 39,932 ops/sec ±2.13% (29 runs sampled), 0.0250ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nauto(10) v2.3.0 x 20,148 ops/sec ±2.08% (29 runs sampled), 0.0496ms per run\r\nauto(10) current x 21,765 ops/sec ±1.94% (29 runs sampled), 0.0459ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nauto(100) v2.3.0 x 866 ops/sec ±1.97% (30 runs sampled), 1.16ms per run\r\nauto(100) current x 903 ops/sec ±1.99% (29 runs sampled), 1.11ms per run\r\ncurrent is faster\r\n--------------------------------------\r\ncurrent faster overall (34.8ms total vs. 40ms total)\r\ncurrent won more benchmarks (21 vs. 0)\r\n\r\n</pre>\r\n</details>\r\n\r\n<br>\r\n\r\nWe're also competitive with Bluebird again:\r\n\r\n<details>\r\n<summary>Bluebird benchmarks (click to expand)</summary>\r\n<pre>\r\nresults for 10000 parallel executions, 1 ms per I/O op\r\n\r\nfile                                      time(ms)  memory(MB)\r\ncallbacks-baseline.js                          247       71.74\r\ncallbacks-suguru03-neo-async-parallel.js       369       89.66\r\ncallbacks-caolan-async-parallel.js             500      122.13\r\npromises-bluebird-generator.js                 528      105.73\r\npromises-lvivski-davy.js                       554      163.70\r\npromises-bluebird.js                           620      103.58\r\npromises-cujojs-when.js                        736      166.95\r\n//...\r\n\r\nPlatform info:\r\nLinux 4.8.0-41-generic x64\r\nNode.JS 7.7.4\r\nV8 5.5.372.42\r\nIntel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz × 8\r\n\r\n--------\r\n\r\nresults for 10000 parallel executions, 1 ms per I/O op\r\n\r\nfile                                       time(ms)  memory(MB)\r\ncallbacks-baseline.js                           113       26.87\r\ncallbacks-suguru03-neo-async-waterfall.js       147       36.47\r\npromises-bluebird-generator.js                  211       37.81\r\ncallbacks-caolan-async-waterfall.js             222       46.56\r\npromises-bluebird.js                            247       47.08\r\npromises-then-promise.js                        387       86.44\r\npromises-lvivski-davy.js                        399       99.09\r\npromises-cujojs-when.js                         403       72.13\r\npromises-tildeio-rsvp.js                        415       78.18\r\npromises-dfilatov-vow.js                        614      134.69\r\npromises-calvinmetcalf-lie.js                   677      162.16\r\ngenerators-tj-co.js                             713      112.79\r\n//...\r\n\r\nPlatform info:\r\nLinux 4.8.0-41-generic x64\r\nNode.JS 7.7.4\r\nV8 5.5.372.42\r\nIntel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz × 8\r\n\r\n</pre>\r\n</details>\r\n\r\n<br>\r\n\r\nIt might be worth getting rid of `rest()` completely, but the gains will be less.\r\n\r\nNothing beats native `...rest` params in ES6, though...\r\n\r\n```\r\n$ node perf/benchmark.js -g 'waterfall'\r\nLatest tag is  v2.3.0\r\nComparing v2.3.0 with current on Node v7.7.4\r\n--------------------------------------\r\nwaterfall(10) v2.3.0 x 41,937 ops/sec ±1.54% (23 runs sampled), 0.0238ms per run\r\nwaterfall(10) current x 56,884 ops/sec ±2.12% (29 runs sampled), 0.0176ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nwaterfall(100) v2.3.0 x 6,061 ops/sec ±2.00% (30 runs sampled), 0.165ms per run\r\nwaterfall(100) current x 8,876 ops/sec ±2.65% (28 runs sampled), 0.113ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nwaterfall(1000) v2.3.0 x 638 ops/sec ±3.13% (29 runs sampled), 1.57ms per run\r\nwaterfall(1000) current x 1,024 ops/sec ±2.06% (30 runs sampled), 0.977ms per run\r\ncurrent is faster\r\n--------------------------------------\r\ncurrent faster overall (1.11ms total vs. 1.76ms total)\r\ncurrent won more benchmarks (3 vs. 0)\r\n\r\n-----------\r\n\r\nresults for 10000 parallel executions, 1 ms per I/O op\r\n\r\nfile                                       time(ms)  memory(MB)\r\ncallbacks-baseline.js                           118       24.98\r\ncallbacks-caolan-async-waterfall.js             202       45.82\r\ncallbacks-suguru03-neo-async-waterfall.js       203       36.24\r\npromises-bluebird-generator.js                  218       37.35\r\npromises-bluebird.js                            264       53.38\r\n\r\n```","reactions":{"url":"https://api.github.com/repos/caolan/async/issues/1395/reactions","total_count":4,"+1":4,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/caolan/async/issues/1395/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/caolan/async/issues/1326","repository_url":"https://api.github.com/repos/caolan/async","labels_url":"https://api.github.com/repos/caolan/async/issues/1326/labels{/name}","comments_url":"https://api.github.com/repos/caolan/async/issues/1326/comments","events_url":"https://api.github.com/repos/caolan/async/issues/1326/events","html_url":"https://github.com/caolan/async/pull/1326","id":190057350,"node_id":"MDExOlB1bGxSZXF1ZXN0OTQxNzQyNTU=","number":1326,"title":"Implement array specific filter function","user":{"login":"megawac","id":3475472,"node_id":"MDQ6VXNlcjM0NzU0NzI=","avatar_url":"https://avatars.githubusercontent.com/u/3475472?v=4","gravatar_id":"","url":"https://api.github.com/users/megawac","html_url":"https://github.com/megawac","followers_url":"https://api.github.com/users/megawac/followers","following_url":"https://api.github.com/users/megawac/following{/other_user}","gists_url":"https://api.github.com/users/megawac/gists{/gist_id}","starred_url":"https://api.github.com/users/megawac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/megawac/subscriptions","organizations_url":"https://api.github.com/users/megawac/orgs","repos_url":"https://api.github.com/users/megawac/repos","events_url":"https://api.github.com/users/megawac/events{/privacy}","received_events_url":"https://api.github.com/users/megawac/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2016-11-17T14:10:25Z","updated_at":"2016-11-17T21:03:29Z","closed_at":"2016-11-17T21:03:29Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/caolan/async/pulls/1326","html_url":"https://github.com/caolan/async/pull/1326","diff_url":"https://github.com/caolan/async/pull/1326.diff","patch_url":"https://github.com/caolan/async/pull/1326.patch","merged_at":"2016-11-17T21:03:29Z"},"body":"fyi @CodeMan99 \r\n\r\n```\r\nLatest tag is  v2.1.2\r\nComparing v2.1.2 with current on Node v6.2.2\r\n--------------------------------------\r\nfilter(10) v2.1.2 x 45,704 ops/sec ±6.87% (27 runs sampled), 0.0219ms per run\r\nfilter(10) current x 53,959 ops/sec ±1.74% (29 runs sampled), 0.0185ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nfilter(300) v2.1.2 x 3,978 ops/sec ±7.62% (30 runs sampled), 0.251ms per run\r\nfilter(300) current x 5,290 ops/sec ±2.40% (30 runs sampled), 0.189ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nfilter(10000) v2.1.2 x 74.95 ops/sec ±5.52% (26 runs sampled), 13.3ms per run\r\nfilter(10000) current x 108 ops/sec ±2.91% (31 runs sampled), 9.30ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nfilterLimit(10) v2.1.2 x 46,619 ops/sec ±1.88% (31 runs sampled), 0.0215ms per run\r\nfilterLimit(10) current x 52,475 ops/sec ±0.42% (28 runs sampled), 0.0191ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nfilterLimit(300) v2.1.2 x 2,760 ops/sec ±5.53% (31 runs sampled), 0.362ms per run\r\nfilterLimit(300) current x 3,777 ops/sec ±1.32% (31 runs sampled), 0.265ms per run\r\ncurrent is faster\r\n--------------------------------------\r\nfilterLimit(10000) v2.1.2 x 85.89 ops/sec ±1.96% (30 runs sampled), 11.6ms per run\r\nfilterLimit(10000) current x 122 ops/sec ±0.93% (30 runs sampled), 8.17ms per run\r\ncurrent is faster\r\n--------------------------------------\r\ncurrent faster overall (18ms total vs. 25.6ms total)\r\ncurrent won more benchmarks (6 vs. 0)\r\n```","reactions":{"url":"https://api.github.com/repos/caolan/async/issues/1326/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/caolan/async/issues/1326/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/caolan/async/issues/1246","repository_url":"https://api.github.com/repos/caolan/async","labels_url":"https://api.github.com/repos/caolan/async/issues/1246/labels{/name}","comments_url":"https://api.github.com/repos/caolan/async/issues/1246/comments","events_url":"https://api.github.com/repos/caolan/async/issues/1246/events","html_url":"https://github.com/caolan/async/pull/1246","id":166706776,"node_id":"MDExOlB1bGxSZXF1ZXN0NzgyMzcyOTU=","number":1246,"title":"Fast path eachOf array case","user":{"login":"megawac","id":3475472,"node_id":"MDQ6VXNlcjM0NzU0NzI=","avatar_url":"https://avatars.githubusercontent.com/u/3475472?v=4","gravatar_id":"","url":"https://api.github.com/users/megawac","html_url":"https://github.com/megawac","followers_url":"https://api.github.com/users/megawac/followers","following_url":"https://api.github.com/users/megawac/following{/other_user}","gists_url":"https://api.github.com/users/megawac/gists{/gist_id}","starred_url":"https://api.github.com/users/megawac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/megawac/subscriptions","organizations_url":"https://api.github.com/users/megawac/orgs","repos_url":"https://api.github.com/users/megawac/repos","events_url":"https://api.github.com/users/megawac/events{/privacy}","received_events_url":"https://api.github.com/users/megawac/received_events","type":"User","site_admin":false},"labels":[{"id":213523438,"node_id":"MDU6TGFiZWwyMTM1MjM0Mzg=","url":"https://api.github.com/repos/caolan/async/labels/performance","name":"performance","color":"009800","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2016-07-20T23:38:20Z","updated_at":"2016-07-21T18:06:14Z","closed_at":"2016-07-21T18:06:14Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/caolan/async/pulls/1246","html_url":"https://github.com/caolan/async/pull/1246","diff_url":"https://github.com/caolan/async/pull/1246.diff","patch_url":"https://github.com/caolan/async/pull/1246.patch","merged_at":"2016-07-21T18:06:14Z"},"body":"https://github.com/caolan/async/pull/847 was a valuable change to the code base in which we definetely cleaned things up.\n\nIn this PR I want to add a special case, where we consider the array case separate from the generic case. I think this is important as I believe the parallel cases of `each`, `eachOf`, `map`, `filter`, etc when provided arrays are one of the hottest paths in the library. Therefore, I have decided to optimize parallel array processing for all methods which use `eachOf` for the array case and defer to the `eachOfLimit` implementation for objects and iterators.\n\n[On my run of the relevant benchmarks, the suite ran 27.4% faster](https://github.com/caolan/async/files/374892/perf.txt)\n\n/cc @aearly @charlierudolph\n","reactions":{"url":"https://api.github.com/repos/caolan/async/issues/1246/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/caolan/async/issues/1246/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/caolan/async/issues/1253","repository_url":"https://api.github.com/repos/caolan/async","labels_url":"https://api.github.com/repos/caolan/async/issues/1253/labels{/name}","comments_url":"https://api.github.com/repos/caolan/async/issues/1253/comments","events_url":"https://api.github.com/repos/caolan/async/issues/1253/events","html_url":"https://github.com/caolan/async/pull/1253","id":167188371,"node_id":"MDExOlB1bGxSZXF1ZXN0Nzg1NzQzMTU=","number":1253,"title":"Unroll simple loop abstractions","user":{"login":"megawac","id":3475472,"node_id":"MDQ6VXNlcjM0NzU0NzI=","avatar_url":"https://avatars.githubusercontent.com/u/3475472?v=4","gravatar_id":"","url":"https://api.github.com/users/megawac","html_url":"https://github.com/megawac","followers_url":"https://api.github.com/users/megawac/followers","following_url":"https://api.github.com/users/megawac/following{/other_user}","gists_url":"https://api.github.com/users/megawac/gists{/gist_id}","starred_url":"https://api.github.com/users/megawac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/megawac/subscriptions","organizations_url":"https://api.github.com/users/megawac/orgs","repos_url":"https://api.github.com/users/megawac/repos","events_url":"https://api.github.com/users/megawac/events{/privacy}","received_events_url":"https://api.github.com/users/megawac/received_events","type":"User","site_admin":false},"labels":[{"id":213523438,"node_id":"MDU6TGFiZWwyMTM1MjM0Mzg=","url":"https://api.github.com/repos/caolan/async/labels/performance","name":"performance","color":"009800","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2016-07-23T15:14:12Z","updated_at":"2016-07-29T18:23:38Z","closed_at":"2016-07-29T18:23:38Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/caolan/async/pulls/1253","html_url":"https://github.com/caolan/async/pull/1253","diff_url":"https://github.com/caolan/async/pull/1253.diff","patch_url":"https://github.com/caolan/async/pull/1253.patch","merged_at":"2016-07-29T18:23:38Z"},"body":"Figure there is no reason to not write these simple loops our selves.\n\n```\nLatest tag is  v2.0.1\nComparing v2.0.1 with current on Node v6.2.2\n--------------------------------------\nqueue(1000) v2.0.1 x 345 ops/sec ±0.80% (30 runs sampled), 2.90ms per run\nqueue(1000) current x 352 ops/sec ±0.90% (30 runs sampled), 2.84ms per run\ncurrent is faster\n--------------------------------------\nqueue(30000) v2.0.1 x 9.39 ops/sec ±3.62% (18 runs sampled), 106ms per run\nqueue(30000) current x 10.52 ops/sec ±2.89% (20 runs sampled), 95.1ms per run\ncurrent is faster\n--------------------------------------\nqueue(100000) v2.0.1 x 2.53 ops/sec ±11.46% (6 runs sampled), 396ms per run\nqueue(100000) current x 3.05 ops/sec ±8.64% (6 runs sampled), 328ms per run\ncurrent is faster\n--------------------------------------\nqueue(200000) v2.0.1 x 1.26 ops/sec ±16.98% (3 runs sampled), 797ms per run\nqueue(200000) current x 1.43 ops/sec ±11.58% (3 runs sampled), 698ms per run\ncurrent is faster\n--------------------------------------\ncurrent faster overall (1120ms total vs. 1300ms total)\ncurrent won more benchmarks (4 vs. 0)\n```\n","reactions":{"url":"https://api.github.com/repos/caolan/async/issues/1253/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/caolan/async/issues/1253/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/caolan/async/issues/818","repository_url":"https://api.github.com/repos/caolan/async","labels_url":"https://api.github.com/repos/caolan/async/issues/818/labels{/name}","comments_url":"https://api.github.com/repos/caolan/async/issues/818/comments","events_url":"https://api.github.com/repos/caolan/async/issues/818/events","html_url":"https://github.com/caolan/async/pull/818","id":92416532,"node_id":"MDExOlB1bGxSZXF1ZXN0Mzg5OTU1OTc=","number":818,"title":"Replace slice with restParam","user":{"login":"megawac","id":3475472,"node_id":"MDQ6VXNlcjM0NzU0NzI=","avatar_url":"https://avatars.githubusercontent.com/u/3475472?v=4","gravatar_id":"","url":"https://api.github.com/users/megawac","html_url":"https://github.com/megawac","followers_url":"https://api.github.com/users/megawac/followers","following_url":"https://api.github.com/users/megawac/following{/other_user}","gists_url":"https://api.github.com/users/megawac/gists{/gist_id}","starred_url":"https://api.github.com/users/megawac/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/megawac/subscriptions","organizations_url":"https://api.github.com/users/megawac/orgs","repos_url":"https://api.github.com/users/megawac/repos","events_url":"https://api.github.com/users/megawac/events{/privacy}","received_events_url":"https://api.github.com/users/megawac/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2015-07-01T15:41:56Z","updated_at":"2015-07-01T20:37:38Z","closed_at":"2015-07-01T20:37:38Z","author_association":"COLLABORATOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/caolan/async/pulls/818","html_url":"https://github.com/caolan/async/pull/818","diff_url":"https://github.com/caolan/async/pull/818.diff","patch_url":"https://github.com/caolan/async/pull/818.patch","merged_at":"2015-07-01T20:37:38Z"},"body":"This has been known to greatly simplify code (heavily used in underscore and lodash) and be a great optimization (slicing arguments is sloooooooooooow).\n\nIf interested, refer to these threads for documentation, benchmarks, arguments, naming, etc:-)\n- https://github.com/jashkenas/underscore/pull/2140\n- https://github.com/lodash/lodash/issues/1122\n- https://lodash.com/docs#restParam\n","reactions":{"url":"https://api.github.com/repos/caolan/async/issues/818/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/caolan/async/issues/818/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/caolan/async/issues/763","repository_url":"https://api.github.com/repos/caolan/async","labels_url":"https://api.github.com/repos/caolan/async/issues/763/labels{/name}","comments_url":"https://api.github.com/repos/caolan/async/issues/763/comments","events_url":"https://api.github.com/repos/caolan/async/issues/763/events","html_url":"https://github.com/caolan/async/pull/763","id":78816308,"node_id":"MDExOlB1bGxSZXF1ZXN0MzU4OTgwOTU=","number":763,"title":"fix(benchmark): fix to enable to use second argument version","user":{"login":"suguru03","id":8013633,"node_id":"MDQ6VXNlcjgwMTM2MzM=","avatar_url":"https://avatars.githubusercontent.com/u/8013633?v=4","gravatar_id":"","url":"https://api.github.com/users/suguru03","html_url":"https://github.com/suguru03","followers_url":"https://api.github.com/users/suguru03/followers","following_url":"https://api.github.com/users/suguru03/following{/other_user}","gists_url":"https://api.github.com/users/suguru03/gists{/gist_id}","starred_url":"https://api.github.com/users/suguru03/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/suguru03/subscriptions","organizations_url":"https://api.github.com/users/suguru03/orgs","repos_url":"https://api.github.com/users/suguru03/repos","events_url":"https://api.github.com/users/suguru03/events{/privacy}","received_events_url":"https://api.github.com/users/suguru03/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2015-05-21T04:00:43Z","updated_at":"2015-05-21T04:10:07Z","closed_at":"2015-05-21T04:04:04Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/caolan/async/pulls/763","html_url":"https://github.com/caolan/async/pull/763","diff_url":"https://github.com/caolan/async/pull/763.diff","patch_url":"https://github.com/caolan/async/pull/763.patch","merged_at":"2015-05-21T04:04:04Z"},"body":"This PR enable to take correct benchmark. :smile:\nPlease review it.\n","reactions":{"url":"https://api.github.com/repos/caolan/async/issues/763/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/caolan/async/issues/763/timeline","performed_via_github_app":null,"state_reason":null,"score":1}]