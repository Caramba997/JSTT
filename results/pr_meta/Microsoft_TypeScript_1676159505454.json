[{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/51387","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/51387/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/51387/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/51387/events","html_url":"https://github.com/microsoft/TypeScript/pull/51387","id":1433500309,"node_id":"PR_kwDOAT9aAc5CE3d7","number":51387,"title":"Convert the codebase to modules","user":{"login":"jakebailey","id":5341706,"node_id":"MDQ6VXNlcjUzNDE3MDY=","avatar_url":"https://avatars.githubusercontent.com/u/5341706?v=4","gravatar_id":"","url":"https://api.github.com/users/jakebailey","html_url":"https://github.com/jakebailey","followers_url":"https://api.github.com/users/jakebailey/followers","following_url":"https://api.github.com/users/jakebailey/following{/other_user}","gists_url":"https://api.github.com/users/jakebailey/gists{/gist_id}","starred_url":"https://api.github.com/users/jakebailey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakebailey/subscriptions","organizations_url":"https://api.github.com/users/jakebailey/orgs","repos_url":"https://api.github.com/users/jakebailey/repos","events_url":"https://api.github.com/users/jakebailey/events{/privacy}","received_events_url":"https://api.github.com/users/jakebailey/received_events","type":"User","site_admin":false},"labels":[{"id":114834677,"node_id":"MDU6TGFiZWwxMTQ4MzQ2Nzc=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Breaking%20Change","name":"Breaking Change","color":"eb6420","default":false,"description":"Would introduce errors in existing code"},{"id":172956911,"node_id":"MDU6TGFiZWwxNzI5NTY5MTE=","url":"https://api.github.com/repos/microsoft/TypeScript/labels/API","name":"API","color":"bfe5bf","default":false,"description":"Relates to the public API for TypeScript"},{"id":1503029093,"node_id":"MDU6TGFiZWwxNTAzMDI5MDkz","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Author:%20Team","name":"Author: Team","color":"3178C6","default":false,"description":""},{"id":1820418576,"node_id":"MDU6TGFiZWwxODIwNDE4NTc2","url":"https://api.github.com/repos/microsoft/TypeScript/labels/For%20Milestone%20Bug","name":"For Milestone Bug","color":"001f77","default":false,"description":"PRs that fix a bug with a specific milestone"}],"state":"closed","locked":false,"assignee":{"login":"jakebailey","id":5341706,"node_id":"MDQ6VXNlcjUzNDE3MDY=","avatar_url":"https://avatars.githubusercontent.com/u/5341706?v=4","gravatar_id":"","url":"https://api.github.com/users/jakebailey","html_url":"https://github.com/jakebailey","followers_url":"https://api.github.com/users/jakebailey/followers","following_url":"https://api.github.com/users/jakebailey/following{/other_user}","gists_url":"https://api.github.com/users/jakebailey/gists{/gist_id}","starred_url":"https://api.github.com/users/jakebailey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakebailey/subscriptions","organizations_url":"https://api.github.com/users/jakebailey/orgs","repos_url":"https://api.github.com/users/jakebailey/repos","events_url":"https://api.github.com/users/jakebailey/events{/privacy}","received_events_url":"https://api.github.com/users/jakebailey/received_events","type":"User","site_admin":false},"assignees":[{"login":"weswigham","id":2932786,"node_id":"MDQ6VXNlcjI5MzI3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/2932786?v=4","gravatar_id":"","url":"https://api.github.com/users/weswigham","html_url":"https://github.com/weswigham","followers_url":"https://api.github.com/users/weswigham/followers","following_url":"https://api.github.com/users/weswigham/following{/other_user}","gists_url":"https://api.github.com/users/weswigham/gists{/gist_id}","starred_url":"https://api.github.com/users/weswigham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/weswigham/subscriptions","organizations_url":"https://api.github.com/users/weswigham/orgs","repos_url":"https://api.github.com/users/weswigham/repos","events_url":"https://api.github.com/users/weswigham/events{/privacy}","received_events_url":"https://api.github.com/users/weswigham/received_events","type":"User","site_admin":false},{"login":"jakebailey","id":5341706,"node_id":"MDQ6VXNlcjUzNDE3MDY=","avatar_url":"https://avatars.githubusercontent.com/u/5341706?v=4","gravatar_id":"","url":"https://api.github.com/users/jakebailey","html_url":"https://github.com/jakebailey","followers_url":"https://api.github.com/users/jakebailey/followers","following_url":"https://api.github.com/users/jakebailey/following{/other_user}","gists_url":"https://api.github.com/users/jakebailey/gists{/gist_id}","starred_url":"https://api.github.com/users/jakebailey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jakebailey/subscriptions","organizations_url":"https://api.github.com/users/jakebailey/orgs","repos_url":"https://api.github.com/users/jakebailey/repos","events_url":"https://api.github.com/users/jakebailey/events{/privacy}","received_events_url":"https://api.github.com/users/jakebailey/received_events","type":"User","site_admin":false}],"milestone":{"url":"https://api.github.com/repos/microsoft/TypeScript/milestones/175","html_url":"https://github.com/microsoft/TypeScript/milestone/175","labels_url":"https://api.github.com/repos/microsoft/TypeScript/milestones/175/labels","id":8543366,"node_id":"MI_kwDOAT9aAc4AglyG","number":175,"title":"TypeScript 5.0.0","description":"","creator":{"login":"RyanCavanaugh","id":6685088,"node_id":"MDQ6VXNlcjY2ODUwODg=","avatar_url":"https://avatars.githubusercontent.com/u/6685088?v=4","gravatar_id":"","url":"https://api.github.com/users/RyanCavanaugh","html_url":"https://github.com/RyanCavanaugh","followers_url":"https://api.github.com/users/RyanCavanaugh/followers","following_url":"https://api.github.com/users/RyanCavanaugh/following{/other_user}","gists_url":"https://api.github.com/users/RyanCavanaugh/gists{/gist_id}","starred_url":"https://api.github.com/users/RyanCavanaugh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RyanCavanaugh/subscriptions","organizations_url":"https://api.github.com/users/RyanCavanaugh/orgs","repos_url":"https://api.github.com/users/RyanCavanaugh/repos","events_url":"https://api.github.com/users/RyanCavanaugh/events{/privacy}","received_events_url":"https://api.github.com/users/RyanCavanaugh/received_events","type":"User","site_admin":false},"open_issues":9,"closed_issues":73,"state":"open","created_at":"2022-10-14T20:06:08Z","updated_at":"2023-02-06T18:39:04Z","due_on":null,"closed_at":null},"comments":53,"created_at":"2022-11-02T17:09:33Z","updated_at":"2023-01-26T17:41:57Z","closed_at":"2022-11-07T21:57:46Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/microsoft/TypeScript/pulls/51387","html_url":"https://github.com/microsoft/TypeScript/pull/51387","diff_url":"https://github.com/microsoft/TypeScript/pull/51387.diff","patch_url":"https://github.com/microsoft/TypeScript/pull/51387.patch","merged_at":"2022-11-07T21:57:46Z"},"body":"This is it; the PR that converts the TypeScript repo from namespaces to modules.\r\n\r\n## TL;DR: The TypeScript compiler is now implemented internally with modules, not namespaces. The compiler is now _10-25% faster_. `tsc` is now _30% faster_ to start. Our npm package is now _43% smaller_. More improvements are in the works.\r\n\r\n## If you're reading this and the 5.0 beta is out, now that the above results were as of this PR; the final performance change of TS 5.0 is different!\r\n\r\n<!-- dprint-ignore-start -->\r\n\r\nCloses #35210\r\nCloses #39247\r\nCloses #49037\r\nCloses #49332\r\nCloses #50758\r\nFor #27891\r\nFor #32949\r\nFor #34617\r\n\r\n<!-- dprint-ignore-end -->\r\n\r\nFor those who are looking at the diff and wondering how they can see what this PR _actually does_, consider looking at each commit, or look at my silly stacked PR gerrit-clone thing at https://github.com/jakebailey/TypeScript/pull/1 (which I will try to keep up to date).\r\n\r\nWant to try this out now? Set this in your `package.json`:\r\n\r\n```\r\n\"typescript\": \"npm:@typescript-deploys/pr-build@5.0.0-pr-51387-49\"\r\n```\r\n\r\n(Or, wait until the next nightly after this is merged.)\r\n\r\n# How?\r\n\r\nThe bulk of the work to convert the repo to modules is done via automation, followed by a load of changes by hand to completely restructure our build system. To see the conversion process, take a look at the commits in this PR, each of which come with their own descriptive commit message.\r\n\r\nIn short, the [typeformer](https://github.com/jakebailey/typeformer) project recreates our old namespaces as \"barrel\" modules, reexporting each file from the barrel module corresponding to its original namespace. Symbols which previously were available \"globally\" via namespaces are now imported in big import blocks at the top of each file, in such a way that the final code looks nearly identical to the input (but unindented one level).\r\n\r\nThis, with a little hand modification, gets us to a place where we can emit CJS and have everything working.\r\n\r\nHowever, this turns out to incur a big performance penalty; our old TS namespaces were just objects, but CJS imports/exports are more expensive than plain objects. Additionally, many consumers currently expect to be able to load TS as a single file, and that same file must be usable in Node and the browser. Unless we wanted to change that expectation and break the world, we needed to bundle.\r\n\r\nAs an experiment while working on this conversion, I tried simply running [esbuild](https://github.com/evanw/esbuild) on our source files directly; with a little more tweaking, I was able to produce a working output for our codebase. Unexpectedly, this also brought major performance wins in our benchmarks (see the next section). Those performance benefits (and speedy build times) were too good to pass up, and so, our main JS outputs are now produced by esbuild.\r\n\r\nTo mitigate the risk of not using `tsc`'s output, I have created a `--bundle=false` mode for our build. This mode uses `tsc` to emit CJS, producing modules matching `src` 1:1. This is tested in CI so we can reliably switch back to `tsc`'s CJS emit if needed. The new build is also constructed such that it'd be easy to transition to running a bundler on `tsc`'s ESM emit (rather than directly on `src`).\r\n\r\nSince our outputs are bundled, we needed a way to \"bundle\" our d.ts files too. To handle this, I wrote a small-ish (400 line) d.ts bundler that can serve our needs. This bundler is \"dumb\" and cannot handle cases that a more widely-usable bundler (like api-extractor) should, e.g. properly renaming types with the same name but declared in separate files or avoiding aliasing globals, which are cases that we can avoid or ignore, respectively.\r\n\r\n# Benefits for users of TypeScript\r\n\r\nFirstly, the performance of the compiler has increased by [anywhere from _10 to 25%_](https://github.com/microsoft/TypeScript/issues/49332#issuecomment-1247413421). This largely thanks to scope lifting. TypeScript namespaces are emitted as a series of IIFEs which push properties onto a single object. Non-local accesses to exports of that namespace are implicitly fully qualified, incurring the overhead of an object access. With modules, all of our internal helpers have been lifted to the top and are available for direct calls.\r\n\r\n<!-- TODO(jakebailey): Update this number before posting -->\r\n\r\nSecondly, our package is now _~43% smaller_ (from 63.6 MB down to 35.6 MB). This is due in part to dropping some redundant files from our package, including `typescriptServices.js`, which was identical to `typescript.js` (see the breaking changes section below), a change in the indentation used in our bundle files (4 spaces -> 2 spaces), plus a large amount of tree shaking in `tsc.js` and `typingsInstaller.js`. TypeScript 4.9 was made smaller by 2 MB already (thanks to #50421), so this is excellent progress.\r\n\r\nFinally, as a result of both of the previous performance improvements (faster code and less of it), `tsc.js` is _30% faster_ to start and `typescript.js` (our public API) is _10% faster_ to import. As we improve performance and code size, these numbers are likely to improve. We now include these metrics in our benchmarks to track over time and in relevant PRs.\r\n\r\n# Benefits for the TypeScript team (and contributors)\r\n\r\nFor those who work on TypeScript itself, this change comes with a number of important benefits.\r\n\r\nNow that we are modules, we are dogfooding the module experience. Effectively everyone is using modules and has been for a long time, but we've been using namespaces. This left us unable to experience things like auto-imports, giant import blocks, etc, ourselves. (During testing of this PR, we found multiple interesting auto-import and quick fix bugs; win!)\r\n\r\nBeing modules also provides us the ability to start integrating excellent external tooling into our build process. As previously mentioned, our JS outputs are now produced by esbuild. This lets us start running tests in seconds (or less), representing a significant shortening of the develop/test/debug loop.[^build-time] Of course, this is potentially limiting; if we need new syntax features that aren't yet implemented in esbuild, we can switch to bundling the ESM output of `tsc` instead, restoring the status quo.\r\n\r\n[^build-time]: Specifically, the time it takes to to run the \"local\" build task (everything but tests) has been reduced from ~30s to ~20s on my machine. When changing the checker, the build time has been reduced from ~18s to ~14 seconds. When changing nothing, the build time has been reduced from 1.3s to 0.7s.\r\n\r\nAdditionally, since I had to change the entire build process to support this conversion, it's a great time to make build changes that would normally be difficult during our typical dev cycle. This includes replacing our task runner with a lightweight alternative (we don't need too much fanciness anymore), rewriting/deleting a number of scripts, and removing/replacing outdated dependencies. After this change, our `npm audit` is clean and our dev dependency count has been halved.\r\n\r\n# No, we're not yet shipping ESM\r\n\r\nThis PR _**does not**_ convert the TypeScript package to ESM (#32949). The package still consists of a handful of un-tree-shakeable large files (though there are now fewer of them, and they are smaller). Allowing TypeScript to be packaged as ESM is a further challenge that will build on this change, but for this PR, the goal is to convert the repo's _source_ files to modules without causing major breaks for downstream users. (For the future, see the \"future\" section below.)\r\n\r\n# Breaking changes\r\n\r\nThis conversion introduces a number of breaking changes for consumers of the TypeScript package; those using `tsc` or the language service in their editor should see no changes (besides improved performance and smaller install sizes).\r\n\r\n- `typescriptServices.js` has been removed; this file was identical to `typescript.js`, the entrypoint for our npm package.\r\n- `protocol.d.ts` is no longer included in the package; use `tsserverlibrary.d.ts`'s `ts.server.protocol` namespace instead.\r\n  - Some elements of the protocol are not actually exported by the `ts.server.protocol` namespace, but were emitted in the old `protocol.d.ts` file, and may need to be accessed off of the `ts` namespace instead. See https://github.com/microsoft/vscode/pull/163365 for an potential way to minimize changes to protocol-using codebases.\r\n- The output files have changed significantly; if you are patching TypeScript, you will definitely need to change your patches.\r\n  - Since I know prettier post-processes our package to extract _just enough_ of the codebase to parse code, I have created a [proof-of-concept](https://github.com/jakebailey/prettier-style-ts-tree-shaking) that can be expanded on to achieve a similar result with the new 5.0 output by using a tool like terser or rollup to tree-shake inside of the library itself. In the future, we may be able to improve this situation by restructuring our codebase in a way that allows us to export just the parser (#34617). cc @fisker\r\n- The TypeScript package now targets ES2018. Prior to 5.0, our package targeted ES5 syntax and the ES2015 library, however, esbuild has a hard minimum syntax target of ES2015 (aka ES6). ES2018 was chosen as a balance between compatibility with older environments and access to more modern syntax and library features.[^es2018]\r\n  - If you are looking to run the TypeScript compiler itself in an environment older than ES2018, you will need to downlevel our package's syntax and potentially polyfill the environment. (This may have already been the case; we don't test the TypeScript compiler on EOL versions of Node in CI and we're aware of a handful of cases where we were already using helpers outside our target range unconditionally.)\r\n\r\n[^es2018]: ES2018 is the ECMAScript version implemented by Node 10. We could have bumped to ES2019 (Node 12), but this would only give us optional catch binding; we already conditionally use newer library features like `trimStart` / `trimEnd`. We could have also bumped up to ES2020 (Node 14, though, see #46325), which would give us native nullish coalescing and optional chaining, but it seemed like too big of a jump to drop Node 12, even if it is end-of-life and untested in our CI.\r\n\r\n# The future?\r\n\r\nThe module conversion opens the door to many future improvements.\r\n\r\nOur codebase is massively circular thanks to how easy it was to introduce cycles with namespaces. Namespace emit ordering was controlled by `tsconfig.json`, which allowed us to structure things \"just right\" and not crash, but things aren't so straightforward in modules. The modules themselves define their execution order, and the current state is one that works (even if the use of \"namespace barrels\" is suboptimal). But, this shouldn't be permanent; now that we are modules and it's not costly to introduce new files into the mix, we can start restructuring the codebase and unraveling our import cycles. In an ESM future, breaking these cycles may lead to improved tree shaking for those who bundle TypeScript into their codebases.\r\n\r\nIn terms of performance, a small number of namespaces remain in the codebase (`Debug`, `Parser`, others) which would benefit from being converted to modules to allow for direct calls. We also lost some performance in our parser due to `let`/`const` (disproportionally so; the other parts of the compiler were only slightly affected but had much larger net wins). We may be able to restructure the parser to avoid the temporal dead zone performance cost.[^letconst]\r\n\r\n[^letconst]: In an earlier revision of this stack, I used babel to downlevel `let`/`const` to `var` after bundling. This increased performance as expected, but we decided to not add this step; in the ESM future, we wouldn't want to end up with all of our `export const` declarations turning into `export var`, and avoiding the transformation simplifies the build and improves the debugging experience when loops are involved. If we change our minds, this is easy to reimplement, albeit slow.\r\n\r\nIn terms of code size, may even be able to do some amount of ESM emit _now_. A few of our bundles are not for import, only for execution (`tsc`, `tsserver`, `typingsInstaller`). If we are willing to drop versions of Node before ESM (Node <12), we can drop another 7 MB from our package by using esbuild's ESM code splitting for those bundles.\r\n\r\nIn the process of making bundling work, I fixed `monaco` to [no longer depend](https://github.com/microsoft/monaco-editor/pull/3356) on the source-level structure of our package. This means that we could potentially start minifying our codebase, reducing the package size significantly. This is not without gotchas, of course; we know that there are downstream users who patch our package post-install, which is much more difficult when the output isn't predictably formatted (or effectively impossible using \"patch\" when minified).\r\n\r\n# On the shoulders of giants\r\n\r\nI have many people to thank:\r\n\r\n- @weswigham and @elibarzilay, who authored the previous versions of the typeformer project. They did most of the hard work in conceptualizing how this could be possible and providing a base set of transforms to get it done.\r\n- @dsherret, for the excellent [ts-morph](https://github.com/dsherret/ts-morph), with which I rewrote the typeformer project for excellent TS-to-TS source modification fidelity.\r\n- @evanw, for the excellent [esbuild](https://github.com/evanw/esbuild), which gives us speedy build times and an output that is faster for our users.\r\n- Everyone on the team who tested this PR out early and helped iron out the bugs. This PR touches effectively every line of code in the project; testing is key!\r\n\r\n---\r\n\r\nPR notes:\r\n\r\n- This PR _**MUST**_ be merged via a merge commit. Squashing will break `.git-blame-ignore-revs` as it references specific commits in the PR that `git blame` should ignore; I want to ignore only the automated steps in this PR. I have attempted to make this PR as few commits as possible while still making sense.\r\n- The breaking changes listed above need to be added to the wiki (without all of my exposition).\r\n- Until the point at which we are ready to merge this, expect this PR to either have conflicts. The nature of this transformation means that any change to `src` in `main` will cause this PR to have conflicts, and the only way to fix that is to rerun the entire transformation from scratch and force push.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/51387/reactions","total_count":1245,"+1":430,"-1":0,"laugh":22,"hooray":284,"confused":0,"heart":227,"rocket":245,"eyes":37},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/51387/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48426","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48426/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48426/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48426/events","html_url":"https://github.com/microsoft/TypeScript/pull/48426","id":1181021554,"node_id":"PR_kwDOAT9aAc41B4nv","number":48426,"title":"Revert \"Fix contextual discrimination for omitted members (#43937)\"","user":{"login":"amcasey","id":10508071,"node_id":"MDQ6VXNlcjEwNTA4MDcx","avatar_url":"https://avatars.githubusercontent.com/u/10508071?v=4","gravatar_id":"","url":"https://api.github.com/users/amcasey","html_url":"https://github.com/amcasey","followers_url":"https://api.github.com/users/amcasey/followers","following_url":"https://api.github.com/users/amcasey/following{/other_user}","gists_url":"https://api.github.com/users/amcasey/gists{/gist_id}","starred_url":"https://api.github.com/users/amcasey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amcasey/subscriptions","organizations_url":"https://api.github.com/users/amcasey/orgs","repos_url":"https://api.github.com/users/amcasey/repos","events_url":"https://api.github.com/users/amcasey/events{/privacy}","received_events_url":"https://api.github.com/users/amcasey/received_events","type":"User","site_admin":false},"labels":[{"id":1503029093,"node_id":"MDU6TGFiZWwxNTAzMDI5MDkz","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Author:%20Team","name":"Author: Team","color":"3178C6","default":false,"description":""},{"id":1883362416,"node_id":"MDU6TGFiZWwxODgzMzYyNDE2","url":"https://api.github.com/repos/microsoft/TypeScript/labels/For%20Uncommitted%20Bug","name":"For Uncommitted Bug","color":"ededed","default":false,"description":"PR for untriaged, rejected, closed or missing bug"}],"state":"closed","locked":false,"assignee":{"login":"amcasey","id":10508071,"node_id":"MDQ6VXNlcjEwNTA4MDcx","avatar_url":"https://avatars.githubusercontent.com/u/10508071?v=4","gravatar_id":"","url":"https://api.github.com/users/amcasey","html_url":"https://github.com/amcasey","followers_url":"https://api.github.com/users/amcasey/followers","following_url":"https://api.github.com/users/amcasey/following{/other_user}","gists_url":"https://api.github.com/users/amcasey/gists{/gist_id}","starred_url":"https://api.github.com/users/amcasey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amcasey/subscriptions","organizations_url":"https://api.github.com/users/amcasey/orgs","repos_url":"https://api.github.com/users/amcasey/repos","events_url":"https://api.github.com/users/amcasey/events{/privacy}","received_events_url":"https://api.github.com/users/amcasey/received_events","type":"User","site_admin":false},"assignees":[{"login":"amcasey","id":10508071,"node_id":"MDQ6VXNlcjEwNTA4MDcx","avatar_url":"https://avatars.githubusercontent.com/u/10508071?v=4","gravatar_id":"","url":"https://api.github.com/users/amcasey","html_url":"https://github.com/amcasey","followers_url":"https://api.github.com/users/amcasey/followers","following_url":"https://api.github.com/users/amcasey/following{/other_user}","gists_url":"https://api.github.com/users/amcasey/gists{/gist_id}","starred_url":"https://api.github.com/users/amcasey/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/amcasey/subscriptions","organizations_url":"https://api.github.com/users/amcasey/orgs","repos_url":"https://api.github.com/users/amcasey/repos","events_url":"https://api.github.com/users/amcasey/events{/privacy}","received_events_url":"https://api.github.com/users/amcasey/received_events","type":"User","site_admin":false}],"milestone":null,"comments":4,"created_at":"2022-03-25T16:53:53Z","updated_at":"2022-03-25T20:09:23Z","closed_at":"2022-03-25T20:09:20Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/microsoft/TypeScript/pulls/48426","html_url":"https://github.com/microsoft/TypeScript/pull/48426","diff_url":"https://github.com/microsoft/TypeScript/pull/48426.diff","patch_url":"https://github.com/microsoft/TypeScript/pull/48426.patch","merged_at":"2022-03-25T20:09:20Z"},"body":"This reverts commit 751c11412618e8b2a504380135bc2f0b2505e18f, which caused check time for our MUI benchmark to increase by ~25%.\r\n\r\nSee #48298","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/48426/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/48426/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/44197","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/44197/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/44197/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/44197/events","html_url":"https://github.com/microsoft/TypeScript/pull/44197","id":897812274,"node_id":"MDExOlB1bGxSZXF1ZXN0NjQ5NzY4ODM5","number":44197,"title":"Simplify or optimize regexes with polynomial time worst cases","user":{"login":"weswigham","id":2932786,"node_id":"MDQ6VXNlcjI5MzI3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/2932786?v=4","gravatar_id":"","url":"https://api.github.com/users/weswigham","html_url":"https://github.com/weswigham","followers_url":"https://api.github.com/users/weswigham/followers","following_url":"https://api.github.com/users/weswigham/following{/other_user}","gists_url":"https://api.github.com/users/weswigham/gists{/gist_id}","starred_url":"https://api.github.com/users/weswigham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/weswigham/subscriptions","organizations_url":"https://api.github.com/users/weswigham/orgs","repos_url":"https://api.github.com/users/weswigham/repos","events_url":"https://api.github.com/users/weswigham/events{/privacy}","received_events_url":"https://api.github.com/users/weswigham/received_events","type":"User","site_admin":false},"labels":[{"id":1503029093,"node_id":"MDU6TGFiZWwxNTAzMDI5MDkz","url":"https://api.github.com/repos/microsoft/TypeScript/labels/Author:%20Team","name":"Author: Team","color":"3178C6","default":false,"description":""},{"id":1883362416,"node_id":"MDU6TGFiZWwxODgzMzYyNDE2","url":"https://api.github.com/repos/microsoft/TypeScript/labels/For%20Uncommitted%20Bug","name":"For Uncommitted Bug","color":"ededed","default":false,"description":"PR for untriaged, rejected, closed or missing bug"}],"state":"closed","locked":false,"assignee":{"login":"weswigham","id":2932786,"node_id":"MDQ6VXNlcjI5MzI3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/2932786?v=4","gravatar_id":"","url":"https://api.github.com/users/weswigham","html_url":"https://github.com/weswigham","followers_url":"https://api.github.com/users/weswigham/followers","following_url":"https://api.github.com/users/weswigham/following{/other_user}","gists_url":"https://api.github.com/users/weswigham/gists{/gist_id}","starred_url":"https://api.github.com/users/weswigham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/weswigham/subscriptions","organizations_url":"https://api.github.com/users/weswigham/orgs","repos_url":"https://api.github.com/users/weswigham/repos","events_url":"https://api.github.com/users/weswigham/events{/privacy}","received_events_url":"https://api.github.com/users/weswigham/received_events","type":"User","site_admin":false},"assignees":[{"login":"weswigham","id":2932786,"node_id":"MDQ6VXNlcjI5MzI3ODY=","avatar_url":"https://avatars.githubusercontent.com/u/2932786?v=4","gravatar_id":"","url":"https://api.github.com/users/weswigham","html_url":"https://github.com/weswigham","followers_url":"https://api.github.com/users/weswigham/followers","following_url":"https://api.github.com/users/weswigham/following{/other_user}","gists_url":"https://api.github.com/users/weswigham/gists{/gist_id}","starred_url":"https://api.github.com/users/weswigham/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/weswigham/subscriptions","organizations_url":"https://api.github.com/users/weswigham/orgs","repos_url":"https://api.github.com/users/weswigham/repos","events_url":"https://api.github.com/users/weswigham/events{/privacy}","received_events_url":"https://api.github.com/users/weswigham/received_events","type":"User","site_admin":false}],"milestone":null,"comments":6,"created_at":"2021-05-21T08:23:26Z","updated_at":"2021-05-24T22:28:52Z","closed_at":"2021-05-24T22:28:52Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/microsoft/TypeScript/pulls/44197","html_url":"https://github.com/microsoft/TypeScript/pull/44197","diff_url":"https://github.com/microsoft/TypeScript/pull/44197.diff","patch_url":"https://github.com/microsoft/TypeScript/pull/44197.patch","merged_at":"2021-05-24T22:28:52Z"},"body":"A friend of mine, @robmcl4, is a PhD student as UCSB and is doing some security research involving regex performance. In the course of that, he's developed a kind of fuzzer for v8's regex engine that's _pretty good_ at identifying regexes that have polynomial or worse worst-case time in specifically v8's regex implementation. In doing said research, he happened to run it over the regexes in our codebase (along with many other codebases).\r\n\r\nIn this PR, I fix all the regexes said fuzzer indicates may be problematic so they are more performant. (I checked any replacements don't also do very poorly using said fuzzer).\r\n\r\nMost of the time, fixing the perf just means using less regexes, however one _particular_ example stands out! A regex we use a ton in multiple places, `/\\s+$/g`, actually has _terrible_ performance when used to trim whitespace from a string with a lot of _leading_ whitespace ([check the benchmark here](https://jsbench.me/gjkoxld4au/1)). Lines having leading whitespace is pretty common, so I'm hoping these fixes might actually have some small but measurable real-world perf gains.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/44197/reactions","total_count":2,"+1":2,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/44197/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/30259","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/30259/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/30259/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/30259/events","html_url":"https://github.com/microsoft/TypeScript/pull/30259","id":418462996,"node_id":"MDExOlB1bGxSZXF1ZXN0MjU5MjMwNzQ1","number":30259,"title":"Transform flag cleanup","user":{"login":"rbuckton","id":3902892,"node_id":"MDQ6VXNlcjM5MDI4OTI=","avatar_url":"https://avatars.githubusercontent.com/u/3902892?v=4","gravatar_id":"","url":"https://api.github.com/users/rbuckton","html_url":"https://github.com/rbuckton","followers_url":"https://api.github.com/users/rbuckton/followers","following_url":"https://api.github.com/users/rbuckton/following{/other_user}","gists_url":"https://api.github.com/users/rbuckton/gists{/gist_id}","starred_url":"https://api.github.com/users/rbuckton/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/rbuckton/subscriptions","organizations_url":"https://api.github.com/users/rbuckton/orgs","repos_url":"https://api.github.com/users/rbuckton/repos","events_url":"https://api.github.com/users/rbuckton/events{/privacy}","received_events_url":"https://api.github.com/users/rbuckton/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-03-07T18:57:23Z","updated_at":"2019-03-08T23:08:30Z","closed_at":"2019-03-08T23:08:27Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/microsoft/TypeScript/pulls/30259","html_url":"https://github.com/microsoft/TypeScript/pull/30259","diff_url":"https://github.com/microsoft/TypeScript/pull/30259.diff","patch_url":"https://github.com/microsoft/TypeScript/pull/30259.patch","merged_at":"2019-03-08T23:08:27Z"},"body":"With the recent change to add a `ContainsES2019` flag to the `TransformFlags` enum, we have now run out of space for additional flags. This PR removes a number of entries in the `TransformFlags` enum in favor of some simple checks. Benchmark comparisons against `master` indicate no noticeable regression in performance.\r\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/30259/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/30259/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/29935","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/29935/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/29935/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/29935/events","html_url":"https://github.com/microsoft/TypeScript/pull/29935","id":410867731,"node_id":"MDExOlB1bGxSZXF1ZXN0MjUzNTAzOTc5","number":29935,"title":"Use sha256 to hash file contents","user":{"login":"RyanCavanaugh","id":6685088,"node_id":"MDQ6VXNlcjY2ODUwODg=","avatar_url":"https://avatars.githubusercontent.com/u/6685088?v=4","gravatar_id":"","url":"https://api.github.com/users/RyanCavanaugh","html_url":"https://github.com/RyanCavanaugh","followers_url":"https://api.github.com/users/RyanCavanaugh/followers","following_url":"https://api.github.com/users/RyanCavanaugh/following{/other_user}","gists_url":"https://api.github.com/users/RyanCavanaugh/gists{/gist_id}","starred_url":"https://api.github.com/users/RyanCavanaugh/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/RyanCavanaugh/subscriptions","organizations_url":"https://api.github.com/users/RyanCavanaugh/orgs","repos_url":"https://api.github.com/users/RyanCavanaugh/repos","events_url":"https://api.github.com/users/RyanCavanaugh/events{/privacy}","received_events_url":"https://api.github.com/users/RyanCavanaugh/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2019-02-15T17:21:14Z","updated_at":"2019-02-15T18:28:38Z","closed_at":"2019-02-15T18:28:24Z","author_association":"MEMBER","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/microsoft/TypeScript/pulls/29935","html_url":"https://github.com/microsoft/TypeScript/pull/29935","diff_url":"https://github.com/microsoft/TypeScript/pull/29935.diff","patch_url":"https://github.com/microsoft/TypeScript/pull/29935.patch","merged_at":"2019-02-15T18:28:24Z"},"body":"The security team is complaining because we're not allowed to use cryptographically-compromised hash functions for non-crypto purposes if those functions were ever used by other people for crypto purposes in the past. 🤷‍♂️\r\n\r\nBenchmarks show this to be about 30% slower compared to MD5, but we're generally looking at about 8.7ms to SHA256 checker.ts vs 6.4ms for MD5, so the net effect on any program that fits in memory should be less than 30ms overall.\r\n\r\nAs a side note, generateDjb2Hash is *40 times* slower than sha256 - if this is *ever* called in practice, we should probably make it faster.","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/29935/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/29935/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/11354","repository_url":"https://api.github.com/repos/microsoft/TypeScript","labels_url":"https://api.github.com/repos/microsoft/TypeScript/issues/11354/labels{/name}","comments_url":"https://api.github.com/repos/microsoft/TypeScript/issues/11354/comments","events_url":"https://api.github.com/repos/microsoft/TypeScript/issues/11354/events","html_url":"https://github.com/microsoft/TypeScript/pull/11354","id":180911734,"node_id":"MDExOlB1bGxSZXF1ZXN0ODc5MDcyNzI=","number":11354,"title":"Use native maps when they're available","user":{"login":"andy-ms","id":19274678,"node_id":"MDQ6VXNlcjE5Mjc0Njc4","avatar_url":"https://avatars.githubusercontent.com/u/19274678?v=4","gravatar_id":"","url":"https://api.github.com/users/andy-ms","html_url":"https://github.com/andy-ms","followers_url":"https://api.github.com/users/andy-ms/followers","following_url":"https://api.github.com/users/andy-ms/following{/other_user}","gists_url":"https://api.github.com/users/andy-ms/gists{/gist_id}","starred_url":"https://api.github.com/users/andy-ms/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andy-ms/subscriptions","organizations_url":"https://api.github.com/users/andy-ms/orgs","repos_url":"https://api.github.com/users/andy-ms/repos","events_url":"https://api.github.com/users/andy-ms/events{/privacy}","received_events_url":"https://api.github.com/users/andy-ms/received_events","type":"User","site_admin":false},"labels":[],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2016-10-04T14:38:45Z","updated_at":"2018-06-19T23:36:55Z","closed_at":"2016-10-27T20:27:47Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/microsoft/TypeScript/pulls/11354","html_url":"https://github.com/microsoft/TypeScript/pull/11354","diff_url":"https://github.com/microsoft/TypeScript/pull/11354.diff","patch_url":"https://github.com/microsoft/TypeScript/pull/11354.patch","merged_at":"2016-10-27T20:27:47Z"},"body":"The summary is that using native maps, the compiler works 5% faster and uses 5% less memory. Using shims, the performance is surprisingly less than 5% worse.\n\nI was able to achieve good baseline performance by disabling Windows Defender in my work directory and using \"High Performance\" in Control Panel -> Hardware and Sound -> Power Options. There is much less variance this time around.\n### Benchmark numbers\n\nThis is from using our internal `ts-perf` tool.\n### map4\n#### Monaco\n##### tsc (x86)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Parse Time | 1.79s (±  0.95%) | 1.72s (±  1.10%) | -0.07s (-  4.08%) | 1.70s | 1.74s |\n| Bind Time | 0.69s (±  4.74%) | 0.52s (±  3.50%) | -0.17s (- 24.86%) | 0.50s | 0.54s |\n| Check Time | 3.37s (±  1.66%) | 2.91s (±  3.16%) | -0.46s (- 13.69%) | 2.78s | 2.98s |\n| Emit Time | 5.01s (±  4.73%) | 4.87s (±  1.35%) | -0.14s (-  2.77%) | 4.79s | 4.94s |\n| Total Time | 10.87s (±  2.34%) | 10.02s (±  1.18%) | -0.84s (-  7.77%) | 9.86s | 10.12s |\n##### node (v6.7.0, x64)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Memory used | 379,924k (±  0.00%) | 356,928k (±  0.01%) | -22,996k (-  6.05%) | 356,890k | 356,956k |\n| Parse Time | 2.40s (±  0.75%) | 2.32s (±  2.13%) | -0.08s (-  3.37%) | 2.28s | 2.39s |\n| Bind Time | 0.92s (±  1.79%) | 0.71s (±  1.84%) | -0.21s (- 22.52%) | 0.70s | 0.73s |\n| Check Time | 4.26s (±  1.36%) | 3.84s (±  6.33%) | -0.42s (-  9.94%) | 3.66s | 4.18s |\n| Emit Time | 1.87s (±  2.44%) | 1.82s (±  3.16%) | -0.05s (-  2.80%) | 1.77s | 1.89s |\n| Total Time | 9.46s (±  1.19%) | 8.69s (±  3.96%) | -0.77s (-  8.12%) | 8.42s | 9.16s |\n##### node (v6.7.0, x86)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Memory used | 201,971k (±  0.00%) | 190,504k (±  0.01%) | -11,467k (-  5.68%) | 190,474k | 190,538k |\n| Parse Time | 2.30s (±  0.89%) | 2.20s (±  2.07%) | -0.09s (-  4.09%) | 2.17s | 2.27s |\n| Bind Time | 0.72s (±  0.99%) | 0.57s (±  4.73%) | -0.15s (- 21.33%) | 0.55s | 0.61s |\n| Check Time | 3.48s (±  1.73%) | 3.27s (±  4.68%) | -0.21s (-  6.08%) | 3.08s | 3.38s |\n| Emit Time | 1.91s (±  3.15%) | 1.78s (±  8.00%) | -0.13s (-  6.94%) | 1.65s | 1.94s |\n| Total Time | 8.41s (±  0.61%) | 7.82s (±  1.68%) | -0.59s (-  7.03%) | 7.71s | 7.99s |\n#### TFS\n##### tsc (x86)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Parse Time | 1.22s (±  2.62%) | 1.15s (±  1.31%) | -0.07s (-  6.06%) | 1.13s | 1.16s |\n| Bind Time | 0.56s (±  2.96%) | 0.54s (±  4.08%) | -0.02s (-  3.13%) | 0.52s | 0.57s |\n| Check Time | 2.81s (±  1.48%) | 2.46s (±  1.85%) | -0.35s (- 12.34%) | 2.43s | 2.53s |\n| Emit Time | 3.11s (±  0.85%) | 3.19s (±  0.91%) | +0.07s (+  2.33%) | 3.15s | 3.22s |\n| Total Time | 7.70s (±  0.84%) | 7.34s (±  1.14%) | -0.37s (-  4.78%) | 7.28s | 7.46s |\n##### node (v6.7.0, x64)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Memory used | 328,005k (±  0.00%) | 309,449k (±  0.02%) | -18,556k (-  5.66%) | 309,386k | 309,516k |\n| Parse Time | 1.50s (±  1.02%) | 1.44s (±  0.88%) | -0.07s (-  4.32%) | 1.42s | 1.45s |\n| Bind Time | 0.73s (±  0.73%) | 0.58s (±  1.65%) | -0.14s (- 19.89%) | 0.57s | 0.59s |\n| Check Time | 3.89s (±  0.65%) | 3.56s (±  4.42%) | -0.32s (-  8.27%) | 3.42s | 3.74s |\n| Emit Time | 1.54s (±  0.91%) | 1.57s (±  4.86%) | +0.03s (+  2.25%) | 1.51s | 1.67s |\n| Total Time | 7.65s (±  0.65%) | 7.16s (±  3.13%) | -0.50s (-  6.48%) | 6.96s | 7.42s |\n##### node (v6.7.0, x86)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Memory used | 174,749k (±  0.00%) | 165,316k (±  0.01%) | -9,433k (-  5.40%) | 165,292k | 165,344k |\n| Parse Time | 1.41s (±  1.63%) | 1.33s (±  0.77%) | -0.08s (-  5.36%) | 1.33s | 1.35s |\n| Bind Time | 0.62s (±  5.95%) | 0.50s (±  3.40%) | -0.12s (- 19.68%) | 0.48s | 0.52s |\n| Check Time | 2.98s (±  0.64%) | 2.75s (±  0.96%) | -0.23s (-  7.73%) | 2.71s | 2.77s |\n| Emit Time | 1.35s (±  0.83%) | 1.35s (±  1.29%) | +0.01s (+  0.45%) | 1.33s | 1.37s |\n| Total Time | 6.36s (±  1.07%) | 5.94s (±  0.82%) | -0.42s (-  6.60%) | 5.88s | 5.98s |\n### map4 with `usingNativeMaps = false` and `usingNativeSets = false`\n#### Monaco\n##### tsc (x86)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Parse Time | 1.79s (±  0.95%) | 1.80s (±  1.47%) | +0.01s (+  0.73%) | 1.77s | 1.82s |\n| Bind Time | 0.69s (±  4.74%) | 0.71s (± 13.45%) | +0.02s (+  3.18%) | 0.66s | 0.86s |\n| Check Time | 3.37s (±  1.66%) | 3.43s (±  3.44%) | +0.06s (+  1.68%) | 3.29s | 3.57s |\n| Emit Time | 5.01s (±  4.73%) | 5.04s (±  4.80%) | +0.03s (+  0.66%) | 4.93s | 5.42s |\n| Total Time | 10.87s (±  2.34%) | 10.98s (±  1.85%) | +0.12s (+  1.09%) | 10.83s | 11.29s |\n##### node (v6.7.0, x64)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Memory used | 379,924k (±  0.00%) | 383,279k (±  0.01%) | +3,355k (+  0.88%) | 383,241k | 383,338k |\n| Parse Time | 2.40s (±  0.75%) | 2.39s (±  2.42%) | -0.01s (-  0.29%) | 2.33s | 2.44s |\n| Bind Time | 0.92s (±  1.79%) | 0.90s (±  4.74%) | -0.02s (-  2.55%) | 0.86s | 0.96s |\n| Check Time | 4.26s (±  1.36%) | 4.29s (±  0.29%) | +0.03s (+  0.66%) | 4.28s | 4.31s |\n| Emit Time | 1.87s (±  2.44%) | 1.88s (±  1.90%) | +0.01s (+  0.51%) | 1.85s | 1.92s |\n| Total Time | 9.46s (±  1.19%) | 9.47s (±  0.86%) | +0.01s (+  0.11%) | 9.36s | 9.54s |\n##### node (v6.7.0, x86)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Memory used | 201,971k (±  0.00%) | 203,972k (±  0.01%) | +2,001k (+  0.99%) | 203,951k | 203,991k |\n| Parse Time | 2.30s (±  0.89%) | 2.29s (±  0.76%) | -0.01s (-  0.52%) | 2.27s | 2.31s |\n| Bind Time | 0.72s (±  0.99%) | 0.68s (±  1.41%) | -0.04s (-  5.87%) | 0.67s | 0.69s |\n| Check Time | 3.48s (±  1.73%) | 3.83s (±  1.77%) | +0.35s (+ 10.19%) | 3.78s | 3.92s |\n| Emit Time | 1.91s (±  3.15%) | 1.62s (±  3.72%) | -0.29s (- 15.12%) | 1.58s | 1.71s |\n| Total Time | 8.41s (±  0.61%) | 8.42s (±  1.66%) | +0.01s (+  0.12%) | 8.32s | 8.63s |\n#### TFS\n##### tsc (x86)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Parse Time | 1.22s (±  2.62%) | 1.22s (±  5.54%) | -0.01s (-  0.49%) | 1.17s | 1.28s |\n| Bind Time | 0.56s (±  2.96%) | 0.58s (±  5.13%) | +0.02s (+  4.38%) | 0.57s | 0.63s |\n| Check Time | 2.81s (±  1.48%) | 2.84s (±  3.00%) | +0.03s (+  1.03%) | 2.77s | 2.95s |\n| Emit Time | 3.11s (±  0.85%) | 3.16s (±  1.84%) | +0.05s (+  1.56%) | 3.08s | 3.21s |\n| Total Time | 7.70s (±  0.84%) | 7.81s (±  2.01%) | +0.10s (+  1.32%) | 7.60s | 7.94s |\n##### node (v6.7.0, x64)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Memory used | 328,005k (±  0.00%) | 329,980k (±  0.02%) | +1,975k (+  0.60%) | 329,913k | 330,079k |\n| Parse Time | 1.50s (±  1.02%) | 1.49s (±  0.69%) | -0.02s (-  1.13%) | 1.47s | 1.49s |\n| Bind Time | 0.73s (±  0.73%) | 0.71s (±  3.11%) | -0.01s (-  2.00%) | 0.68s | 0.73s |\n| Check Time | 3.89s (±  0.65%) | 4.04s (±  1.24%) | +0.15s (+  3.87%) | 3.96s | 4.06s |\n| Emit Time | 1.54s (±  0.91%) | 1.64s (±  0.63%) | +0.10s (+  6.55%) | 1.63s | 1.65s |\n| Total Time | 7.65s (±  0.65%) | 7.87s (±  0.76%) | +0.21s (+  2.80%) | 7.79s | 7.92s |\n##### node (v6.7.0, x86)\n\n| Project | Baseline | Current | Delta | Best | Worst |\n| --- | --- | --- | --- | --- | --- |\n| Memory used | 174,749k (±  0.00%) | 175,835k (±  0.01%) | +1,086k (+  0.62%) | 175,822k | 175,855k |\n| Parse Time | 1.41s (±  1.63%) | 1.39s (±  0.74%) | -0.02s (-  1.10%) | 1.39s | 1.41s |\n| Bind Time | 0.62s (±  5.95%) | 0.57s (±  3.30%) | -0.05s (-  8.48%) | 0.56s | 0.59s |\n| Check Time | 2.98s (±  0.64%) | 2.99s (±  1.14%) | +0.02s (+  0.60%) | 2.96s | 3.04s |\n| Emit Time | 1.35s (±  0.83%) | 1.38s (±  4.53%) | +0.03s (+  2.52%) | 1.33s | 1.45s |\n| Total Time | 6.36s (±  1.07%) | 6.34s (±  1.32%) | -0.02s (-  0.25%) | 6.25s | 6.43s |\n### Heap snapshot numbers\n\nThe memory usage tended to be about the same up until the `beforeEmit` event, AKA after checking.\n\nMaster had 365,935 KB total, map4 had 343,774 KB (94% as much), and map4 with shims had 368,978 KB (100% as much as master, 106% as much as map4).\n\n(I added an event `heapAfterBind` to test the effects of that; map4 used 97% as much memory as master, meaning the real memory savings are during checking.)\n\nFor map4, the chrome heap snaprhot viewer shows Maps as accounting for 2% of all objects, with a shallow size equal to their retained size at 1%. However, this is misleading because most of them are mere 32KB wrapper objects which have internal `_keys` and `_values` (or `table` in some cases), which is what really takes up space. I wish there were a way we could include the size of those.\n### VSCode numbers\n\nI also ran a simple test on the VSCode repo.\n#### master\n\n`tsc -p src --noEmit --diagnostics` (Run with `2.1.0-dev.20161005`)\n\n| Kind | Amount | Samples |\n| --- | --- | --- |\n| Memory used | 737211 K | 736716, 733971, 743103, 742334, 729932 |\n| I/O read | 0.17 s | 0.27, 0.12, 0.20, 0.14, 0.14 |\n| Parse time | 5.22 s | 5.21, 5.18, 5.22, 5.22, 5.29 |\n| Bind time | 1.74 s | 1.77, 1.72, 1.74, 1.72, 1.75 |\n| Check time | 8.57 s | 8.69, 8.48, 8.54, 8.50, 8.63 |\n| Total time | 15.54 s | 15.67, 15.38, 15.51, 15.45, 15.67 |\n#### map4\n\n`node ../TypeScript/built/local/tsc.js -p src --noEmit --diagnostics`\n\n| Kind | Relative | Amount | Samples |\n| --- | --- | --- | --- |\n| Memory used | 94% | 690972 K | 691500, 690621, 691097, 690872, 690772 |\n| I/O read: | 100% | 0.17 s | 0.16, 0.18, 0.20, 0.14, 0.16 |\n| Parse time | 96% | 5.02 s | 5.03, 4.95, 4.99, 4.96, 5.18 |\n| Bind time: | 83% | 1.44 s | 1.42, 1.40, 1.44, 1.42, 1.53 |\n| Check time | 97% | 8.34 s | 8.32, 8.27, 8.38, 8.42, 8.33 |\n| Total time | 95% | 14.81 s | 14.78, 14.62, 14.81, 14.80, 15.05 |\n#### map4 with shims\n\nSame command as for `map4`, after rebuilding with `usingNativeMaps = false` and `usingNativeSets = false`.\n\n| Kind | Relative | Amount | Samples |\n| --- | --- | --- | --- |\n| Memory used | 101% | 744718 K | 745408, 744639, 744845, 745511, 743185 |\n| I/O read | 106% | 0.18 s | 0.22, 0.19, 0.20, 0.14, 0.17 |\n| Parse time | 99% | 5.19 s | 5.28, 5.18, 5.20, 5.17, 5.13 |\n| Bind time | 98% | 1.71 s | 1.72, 1.69, 1.70, 1.73, 1.72 |\n| Check time | 101% | 8.68 s | 8.58, 8.72, 8.68, 8.72, 8.73 |\n| Total time | 100% | 15.59 s | 15.59, 15.59, 15.58, 15.62, 15.57 |\n","reactions":{"url":"https://api.github.com/repos/microsoft/TypeScript/issues/11354/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/microsoft/TypeScript/issues/11354/timeline","performed_via_github_app":null,"state_reason":null,"score":1}]