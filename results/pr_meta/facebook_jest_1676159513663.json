[{"url":"https://api.github.com/repos/facebook/jest/issues/13694","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/13694/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/13694/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/13694/events","html_url":"https://github.com/facebook/jest/pull/13694","id":1510601270,"node_id":"PR_kwDOAOXXVc5GLwSw","number":13694,"title":"fix(jest-snapshot): Avoid importing Babel inside sandbox","user":{"login":"andersk","id":26471,"node_id":"MDQ6VXNlcjI2NDcx","avatar_url":"https://avatars.githubusercontent.com/u/26471?v=4","gravatar_id":"","url":"https://api.github.com/users/andersk","html_url":"https://github.com/andersk","followers_url":"https://api.github.com/users/andersk/followers","following_url":"https://api.github.com/users/andersk/following{/other_user}","gists_url":"https://api.github.com/users/andersk/gists{/gist_id}","starred_url":"https://api.github.com/users/andersk/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andersk/subscriptions","organizations_url":"https://api.github.com/users/andersk/orgs","repos_url":"https://api.github.com/users/andersk/repos","events_url":"https://api.github.com/users/andersk/events{/privacy}","received_events_url":"https://api.github.com/users/andersk/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2022-12-26T05:01:08Z","updated_at":"2023-01-24T11:00:54Z","closed_at":"2023-01-01T16:19:03Z","author_association":"CONTRIBUTOR","active_lock_reason":null,"draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/13694","html_url":"https://github.com/facebook/jest/pull/13694","diff_url":"https://github.com/facebook/jest/pull/13694.diff","patch_url":"https://github.com/facebook/jest/pull/13694.patch","merged_at":"2023-01-01T16:19:03Z"},"body":"## Summary\r\n\r\nAs [pointed out](https://github.com/facebook/jest/issues/9554#issuecomment-1349583533) by @benjaminjkraft (hi!), `jest-snapshot` already imports Babel outside the sandbox with `requireOutside`, so importing it inside the sandbox on every test was only wasting time.\r\n\r\nThis extra import was introduced recently in #12986 (cc @SimenB), so its removal is by no means a complete solution to #9554, but it does help.\r\n\r\n## Test plan\r\n\r\nThis makes Jest run 1.48× faster on empty tests. Benchmark output from hyperfine:\r\n\r\n```console\r\nBenchmark 1: cd 500-empty-jest-tests0; yarn jest --runInBand\r\n  Time (mean ± σ):     56.554 s ±  0.389 s    [User: 61.750 s, System: 2.266 s]\r\n  Range (min … max):   56.225 s … 57.353 s    10 runs\r\n \r\nBenchmark 2: cd 500-empty-jest-tests; yarn jest --runInBand\r\n  Time (mean ± σ):     38.089 s ±  0.145 s    [User: 40.631 s, System: 1.785 s]\r\n  Range (min … max):   37.891 s … 38.350 s    10 runs\r\n \r\nSummary\r\n  'cd 500-empty-jest-tests; yarn jest --runInBand' ran\r\n    1.48 ± 0.01 times faster than 'cd 500-empty-jest-tests0; yarn jest --runInBand'\r\n```","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/13694/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/13694/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/12688","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/12688/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/12688/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/12688/events","html_url":"https://github.com/facebook/jest/pull/12688","id":1207934837,"node_id":"PR_kwDOAOXXVc42Z6xr","number":12688,"title":"chore: cleanup benchmark scripts","user":{"login":"mrazauskas","id":72159681,"node_id":"MDQ6VXNlcjcyMTU5Njgx","avatar_url":"https://avatars.githubusercontent.com/u/72159681?v=4","gravatar_id":"","url":"https://api.github.com/users/mrazauskas","html_url":"https://github.com/mrazauskas","followers_url":"https://api.github.com/users/mrazauskas/followers","following_url":"https://api.github.com/users/mrazauskas/following{/other_user}","gists_url":"https://api.github.com/users/mrazauskas/gists{/gist_id}","starred_url":"https://api.github.com/users/mrazauskas/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrazauskas/subscriptions","organizations_url":"https://api.github.com/users/mrazauskas/orgs","repos_url":"https://api.github.com/users/mrazauskas/repos","events_url":"https://api.github.com/users/mrazauskas/events{/privacy}","received_events_url":"https://api.github.com/users/mrazauskas/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2022-04-19T08:03:06Z","updated_at":"2022-05-20T00:11:56Z","closed_at":"2022-04-19T10:29:14Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/12688","html_url":"https://github.com/facebook/jest/pull/12688","diff_url":"https://github.com/facebook/jest/pull/12688.diff","patch_url":"https://github.com/facebook/jest/pull/12688.patch","merged_at":"2022-04-19T10:29:14Z"},"body":"## Summary\r\n\r\nFew packages of Jest repo include benchmark scripts. Unfortunately these involve few problems:\r\n\r\n- `diff-sequences` publishes the scripts to NPM;\r\n- `jest-worker` includes them in coverage;\r\n- `pretty-format`s script does not work, because of wrong import.\r\n\r\nI have fixed these issues and moved all the scripts to `__benchmarks__` directories to simplify maintenance (lint rules, npmignore, etc).\r\n\r\n## Test plan\r\n\r\nI tryout out the scripts locally. Lint should pass. ","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/12688/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/12688/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/12320","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/12320/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/12320/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/12320/events","html_url":"https://github.com/facebook/jest/pull/12320","id":1126264407,"node_id":"PR_kwDOAOXXVc4yL12g","number":12320,"title":"perf(haste-map): default to node crawl if watchman is not enabled","user":{"login":"SimenB","id":1404810,"node_id":"MDQ6VXNlcjE0MDQ4MTA=","avatar_url":"https://avatars.githubusercontent.com/u/1404810?v=4","gravatar_id":"","url":"https://api.github.com/users/SimenB","html_url":"https://github.com/SimenB","followers_url":"https://api.github.com/users/SimenB/followers","following_url":"https://api.github.com/users/SimenB/following{/other_user}","gists_url":"https://api.github.com/users/SimenB/gists{/gist_id}","starred_url":"https://api.github.com/users/SimenB/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/SimenB/subscriptions","organizations_url":"https://api.github.com/users/SimenB/orgs","repos_url":"https://api.github.com/users/SimenB/repos","events_url":"https://api.github.com/users/SimenB/events{/privacy}","received_events_url":"https://api.github.com/users/SimenB/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2022-02-07T17:08:06Z","updated_at":"2022-03-12T00:07:26Z","closed_at":"2022-02-09T10:47:55Z","author_association":"COLLABORATOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/12320","html_url":"https://github.com/facebook/jest/pull/12320","diff_url":"https://github.com/facebook/jest/pull/12320.diff","patch_url":"https://github.com/facebook/jest/pull/12320.patch","merged_at":"2022-02-09T10:47:55Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md at the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\nToggling option from #11264.\r\n\r\nOn my machine the node crawl is even faster than watchman for `--list-tests`, while both beat `find` into dust.\r\n\r\nThis branch:\r\n\r\n```sh-session\r\n$  hyperfine 'yarn jest --list-tests' 'yarn jest --list-tests --no-watchman'\r\nBenchmark 1: yarn jest --list-tests\r\n  Time (mean ± σ):      2.921 s ±  0.750 s    [User: 3.143 s, System: 0.549 s]\r\n  Range (min … max):    2.261 s …  4.519 s    10 runs\r\n\r\nBenchmark 2: yarn jest --list-tests --no-watchman\r\n  Time (mean ± σ):      2.197 s ±  0.216 s    [User: 2.367 s, System: 0.414 s]\r\n  Range (min … max):    2.074 s …  2.801 s    10 runs\r\n```\r\n\r\n`main`:\r\n\r\n```sh-session\r\n$ hyperfine 'yarn jest --list-tests --no-watchman'\r\nBenchmark 1: yarn jest --list-tests --no-watchman\r\n  Time (mean ± σ):      3.684 s ±  0.364 s    [User: 2.878 s, System: 1.415 s]\r\n  Range (min … max):    3.225 s …  4.341 s    10 runs\r\n```\r\n\r\n<!-- Explain the **motivation** for making this change. What existing problem does the pull request solve? -->\r\n\r\n## Test plan\r\n\r\nGreen CI\r\n\r\n<!-- Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes UI. -->\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/12320/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/12320/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/7603","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/7603/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/7603/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/7603/events","html_url":"https://github.com/facebook/jest/pull/7603","id":397940623,"node_id":"MDExOlB1bGxSZXF1ZXN0MjQzNzczMTU4","number":7603,"title":"chore: Add performance benchmark to `diff-sequences` package","user":{"login":"pedrottimark","id":11862657,"node_id":"MDQ6VXNlcjExODYyNjU3","avatar_url":"https://avatars.githubusercontent.com/u/11862657?v=4","gravatar_id":"","url":"https://api.github.com/users/pedrottimark","html_url":"https://github.com/pedrottimark","followers_url":"https://api.github.com/users/pedrottimark/followers","following_url":"https://api.github.com/users/pedrottimark/following{/other_user}","gists_url":"https://api.github.com/users/pedrottimark/gists{/gist_id}","starred_url":"https://api.github.com/users/pedrottimark/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/pedrottimark/subscriptions","organizations_url":"https://api.github.com/users/pedrottimark/orgs","repos_url":"https://api.github.com/users/pedrottimark/repos","events_url":"https://api.github.com/users/pedrottimark/events{/privacy}","received_events_url":"https://api.github.com/users/pedrottimark/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-01-10T17:38:57Z","updated_at":"2021-05-12T03:12:37Z","closed_at":"2019-01-20T20:27:32Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/7603","html_url":"https://github.com/facebook/jest/pull/7603","diff_url":"https://github.com/facebook/jest/pull/7603.diff","patch_url":"https://github.com/facebook/jest/pull/7603.patch","merged_at":"2019-01-20T20:27:32Z"},"body":"## Summary\r\n\r\nCompare improved `diff-sequences` package to baseline `diff` package.\r\n\r\n* Added `perf/index.js` file\r\n* Added `perf/example.md` file which contains copied result of a run\r\n* Added a command to `\"scripts\"` in `package.json` file\r\n* Added `benchmark` and `diff` as `devDependencies`\r\n\r\nBecause allocating and freeing of temporary objects is the root of the performance problem, the tests call `global.gc()` before every test cycle, so make sure to run node with `--expose-gc` option!\r\n\r\nAbove 2000 items, the `benchmark` package can’t keep the relative mean error below its target of 1%\r\n\r\nFor example, notice in next to last row of `example.md` that an outlier low `0.0083` ratio corresponds to outlier high `3.60%` baseline rme: an inaccurate high denominator causes low ratio.\r\n\r\nYour critique is always welcome and especially because perf benchmark is new for me :)\r\n\r\nP.S. I added `/* eslint import/no-extraneous-dependencies: \"off\" */` because the rule demanded that `benchmark` and `diff` become `dependencies` instead of `devDependencies`\r\n\r\n## Test plan\r\n\r\nTo achieve 1% relative mean error, run the benchmark:\r\n\r\n* immediately after restart\r\n* with 100% battery charge\r\n* not connected to network\r\n\r\nI ran it with node 10.15.0 not via `yarn` in subdirectory: `node --expose-gc perf/index.js`\r\n\r\nSee most values of ratio are between `0.05` and `0.15`\r\n\r\nThe most relevant test for catastrophic performance problems is `insert 80%` that is, after every 2 expected items, insert 8 unexpected items:\r\n\r\n* diff in report when test fails before implementation has been written #1772\r\n* diff in report when test fails because received object has unexpected properties #6976\r\n* diff of snapshot when test criterion changes #5392","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/7603/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/7603/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/5793","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/5793/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/5793/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/5793/events","html_url":"https://github.com/facebook/jest/pull/5793","id":305191958,"node_id":"MDExOlB1bGxSZXF1ZXN0MTc0OTgwMjcx","number":5793,"title":"Improve jest-worker (up to 4x)","user":{"login":"mjesun","id":829269,"node_id":"MDQ6VXNlcjgyOTI2OQ==","avatar_url":"https://avatars.githubusercontent.com/u/829269?v=4","gravatar_id":"","url":"https://api.github.com/users/mjesun","html_url":"https://github.com/mjesun","followers_url":"https://api.github.com/users/mjesun/followers","following_url":"https://api.github.com/users/mjesun/following{/other_user}","gists_url":"https://api.github.com/users/mjesun/gists{/gist_id}","starred_url":"https://api.github.com/users/mjesun/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mjesun/subscriptions","organizations_url":"https://api.github.com/users/mjesun/orgs","repos_url":"https://api.github.com/users/mjesun/repos","events_url":"https://api.github.com/users/mjesun/events{/privacy}","received_events_url":"https://api.github.com/users/mjesun/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2018-03-14T14:50:56Z","updated_at":"2021-05-12T18:15:28Z","closed_at":"2018-03-14T15:16:17Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/5793","html_url":"https://github.com/facebook/jest/pull/5793","diff_url":"https://github.com/facebook/jest/pull/5793.diff","patch_url":"https://github.com/facebook/jest/pull/5793.patch","merged_at":"2018-03-14T15:16:17Z"},"body":"This PR modifies the way internal worker queues are managed, passing from an array to a linked-list, improving a 10% the current benchmark, and 400% over a new benchmark.\r\n\r\n## How come this wasn't noticed before?\r\n\r\nWhen `jest-worker` was initially benchmarked, it was done by using not so many jobs (~10k), but very heavy in time. While this is the usual approach (few jobs, lots of time per job), sometimes you have the opposite (i.e. lots of jobs, but each of them very fast). _This is actually what `jest-haste-map` does._\r\n\r\nSince the internal queue was an array, re-indexing the queue is a `O(n)` operation, which becomes especially relevant on the second scenario. Switching to a linked list means that all operations for advancing the queue become `O(1)`, no matter its length. This results in massive speed improvements on really long queues.\r\n\r\n## Some benchmarks\r\n\r\nUsing the extended performance test, the `empty` function, called 100,000 times results in:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 11102, processingTime: 11058 }\r\nworker-farm: { globalTime: 9713, processingTime: 9685 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 10790, processingTime: 10762 }\r\nworker-farm: { globalTime: 10453, processingTime: 10432 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 11111, processingTime: 11079 }\r\nworker-farm: { globalTime: 10133, processingTime: 10112 }\r\n---------------------------------------------------------------------------\r\n```\r\n\r\nNow, **with the change**, it results in:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 2634, processingTime: 2594 }\r\nworker-farm: { globalTime: 10165, processingTime: 10141 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 2780, processingTime: 2756 }\r\nworker-farm: { globalTime: 10132, processingTime: 10110 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 2608, processingTime: 2581 }\r\nworker-farm: { globalTime: 10295, processingTime: 10272 }\r\n---------------------------------------------------------------------------\r\n```\r\n## What about the existing metrics?\r\n\r\nThe previous metric (which we initially used for benchmarking, `loadTest` called 10,000 times), has also improved, but only slightly, since that one was already optimized:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 726, processingTime: 690 }\r\nworker-farm: { globalTime: 769, processingTime: 748 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 719, processingTime: 693 }\r\nworker-farm: { globalTime: 784, processingTime: 765 }\r\n---------------------------------------------------------------------------\r\njest-worker: { globalTime: 703, processingTime: 673 }\r\nworker-farm: { globalTime: 748, processingTime: 731 }\r\n---------------------------------------------------------------------------\r\n```\r\n\r\n## Tests\r\n\r\nI ensured all tests pass, but I also added some slight modifications into the `__performance__tests__` so that you can pass an arbitrary worker method as well as an arbitrary number of iterations. This allowed me to test the other scenario.\r\n\r\n_On a personal note: this is actually WHY algorithms and data structures knowledge IS important for a frontend developer!_ 🙂","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/5793/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":1,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/5793/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/8235","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8235/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8235/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8235/events","html_url":"https://github.com/facebook/jest/pull/8235","id":426805644,"node_id":"MDExOlB1bGxSZXF1ZXN0MjY1NTc3MzMz","number":8235,"title":"Performance: Cache regular expression instead of creating anew for every file in ScriptTransformer.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-03-29T03:57:50Z","updated_at":"2021-05-11T20:07:01Z","closed_at":"2019-03-29T16:17:07Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8235","html_url":"https://github.com/facebook/jest/pull/8235","diff_url":"https://github.com/facebook/jest/pull/8235.diff","patch_url":"https://github.com/facebook/jest/pull/8235.patch","merged_at":"2019-03-29T16:17:07Z"},"body":"## Summary\r\n\r\nThis PR improves performance by caching the regular expression string -> `RegExp` conversion.\r\n\r\nBenchmarks on cached regular expression vs. creating new each time:\r\n```\r\n  new regex x   596 ops/sec ±0.95% (97 runs sampled)\r\n  cached regex  x 1,668 ops/sec ±0.61% (97 runs sampled)\r\n```\r\n\r\nFor large projects, Jest may process a LOT of files. The more workers in use, the higher chance that the same file is processed multiple times. Additionally, each time it's hit multiple regular expressions may be tested against.\r\n\r\nThe benchmark I used:\r\n```js\r\nsuite.add('new regex', function() {\r\n  for (var i = 0; i < 10000; i++) {\r\n    new RegExp('^.+\\\\.[jt]sx?$').test(\r\n      'jest/packages/jest-haste-map/src/__tests__/haste_impl.js'\r\n    );\r\n  }\r\n});\r\n\r\nsuite.add('cached regex', function() {\r\n  const regex = new RegExp('^.+\\\\.[jt]sx?$');\r\n  for (var i = 0; i < 10000; i++) {\r\n    regex.test(\r\n      'jest/packages/jest-haste-map/src/__tests__/haste_impl.js'\r\n    );\r\n  }\r\n});\r\n```\r\n\r\n## Test plan\r\n\r\n- All tests pass.\r\n- Performance benefit verified.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8235/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8235/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/8237","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8237/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8237/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8237/events","html_url":"https://github.com/facebook/jest/pull/8237","id":426821093,"node_id":"MDExOlB1bGxSZXF1ZXN0MjY1NTg4Nzk5","number":8237,"title":"Unify worker module map transmission w/ small perf benefit.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":10,"created_at":"2019-03-29T05:17:59Z","updated_at":"2021-05-24T00:05:36Z","closed_at":"2019-03-29T21:41:28Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8237","html_url":"https://github.com/facebook/jest/pull/8237","diff_url":"https://github.com/facebook/jest/pull/8237.diff","patch_url":"https://github.com/facebook/jest/pull/8237.patch","merged_at":"2019-03-29T21:41:27Z"},"body":"## Summary\r\n\r\nThis PR unifies the way module maps are passed to the worker. Previously, we did it one way for watch mode and a different way for non-watch mode because our watch mode way was a lot slower.\r\n\r\nI fixed that slowness for watch mode and realized while doing some performance and memory profiling that the watch mode way is now actually faster on a few levels:\r\n1) It's straight-up faster to transmit it to the process because the module map is significantly smaller than the whole haste map you have to deserialize if you get at it via the file.\r\n2) If you load the whole haste map and want to discard half of it, suddenly there is a bunch of stuff that will need to be GC'd in the future. This happens in the worker because it only wants the module map but has to deserialize the whole file.\r\n3) Not requiring the haste map be written to disk at this point opens up further optimizations in the future.\r\n\r\nHere's a benchmark of running `yarn jest packages/expect`, meant to profile starting up some workers and running a couple tests. Each profile was run 10 times after 3 warm ups.\r\n\r\n### master\r\nTime (mean ± σ):      3.902 s ±  0.120 s    [User: 21.570 s, System: 5.105 s]\r\nRange (min … max):    3.682 s …  4.084 s    10 run\r\n\r\n### this branch\r\nTime (mean ± σ):      3.522 s ±  0.175 s    [User: 19.722 s, System: 4.777 s]\r\nRange (min … max):    3.356 s …  3.897 s    10 runs\r\n\r\nIt's faster. It's less code with a unified code path. It opens up more optimizations in the future.\r\n\r\n## Test plan\r\n\r\n1. All tests pass.\r\n2. Benchmarks show better performance in all situations.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8237/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8237/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/8171","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8171/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8171/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8171/events","html_url":"https://github.com/facebook/jest/pull/8171","id":423138845,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYyNzc1MjM0","number":8171,"title":"Optimize haste map data structure for serialization/deserialization.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":8,"created_at":"2019-03-20T09:06:11Z","updated_at":"2021-05-11T21:07:02Z","closed_at":"2019-03-20T23:02:32Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8171","html_url":"https://github.com/facebook/jest/pull/8171","diff_url":"https://github.com/facebook/jest/pull/8171.diff","patch_url":"https://github.com/facebook/jest/pull/8171.patch","merged_at":"2019-03-20T23:02:32Z"},"body":"## Summary\r\n\r\nThis simple PR is the result of a ridiculous number of attempts to specifically optimize the serialization and deserialization of the haste map followed by a simple realization: creating arrays is expensive. :)\r\n\r\nCurrently, we store each file's dependencies as an expensive array. However, we don't typically access many file dependencies, so it's not time well-spent.\r\n\r\nI've modified the data structure to store the file dependencies as a much cheaper string (tab separated) that is deserialized to an array on-demand. No change to the public interface, but now we're not doing any unnecessary work.\r\n\r\nI profiled both the full Jest run time and the read/persist time to ensure I had a clear view into the characteristics of this change. It's somewhere in the neighborhood of a 10%~ startup time improvement at FB, which is significant.\r\n\r\nBenchmarking against a generated benchmark hash map of 300,000 files:\r\n\r\nbefore--\r\nread: 2,291ms\r\npersist: 2,413ms\r\ntotal: 4,704ms\r\n\r\nafter--\r\nread: 1,852ms\r\npersist: 1,539ms\r\ntotal: 3,391ms\r\n\r\ndelta: 1,313ms\r\n\r\n## Test plan\r\n\r\n- Updated tests\r\n- All tests pass\r\n- Manually benchmarked\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8171/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8171/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/8232","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8232/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8232/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8232/events","html_url":"https://github.com/facebook/jest/pull/8232","id":426754435,"node_id":"MDExOlB1bGxSZXF1ZXN0MjY1NTQwOTQ4","number":8232,"title":"Performance: use Map for jest-runtime module registry.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":1,"created_at":"2019-03-28T23:50:20Z","updated_at":"2021-05-11T20:07:04Z","closed_at":"2019-03-29T15:44:10Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8232","html_url":"https://github.com/facebook/jest/pull/8232","diff_url":"https://github.com/facebook/jest/pull/8232.diff","patch_url":"https://github.com/facebook/jest/pull/8232.patch","merged_at":"2019-03-29T15:44:10Z"},"body":"## Summary\r\n\r\nQuick benchmark of getting `Map` vs `Object` for string keys of various lengths on Node v11:\r\n```\r\n  get object key x   278 ops/sec ±2.28% (85 runs sampled)\r\n  get map key    x 1,716 ops/sec ±1.35% (93 runs sampled)\r\n```\r\n\r\n## Test plan\r\n\r\n- All tests pass.\r\n- Tested against FB's test suite.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8232/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8232/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/8183","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8183/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8183/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8183/events","html_url":"https://github.com/facebook/jest/pull/8183","id":423577753,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYzMTIwNDg2","number":8183,"title":"jest-resolve 18% performance optimization","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":4,"created_at":"2019-03-21T05:30:48Z","updated_at":"2021-05-11T21:07:15Z","closed_at":"2019-03-21T16:13:48Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8183","html_url":"https://github.com/facebook/jest/pull/8183","diff_url":"https://github.com/facebook/jest/pull/8183.diff","patch_url":"https://github.com/facebook/jest/pull/8183.patch","merged_at":"2019-03-21T16:13:48Z"},"body":"## Summary\r\n\r\n`jest-resolve` is called heavily by `jest-resolve-dependencies` when finding related tests. Benchmarking the simple change from `Object` to `Map` for the internal cache shows an 18% improvement in the total run time of `dependencyResolver.resolveInverse` for a test data set of 300k~ files, although obviously the performance characteristics are going to vary depending on the data set.\r\n\r\nAt Facebook, this PR means when I run just Jest to look at my changed files and run the appropriate tests, it boots up 2 seconds faster.\r\n\r\n## Test plan\r\n\r\n- All tests pass. New tests not appropriate for this simple change.\r\n- Tested manually.\r\n- Benchmarked to ensure performance improvement.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8183/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8183/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/8056","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8056/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8056/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8056/events","html_url":"https://github.com/facebook/jest/pull/8056","id":417578520,"node_id":"MDExOlB1bGxSZXF1ZXN0MjU4NTQ1NjY2","number":8056,"title":"Optimize haste map tracking of deleted files with Watchman.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":6,"created_at":"2019-03-06T01:23:45Z","updated_at":"2021-05-11T23:06:45Z","closed_at":"2019-03-06T18:48:27Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8056","html_url":"https://github.com/facebook/jest/pull/8056","diff_url":"https://github.com/facebook/jest/pull/8056.diff","patch_url":"https://github.com/facebook/jest/pull/8056.patch","merged_at":"2019-03-06T18:48:27Z"},"body":"## Summary\r\n\r\nThis is a minor PR to improve the performance of tracking deleted files by taking advantage of Watchman when available.\r\n\r\nCurrently, deleted files are tracked within jest-haste-map by:\r\n1. Making a shallow copy of the Haste Map files before building the file map.\r\n2. Filtering the shallow copy against the generated file map to remove all files that still exist.\r\n\r\nBenchmarking this operation against a large locally-generated test Haste Map of 300k~ files with one deletion, the operation currently takes about 150ms on my machine and grows linearly with more files tracked. Using Watchman makes it almost free and only grows with the number of files changed.\r\n\r\nI've updated the non-Watchman implementation to also track deleted files within the crawler to keep the interface consistent, although that update is neutral on performance.\r\n\r\n## Test plan\r\n\r\n- Benchmarked the performance to ensure what looked like a performance gain was one in practice.\r\n- Tested manually with and without Watchman to ensure deleted files were being picked up as expected.\r\n- Added tests for tracking deleted files with Watchman crawler when fresh and when not fresh.\r\n- Added tests for tracking deleted file with Node crawler.\r\n- Updated all related tests.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8056/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8056/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/8184","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8184/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8184/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8184/events","html_url":"https://github.com/facebook/jest/pull/8184","id":423597150,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYzMTM1MDY0","number":8184,"title":"Improve performance of SearchSource.findMatchingTests by 15%","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":2,"created_at":"2019-03-21T07:17:55Z","updated_at":"2021-05-11T21:07:16Z","closed_at":"2019-03-21T16:17:54Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8184","html_url":"https://github.com/facebook/jest/pull/8184","diff_url":"https://github.com/facebook/jest/pull/8184.diff","patch_url":"https://github.com/facebook/jest/pull/8184.patch","merged_at":"2019-03-21T16:17:54Z"},"body":"## Summary\r\n\r\nThis PR is a 15% performance improvement for `SearchSource.findMatchingTests`. I benchmarked a test data set of 300k files at 975ms~ with the current code. The same search pattern now executes in 830ms~.\r\n\r\nAt Facebook, this means that for the common use case of triggering `jest MyFileName`, Jest will launch >100ms faster. Sometimes you have to take the small wins. :)\r\n\r\nI optimized this by looking for inefficiencies in code that is called for every file. In this case:\r\n- One of the inner functions triggered for each file called `Object.keys` for the `stats` object every time. Not efficient.\r\n- Dummy functions were being created that always returned true. It still costs CPU time to call a function, even an extremely fast one. Better to never call it.\r\n\r\nI refactored away the issues by adapting the data structures to better fit the way they are being used. Since our stat filters are optional and we want to iterate them, they make more sense as an array. I maintained full type safety.\r\n\r\n## Test plan\r\n\r\n- All existing tests path, which already cover this functionality.\r\n- Careful benchmarking of the performance.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8184/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8184/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/8201","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/8201/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/8201/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/8201/events","html_url":"https://github.com/facebook/jest/pull/8201","id":424587889,"node_id":"MDExOlB1bGxSZXF1ZXN0MjYzODg5MDI2","number":8201,"title":"Dramatically improve watch mode performance.","user":{"login":"scotthovestadt","id":1831484,"node_id":"MDQ6VXNlcjE4MzE0ODQ=","avatar_url":"https://avatars.githubusercontent.com/u/1831484?v=4","gravatar_id":"","url":"https://api.github.com/users/scotthovestadt","html_url":"https://github.com/scotthovestadt","followers_url":"https://api.github.com/users/scotthovestadt/followers","following_url":"https://api.github.com/users/scotthovestadt/following{/other_user}","gists_url":"https://api.github.com/users/scotthovestadt/gists{/gist_id}","starred_url":"https://api.github.com/users/scotthovestadt/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/scotthovestadt/subscriptions","organizations_url":"https://api.github.com/users/scotthovestadt/orgs","repos_url":"https://api.github.com/users/scotthovestadt/repos","events_url":"https://api.github.com/users/scotthovestadt/events{/privacy}","received_events_url":"https://api.github.com/users/scotthovestadt/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":11,"created_at":"2019-03-24T08:24:56Z","updated_at":"2021-05-11T21:07:12Z","closed_at":"2019-03-24T21:57:03Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/8201","html_url":"https://github.com/facebook/jest/pull/8201","diff_url":"https://github.com/facebook/jest/pull/8201.diff","patch_url":"https://github.com/facebook/jest/pull/8201.patch","merged_at":"2019-03-24T21:57:03Z"},"body":"## Summary\r\n\r\nResolves #7341 \r\n\r\nThis PR dramatically improves watch mode performance, bringing it in line with single run mode performance. It accomplishes that by:\r\n- Workers previously initialized a new `ModuleMap` and `Resolver` for every test in watch mode. Now, those objects are only initialized once when the worker is setup.\r\n- In the main thread, caching the conversion of `ModuleMap` to a JSON-friendly object.\r\n\r\n## Benchmarks\r\n\r\nI benchmarked against Jest's own test suite, excluding e2e tests which don't provide good signal because they individually take a long time (so startup time for the test is marginalized). The numbers show that running in Watch mode previously added an extra 35%~ of runtime to the tests but that has now been reduced to almost nothing.\r\n\r\nWatch mode should now just be paying a one-time initial cost for each worker when the haste map changes instead of paying that same cost for _every_ test run.\r\n\r\n### branch: master\r\n\r\n`yarn jest ./packages`\r\nRun time: 15.091s\r\n\r\n`yarn jest ./packages --watch`\r\nRun time: 23.234s\r\n\r\n### branch: watch-performance\r\n\r\n`yarn jest ./packages`\r\nRun time: 14.973s\r\n\r\n`yarn jest ./packages --watch`\r\nRun time: 15.196s\r\n\r\n\r\n## Test plan\r\n\r\n- All tests pass.\r\n- Benchmarked to verify the performance wins.\r\n- Verified that when the haste map is updated, the update is propagated out to all workers.","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/8201/reactions","total_count":1,"+1":1,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/8201/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/4237","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/4237/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/4237/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/4237/events","html_url":"https://github.com/facebook/jest/pull/4237","id":249352086,"node_id":"MDExOlB1bGxSZXF1ZXN0MTM1MTI4ODQ5","number":4237,"title":"Complain if expect is passed multiple arguments","user":{"login":"gustavnikolaj","id":1371503,"node_id":"MDQ6VXNlcjEzNzE1MDM=","avatar_url":"https://avatars.githubusercontent.com/u/1371503?v=4","gravatar_id":"","url":"https://api.github.com/users/gustavnikolaj","html_url":"https://github.com/gustavnikolaj","followers_url":"https://api.github.com/users/gustavnikolaj/followers","following_url":"https://api.github.com/users/gustavnikolaj/following{/other_user}","gists_url":"https://api.github.com/users/gustavnikolaj/gists{/gist_id}","starred_url":"https://api.github.com/users/gustavnikolaj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/gustavnikolaj/subscriptions","organizations_url":"https://api.github.com/users/gustavnikolaj/orgs","repos_url":"https://api.github.com/users/gustavnikolaj/repos","events_url":"https://api.github.com/users/gustavnikolaj/events{/privacy}","received_events_url":"https://api.github.com/users/gustavnikolaj/received_events","type":"User","site_admin":false},"labels":[{"id":196857093,"node_id":"MDU6TGFiZWwxOTY4NTcwOTM=","url":"https://api.github.com/repos/facebook/jest/labels/CLA%20Signed%20:heavy_check_mark:","name":"CLA Signed :heavy_check_mark:","color":"009900","default":false,"description":""}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":null,"comments":3,"created_at":"2017-08-10T13:47:26Z","updated_at":"2021-05-12T15:07:23Z","closed_at":"2017-08-10T15:01:12Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/4237","html_url":"https://github.com/facebook/jest/pull/4237","diff_url":"https://github.com/facebook/jest/pull/4237.diff","patch_url":"https://github.com/facebook/jest/pull/4237.patch","merged_at":"2017-08-10T15:01:12Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n**Summary**\r\n\r\nWhen using [unexpected](http://unexpected.js.org/) it's common to import it under the name `expect`. Consider this case:\r\n\r\n```js\r\nimport expect from 'unexpected';\r\n\r\nit('should be unexpected', () => {\r\n  expect(true, 'to be false');\r\n});\r\n``` \r\n\r\nIf a user by accident forgets to import unexpected, they will not immediately notice, as the builtin expect in jest will ignore any further arguments passed to it. Which will result in a passing test instead of the failure you would expect.\r\n\r\nThis PR adds a check to the expect method, so that it will throw an error if it is called with more than one argument.\r\n\r\n@Munter already discussed a solution to this with @cpojer. The solution I implemented here is a bit different. Instead of using a check on `arguments.length` I opted to use `...rest` and check that it has a length of 0. The expect method was implemented as an arrow function, and arrow functions do not expose `arguments`, so it was either refactoring it into a normal function or using the `...rest` alternative. From my humble benchmarking I didn't observe any significant difference, so I opted for the least invasive change, that also happens to be following the [Code Conventions](https://github.com/facebook/jest/blob/master/CONTRIBUTING.md#code-conventions) the closest - prefering es6 syntax where possible.\r\n\r\nTo further enhance the check one could add a check for the case of expect being called with no arguments. It's less likely to cause users to shoot themselves in the feet, so I left it out.\r\n\r\n**Test plan**\r\n\r\nThe test implemented covers the case that the check is implementing.\r\n\r\nAll tests in the project is passing. I ran `yarn test` in the root of the repo to verify that the change had no unintended side effects.\r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/4237/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":1,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/4237/timeline","performed_via_github_app":null,"state_reason":null,"score":1},{"url":"https://api.github.com/repos/facebook/jest/issues/9351","repository_url":"https://api.github.com/repos/facebook/jest","labels_url":"https://api.github.com/repos/facebook/jest/issues/9351/labels{/name}","comments_url":"https://api.github.com/repos/facebook/jest/issues/9351/comments","events_url":"https://api.github.com/repos/facebook/jest/issues/9351/events","html_url":"https://github.com/facebook/jest/pull/9351","id":542620140,"node_id":"MDExOlB1bGxSZXF1ZXN0MzU3MDIzOTAz","number":9351,"title":"feat(jest-haste-map): Enable crawling for symlink test files","user":{"login":"mrmeku","id":8085051,"node_id":"MDQ6VXNlcjgwODUwNTE=","avatar_url":"https://avatars.githubusercontent.com/u/8085051?v=4","gravatar_id":"","url":"https://api.github.com/users/mrmeku","html_url":"https://github.com/mrmeku","followers_url":"https://api.github.com/users/mrmeku/followers","following_url":"https://api.github.com/users/mrmeku/following{/other_user}","gists_url":"https://api.github.com/users/mrmeku/gists{/gist_id}","starred_url":"https://api.github.com/users/mrmeku/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mrmeku/subscriptions","organizations_url":"https://api.github.com/users/mrmeku/orgs","repos_url":"https://api.github.com/users/mrmeku/repos","events_url":"https://api.github.com/users/mrmeku/events{/privacy}","received_events_url":"https://api.github.com/users/mrmeku/received_events","type":"User","site_admin":false},"labels":[{"id":847426897,"node_id":"MDU6TGFiZWw4NDc0MjY4OTc=","url":"https://api.github.com/repos/facebook/jest/labels/cla%20signed","name":"cla signed","color":"ededed","default":false,"description":null}],"state":"closed","locked":true,"assignee":null,"assignees":[],"milestone":{"url":"https://api.github.com/repos/facebook/jest/milestones/12","html_url":"https://github.com/facebook/jest/milestone/12","labels_url":"https://api.github.com/repos/facebook/jest/milestones/12/labels","id":5375234,"node_id":"MDk6TWlsZXN0b25lNTM3NTIzNA==","number":12,"title":"Jest 27","description":null,"creator":{"login":"jeysal","id":16069751,"node_id":"MDQ6VXNlcjE2MDY5NzUx","avatar_url":"https://avatars.githubusercontent.com/u/16069751?v=4","gravatar_id":"","url":"https://api.github.com/users/jeysal","html_url":"https://github.com/jeysal","followers_url":"https://api.github.com/users/jeysal/followers","following_url":"https://api.github.com/users/jeysal/following{/other_user}","gists_url":"https://api.github.com/users/jeysal/gists{/gist_id}","starred_url":"https://api.github.com/users/jeysal/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/jeysal/subscriptions","organizations_url":"https://api.github.com/users/jeysal/orgs","repos_url":"https://api.github.com/users/jeysal/repos","events_url":"https://api.github.com/users/jeysal/events{/privacy}","received_events_url":"https://api.github.com/users/jeysal/received_events","type":"User","site_admin":false},"open_issues":0,"closed_issues":61,"state":"closed","created_at":"2020-05-02T19:43:47Z","updated_at":"2021-05-25T11:03:50Z","due_on":null,"closed_at":"2021-05-25T11:03:50Z"},"comments":50,"created_at":"2019-12-26T17:51:04Z","updated_at":"2021-05-10T21:06:37Z","closed_at":"2021-04-02T12:42:31Z","author_association":"CONTRIBUTOR","active_lock_reason":"resolved","draft":false,"pull_request":{"url":"https://api.github.com/repos/facebook/jest/pulls/9351","html_url":"https://github.com/facebook/jest/pull/9351","diff_url":"https://github.com/facebook/jest/pull/9351.diff","patch_url":"https://github.com/facebook/jest/pull/9351.patch","merged_at":"2021-04-02T12:42:31Z"},"body":"<!-- Thanks for submitting a pull request! Please provide enough information so that others can review your pull request. The two fields below are mandatory. -->\r\n\r\n<!-- Please remember to update CHANGELOG.md in the root of the project if you have not done so. -->\r\n\r\n## Summary\r\n\r\nJest haste maps test file crawler (see packages/jest-haste-map/src/crawlers/node.ts) uses the unix find command by default to find files whose name matches the testMatch pattern defined in jest.config.js. This works great for most cases, but works poorly when executing jest under bazel.\r\n\r\nIn bazel's execution environment, all source/test files are symlinked into a sandboxed directory rather than copied over directly. Jest's crawler is currently set up to use find's type flag to filter only for files. This excludes symlinked files\r\n\r\nUnder bazel I would expect my symlinked test files to be able to be crawled. This merely involves tweaking the command line args to find to include both files and symlinks `--type f` ---> `(--type f -o --type=l)`\r\n\r\n## Test plan\r\n\r\nI have already tested my fix against multiple bazel environments to verify that the fix enables jest to work properly for that test runner. The only risk of this change is that my adding support for crawling symlinks hampers performance of file crawling. If that is the case this behavior might be better off to be enabled behind a flag. But I do not suspect that there will be a performance hit. If reviewers have a mechanism for running jest bench marks I'm happy to create a repo filled with both files and symlinks and benchmarking the change. \r\n","reactions":{"url":"https://api.github.com/repos/facebook/jest/issues/9351/reactions","total_count":18,"+1":18,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"timeline_url":"https://api.github.com/repos/facebook/jest/issues/9351/timeline","performed_via_github_app":null,"state_reason":null,"score":1}]